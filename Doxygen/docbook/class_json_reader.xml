<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_json_reader" xml:lang="en-US">
<title>JsonReader Class Reference</title>
<indexterm><primary>JsonReader</primary></indexterm>
<para>

<para>Represents a JSON reader which implements <link linkend="_class_archiver">Archiver</link> concept. </para>
 
</para>
<para>
<computeroutput>#include &lt;archiver.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_json_reader_1a6606d8c5985be77bd8c145c36abdcc8a">JsonReader</link> (const char *<link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">json</link>)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_class_json_reader_1a328c859a306bfe59ee7a103586b1619a">~JsonReader</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><link linkend="_class_json_reader_1af8ad23ebe9094b79eeddc94f37097567">operator bool</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1af4d4cdc4f7c61cad2b538c10ff365828">StartObject</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1aac2abcffd65cc5b538c2b5e79a3c4e56">Member</link> (const char *name)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_json_reader_1a2aa30506e4bd5edd882252d9e9a26a69">HasMember</link> (const char *name) const</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1a7f3d3ebf4b2b2feb1b96642804eefdf4">EndObject</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1a3b3ccc8ba94677a49c738600b4746efe">StartArray</link> (size_t *size=0)</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1a123ea8c466a6a9b0647168b0494aac98">EndArray</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1a8a5856ab4923dd1f3444bfeb5051f9e0">operator&amp;</link> (bool &amp;b)</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1a75af40eb6320ff920111dea1e4c07a76">operator&amp;</link> (unsigned &amp;u)</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1ae0fe0081090697a6ec84471f316c6395">operator&amp;</link> (int &amp;i)</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1a8815e6d8f9c1ce99b19575fe4ddf9d23">operator&amp;</link> (double &amp;d)</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1a1eb4ac3c615c5ca72755a0034a13ddcf">operator&amp;</link> (std::string &amp;s)</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1af36c05eb087b1e452996fc72d6302b3e">SetNull</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static const bool <link linkend="_class_json_reader_1a76d04e4b6e88a33f50faa08ce74b5758">IsReader</link> = true</para>
</listitem>
            <listitem><para>static const bool <link linkend="_class_json_reader_1aec930ca2b0468e4bb9c7d139a3b3da26">IsWriter</link> = !<link linkend="_class_json_reader_1a76d04e4b6e88a33f50faa08ce74b5758">IsReader</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_json_reader_1aad80bffc0cd6fd7df42fcf0827416ef8">JsonReader</link> (const <link linkend="_class_json_reader">JsonReader</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_class_json_reader">JsonReader</link> &amp; <link linkend="_class_json_reader_1ae85e7683442a261b17653d1fc6f4aa45">operator=</link> (const <link linkend="_class_json_reader">JsonReader</link> &amp;)</para>
</listitem>
            <listitem><para>void <link linkend="_class_json_reader_1acea7a602f3cf7db0efaa024d836c7d4b">Next</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>void * <link linkend="_class_json_reader_1a7b55bc31a623be3e04750b57f64e9ebd">mDocument</link></para>

<para>DOM result of parsing. </para>
</listitem>
            <listitem><para>void * <link linkend="_class_json_reader_1a84c0048fa82ef4f0bb35c10e1f032a49">mStack</link></para>

<para>Stack for iterating the DOM. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_json_reader_1adf5020f5ed68d7b9baa21986d05fda90">mError</link></para>

<para>Whether an error has occurred. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Represents a JSON reader which implements <link linkend="_class_archiver">Archiver</link> concept. </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_json_reader_1a6606d8c5985be77bd8c145c36abdcc8a"/><section>
    <title>JsonReader()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>JsonReader</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>JsonReader</secondary></indexterm>
<para><computeroutput>JsonReader::JsonReader (const char * json)</computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>json</entry><entry>
<para>A non-const source json string for in-situ parsing. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>in-situ means the source JSON string will be modified after parsing. </para>
</note>
</para>
</section>
<anchor xml:id="_class_json_reader_1a328c859a306bfe59ee7a103586b1619a"/><section>
    <title>~JsonReader()</title>
<indexterm><primary>~JsonReader</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>~JsonReader</secondary></indexterm>
<para><computeroutput>JsonReader::~JsonReader ( )</computeroutput></para><para>

<para>Destructor. </para>
</para>
</section>
<anchor xml:id="_class_json_reader_1aad80bffc0cd6fd7df42fcf0827416ef8"/><section>
    <title>JsonReader()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>JsonReader</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>JsonReader</secondary></indexterm>
<para><computeroutput>JsonReader::JsonReader (const <link linkend="_class_json_reader">JsonReader</link> &amp; )<computeroutput>[private]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_json_reader_1a123ea8c466a6a9b0647168b0494aac98"/><section>
    <title>EndArray()</title>
<indexterm><primary>EndArray</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>EndArray</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::EndArray ( )</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a7f3d3ebf4b2b2feb1b96642804eefdf4"/><section>
    <title>EndObject()</title>
<indexterm><primary>EndObject</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>EndObject</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::EndObject ( )</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a2aa30506e4bd5edd882252d9e9a26a69"/><section>
    <title>HasMember()</title>
<indexterm><primary>HasMember</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>HasMember</secondary></indexterm>
<para><computeroutput>bool JsonReader::HasMember (const char * name) const</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1aac2abcffd65cc5b538c2b5e79a3c4e56"/><section>
    <title>Member()</title>
<indexterm><primary>Member</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>Member</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::Member (const char * name)</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1acea7a602f3cf7db0efaa024d836c7d4b"/><section>
    <title>Next()</title>
<indexterm><primary>Next</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>Next</secondary></indexterm>
<para><computeroutput>void JsonReader::Next ( )<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_json_reader_1af8ad23ebe9094b79eeddc94f37097567"/><section>
    <title>operator bool()</title>
<indexterm><primary>operator bool</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>operator bool</secondary></indexterm>
<para><computeroutput>JsonReader::operator bool ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a8a5856ab4923dd1f3444bfeb5051f9e0"/><section>
    <title>operator&amp;()<computeroutput>[1/5]</computeroutput></title>
<indexterm><primary>operator&amp;</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>operator&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::operator&amp; (bool &amp; b)</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a8815e6d8f9c1ce99b19575fe4ddf9d23"/><section>
    <title>operator&amp;()<computeroutput>[2/5]</computeroutput></title>
<indexterm><primary>operator&amp;</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>operator&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::operator&amp; (double &amp; d)</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1ae0fe0081090697a6ec84471f316c6395"/><section>
    <title>operator&amp;()<computeroutput>[3/5]</computeroutput></title>
<indexterm><primary>operator&amp;</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>operator&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::operator&amp; (int &amp; i)</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a1eb4ac3c615c5ca72755a0034a13ddcf"/><section>
    <title>operator&amp;()<computeroutput>[4/5]</computeroutput></title>
<indexterm><primary>operator&amp;</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>operator&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::operator&amp; (std::string &amp; s)</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a75af40eb6320ff920111dea1e4c07a76"/><section>
    <title>operator&amp;()<computeroutput>[5/5]</computeroutput></title>
<indexterm><primary>operator&amp;</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>operator&amp;</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::operator&amp; (unsigned &amp; u)</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1ae85e7683442a261b17653d1fc6f4aa45"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::operator= (const <link linkend="_class_json_reader">JsonReader</link> &amp; )<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_json_reader_1af36c05eb087b1e452996fc72d6302b3e"/><section>
    <title>SetNull()</title>
<indexterm><primary>SetNull</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>SetNull</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::SetNull ( )</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a3b3ccc8ba94677a49c738600b4746efe"/><section>
    <title>StartArray()</title>
<indexterm><primary>StartArray</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>StartArray</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::StartArray (size_t * size = <computeroutput>0</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="_class_json_reader_1af4d4cdc4f7c61cad2b538c10ff365828"/><section>
    <title>StartObject()</title>
<indexterm><primary>StartObject</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>StartObject</secondary></indexterm>
<para><computeroutput><link linkend="_class_json_reader">JsonReader</link> &amp; JsonReader::StartObject ( )</computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_json_reader_1a76d04e4b6e88a33f50faa08ce74b5758"/><section>
    <title>IsReader</title>
<indexterm><primary>IsReader</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>IsReader</secondary></indexterm>
<para><computeroutput>const bool JsonReader::IsReader = true<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_json_reader_1aec930ca2b0468e4bb9c7d139a3b3da26"/><section>
    <title>IsWriter</title>
<indexterm><primary>IsWriter</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>IsWriter</secondary></indexterm>
<para><computeroutput>const bool JsonReader::IsWriter = !<link linkend="_class_json_reader_1a76d04e4b6e88a33f50faa08ce74b5758">IsReader</link><computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_json_reader_1a7b55bc31a623be3e04750b57f64e9ebd"/><section>
    <title>mDocument</title>
<indexterm><primary>mDocument</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>mDocument</secondary></indexterm>
<para><computeroutput>void* JsonReader::mDocument<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>DOM result of parsing. </para>
</para>
</section>
<anchor xml:id="_class_json_reader_1adf5020f5ed68d7b9baa21986d05fda90"/><section>
    <title>mError</title>
<indexterm><primary>mError</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>mError</secondary></indexterm>
<para><computeroutput>bool JsonReader::mError<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Whether an error has occurred. </para>
</para>
</section>
<anchor xml:id="_class_json_reader_1a84c0048fa82ef4f0bb35c10e1f032a49"/><section>
    <title>mStack</title>
<indexterm><primary>mStack</primary><secondary>JsonReader</secondary></indexterm>
<indexterm><primary>JsonReader</primary><secondary>mStack</secondary></indexterm>
<para><computeroutput>void* JsonReader::mStack<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Stack for iterating the DOM. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/rapidjson/example/archiver/<link linkend="_archiver_8h">archiver.h</link>src/rapidjson/example/archiver/<link linkend="_archiver_8cpp">archiver.cpp</link></section>
</section>
