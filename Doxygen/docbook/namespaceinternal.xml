<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespaceinternal" xml:lang="en-US">
<title>internal Namespace Reference</title>
<indexterm><primary>internal</primary></indexterm>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_classinternal_1_1_big_integer">BigInteger</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_decoded_stream">DecodedStream</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_diy_fp">DiyFp</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_double">Double</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_generic_regex">GenericRegex</link></para>

<para>Regular expression engine with subset of ECMAscript grammar. </para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_generic_regex_search">GenericRegexSearch</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_hasher">Hasher</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_i_schema_state_factory">ISchemaStateFactory</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_generic_value">IsGenericValue</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_generic_value_impl">IsGenericValueImpl</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_generic_value_impl_3_01_t_00_01typename_01_void_3_01typename_01_t_1_1_enco3a51e9d8b4986f001b39e1e8edecb66a">IsGenericValueImpl&lt; T, typename Void&lt; typename T::EncodingType &gt;::Type, typename Void&lt; typename T::AllocatorType &gt;::Type &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_ref_counted">IsRefCounted</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_ref_counted_3_01_t_00_01typename_01internal_1_1_enable_if_cond_3_01_t_1_1k_ref_counted_01_4_1_1_type_01_4">IsRefCounted&lt; T, typename internal::EnableIfCond&lt; T::kRefCounted &gt;::Type &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_i_validation_error_handler">IValidationErrorHandler</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_schema">Schema</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_schema_validation_context">SchemaValidationContext</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_stack">Stack</link></para>

<para>A type-unsafe stack for storing different types of data. </para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link></para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_stream_local_copy_3_01_stream_00_010_01_4">StreamLocalCopy&lt; Stream, 0 &gt;</link></para>

<para>Keep reference. </para>
</listitem>
            <listitem><para>class <link linkend="_classinternal_1_1_stream_local_copy_3_01_stream_00_011_01_4">StreamLocalCopy&lt; Stream, 1 &gt;</link></para>

<para>Do copy optimization. </para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_token_helper">TokenHelper</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_token_helper_3_01_stack_00_01char_01_4">TokenHelper&lt; Stack, char &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper">TypeHelper</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01bool_01_4">TypeHelper&lt; ValueType, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01const_01typename_01_value_type_1_1_ch_01_5_01_4">TypeHelper&lt; ValueType, const typename ValueType::Ch * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01double_01_4">TypeHelper&lt; ValueType, double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01float_01_4">TypeHelper&lt; ValueType, float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01int_01_4">TypeHelper&lt; ValueType, int &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01int64__t_01_4">TypeHelper&lt; ValueType, int64_t &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_array_01_4">TypeHelper&lt; ValueType, typename ValueType::Array &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_const_array_01_4">TypeHelper&lt; ValueType, typename ValueType::ConstArray &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_const_object_01_4">TypeHelper&lt; ValueType, typename ValueType::ConstObject &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_object_01_4">TypeHelper&lt; ValueType, typename ValueType::Object &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01uint64__t_01_4">TypeHelper&lt; ValueType, uint64_t &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01unsigned_01_4">TypeHelper&lt; ValueType, unsigned &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_classinternal_1_1_generic_regex">GenericRegex</link>&lt; <link linkend="_struct_u_t_f8">UTF8</link>&lt;&gt; &gt; <link linkend="_namespaceinternal_1ae7fc20c6ee680ae3ba16ae16b4bd5e16">Regex</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_classinternal_1_1_generic_regex_search">GenericRegexSearch</link>&lt; <link linkend="_namespaceinternal_1ae7fc20c6ee680ae3ba16ae16b4bd5e16">Regex</link> &gt; <link linkend="_namespaceinternal_1a7101e324c2d06f1505ef7c7d4401392b">RegexSearch</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> <link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">clzll</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> x)</para>
</listitem>
            <listitem><para><link linkend="_structinternal_1_1_diy_fp">DiyFp</link> <link linkend="_namespaceinternal_1a3e95f043ed6c40cda1c1bc33c2f0ece2">GetCachedPowerByIndex</link> (size_t index)</para>
</listitem>
            <listitem><para><link linkend="_structinternal_1_1_diy_fp">DiyFp</link> <link linkend="_namespaceinternal_1abac3dbfa1070756c37725829148f6038">GetCachedPower</link> (int e, int *K)</para>
</listitem>
            <listitem><para><link linkend="_structinternal_1_1_diy_fp">DiyFp</link> <link linkend="_namespaceinternal_1a74b8503d044bf6c0a5e90c5bea3aba42">GetCachedPower10</link> (int exp, int *outExp)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceinternal_1a234e10bef097ccb2f202b7a133086e71">GrisuRound</link> (char *buffer, int len, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> delta, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> rest, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> ten_kappa, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> wp_w)</para>
</listitem>
            <listitem><para>int <link linkend="_namespaceinternal_1a8aae11dbb46da9ac99e116aa2a6dbfc9">CountDecimalDigit32</link> (<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> n)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceinternal_1a47be9aea8d0f9cae49dc03dc046d2450">DigitGen</link> (const <link linkend="_structinternal_1_1_diy_fp">DiyFp</link> &amp;W, const <link linkend="_structinternal_1_1_diy_fp">DiyFp</link> &amp;Mp, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> delta, char *buffer, int *len, int *K)</para>
</listitem>
            <listitem><para>void <link linkend="_namespaceinternal_1aeb7b6c0784b644968003cbd1b9da57e3">Grisu2</link> (double <link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, char *buffer, int *length, int *K)</para>
</listitem>
            <listitem><para>char * <link linkend="_namespaceinternal_1aadc1fd5929c1c67a56c8ba480c587bac">WriteExponent</link> (int K, char *buffer)</para>
</listitem>
            <listitem><para>char * <link linkend="_namespaceinternal_1a4b194248657212e94cc3f244b09dbeae">Prettify</link> (char *buffer, int length, int k, int maxDecimalPlaces)</para>
</listitem>
            <listitem><para>char * <link linkend="_namespaceinternal_1a38ffd2dab9bb216948f828f3a36c801f">dtoa</link> (double <link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, char *buffer, int maxDecimalPlaces=324)</para>
</listitem>
            <listitem><para>const char * <link linkend="_namespaceinternal_1a76ad2b55668f695effde1971d53a5ce1">GetDigitsLut</link> ()</para>
</listitem>
            <listitem><para>char * <link linkend="_namespaceinternal_1a90e3cb218b557548f361e99dc718b4b1">u32toa</link> (<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> <link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, char *buffer)</para>
</listitem>
            <listitem><para>char * <link linkend="_namespaceinternal_1ac6c7d763acc9ca9f15a759241640328e">i32toa</link> (<link linkend="_stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link> <link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, char *buffer)</para>
</listitem>
            <listitem><para>char * <link linkend="_namespaceinternal_1a489150922c0320e4290b455bf3c6e36c">u64toa</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, char *buffer)</para>
</listitem>
            <listitem><para>char * <link linkend="_namespaceinternal_1a527358458754f514c249c55c27b35526">i64toa</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> <link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, char *buffer)</para>
</listitem>
            <listitem><para>double <link linkend="_namespaceinternal_1af01c41d045d596e2f8d1888cf6fbecb6">Pow10</link> (int n)</para>

<para>Computes integer powers of 10 in double (10.0^n). </para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e">StrLen</link> (const Ch *s)</para>

<para>Custom strlen() which works on different character types. </para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_namespaceinternal_1ac61f7d1bfae1fb68526633edd418fa1c">StrLen</link> (const char *s)</para>
</listitem>
            <listitem><para>template&lt;&gt; </para><para><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_namespaceinternal_1a9cd1cee166f1e18e117d3ce9dc1c83da">StrLen</link> (const wchar_t *s)</para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para>int <link linkend="_namespaceinternal_1a8986308d308f29092fef8a82e64debef">StrCmp</link> (const Ch *s1, const Ch *s2)</para>

<para>Custom strcmpn() which works on different character types. </para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> &gt; </para><para>bool <link linkend="_namespaceinternal_1a864bf0d412431b387aeeee9efdf0adfc">CountStringCodePoint</link> (const typename Encoding::Ch *s, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> *outCount)</para>

<para>Returns number of code points in a encoded string. </para>
</listitem>
            <listitem><para>double <link linkend="_namespaceinternal_1aa1bb51d788788eb5390a16462b40d98d">FastPath</link> (double significand, int exp)</para>
</listitem>
            <listitem><para>double <link linkend="_namespaceinternal_1a9e5fac4695310f09892fe52b1d24ab19">StrtodNormalPrecision</link> (double d, int p)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> <link linkend="_namespaceinternal_1ace304441347098a4953ea99f50805da9">Min3</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> <link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> b, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> c)</para>
</listitem>
            <listitem><para>int <link linkend="_namespaceinternal_1a190f9c286df64526a7e3550528ed6b02">CheckWithinHalfULP</link> (double b, const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp;d, int dExp)</para>
</listitem>
            <listitem><para>bool <link linkend="_namespaceinternal_1a598b2d2f85130bff3c3942e4750b9185">StrtodFast</link> (double d, int p, double *result)</para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para>bool <link linkend="_namespaceinternal_1aab0ac7e895939a3e117ec8e3395fd334">StrtodDiyFp</link> (const Ch *decimals, int dLen, int dExp, double *result)</para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para>double <link linkend="_namespaceinternal_1aa69b729bd9d047f70ba772424cfb65cb">StrtodBigInteger</link> (double approx, const Ch *decimals, int dLen, int dExp)</para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para>double <link linkend="_namespaceinternal_1a6109c750ee4707d4f71de280816a1a00">StrtodFullPrecision</link> (double d, int p, const Ch *decimals, size_t length, size_t decimalPosition, int exp)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>void <link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">Swap</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;b) RAPIDJSON_NOEXCEPT</para>

<para>Custom swap() to avoid dependency on C++ &lt;algorithm&gt; header. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_namespaceinternal_1ae7fc20c6ee680ae3ba16ae16b4bd5e16"/><section>
    <title>Regex</title>
<indexterm><primary>Regex</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>Regex</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_classinternal_1_1_generic_regex">GenericRegex</link>&lt;<link linkend="_struct_u_t_f8">UTF8</link>&lt;&gt; &gt; <link linkend="_namespaceinternal_1ae7fc20c6ee680ae3ba16ae16b4bd5e16">internal::Regex</link></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a7101e324c2d06f1505ef7c7d4401392b"/><section>
    <title>RegexSearch</title>
<indexterm><primary>RegexSearch</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>RegexSearch</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_classinternal_1_1_generic_regex_search">GenericRegexSearch</link>&lt;<link linkend="_namespaceinternal_1ae7fc20c6ee680ae3ba16ae16b4bd5e16">Regex</link>&gt; <link linkend="_namespaceinternal_1a7101e324c2d06f1505ef7c7d4401392b">internal::RegexSearch</link></computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespaceinternal_1a190f9c286df64526a7e3550528ed6b02"/><section>
    <title>CheckWithinHalfULP()</title>
<indexterm><primary>CheckWithinHalfULP</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>CheckWithinHalfULP</secondary></indexterm>
<para><computeroutput>int internal::CheckWithinHalfULP (double b, const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; d, int dExp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286"/><section>
    <title>clzll()</title>
<indexterm><primary>clzll</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>clzll</secondary></indexterm>
<para><computeroutput><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> internal::clzll (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> x)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a8aae11dbb46da9ac99e116aa2a6dbfc9"/><section>
    <title>CountDecimalDigit32()</title>
<indexterm><primary>CountDecimalDigit32</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>CountDecimalDigit32</secondary></indexterm>
<para><computeroutput>int internal::CountDecimalDigit32 (<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> n)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a864bf0d412431b387aeeee9efdf0adfc"/><section>
    <title>CountStringCodePoint()</title>
<indexterm><primary>CountStringCodePoint</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>CountStringCodePoint</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> &gt; </computeroutput><para><computeroutput>bool internal::CountStringCodePoint (const typename Encoding::Ch * s, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> * outCount)</computeroutput></para><para>

<para>Returns number of code points in a encoded string. </para>
</para>
</section>
<anchor xml:id="_namespaceinternal_1a47be9aea8d0f9cae49dc03dc046d2450"/><section>
    <title>DigitGen()</title>
<indexterm><primary>DigitGen</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>DigitGen</secondary></indexterm>
<para><computeroutput>void internal::DigitGen (const <link linkend="_structinternal_1_1_diy_fp">DiyFp</link> &amp; W, const <link linkend="_structinternal_1_1_diy_fp">DiyFp</link> &amp; Mp, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> delta, char * buffer, int * len, int * K)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a38ffd2dab9bb216948f828f3a36c801f"/><section>
    <title>dtoa()</title>
<indexterm><primary>dtoa</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>dtoa</secondary></indexterm>
<para><computeroutput>char * internal::dtoa (double value, char * buffer, int maxDecimalPlaces = <computeroutput>324</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1aa1bb51d788788eb5390a16462b40d98d"/><section>
    <title>FastPath()</title>
<indexterm><primary>FastPath</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>FastPath</secondary></indexterm>
<para><computeroutput>double internal::FastPath (double significand, int exp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1abac3dbfa1070756c37725829148f6038"/><section>
    <title>GetCachedPower()</title>
<indexterm><primary>GetCachedPower</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>GetCachedPower</secondary></indexterm>
<para><computeroutput><link linkend="_structinternal_1_1_diy_fp">DiyFp</link> internal::GetCachedPower (int e, int * K)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a74b8503d044bf6c0a5e90c5bea3aba42"/><section>
    <title>GetCachedPower10()</title>
<indexterm><primary>GetCachedPower10</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>GetCachedPower10</secondary></indexterm>
<para><computeroutput><link linkend="_structinternal_1_1_diy_fp">DiyFp</link> internal::GetCachedPower10 (int exp, int * outExp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a3e95f043ed6c40cda1c1bc33c2f0ece2"/><section>
    <title>GetCachedPowerByIndex()</title>
<indexterm><primary>GetCachedPowerByIndex</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>GetCachedPowerByIndex</secondary></indexterm>
<para><computeroutput><link linkend="_structinternal_1_1_diy_fp">DiyFp</link> internal::GetCachedPowerByIndex (size_t index)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a76ad2b55668f695effde1971d53a5ce1"/><section>
    <title>GetDigitsLut()</title>
<indexterm><primary>GetDigitsLut</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>GetDigitsLut</secondary></indexterm>
<para><computeroutput>const char * internal::GetDigitsLut ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1aeb7b6c0784b644968003cbd1b9da57e3"/><section>
    <title>Grisu2()</title>
<indexterm><primary>Grisu2</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>Grisu2</secondary></indexterm>
<para><computeroutput>void internal::Grisu2 (double value, char * buffer, int * length, int * K)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a234e10bef097ccb2f202b7a133086e71"/><section>
    <title>GrisuRound()</title>
<indexterm><primary>GrisuRound</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>GrisuRound</secondary></indexterm>
<para><computeroutput>void internal::GrisuRound (char * buffer, int len, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> delta, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> rest, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> ten_kappa, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> wp_w)<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>closer</para>
</section>
<anchor xml:id="_namespaceinternal_1ac6c7d763acc9ca9f15a759241640328e"/><section>
    <title>i32toa()</title>
<indexterm><primary>i32toa</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>i32toa</secondary></indexterm>
<para><computeroutput>char * internal::i32toa (<link linkend="_stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link> value, char * buffer)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a527358458754f514c249c55c27b35526"/><section>
    <title>i64toa()</title>
<indexterm><primary>i64toa</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>i64toa</secondary></indexterm>
<para><computeroutput>char * internal::i64toa (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> value, char * buffer)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1ace304441347098a4953ea99f50805da9"/><section>
    <title>Min3()</title>
<indexterm><primary>Min3</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>Min3</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> internal::Min3 (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> a, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> b, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> c)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1af01c41d045d596e2f8d1888cf6fbecb6"/><section>
    <title>Pow10()</title>
<indexterm><primary>Pow10</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>Pow10</secondary></indexterm>
<para><computeroutput>double internal::Pow10 (int n)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Computes integer powers of 10 in double (10.0^n). </para>
</para>

<para>This function uses lookup table for fast and accurate results. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>n</entry><entry>
<para>non-negative exponent. Must &lt;= 308. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>10.0^n </para>
</formalpara>
</para>
</section>
<anchor xml:id="_namespaceinternal_1a4b194248657212e94cc3f244b09dbeae"/><section>
    <title>Prettify()</title>
<indexterm><primary>Prettify</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>Prettify</secondary></indexterm>
<para><computeroutput>char * internal::Prettify (char * buffer, int length, int k, int maxDecimalPlaces)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a8986308d308f29092fef8a82e64debef"/><section>
    <title>StrCmp()</title>
<indexterm><primary>StrCmp</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrCmp</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>int internal::StrCmp (const Ch * s1, const Ch * s2)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Custom strcmpn() which works on different character types. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Ch</entry><entry>
<para>Character type (e.g. char, wchar_t, short) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>s1</entry><entry>
<para>Null-terminated input string. </para>
</entry>
                            </row>
                            <row>
<entry>s2</entry><entry>
<para>Null-terminated input string. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>0 if equal </para>
</formalpara>
</para>
</section>
<anchor xml:id="_namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e"/><section>
    <title>StrLen()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>StrLen</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrLen</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> internal::StrLen (const Ch * s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Custom strlen() which works on different character types. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Ch</entry><entry>
<para>Character type (e.g. char, wchar_t, short) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>s</entry><entry>
<para>Null-terminated input string. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Number of characters in the string. </para>
</formalpara>
<note><title>Note</title>

<para>This has the same semantics as strlen(), the return value is not number of Unicode codepoints. </para>
</note>
</para>
</section>
<anchor xml:id="_namespaceinternal_1ac61f7d1bfae1fb68526633edd418fa1c"/><section>
    <title>StrLen()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>StrLen</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrLen</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> internal::StrLen (const char * s)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a9cd1cee166f1e18e117d3ce9dc1c83da"/><section>
    <title>StrLen()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>StrLen</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrLen</secondary></indexterm>
<computeroutput>template&lt;&gt; </computeroutput><para><computeroutput><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> internal::StrLen (const wchar_t * s)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1aa69b729bd9d047f70ba772424cfb65cb"/><section>
    <title>StrtodBigInteger()</title>
<indexterm><primary>StrtodBigInteger</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrtodBigInteger</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>double internal::StrtodBigInteger (double approx, const Ch * decimals, int dLen, int dExp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1aab0ac7e895939a3e117ec8e3395fd334"/><section>
    <title>StrtodDiyFp()</title>
<indexterm><primary>StrtodDiyFp</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrtodDiyFp</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>bool internal::StrtodDiyFp (const Ch * decimals, int dLen, int dExp, double * result)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a598b2d2f85130bff3c3942e4750b9185"/><section>
    <title>StrtodFast()</title>
<indexterm><primary>StrtodFast</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrtodFast</secondary></indexterm>
<para><computeroutput>bool internal::StrtodFast (double d, int p, double * result)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a6109c750ee4707d4f71de280816a1a00"/><section>
    <title>StrtodFullPrecision()</title>
<indexterm><primary>StrtodFullPrecision</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrtodFullPrecision</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>double internal::StrtodFullPrecision (double d, int p, const Ch * decimals, size_t length, size_t decimalPosition, int exp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a9e5fac4695310f09892fe52b1d24ab19"/><section>
    <title>StrtodNormalPrecision()</title>
<indexterm><primary>StrtodNormalPrecision</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>StrtodNormalPrecision</secondary></indexterm>
<para><computeroutput>double internal::StrtodNormalPrecision (double d, int p)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04"/><section>
    <title>Swap()</title>
<indexterm><primary>Swap</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>Swap</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>void internal::Swap (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; a, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; b)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Custom swap() to avoid dependency on C++ &lt;algorithm&gt; header. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>Type of the arguments to swap, should be instantiated with primitive C++ types only. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>This has the same semantics as std::swap(). </para>
</note>
</para>
</section>
<anchor xml:id="_namespaceinternal_1a90e3cb218b557548f361e99dc718b4b1"/><section>
    <title>u32toa()</title>
<indexterm><primary>u32toa</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>u32toa</secondary></indexterm>
<para><computeroutput>char * internal::u32toa (<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> value, char * buffer)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1a489150922c0320e4290b455bf3c6e36c"/><section>
    <title>u64toa()</title>
<indexterm><primary>u64toa</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>u64toa</secondary></indexterm>
<para><computeroutput>char * internal::u64toa (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> value, char * buffer)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_namespaceinternal_1aadc1fd5929c1c67a56c8ba480c587bac"/><section>
    <title>WriteExponent()</title>
<indexterm><primary>WriteExponent</primary><secondary>internal</secondary></indexterm>
<indexterm><primary>internal</primary><secondary>WriteExponent</secondary></indexterm>
<para><computeroutput>char * internal::WriteExponent (int K, char * buffer)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
</section>
