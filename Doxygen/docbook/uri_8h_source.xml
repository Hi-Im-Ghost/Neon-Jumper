<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_uri_8h_source" xml:lang="en-US">
<title>uri.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/uri.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available.</emphasis>
2 <emphasis role="comment">//</emphasis>
3 <emphasis role="comment">//&#32;(C)&#32;Copyright&#32;IBM&#32;Corporation&#32;2021</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License.&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource.org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.&#32;See&#32;the&#32;License&#32;for&#32;the</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_URI_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_URI_H_</emphasis>
17 
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_strfunc_8h">internal/strfunc.h</link>&quot;</emphasis>
19 
20 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
21 RAPIDJSON_DIAG_PUSH
22 RAPIDJSON_DIAG_OFF(c++98-compat)
23 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
24 RAPIDJSON_DIAG_OFF(4512)&#32;<emphasis role="comment">//&#32;assignment&#32;operator&#32;could&#32;not&#32;be&#32;generated</emphasis>
25 <emphasis role="preprocessor">#endif</emphasis>
26 
27 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
28 
30 <emphasis role="comment">//&#32;GenericUri</emphasis>
31 
32 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator=CrtAllocator&gt;
33 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_uri">GenericUri</link>&#32;{
34 <emphasis role="keyword">public</emphasis>:
35 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">ValueType::Ch</link>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>;
36 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
37 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_string&lt;Ch&gt;&#32;String;
38 <emphasis role="preprocessor">#endif</emphasis>
39 
41 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1ae9e702382446e760e66e45872567b59e">GenericUri</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0)&#32;:&#32;uri_(),&#32;base_(),&#32;scheme_(),&#32;auth_(),&#32;path_(),&#32;query_(),&#32;frag_(),&#32;allocator_(allocator),&#32;ownAllocator_()&#32;{
42 &#32;&#32;&#32;&#32;}
43 
44 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a188f7f9d11aac1c7647e6f43e05fcbd4">GenericUri</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;uri,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0)&#32;:&#32;uri_(),&#32;base_(),&#32;scheme_(),&#32;auth_(),&#32;path_(),&#32;query_(),&#32;frag_(),&#32;allocator_(allocator),&#32;ownAllocator_()&#32;{
45 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parse(uri,&#32;len);
46 &#32;&#32;&#32;&#32;}
47 
48 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a2077917cd430c4893a3eee2fc5133727">GenericUri</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;uri,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0)&#32;:&#32;uri_(),&#32;base_(),&#32;scheme_(),&#32;auth_(),&#32;path_(),&#32;query_(),&#32;frag_(),&#32;allocator_(allocator),&#32;ownAllocator_()&#32;{
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parse(uri,&#32;internal::StrLen&lt;Ch&gt;(uri));
50 &#32;&#32;&#32;&#32;}
51 
52 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;with&#32;specializations&#32;of&#32;GenericValue</emphasis>
53 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<link linkend="_class_generic_uri_1ae0d105ae4ae9a2edc6489835f3bf62a5">GenericUri</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;uri,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0)&#32;:&#32;uri_(),&#32;base_(),&#32;scheme_(),&#32;auth_(),&#32;path_(),&#32;query_(),&#32;frag_(),&#32;allocator_(allocator),&#32;ownAllocator_()&#32;{
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;u&#32;=&#32;uri.template&#32;Get&lt;const&#32;Ch*&gt;();&#32;<emphasis role="comment">//&#32;TypeHelper&#32;from&#32;document.h</emphasis>
55 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parse(u,&#32;internal::StrLen&lt;Ch&gt;(u));
56 &#32;&#32;&#32;&#32;}
57 
58 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
59 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1ae9e702382446e760e66e45872567b59e">GenericUri</link>(<emphasis role="keyword">const</emphasis>&#32;String&amp;&#32;uri,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0)&#32;:&#32;uri_(),&#32;base_(),&#32;scheme_(),&#32;auth_(),&#32;path_(),&#32;query_(),&#32;frag_(),&#32;allocator_(allocator),&#32;ownAllocator_()&#32;{
60 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parse(uri.c_str(),&#32;internal::StrLen&lt;Ch&gt;(uri.c_str()));
61 &#32;&#32;&#32;&#32;}
62 <emphasis role="preprocessor">#endif</emphasis>
63 
65 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a701930adaab51f0da0b2fba64bb67b25">GenericUri</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;rhs)&#32;:&#32;uri_(),&#32;base_(),&#32;scheme_(),&#32;auth_(),&#32;path_(),&#32;query_(),&#32;frag_(),&#32;allocator_(),&#32;ownAllocator_()&#32;{
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;rhs;
67 &#32;&#32;&#32;&#32;}
68 
70 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a233ee45aeaeb5ee3a6ccea5a720d67b2">GenericUri</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;rhs,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator)&#32;:&#32;uri_(),&#32;base_(),&#32;scheme_(),&#32;auth_(),&#32;path_(),&#32;query_(),&#32;frag_(),&#32;allocator_(allocator),&#32;ownAllocator_()&#32;{
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;rhs;
72 &#32;&#32;&#32;&#32;}
73 
75 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a6479d97f05ba77b27f06778ce17590d0">~GenericUri</link>()&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Free();
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a">RAPIDJSON_DELETE</link>(ownAllocator_);
78 &#32;&#32;&#32;&#32;}
79 
81 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;<link linkend="_class_generic_uri_1adbd9d4a3a05a34aed0b05a016110b54e">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;rhs)&#32;{
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;rhs)&#32;{
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;delete&#32;ownAllocator</emphasis>
84 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Free();
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Allocate(rhs.<link linkend="_class_generic_uri_1ad8f54ebb7d47030b4b0900b6987d76f7">GetStringLength</link>());
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auth_&#32;=&#32;CopyPart(scheme_,&#32;rhs.scheme_,&#32;rhs.<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>());
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_&#32;=&#32;CopyPart(auth_,&#32;rhs.auth_,&#32;rhs.<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>());
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;query_&#32;=&#32;CopyPart(path_,&#32;rhs.path_,&#32;rhs.<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>());
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frag_&#32;=&#32;CopyPart(query_,&#32;rhs.query_,&#32;rhs.<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>());
90 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_&#32;=&#32;CopyPart(frag_,&#32;rhs.frag_,&#32;rhs.<link linkend="_class_generic_uri_1a808ac934c8cb8aaf57f63b216a40a9b9">GetFragStringLength</link>());
91 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri_&#32;=&#32;CopyPart(base_,&#32;rhs.base_,&#32;rhs.<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>());
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CopyPart(uri_,&#32;rhs.uri_,&#32;rhs.<link linkend="_class_generic_uri_1ad8f54ebb7d47030b4b0900b6987d76f7">GetStringLength</link>());
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
95 &#32;&#32;&#32;&#32;}
96 
98 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;with&#32;specializations&#32;of&#32;GenericValue</emphasis>
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_uri_1ae3d2e835bd683e41720379260c2f1e04">Get</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;uri,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&amp;&#32;allocator)&#32;{
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri.template&#32;Set&lt;const&#32;Ch*&gt;(this-&gt;<link linkend="_class_generic_uri_1a77129c5d1d6510eca7cc3623ffa6cf96">GetString</link>(),&#32;allocator);&#32;<emphasis role="comment">//&#32;TypeHelper&#32;from&#32;document.h</emphasis>
101 &#32;&#32;&#32;&#32;}
102 
103 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;<link linkend="_class_generic_uri_1a77129c5d1d6510eca7cc3623ffa6cf96">GetString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;uri_;&#32;}
104 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_class_generic_uri_1ad8f54ebb7d47030b4b0900b6987d76f7">GetStringLength</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;uri_&#32;==&#32;0&#32;?&#32;0&#32;:&#32;internal::StrLen&lt;Ch&gt;(uri_);&#32;}
105 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;<link linkend="_class_generic_uri_1aa01f0e6bc010e7f41e91f11351b7a1a4">GetBaseString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_;&#32;}
106 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;base_&#32;==&#32;0&#32;?&#32;0&#32;:&#32;internal::StrLen&lt;Ch&gt;(base_);&#32;}
107 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;<link linkend="_class_generic_uri_1a797383c9f123cf1069686255d26e01b5">GetSchemeString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;scheme_;&#32;}
108 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;scheme_&#32;==&#32;0&#32;?&#32;0&#32;:&#32;internal::StrLen&lt;Ch&gt;(scheme_);&#32;}
109 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;<link linkend="_class_generic_uri_1a0be548d5419bede81146a6fcf4729773">GetAuthString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;auth_;&#32;}
110 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;auth_&#32;==&#32;0&#32;?&#32;0&#32;:&#32;internal::StrLen&lt;Ch&gt;(auth_);&#32;}
111 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;<link linkend="_class_generic_uri_1a0233d4141f2e1f9bf74f8af179df006a">GetPathString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;path_;&#32;}
112 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;path_&#32;==&#32;0&#32;?&#32;0&#32;:&#32;internal::StrLen&lt;Ch&gt;(path_);&#32;}
113 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;<link linkend="_class_generic_uri_1aea760c8dcff37c9237929e235cd5b1e5">GetQueryString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;query_;&#32;}
114 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;query_&#32;==&#32;0&#32;?&#32;0&#32;:&#32;internal::StrLen&lt;Ch&gt;(query_);&#32;}
115 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;<link linkend="_class_generic_uri_1aa1aa1a55c2582da765a9526b6a6fd08f">GetFragString</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;frag_;&#32;}
116 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_class_generic_uri_1a808ac934c8cb8aaf57f63b216a40a9b9">GetFragStringLength</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;frag_&#32;==&#32;0&#32;?&#32;0&#32;:&#32;internal::StrLen&lt;Ch&gt;(frag_);&#32;}
117 
118 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
119 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;<link linkend="_class_generic_uri_1ae3d2e835bd683e41720379260c2f1e04">Get</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(uri.<link linkend="_class_generic_uri_1a77129c5d1d6510eca7cc3623ffa6cf96">GetString</link>(),&#32;uri.<link linkend="_class_generic_uri_1ad8f54ebb7d47030b4b0900b6987d76f7">GetStringLength</link>());&#32;}
120 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;GetBase(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(uri.<link linkend="_class_generic_uri_1aa01f0e6bc010e7f41e91f11351b7a1a4">GetBaseString</link>(),&#32;uri.<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>());&#32;}
121 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;GetScheme(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(uri.<link linkend="_class_generic_uri_1a797383c9f123cf1069686255d26e01b5">GetSchemeString</link>(),&#32;uri.<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>());&#32;}
122 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;GetAuth(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(uri.<link linkend="_class_generic_uri_1a0be548d5419bede81146a6fcf4729773">GetAuthString</link>(),&#32;uri.<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>());&#32;}
123 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;GetPath(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(uri.<link linkend="_class_generic_uri_1a0233d4141f2e1f9bf74f8af179df006a">GetPathString</link>(),&#32;uri.<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>());&#32;}
124 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;GetQuery(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(uri.<link linkend="_class_generic_uri_1aea760c8dcff37c9237929e235cd5b1e5">GetQueryString</link>(),&#32;uri.<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>());&#32;}
125 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;String&#32;GetFrag(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;String(uri.<link linkend="_class_generic_uri_1aa1aa1a55c2582da765a9526b6a6fd08f">GetFragString</link>(),&#32;uri.<link linkend="_class_generic_uri_1a808ac934c8cb8aaf57f63b216a40a9b9">GetFragStringLength</link>());&#32;}
126 <emphasis role="preprocessor">#endif</emphasis>
127 
129 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_uri_1aa2a0b3b540a2736ba253feddf848ff46">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_uri_1a1a35d339917489a66064d21642788aab">Match</link>(rhs,&#32;<emphasis role="keyword">true</emphasis>);
131 &#32;&#32;&#32;&#32;}
132 
133 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_uri_1af220805902de60eda9f4286c017c9c95">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_class_generic_uri_1a1a35d339917489a66064d21642788aab">Match</link>(rhs,&#32;<emphasis role="keyword">true</emphasis>);
135 &#32;&#32;&#32;&#32;}
136 
137 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_uri_1a1a35d339917489a66064d21642788aab">Match</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;uri,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;full&#32;=&#32;<emphasis role="keyword">true</emphasis>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;s1;
139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;s2;
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(full)&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s1&#32;=&#32;uri_;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;=&#32;uri.uri_;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s1&#32;=&#32;base_;
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s2&#32;=&#32;uri.base_;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s1&#32;==&#32;s2)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(s1&#32;==&#32;0&#32;||&#32;s2&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;internal::StrCmp&lt;Ch&gt;(s1,&#32;s2)&#32;==&#32;0;
150 &#32;&#32;&#32;&#32;}
151 
153 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;https://tools.ietf.org/html/rfc3986</emphasis>
154 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;for&#32;resolving&#32;an&#32;id&#32;or&#32;$ref&#32;with&#32;an&#32;in-scope&#32;id.</emphasis>
155 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;a&#32;new&#32;GenericUri&#32;for&#32;the&#32;resolved&#32;URI.</emphasis>
156 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri">GenericUri</link>&#32;<link linkend="_class_generic_uri_1a7de4b3a28c8046f2293658bc9c0b44e1">Resolve</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri</link>&amp;&#32;baseuri,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0)&#32;{
157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_uri">GenericUri</link>&#32;resuri;
158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.allocator_&#32;=&#32;allocator;
159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;enough&#32;space&#32;for&#32;combining&#32;paths</emphasis>
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.Allocate(<link linkend="_class_generic_uri_1ad8f54ebb7d47030b4b0900b6987d76f7">GetStringLength</link>()&#32;+&#32;baseuri.<link linkend="_class_generic_uri_1ad8f54ebb7d47030b4b0900b6987d76f7">GetStringLength</link>()&#32;+&#32;1);&#32;<emphasis role="comment">//&#32;+&#32;1&#32;for&#32;joining&#32;slash</emphasis>
161 
162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>()&#32;==&#32;0))&#32;{
163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;all&#32;of&#32;this&#32;URI</emphasis>
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.auth_&#32;=&#32;CopyPart(resuri.scheme_,&#32;scheme_,&#32;<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>());
165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.path_&#32;=&#32;CopyPart(resuri.auth_,&#32;auth_,&#32;<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>());
166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.query_&#32;=&#32;CopyPart(resuri.path_,&#32;path_,&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>());
167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.frag_&#32;=&#32;CopyPart(resuri.query_,&#32;query_,&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>());
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.RemoveDotSegments();
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;base&#32;scheme</emphasis>
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.auth_&#32;=&#32;CopyPart(resuri.scheme_,&#32;baseuri.scheme_,&#32;baseuri.<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>());
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>()&#32;==&#32;0))&#32;{
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;this&#32;auth,&#32;path,&#32;query</emphasis>
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.path_&#32;=&#32;CopyPart(resuri.auth_,&#32;auth_,&#32;<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>());
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.query_&#32;=&#32;CopyPart(resuri.path_,&#32;path_,&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>());
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.frag_&#32;=&#32;CopyPart(resuri.query_,&#32;query_,&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>());
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.RemoveDotSegments();
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;base&#32;auth</emphasis>
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.path_&#32;=&#32;CopyPart(resuri.auth_,&#32;baseuri.auth_,&#32;baseuri.<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>());
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>()&#32;==&#32;0)&#32;{
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;base&#32;path</emphasis>
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.query_&#32;=&#32;CopyPart(resuri.path_,&#32;baseuri.path_,&#32;baseuri.<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>());
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>()&#32;==&#32;0)&#32;{
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;the&#32;base&#32;query</emphasis>
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.frag_&#32;=&#32;CopyPart(resuri.query_,&#32;baseuri.query_,&#32;baseuri.<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>());
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;this&#32;query</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.frag_&#32;=&#32;CopyPart(resuri.query_,&#32;query_,&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>());
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(path_[0]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Absolute&#32;path&#32;-&#32;use&#32;all&#32;of&#32;this&#32;path</emphasis>
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.query_&#32;=&#32;CopyPart(resuri.path_,&#32;path_,&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>());
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.RemoveDotSegments();
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Relative&#32;path&#32;-&#32;append&#32;this&#32;path&#32;to&#32;base&#32;path&#32;after&#32;base&#32;path&apos;s&#32;last&#32;slash</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;pos&#32;=&#32;0;
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(baseuri.<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>()&#32;==&#32;0)&#32;&amp;&amp;&#32;baseuri.<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>()&#32;==&#32;0)&#32;{
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.path_[pos]&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos++;
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lastslashpos&#32;=&#32;baseuri.<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>();
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(lastslashpos&#32;&gt;&#32;0)&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(baseuri.path_[lastslashpos&#32;-&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastslashpos--;
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(&amp;resuri.path_[pos],&#32;baseuri.path_,&#32;lastslashpos&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos&#32;+=&#32;lastslashpos;
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.query_&#32;=&#32;CopyPart(&amp;resuri.path_[pos],&#32;path_,&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>());
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.RemoveDotSegments();
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;this&#32;query</emphasis>
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.frag_&#32;=&#32;CopyPart(resuri.query_,&#32;query_,&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>());
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;use&#32;this&#32;frag</emphasis>
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.base_&#32;=&#32;CopyPart(resuri.frag_,&#32;frag_,&#32;<link linkend="_class_generic_uri_1a808ac934c8cb8aaf57f63b216a40a9b9">GetFragStringLength</link>());
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Re-constitute&#32;base_&#32;and&#32;uri_</emphasis>
222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.SetBase();
223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.uri_&#32;=&#32;resuri.base_&#32;+&#32;resuri.<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>()&#32;+&#32;1;
224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resuri.SetUri();
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resuri;
226 &#32;&#32;&#32;&#32;}
227 
229 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&amp;&#32;<link linkend="_class_generic_uri_1a35243f85b101434281df864d36af4cb8">GetAllocator</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*allocator_;&#32;}
230 
231 <emphasis role="keyword">private</emphasis>:
232 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;memory&#32;for&#32;a&#32;URI</emphasis>
233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Returns&#32;total&#32;amount&#32;allocated</emphasis>
234 &#32;&#32;&#32;&#32;std::size_t&#32;Allocate(std::size_t&#32;len)&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;own&#32;allocator&#32;if&#32;user&#32;did&#32;not&#32;supply.</emphasis>
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!allocator_)
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownAllocator_&#32;=&#32;&#32;allocator_&#32;=&#32;<link linkend="_rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b">RAPIDJSON_NEW</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>)();
238 
239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Allocate&#32;one&#32;block&#32;containing&#32;each&#32;part&#32;of&#32;the&#32;URI&#32;(5)&#32;plus&#32;base&#32;plus&#32;full&#32;URI,&#32;all&#32;null&#32;terminated.</emphasis>
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Order:&#32;scheme,&#32;auth,&#32;path,&#32;query,&#32;frag,&#32;base,&#32;uri</emphasis>
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;need&#32;to&#32;set,&#32;increment,&#32;assign&#32;in&#32;3&#32;stages&#32;to&#32;avoid&#32;compiler&#32;warning&#32;bug.</emphasis>
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;total&#32;=&#32;(3&#32;*&#32;len&#32;+&#32;7)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>);
243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scheme_&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(total));
244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*scheme_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auth_&#32;=&#32;scheme_;
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auth_++;
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*auth_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_&#32;=&#32;auth_;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_++;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*path_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;query_&#32;=&#32;path_;
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;query_++;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*query_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frag_&#32;=&#32;query_;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frag_++;
256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*frag_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_&#32;=&#32;frag_;
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_++;
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*base_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri_&#32;=&#32;base_;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri_++;
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*uri_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;total;
264 &#32;&#32;&#32;&#32;}
265 
266 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Free&#32;memory&#32;for&#32;a&#32;URI</emphasis>
267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Free()&#32;{
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(scheme_)&#32;{
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Allocator::Free</link>(scheme_);
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scheme_&#32;=&#32;0;
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
272 &#32;&#32;&#32;&#32;}
273 
274 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;a&#32;URI&#32;into&#32;constituent&#32;scheme,&#32;authority,&#32;path,&#32;query,&#32;&amp;&#32;fragment&#32;parts</emphasis>
275 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Supports&#32;URIs&#32;that&#32;match&#32;regex&#32;^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?&#32;as&#32;per</emphasis>
276 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://tools.ietf.org/html/rfc3986</emphasis>
277 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Parse(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;uri,&#32;std::size_t&#32;len)&#32;{
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;start&#32;=&#32;0,&#32;pos1&#32;=&#32;0,&#32;pos2&#32;=&#32;0;
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Allocate(len);
280 
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;scheme&#32;([^:/?#]+):)?</emphasis>
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&lt;&#32;len)&#32;{
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos1&#32;&lt;&#32;len)&#32;{
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos1]&#32;==&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos1++;
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos1&#32;!=&#32;len)&#32;{
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos2&#32;&lt;&#32;len)&#32;{
289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2++;
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pos1&#32;&lt;&#32;pos2)&#32;{
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos1++;
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(scheme_,&#32;&amp;uri[start],&#32;pos1&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scheme_[pos1]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;pos1;
299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;auth&#32;(//([^/?#]*))?</emphasis>
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;need&#32;to&#32;set,&#32;increment,&#32;assign&#32;in&#32;3&#32;stages&#32;to&#32;avoid&#32;compiler&#32;warning&#32;bug.</emphasis>
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auth_&#32;=&#32;scheme_&#32;+&#32;<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>();
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auth_++;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*auth_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&lt;&#32;len&#32;-&#32;1&#32;&amp;&amp;&#32;uri[start]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>&#32;&amp;&amp;&#32;uri[start&#32;+&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2&#32;=&#32;start&#32;+&#32;2;
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos2&#32;&lt;&#32;len)&#32;{
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2++;
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(auth_,&#32;&amp;uri[start],&#32;(pos2&#32;-&#32;start)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;auth_[pos2&#32;-&#32;start]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;pos2;
318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;path&#32;([^?#]*)</emphasis>
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;need&#32;to&#32;set,&#32;increment,&#32;assign&#32;in&#32;3&#32;stages&#32;to&#32;avoid&#32;compiler&#32;warning&#32;bug.</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_&#32;=&#32;auth_&#32;+&#32;<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>();
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_++;
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*path_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&lt;&#32;len)&#32;{
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2&#32;=&#32;start;
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos2&#32;&lt;&#32;len)&#32;{
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2++;
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;!=&#32;pos2)&#32;{
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(path_,&#32;&amp;uri[start],&#32;(pos2&#32;-&#32;start)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_[pos2&#32;-&#32;start]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(path_[0]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)
335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RemoveDotSegments();&#32;&#32;&#32;<emphasis role="comment">//&#32;absolute&#32;path&#32;-&#32;normalize</emphasis>
336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;pos2;
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;query&#32;(\?([^#]*))?</emphasis>
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;need&#32;to&#32;set,&#32;increment,&#32;assign&#32;in&#32;3&#32;stages&#32;to&#32;avoid&#32;compiler&#32;warning&#32;bug.</emphasis>
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;query_&#32;=&#32;path_&#32;+&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>();
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;query_++;
343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*query_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&lt;&#32;len&#32;&amp;&amp;&#32;uri[start]&#32;==&#32;<emphasis role="charliteral">&apos;?&apos;</emphasis>)&#32;{
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2&#32;=&#32;start&#32;+&#32;1;
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pos2&#32;&lt;&#32;len)&#32;{
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uri[pos2]&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pos2++;
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;!=&#32;pos2)&#32;{
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(query_,&#32;&amp;uri[start],&#32;(pos2&#32;-&#32;start)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;query_[pos2&#32;-&#32;start]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;start&#32;=&#32;pos2;
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Look&#32;for&#32;fragment&#32;(#(.*))?</emphasis>
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Note&#32;need&#32;to&#32;set,&#32;increment,&#32;assign&#32;in&#32;3&#32;stages&#32;to&#32;avoid&#32;compiler&#32;warning&#32;bug.</emphasis>
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frag_&#32;=&#32;query_&#32;+&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>();
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frag_++;
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*frag_&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(start&#32;&lt;&#32;len&#32;&amp;&amp;&#32;uri[start]&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;{
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(frag_,&#32;&amp;uri[start],&#32;(len&#32;-&#32;start)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;frag_[len&#32;-&#32;start]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
365 
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Re-constitute&#32;base_&#32;and&#32;uri_</emphasis>
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base_&#32;=&#32;frag_&#32;+&#32;<link linkend="_class_generic_uri_1a808ac934c8cb8aaf57f63b216a40a9b9">GetFragStringLength</link>()&#32;+&#32;1;
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetBase();
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri_&#32;=&#32;base_&#32;+&#32;<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>()&#32;+&#32;1;
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SetUri();
371 &#32;&#32;&#32;&#32;}
372 
373 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reconstitute&#32;base</emphasis>
374 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetBase()&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;next&#32;=&#32;base_;
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(next,&#32;scheme_,&#32;<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next+=&#32;<link linkend="_class_generic_uri_1ac3337c9af8f61c56301e2c51b9c03183">GetSchemeStringLength</link>();
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(next,&#32;auth_,&#32;<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next+=&#32;<link linkend="_class_generic_uri_1a6c7e9223173511e2c8addf0a5fbb4719">GetAuthStringLength</link>();
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(next,&#32;path_,&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next+=&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>();
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(next,&#32;query_,&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next+=&#32;<link linkend="_class_generic_uri_1a6ef50d8c3d2d57ce653d88f0fb6297ce">GetQueryStringLength</link>();
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*next&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
385 &#32;&#32;&#32;&#32;}
386 
387 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Reconstitute&#32;uri</emphasis>
388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SetUri()&#32;{
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;next&#32;=&#32;uri_;
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(next,&#32;base_,&#32;<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next+=&#32;<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>();
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(next,&#32;frag_,&#32;<link linkend="_class_generic_uri_1a808ac934c8cb8aaf57f63b216a40a9b9">GetFragStringLength</link>()&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;next+=&#32;<link linkend="_class_generic_uri_1a808ac934c8cb8aaf57f63b216a40a9b9">GetFragStringLength</link>();
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*next&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
395 &#32;&#32;&#32;&#32;}
396 
397 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Copy&#32;a&#32;part&#32;from&#32;one&#32;GenericUri&#32;to&#32;another</emphasis>
398 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Return&#32;the&#32;pointer&#32;to&#32;the&#32;next&#32;part&#32;to&#32;be&#32;copied&#32;to</emphasis>
399 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;CopyPart(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;to,&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;from,&#32;std::size_t&#32;len)&#32;{
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(to&#32;!=&#32;0);
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(from&#32;!=&#32;0);
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(to,&#32;from,&#32;len&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;to[len]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;next&#32;=&#32;to&#32;+&#32;len&#32;+&#32;1;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;next;
406 &#32;&#32;&#32;&#32;}
407 
408 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;.&#32;and&#32;..&#32;segments&#32;from&#32;the&#32;path_&#32;member.</emphasis>
409 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;https://tools.ietf.org/html/rfc3986</emphasis>
410 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;is&#32;done&#32;in&#32;place&#32;as&#32;we&#32;are&#32;only&#32;removing&#32;segments.</emphasis>
411 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;RemoveDotSegments()&#32;{
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;pathlen&#32;=&#32;<link linkend="_class_generic_uri_1a7d6e5a13cb64cb5b65439bfd9ea82674">GetPathStringLength</link>();
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;pathpos&#32;=&#32;0;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;in&#32;path_</emphasis>
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::size_t&#32;newpos&#32;=&#32;0;&#32;&#32;&#32;<emphasis role="comment">//&#32;Position&#32;in&#32;new&#32;path_</emphasis>
415 
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Loop&#32;through&#32;each&#32;segment&#32;in&#32;original&#32;path_</emphasis>
417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(pathpos&#32;&lt;&#32;pathlen)&#32;{
418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;next&#32;segment,&#32;bounded&#32;by&#32;&apos;/&apos;&#32;or&#32;end</emphasis>
419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;slashpos&#32;=&#32;0;
420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((pathpos&#32;+&#32;slashpos)&#32;&lt;&#32;pathlen)&#32;{
421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(path_[pathpos&#32;+&#32;slashpos]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;slashpos++;
423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Check&#32;for&#32;..&#32;and&#32;.&#32;segments</emphasis>
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slashpos&#32;==&#32;2&#32;&amp;&amp;&#32;path_[pathpos]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;&amp;&amp;&#32;path_[pathpos&#32;+&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;{
426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Backup&#32;a&#32;..&#32;segment&#32;in&#32;the&#32;new&#32;path_</emphasis>
427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;expect&#32;to&#32;find&#32;a&#32;previously&#32;added&#32;slash&#32;at&#32;the&#32;end&#32;or&#32;nothing</emphasis>
428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(newpos&#32;==&#32;0&#32;||&#32;path_[newpos&#32;-&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>);
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;lastslashpos&#32;=&#32;newpos;
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;sure&#32;we&#32;don&apos;t&#32;go&#32;beyond&#32;the&#32;start&#32;segment</emphasis>
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lastslashpos&#32;&gt;&#32;1)&#32;{
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Find&#32;the&#32;next&#32;to&#32;last&#32;slash&#32;and&#32;back&#32;up&#32;to&#32;it</emphasis>
433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastslashpos--;
434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(lastslashpos&#32;&gt;&#32;0)&#32;{
435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(path_[lastslashpos&#32;-&#32;1]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;<emphasis role="keywordflow">break</emphasis>;
436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lastslashpos--;
437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Set&#32;the&#32;new&#32;path_&#32;position</emphasis>
439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newpos&#32;=&#32;lastslashpos;
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(slashpos&#32;==&#32;1&#32;&amp;&amp;&#32;path_[pathpos]&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>)&#32;{
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Discard&#32;.&#32;segment,&#32;leaves&#32;new&#32;path_&#32;unchanged</emphasis>
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;any&#32;other&#32;kind&#32;of&#32;segment&#32;to&#32;the&#32;new&#32;path_</emphasis>
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(newpos&#32;&lt;=&#32;pathpos);
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memmove(&amp;path_[newpos],&#32;&amp;path_[pathpos],&#32;slashpos&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>));
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newpos&#32;+=&#32;slashpos;
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Add&#32;slash&#32;if&#32;not&#32;at&#32;end</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((pathpos&#32;+&#32;slashpos)&#32;&lt;&#32;pathlen)&#32;{
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_[newpos]&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newpos++;
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Move&#32;to&#32;next&#32;segment</emphasis>
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pathpos&#32;+=&#32;slashpos&#32;+&#32;1;
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;path_[newpos]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
458 &#32;&#32;&#32;&#32;}
459 
460 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;uri_;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Everything</emphasis>
461 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;base_;&#32;&#32;&#32;<emphasis role="comment">//&#32;Everything&#32;except&#32;fragment</emphasis>
462 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;scheme_;&#32;<emphasis role="comment">//&#32;Includes&#32;the&#32;:</emphasis>
463 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;auth_;&#32;&#32;&#32;<emphasis role="comment">//&#32;Includes&#32;the&#32;//</emphasis>
464 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;path_;&#32;&#32;&#32;<emphasis role="comment">//&#32;Absolute&#32;if&#32;starts&#32;with&#32;/</emphasis>
465 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;query_;&#32;&#32;<emphasis role="comment">//&#32;Includes&#32;the&#32;?</emphasis>
466 &#32;&#32;&#32;&#32;<link linkend="_class_generic_uri_1a20d0602cff62211d89bc4b25963beeee">Ch</link>*&#32;frag_;&#32;&#32;&#32;<emphasis role="comment">//&#32;Includes&#32;the&#32;#</emphasis>
467 
468 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator_;&#32;&#32;&#32;&#32;&#32;&#32;
469 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;ownAllocator_;&#32;&#32;&#32;
470 };
471 
473 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri&lt;Value&gt;</link>&#32;<link linkend="_uri_8h_1a8ce9b9949b7b615863aa015410222d2d">Uri</link>;
474 
475 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
476 
477 <emphasis role="preprocessor">#if&#32;defined(__clang__)</emphasis>
478 RAPIDJSON_DIAG_POP
479 <emphasis role="preprocessor">#endif</emphasis>
480 
481 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_URI_H_</emphasis>
</programlisting></section>
