<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_game_state" xml:lang="en-US">
<title>GameState Class Reference</title>
<indexterm><primary>GameState</primary></indexterm>
<para>
<computeroutput>#include &lt;GameState.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for GameState:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_game_state.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_game_state_1a00007967d00ac636381f23f3818f0db1">GameState</link> (std::stack&lt; <link linkend="_class_game_state">GameState</link> * &gt; *<link linkend="_class_game_state_1a6e9e1aa616cd1071425f2766a76957ec">states</link>)</para>

<para>Konstruktor przyjmuje odniesienie do stosu wszystkich stanów. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a5b6ccfff3ca74df5a7e67fdeb4ed5bce">endState</link> ()</para>

<para>Komunikuje o chęci zakończenia stanu. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_game_state_1ab48ca6f7e9a9645ae583f16ccccbdcf0">getEndState</link> () const</para>

<para>Pozwala uzyskać informację, czy należy zakończyć stan. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_game_state_1abb6044767e0b7f20f49fb53adc2ef1a6">getGoNextLevel</link> () const</para>

<para>Pozwala przejść do drugiego poziomu gry. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_game_state_1a360521bb5b371ea942a9e4e2ba1e8145">update</link> (float deltaTime)=0</para>

<para>Funkcja zarządzająca odświeżaniem logiki stanu. </para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_game_state_1ab54d45c62b2ec2719bd48788b982b471">render</link> (sf::RenderTarget &amp;window)</para>

<para>Funkcja zarządzająca renderowaniem grafiki stanu. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_game_state_1ada16e95cc9cdda4c4764bdf5833848ba">updateMousePosition</link> ()</para>

<para>Pozwala na aktualizowanie pozycji myszy na ekranie. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1ae9b6258dccf8740eced6857468548e60">pause</link> ()</para>

<para>Pozwala zakomunikować o potrzebie zatrzymania stanu. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a4a9b6f37601bfa3bad8c760cf3fb16fc">unpause</link> ()</para>

<para>Pozwala zakomunikować o potrzebie wznowienia stanu. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a0f46eb5be452693b0dc945a7c5cd0c9a">endGame</link> ()</para>

<para>Pozwala zakomunikować o koncu gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a643419a178b99f865cb7af2373c3dda0">unEndGame</link> ()</para>

<para>Pozwala zakomunikować o zmianie stanu konca gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a50a01d688f5ed6310257bc00d4ade0cd">initVirtualCursor</link> ()</para>

<para>Inicjuje wirtualny kursor. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1ab549d25215e9626d61cf1377ba03d6ad">updateVirtualCursor</link> ()</para>

<para>Odświeża kursor wirtualny do pozycji kursora myszy. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a5dac99e8c9278389352c42161f03452a">initMusicMenu</link> ()</para>

<para>Inicjuje muzykę menu. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a5473619dbf358cb4bffbf202e67208bf">initSoundMenu</link> ()</para>

<para>Inicjuje dźwięki przycisków menu. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1acb92a3053f84a4bc19ee00dd5c7ef014">initMusicGame</link> ()</para>

<para>Inicjuje muzykę podczas gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1ad67cf6bd0d59e8777b2d90272facb8bf">initTextGame</link> ()</para>

<para>Inicjacja tekstu do gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a2b678c21bac3ccf22ea1311a77c9847e">initTextPause</link> ()</para>

<para>Inicjacja tekstu do pauzy. </para>
</listitem>
            <listitem><para>void <link linkend="_class_game_state_1a4c7646ad7b6bb5e9f685a6c69df36a0e">initTextPlay</link> ()</para>

<para>Inicjacja tekstu do instrukcji gry. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>sf::Text <link linkend="_class_game_state_1ac7e15f55db432562cc7e9eaf5bdbb34c">nameTextGame</link></para>

<para>Tekst przechowujący napis do gry. </para>
</listitem>
            <listitem><para>sf::Text <link linkend="_class_game_state_1aa806cfd5c598107d33fcfec500fe24de">nameTextPause</link></para>

<para>Tekst przechowujący napis do pauzy. </para>
</listitem>
            <listitem><para>sf::Text <link linkend="_class_game_state_1af43c63a00c31d67afbcd0f2bad674446">nameTextPlay</link></para>

<para>Tekst przechowujący napis do instrukcji gry. </para>
</listitem>
            <listitem><para>sf::Font <link linkend="_class_game_state_1a318ab0204b4a95963130dd5d42193309">nameFontGame</link></para>

<para>Czciona używana do tekstu gry. </para>
</listitem>
            <listitem><para>sf::Music <link linkend="_class_game_state_1a0462c55a3b9435b1fdb8a5c7dfc02616">musicMenu</link></para>

<para>Przechowuje muzykę graną w menu. </para>
</listitem>
            <listitem><para>sf::Music <link linkend="_class_game_state_1a215e2176b6c9c7c2cdb118902c549136">musicGame</link></para>

<para>Przechowuje muzykę graną podczas gry. </para>
</listitem>
            <listitem><para>sf::SoundBuffer <link linkend="_class_game_state_1ac6a4570001b3e0d4f2e7b83fdc0bb06c">buf</link></para>

<para>Buffor dla dzwieku klikania. </para>
</listitem>
            <listitem><para>sf::SoundBuffer <link linkend="_class_game_state_1ae9096ac3bc4dc51feccc0854d28c53d3">bufdeath</link></para>

<para>Buffor dla dzwieku smierci gracza. </para>
</listitem>
            <listitem><para>sf::Sound <link linkend="_class_game_state_1a3c02c1ddd315e5705bcae85d53d723be">clickMenu</link></para>

<para>Przechowuje dźwięk naciśnięcia przycisku. </para>
</listitem>
            <listitem><para>sf::Sound <link linkend="_class_game_state_1aaa4fb040e1ae9db46ebfcb6f9462d715">deathGame</link></para>

<para>Przechowuje dźwięk smierci gracza. </para>
</listitem>
            <listitem><para>sf::Vector2f <link linkend="_class_game_state_1a48c5d71a7721b49027ebfab4d903e4ca">mousePosition</link></para>

<para>Przechowuje pozycję kursora myszy na ekranie. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_game_state_1aa5a8fc9bd5033a7789100d68e9cfde6d">bEndState</link> = false</para>

<para>Określa, czy należy już wyjść ze stanu. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_game_state_1a68bb84c2c03eca937b61ada1e3df7d37">bEndGame</link> = false</para>

<para>Określa, czy zakonczylismy gre. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_game_state_1ab9eeaadfb41628ea3fe9c3a36c8cb523">bPaused</link> = false</para>

<para>Określa, czy stan jest zatrzymany. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_game_state_1ada39e1e7a5b23eccb09e6887958c0ba4">bnextLevel</link> = false</para>

<para>Określa, czy stan pierwszego poziomu chce przejść do drugiego poziomu. </para>
</listitem>
            <listitem><para>std::stack&lt; <link linkend="_class_game_state">GameState</link> * &gt; * <link linkend="_class_game_state_1a6e9e1aa616cd1071425f2766a76957ec">states</link></para>

<para>Stos stanów aplikacji. Zawsze używany jest najwyższy stan na stosie. </para>
</listitem>
            <listitem><para>sf::RectangleShape <link linkend="_class_game_state_1a33816d850ae3dddfc8a61183c355e9ea">virtualCursor</link></para>

<para>Kursor wirtualny, czyli hitbox służący do wykrywania obiektów pod kursorem myszy. </para>
</listitem>
            <listitem><para>int <link linkend="_class_game_state_1a831924eb7e5e953b7a3f319c999fcf2e">checkLevel</link></para>

<para>Zmienna sprawdzająca aktualny lvl. </para>
</listitem>
            <listitem><para>float <link linkend="_class_game_state_1a4f6a05c09ed85658e562d5b7bc1d3620">playerPositionX</link></para>

<para>Zmienna do której zapisywana jest pozycja x gracza dla zapisu stanu gry i wczytywania. </para>
</listitem>
            <listitem><para>float <link linkend="_class_game_state_1adcadee1d0434d9e782f7cc8ee8bc6327">playerPositionY</link></para>

<para>Zmienna do której zapisywana jest pozycja y gracza dla zapisu stanu gry i wczytywania. </para>
</listitem>
            <listitem><para>int <link linkend="_class_game_state_1a05d411d27fbfd2beb8523b461a19b2c3">playerHP</link></para>

<para>Zmienna do której zapisywana jest ilość hp gracza dla zapisu stanu gry i wczytywania. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_game_state_1ad5777ac8a3645b733fdb3d4e18a9a2d6">loadSave</link> = false</para>

<para>Zmienna określająca czy wczytaliśmy grę </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_game_state_1a00007967d00ac636381f23f3818f0db1"/><section>
    <title>GameState()</title>
<indexterm><primary>GameState</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>GameState</secondary></indexterm>
<para><computeroutput>GameState::GameState (std::stack&lt; <link linkend="_class_game_state">GameState</link> * &gt; * states)<computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Konstruktor przyjmuje odniesienie do stosu wszystkich stanów. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_game_state_1a0f46eb5be452693b0dc945a7c5cd0c9a"/><section>
    <title>endGame()</title>
<indexterm><primary>endGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>endGame</secondary></indexterm>
<para><computeroutput>void GameState::endGame ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Pozwala zakomunikować o koncu gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a5b6ccfff3ca74df5a7e67fdeb4ed5bce"/><section>
    <title>endState()</title>
<indexterm><primary>endState</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>endState</secondary></indexterm>
<para><computeroutput>void GameState::endState ( )</computeroutput></para><para>

<para>Komunikuje o chęci zakończenia stanu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ab48ca6f7e9a9645ae583f16ccccbdcf0"/><section>
    <title>getEndState()</title>
<indexterm><primary>getEndState</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>getEndState</secondary></indexterm>
<para><computeroutput>bool GameState::getEndState ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Pozwala uzyskać informację, czy należy zakończyć stan. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1abb6044767e0b7f20f49fb53adc2ef1a6"/><section>
    <title>getGoNextLevel()</title>
<indexterm><primary>getGoNextLevel</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>getGoNextLevel</secondary></indexterm>
<para><computeroutput>bool GameState::getGoNextLevel ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Pozwala przejść do drugiego poziomu gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1acb92a3053f84a4bc19ee00dd5c7ef014"/><section>
    <title>initMusicGame()</title>
<indexterm><primary>initMusicGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>initMusicGame</secondary></indexterm>
<para><computeroutput>void GameState::initMusicGame ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inicjuje muzykę podczas gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a5dac99e8c9278389352c42161f03452a"/><section>
    <title>initMusicMenu()</title>
<indexterm><primary>initMusicMenu</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>initMusicMenu</secondary></indexterm>
<para><computeroutput>void GameState::initMusicMenu ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inicjuje muzykę menu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a5473619dbf358cb4bffbf202e67208bf"/><section>
    <title>initSoundMenu()</title>
<indexterm><primary>initSoundMenu</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>initSoundMenu</secondary></indexterm>
<para><computeroutput>void GameState::initSoundMenu ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inicjuje dźwięki przycisków menu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ad67cf6bd0d59e8777b2d90272facb8bf"/><section>
    <title>initTextGame()</title>
<indexterm><primary>initTextGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>initTextGame</secondary></indexterm>
<para><computeroutput>void GameState::initTextGame ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inicjacja tekstu do gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a2b678c21bac3ccf22ea1311a77c9847e"/><section>
    <title>initTextPause()</title>
<indexterm><primary>initTextPause</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>initTextPause</secondary></indexterm>
<para><computeroutput>void GameState::initTextPause ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inicjacja tekstu do pauzy. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a4c7646ad7b6bb5e9f685a6c69df36a0e"/><section>
    <title>initTextPlay()</title>
<indexterm><primary>initTextPlay</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>initTextPlay</secondary></indexterm>
<para><computeroutput>void GameState::initTextPlay ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inicjacja tekstu do instrukcji gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a50a01d688f5ed6310257bc00d4ade0cd"/><section>
    <title>initVirtualCursor()</title>
<indexterm><primary>initVirtualCursor</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>initVirtualCursor</secondary></indexterm>
<para><computeroutput>void GameState::initVirtualCursor ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Inicjuje wirtualny kursor. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ae9b6258dccf8740eced6857468548e60"/><section>
    <title>pause()</title>
<indexterm><primary>pause</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>pause</secondary></indexterm>
<para><computeroutput>void GameState::pause ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Pozwala zakomunikować o potrzebie zatrzymania stanu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ab54d45c62b2ec2719bd48788b982b471"/><section>
    <title>render()</title>
<indexterm><primary>render</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>render</secondary></indexterm>
<para><computeroutput>virtual void GameState::render (sf::RenderTarget &amp; window)<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para><para>

<para>Funkcja zarządzająca renderowaniem grafiki stanu. </para>
</para>
<para>
Reimplemented in <link linkend="_class_level_one_state_1a2f451c45e79cda05456e9f93a62d04ce">LevelOneState</link>, <link linkend="_class_level_two_state_1a442f2cd1d36c3919177d677c62828a17">LevelTwoState</link>, and <link linkend="_class_main_menu_state_1a93a8d85415f05b01f31832b15a5f74cc">MainMenuState</link>.</para>
</section>
<anchor xml:id="_class_game_state_1a643419a178b99f865cb7af2373c3dda0"/><section>
    <title>unEndGame()</title>
<indexterm><primary>unEndGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>unEndGame</secondary></indexterm>
<para><computeroutput>void GameState::unEndGame ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Pozwala zakomunikować o zmianie stanu konca gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a4a9b6f37601bfa3bad8c760cf3fb16fc"/><section>
    <title>unpause()</title>
<indexterm><primary>unpause</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>unpause</secondary></indexterm>
<para><computeroutput>void GameState::unpause ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Pozwala zakomunikować o potrzebie wznowienia stanu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a360521bb5b371ea942a9e4e2ba1e8145"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>update</secondary></indexterm>
<para><computeroutput>virtual void GameState::update (float deltaTime)<computeroutput>[pure virtual]</computeroutput></computeroutput></para><para>

<para>Funkcja zarządzająca odświeżaniem logiki stanu. </para>
</para>
<para>
Implemented in <link linkend="_class_level_one_state_1a75b5cebe202e376c76974148252978cc">LevelOneState</link>, <link linkend="_class_level_two_state_1aca927200ca6e61366401ac3ae0247dc1">LevelTwoState</link>, and <link linkend="_class_main_menu_state_1ae905a5d55070c8a3758482df94d42bb5">MainMenuState</link>.</para>
</section>
<anchor xml:id="_class_game_state_1ada16e95cc9cdda4c4764bdf5833848ba"/><section>
    <title>updateMousePosition()</title>
<indexterm><primary>updateMousePosition</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>updateMousePosition</secondary></indexterm>
<para><computeroutput>void GameState::updateMousePosition ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Pozwala na aktualizowanie pozycji myszy na ekranie. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ab549d25215e9626d61cf1377ba03d6ad"/><section>
    <title>updateVirtualCursor()</title>
<indexterm><primary>updateVirtualCursor</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>updateVirtualCursor</secondary></indexterm>
<para><computeroutput>void GameState::updateVirtualCursor ( )<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Odświeża kursor wirtualny do pozycji kursora myszy. </para>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_game_state_1a68bb84c2c03eca937b61ada1e3df7d37"/><section>
    <title>bEndGame</title>
<indexterm><primary>bEndGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>bEndGame</secondary></indexterm>
<para><computeroutput>bool GameState::bEndGame = false<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Określa, czy zakonczylismy gre. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1aa5a8fc9bd5033a7789100d68e9cfde6d"/><section>
    <title>bEndState</title>
<indexterm><primary>bEndState</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>bEndState</secondary></indexterm>
<para><computeroutput>bool GameState::bEndState = false<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Określa, czy należy już wyjść ze stanu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ada39e1e7a5b23eccb09e6887958c0ba4"/><section>
    <title>bnextLevel</title>
<indexterm><primary>bnextLevel</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>bnextLevel</secondary></indexterm>
<para><computeroutput>bool GameState::bnextLevel = false<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Określa, czy stan pierwszego poziomu chce przejść do drugiego poziomu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ab9eeaadfb41628ea3fe9c3a36c8cb523"/><section>
    <title>bPaused</title>
<indexterm><primary>bPaused</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>bPaused</secondary></indexterm>
<para><computeroutput>bool GameState::bPaused = false<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Określa, czy stan jest zatrzymany. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ac6a4570001b3e0d4f2e7b83fdc0bb06c"/><section>
    <title>buf</title>
<indexterm><primary>buf</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>buf</secondary></indexterm>
<para><computeroutput>sf::SoundBuffer GameState::buf<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Buffor dla dzwieku klikania. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ae9096ac3bc4dc51feccc0854d28c53d3"/><section>
    <title>bufdeath</title>
<indexterm><primary>bufdeath</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>bufdeath</secondary></indexterm>
<para><computeroutput>sf::SoundBuffer GameState::bufdeath<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Buffor dla dzwieku smierci gracza. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a831924eb7e5e953b7a3f319c999fcf2e"/><section>
    <title>checkLevel</title>
<indexterm><primary>checkLevel</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>checkLevel</secondary></indexterm>
<para><computeroutput>int GameState::checkLevel<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Zmienna sprawdzająca aktualny lvl. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a3c02c1ddd315e5705bcae85d53d723be"/><section>
    <title>clickMenu</title>
<indexterm><primary>clickMenu</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>clickMenu</secondary></indexterm>
<para><computeroutput>sf::Sound GameState::clickMenu<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Przechowuje dźwięk naciśnięcia przycisku. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1aaa4fb040e1ae9db46ebfcb6f9462d715"/><section>
    <title>deathGame</title>
<indexterm><primary>deathGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>deathGame</secondary></indexterm>
<para><computeroutput>sf::Sound GameState::deathGame<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Przechowuje dźwięk smierci gracza. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ad5777ac8a3645b733fdb3d4e18a9a2d6"/><section>
    <title>loadSave</title>
<indexterm><primary>loadSave</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>loadSave</secondary></indexterm>
<para><computeroutput>bool GameState::loadSave = false<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Zmienna określająca czy wczytaliśmy grę </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a48c5d71a7721b49027ebfab4d903e4ca"/><section>
    <title>mousePosition</title>
<indexterm><primary>mousePosition</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>mousePosition</secondary></indexterm>
<para><computeroutput>sf::Vector2f GameState::mousePosition<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Przechowuje pozycję kursora myszy na ekranie. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a215e2176b6c9c7c2cdb118902c549136"/><section>
    <title>musicGame</title>
<indexterm><primary>musicGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>musicGame</secondary></indexterm>
<para><computeroutput>sf::Music GameState::musicGame<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Przechowuje muzykę graną podczas gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a0462c55a3b9435b1fdb8a5c7dfc02616"/><section>
    <title>musicMenu</title>
<indexterm><primary>musicMenu</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>musicMenu</secondary></indexterm>
<para><computeroutput>sf::Music GameState::musicMenu<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Przechowuje muzykę graną w menu. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a318ab0204b4a95963130dd5d42193309"/><section>
    <title>nameFontGame</title>
<indexterm><primary>nameFontGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>nameFontGame</secondary></indexterm>
<para><computeroutput>sf::Font GameState::nameFontGame<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Czciona używana do tekstu gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1ac7e15f55db432562cc7e9eaf5bdbb34c"/><section>
    <title>nameTextGame</title>
<indexterm><primary>nameTextGame</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>nameTextGame</secondary></indexterm>
<para><computeroutput>sf::Text GameState::nameTextGame<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Tekst przechowujący napis do gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1aa806cfd5c598107d33fcfec500fe24de"/><section>
    <title>nameTextPause</title>
<indexterm><primary>nameTextPause</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>nameTextPause</secondary></indexterm>
<para><computeroutput>sf::Text GameState::nameTextPause<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Tekst przechowujący napis do pauzy. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1af43c63a00c31d67afbcd0f2bad674446"/><section>
    <title>nameTextPlay</title>
<indexterm><primary>nameTextPlay</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>nameTextPlay</secondary></indexterm>
<para><computeroutput>sf::Text GameState::nameTextPlay<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Tekst przechowujący napis do instrukcji gry. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a05d411d27fbfd2beb8523b461a19b2c3"/><section>
    <title>playerHP</title>
<indexterm><primary>playerHP</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>playerHP</secondary></indexterm>
<para><computeroutput>int GameState::playerHP<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Zmienna do której zapisywana jest ilość hp gracza dla zapisu stanu gry i wczytywania. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a4f6a05c09ed85658e562d5b7bc1d3620"/><section>
    <title>playerPositionX</title>
<indexterm><primary>playerPositionX</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>playerPositionX</secondary></indexterm>
<para><computeroutput>float GameState::playerPositionX<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Zmienna do której zapisywana jest pozycja x gracza dla zapisu stanu gry i wczytywania. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1adcadee1d0434d9e782f7cc8ee8bc6327"/><section>
    <title>playerPositionY</title>
<indexterm><primary>playerPositionY</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>playerPositionY</secondary></indexterm>
<para><computeroutput>float GameState::playerPositionY<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Zmienna do której zapisywana jest pozycja y gracza dla zapisu stanu gry i wczytywania. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a6e9e1aa616cd1071425f2766a76957ec"/><section>
    <title>states</title>
<indexterm><primary>states</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>states</secondary></indexterm>
<para><computeroutput>std::stack&lt;<link linkend="_class_game_state">GameState</link>*&gt;* GameState::states<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Stos stanów aplikacji. Zawsze używany jest najwyższy stan na stosie. </para>
</para>
</section>
<anchor xml:id="_class_game_state_1a33816d850ae3dddfc8a61183c355e9ea"/><section>
    <title>virtualCursor</title>
<indexterm><primary>virtualCursor</primary><secondary>GameState</secondary></indexterm>
<indexterm><primary>GameState</primary><secondary>virtualCursor</secondary></indexterm>
<para><computeroutput>sf::RectangleShape GameState::virtualCursor<computeroutput>[protected]</computeroutput></computeroutput></para><para>

<para>Kursor wirtualny, czyli hitbox służący do wykrywania obiektów pod kursorem myszy. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/states/<link linkend="__game_state_8h">GameState.h</link>src/states/<link linkend="__game_state_8cpp">GameState.cpp</link></section>
</section>
