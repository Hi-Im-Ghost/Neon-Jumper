<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_encodings_8h" xml:lang="en-US">
<title>src/rapidjson/include/rapidjson/encodings.h File Reference</title>
<indexterm><primary>src/rapidjson/include/rapidjson/encodings.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;rapidjson.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_u_t_f8">UTF8&lt; CharType &gt;</link></para>

<para>UTF-8 encoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_u_t_f16">UTF16&lt; CharType &gt;</link></para>

<para>UTF-16 encoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_u_t_f16_l_e">UTF16LE&lt; CharType &gt;</link></para>

<para>UTF-16 little endian encoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_u_t_f16_b_e">UTF16BE&lt; CharType &gt;</link></para>

<para>UTF-16 big endian encoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_u_t_f32">UTF32&lt; CharType &gt;</link></para>

<para>UTF-32 encoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_u_t_f32_l_e">UTF32LE&lt; CharType &gt;</link></para>

<para>UTF-32 little endian enocoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_u_t_f32_b_e">UTF32BE&lt; CharType &gt;</link></para>

<para>UTF-32 big endian encoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_a_s_c_i_i">ASCII&lt; CharType &gt;</link></para>

<para><link linkend="_struct_a_s_c_i_i">ASCII</link> encoding. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_auto_u_t_f">AutoUTF&lt; CharType &gt;</link></para>

<para>Dynamically select encoding according to stream&apos;s runtime-specified UTF encoding type. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_transcoder">Transcoder&lt; SourceEncoding, TargetEncoding &gt;</link></para>

<para>Encoding conversion. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_transcoder_3_01_encoding_00_01_encoding_01_4">Transcoder&lt; Encoding, Encoding &gt;</link></para>

<para>Specialization of <link linkend="_struct_transcoder">Transcoder</link> with same source and target encoding. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171">RAPIDJSON_COPY</link>()   c = is.Take(); *codepoint = (*codepoint &lt;&lt; 6) | (static_cast&lt;unsigned char&gt;(c) &amp; 0x3Fu)</para>
</listitem>
            <listitem><para>#define <link linkend="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b">RAPIDJSON_TRANS</link>(mask)   result &amp;= ((GetRange(static_cast&lt;unsigned char&gt;(c)) &amp; mask) != 0)</para>
</listitem>
            <listitem><para>#define <link linkend="_encodings_8h_1aaa13dc9e0effa5edff532c344b5b35f7">RAPIDJSON_TAIL</link>()   <link linkend="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171">RAPIDJSON_COPY</link>(); <link linkend="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b">RAPIDJSON_TRANS</link>(0x70)</para>
</listitem>
            <listitem><para>#define <link linkend="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171">RAPIDJSON_COPY</link>()   os.Put(c = is.Take())</para>
</listitem>
            <listitem><para>#define <link linkend="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b">RAPIDJSON_TRANS</link>(mask)   result &amp;= ((GetRange(static_cast&lt;unsigned char&gt;(c)) &amp; mask) != 0)</para>
</listitem>
            <listitem><para>#define <link linkend="_encodings_8h_1aaa13dc9e0effa5edff532c344b5b35f7">RAPIDJSON_TAIL</link>()   <link linkend="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171">RAPIDJSON_COPY</link>(); <link linkend="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b">RAPIDJSON_TRANS</link>(0x70)</para>
</listitem>
            <listitem><para>#define <link linkend="_encodings_8h_1a6530c8834a049a0ff230b56072df6c24">RAPIDJSON_ENCODINGS_FUNC</link>(x)   <link linkend="_struct_u_t_f8">UTF8</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f16_l_e">UTF16LE</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f16_b_e">UTF16BE</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f32_l_e">UTF32LE</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f32_b_e">UTF32BE</link>&lt;Ch&gt;::x</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58">UTFType</link> { 
<link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a7fd9945f1c494a4a4ee9446017e790f1">kUTF8</link> = 0
, <link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58ab72f5865db6af4e33757ee52ddad9fda">kUTF16LE</link> = 1
, <link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a1a455c6e8be641e715de9aa8ffa6cea0">kUTF16BE</link> = 2
, <link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a885dec757d256c427be6759296d482e0">kUTF32LE</link> = 3
, 
<link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a14da8da33c9f9aa904bf0d1aac3fa76e">kUTF32BE</link> = 4
 }</para>

<para>Runtime-specified UTF encoding type of a stream. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename <link linkend="_classrapidjson_1_1_stream">Stream</link> &gt; </para><para>void <link linkend="_encodings_8h_1ad57ba7f2912c5509924b69dec7db4396">PutUnsafe</link> (<link linkend="_classrapidjson_1_1_stream">Stream</link> &amp;stream, typename Stream::Ch c)</para>

<para>Write character to a stream, presuming buffer is reserved. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171"/><section>
    <title>RAPIDJSON_COPY<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>RAPIDJSON_COPY</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>RAPIDJSON_COPY</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_COPY( )   c = is.Take(); *codepoint = (*codepoint &lt;&lt; 6) | (static_cast&lt;unsigned char&gt;(c) &amp; 0x3Fu)</computeroutput></para></section>
<anchor xml:id="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171"/><section>
    <title>RAPIDJSON_COPY<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>RAPIDJSON_COPY</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>RAPIDJSON_COPY</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_COPY( )   os.Put(c = is.Take())</computeroutput></para></section>
<anchor xml:id="_encodings_8h_1a6530c8834a049a0ff230b56072df6c24"/><section>
    <title>RAPIDJSON_ENCODINGS_FUNC</title>
<indexterm><primary>RAPIDJSON_ENCODINGS_FUNC</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>RAPIDJSON_ENCODINGS_FUNC</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_ENCODINGS_FUNC( x)   <link linkend="_struct_u_t_f8">UTF8</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f16_l_e">UTF16LE</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f16_b_e">UTF16BE</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f32_l_e">UTF32LE</link>&lt;Ch&gt;::x, <link linkend="_struct_u_t_f32_b_e">UTF32BE</link>&lt;Ch&gt;::x</computeroutput></para></section>
<anchor xml:id="_encodings_8h_1aaa13dc9e0effa5edff532c344b5b35f7"/><section>
    <title>RAPIDJSON_TAIL<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>RAPIDJSON_TAIL</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>RAPIDJSON_TAIL</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_TAIL( )   <link linkend="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171">RAPIDJSON_COPY</link>(); <link linkend="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b">RAPIDJSON_TRANS</link>(0x70)</computeroutput></para></section>
<anchor xml:id="_encodings_8h_1aaa13dc9e0effa5edff532c344b5b35f7"/><section>
    <title>RAPIDJSON_TAIL<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>RAPIDJSON_TAIL</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>RAPIDJSON_TAIL</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_TAIL( )   <link linkend="_encodings_8h_1a3c5bc66bef12c668f05bbd4df5690171">RAPIDJSON_COPY</link>(); <link linkend="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b">RAPIDJSON_TRANS</link>(0x70)</computeroutput></para></section>
<anchor xml:id="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b"/><section>
    <title>RAPIDJSON_TRANS<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>RAPIDJSON_TRANS</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>RAPIDJSON_TRANS</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_TRANS( mask)   result &amp;= ((GetRange(static_cast&lt;unsigned char&gt;(c)) &amp; mask) != 0)</computeroutput></para></section>
<anchor xml:id="_encodings_8h_1ad84116656b63c4b8d43a2264db620a4b"/><section>
    <title>RAPIDJSON_TRANS<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>RAPIDJSON_TRANS</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>RAPIDJSON_TRANS</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_TRANS( mask)   result &amp;= ((GetRange(static_cast&lt;unsigned char&gt;(c)) &amp; mask) != 0)</computeroutput></para></section>
</section>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58"/><section>
    <title>UTFType</title>
<indexterm><primary>UTFType</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>UTFType</secondary></indexterm>
<para><computeroutput>enum <link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58">UTFType</link></computeroutput></para><para>

<para>Runtime-specified UTF encoding type of a stream. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>kUTF8</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>kUTF8</secondary></indexterm>
<anchor xml:id="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a7fd9945f1c494a4a4ee9446017e790f1"/>kUTF8</entry><entry>
<para>UTF-8. </para>
</entry></row><row><entry><indexterm><primary>kUTF16LE</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>kUTF16LE</secondary></indexterm>
<anchor xml:id="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58ab72f5865db6af4e33757ee52ddad9fda"/>kUTF16LE</entry><entry>
<para>UTF-16 little endian. </para>
</entry></row><row><entry><indexterm><primary>kUTF16BE</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>kUTF16BE</secondary></indexterm>
<anchor xml:id="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a1a455c6e8be641e715de9aa8ffa6cea0"/>kUTF16BE</entry><entry>
<para>UTF-16 big endian. </para>
</entry></row><row><entry><indexterm><primary>kUTF32LE</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>kUTF32LE</secondary></indexterm>
<anchor xml:id="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a885dec757d256c427be6759296d482e0"/>kUTF32LE</entry><entry>
<para>UTF-32 little endian. </para>
</entry></row><row><entry><indexterm><primary>kUTF32BE</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>kUTF32BE</secondary></indexterm>
<anchor xml:id="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a14da8da33c9f9aa904bf0d1aac3fa76e"/>kUTF32BE</entry><entry>
<para>UTF-32 big endian. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_encodings_8h_1ad57ba7f2912c5509924b69dec7db4396"/><section>
    <title>PutUnsafe()</title>
<indexterm><primary>PutUnsafe</primary><secondary>encodings.h</secondary></indexterm>
<indexterm><primary>encodings.h</primary><secondary>PutUnsafe</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_stream">Stream</link> &gt; </computeroutput><para><computeroutput>void PutUnsafe (<link linkend="_classrapidjson_1_1_stream">Stream</link> &amp; stream, typename Stream::Ch c)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Write character to a stream, presuming buffer is reserved. </para>
</para>
</section>
</section>
</section>
