<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_encoded_stream_test" xml:lang="en-US">
<title>EncodedStreamTest Class Reference</title>
<indexterm><primary>EncodedStreamTest</primary></indexterm>
<para>Inheritance diagram for EncodedStreamTest:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_encoded_stream_test.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_encoded_stream_test_1a4fb1db529dc40d4c22c7fd7e6a7e1a9b">EncodedStreamTest</link> ()</para>
</listitem>
            <listitem><para>virtual <link linkend="_class_encoded_stream_test_1a6e1548cdd4fb0011d694d06b9622d52d">~EncodedStreamTest</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_encoded_stream_test_1a6391699c63484acc7a12e3b32634e2f7">SetUp</link> ()</para>
</listitem>
            <listitem><para>virtual void <link linkend="_class_encoded_stream_test_1a443e88ebf2abd3b18393c0e0e7c13ad0">TearDown</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename FileEncoding , typename MemoryEncoding &gt; </para><para>void <link linkend="_class_encoded_stream_test_1ad9c567df62408555b30f49bdbb606fc3">TestEncodedInputStream</link> (const char *filename)</para>
</listitem>
            <listitem><para>void <link linkend="_class_encoded_stream_test_1a981d5de5d0aefd288c4a97d9dc6590f7">TestAutoUTFInputStream</link> (const char *filename, bool expectHasBOM)</para>
</listitem>
            <listitem><para>template&lt;typename FileEncoding , typename MemoryEncoding &gt; </para><para>void <link linkend="_class_encoded_stream_test_1a43892c37663f564147577e286d60937a">TestEncodedOutputStream</link> (const char *expectedFilename, bool putBOM)</para>
</listitem>
            <listitem><para>void <link linkend="_class_encoded_stream_test_1a246bc170b7a10468b5da7eb7dfeba46c">TestAutoUTFOutputStream</link> (<link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58">UTFType</link> type, bool putBOM, const char *expectedFilename)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_encoded_stream_test_1a0d45e4d5f8a44d23903dc6a0dee7eaa5">CompareFile</link> (const char *filename, const char *expectedFilename)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_encoded_stream_test_1a1db7e5969dec8780a8e641876befc272">CompareBufferFile</link> (const char *actualBuffer, size_t actualLength, const char *expectedFilename)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>static FILE * <link linkend="_class_encoded_stream_test_1a63ccacf7cafb587e0f1537fc39b6064e">Open</link> (const char *filename)</para>
</listitem>
            <listitem><para>static char * <link linkend="_class_encoded_stream_test_1ad5dd00dbc8a9590e139b0f7727abb05a">ReadFile</link> (const char *filename, bool appendPath, size_t *outLength)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Attributes    </title>
        <itemizedlist>
            <listitem><para>char * <link linkend="_class_encoded_stream_test_1a9993d0eb182be2cbd055982f91308d92">json_</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_class_encoded_stream_test_1aef69c9f1ff714588697ac92712d75fe8">length_</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_encoded_stream_test_1a7237cafbb8ee5224a6ddb802bc31d6eb">EncodedStreamTest</link> (const <link linkend="_class_encoded_stream_test">EncodedStreamTest</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_class_encoded_stream_test">EncodedStreamTest</link> &amp; <link linkend="_class_encoded_stream_test_1a9ac8712f3d05a5b4d9e8cc37a9d16602">operator=</link> (const <link linkend="_class_encoded_stream_test">EncodedStreamTest</link> &amp;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_encoded_stream_test_1a4fb1db529dc40d4c22c7fd7e6a7e1a9b"/><section>
    <title>EncodedStreamTest()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>EncodedStreamTest</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>EncodedStreamTest</secondary></indexterm>
<para><computeroutput>EncodedStreamTest::EncodedStreamTest ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a6e1548cdd4fb0011d694d06b9622d52d"/><section>
    <title>~EncodedStreamTest()</title>
<indexterm><primary>~EncodedStreamTest</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>~EncodedStreamTest</secondary></indexterm>
<para><computeroutput>EncodedStreamTest::~EncodedStreamTest ( )<computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a7237cafbb8ee5224a6ddb802bc31d6eb"/><section>
    <title>EncodedStreamTest()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>EncodedStreamTest</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>EncodedStreamTest</secondary></indexterm>
<para><computeroutput>EncodedStreamTest::EncodedStreamTest (const <link linkend="_class_encoded_stream_test">EncodedStreamTest</link> &amp; )<computeroutput>[private]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_encoded_stream_test_1a1db7e5969dec8780a8e641876befc272"/><section>
    <title>CompareBufferFile()</title>
<indexterm><primary>CompareBufferFile</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>CompareBufferFile</secondary></indexterm>
<para><computeroutput>bool EncodedStreamTest::CompareBufferFile (const char * actualBuffer, size_t actualLength, const char * expectedFilename)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a0d45e4d5f8a44d23903dc6a0dee7eaa5"/><section>
    <title>CompareFile()</title>
<indexterm><primary>CompareFile</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>CompareFile</secondary></indexterm>
<para><computeroutput>bool EncodedStreamTest::CompareFile (const char * filename, const char * expectedFilename)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a63ccacf7cafb587e0f1537fc39b6064e"/><section>
    <title>Open()</title>
<indexterm><primary>Open</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>Open</secondary></indexterm>
<para><computeroutput>static FILE * EncodedStreamTest::Open (const char * filename)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a9ac8712f3d05a5b4d9e8cc37a9d16602"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_class_encoded_stream_test">EncodedStreamTest</link> &amp; EncodedStreamTest::operator= (const <link linkend="_class_encoded_stream_test">EncodedStreamTest</link> &amp; )<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1ad5dd00dbc8a9590e139b0f7727abb05a"/><section>
    <title>ReadFile()</title>
<indexterm><primary>ReadFile</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>ReadFile</secondary></indexterm>
<para><computeroutput>static char * EncodedStreamTest::ReadFile (const char * filename, bool appendPath, size_t * outLength)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a6391699c63484acc7a12e3b32634e2f7"/><section>
    <title>SetUp()</title>
<indexterm><primary>SetUp</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>SetUp</secondary></indexterm>
<para><computeroutput>virtual void EncodedStreamTest::SetUp ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a443e88ebf2abd3b18393c0e0e7c13ad0"/><section>
    <title>TearDown()</title>
<indexterm><primary>TearDown</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>TearDown</secondary></indexterm>
<para><computeroutput>virtual void EncodedStreamTest::TearDown ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a981d5de5d0aefd288c4a97d9dc6590f7"/><section>
    <title>TestAutoUTFInputStream()</title>
<indexterm><primary>TestAutoUTFInputStream</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>TestAutoUTFInputStream</secondary></indexterm>
<para><computeroutput>void EncodedStreamTest::TestAutoUTFInputStream (const char * filename, bool expectHasBOM)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a246bc170b7a10468b5da7eb7dfeba46c"/><section>
    <title>TestAutoUTFOutputStream()</title>
<indexterm><primary>TestAutoUTFOutputStream</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>TestAutoUTFOutputStream</secondary></indexterm>
<para><computeroutput>void EncodedStreamTest::TestAutoUTFOutputStream (<link linkend="_encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58">UTFType</link> type, bool putBOM, const char * expectedFilename)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1ad9c567df62408555b30f49bdbb606fc3"/><section>
    <title>TestEncodedInputStream()</title>
<indexterm><primary>TestEncodedInputStream</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>TestEncodedInputStream</secondary></indexterm>
<computeroutput>template&lt;typename FileEncoding , typename MemoryEncoding &gt; </computeroutput><para><computeroutput>void EncodedStreamTest::TestEncodedInputStream (const char * filename)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1a43892c37663f564147577e286d60937a"/><section>
    <title>TestEncodedOutputStream()</title>
<indexterm><primary>TestEncodedOutputStream</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>TestEncodedOutputStream</secondary></indexterm>
<computeroutput>template&lt;typename FileEncoding , typename MemoryEncoding &gt; </computeroutput><para><computeroutput>void EncodedStreamTest::TestEncodedOutputStream (const char * expectedFilename, bool putBOM)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_encoded_stream_test_1a9993d0eb182be2cbd055982f91308d92"/><section>
    <title>json_</title>
<indexterm><primary>json_</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>json_</secondary></indexterm>
<para><computeroutput>char* EncodedStreamTest::json_<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_encoded_stream_test_1aef69c9f1ff714588697ac92712d75fe8"/><section>
    <title>length_</title>
<indexterm><primary>length_</primary><secondary>EncodedStreamTest</secondary></indexterm>
<indexterm><primary>EncodedStreamTest</primary><secondary>length_</secondary></indexterm>
<para><computeroutput>size_t EncodedStreamTest::length_<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/test/unittest/<link linkend="_encodedstreamtest_8cpp">encodedstreamtest.cpp</link></section>
</section>
