<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_namespacetest_8cpp" xml:lang="en-US">
<title>src/rapidjson/test/unittest/namespacetest.cpp File Reference</title>
<indexterm><primary>src/rapidjson/test/unittest/namespacetest.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;unittest.h&quot;
#include &quot;rapidjson/document.h&quot;
#include &quot;rapidjson/writer.h&quot;
#include &quot;rapidjson/filereadstream.h&quot;
#include &quot;rapidjson/filewritestream.h&quot;
#include &quot;rapidjson/encodedstream.h&quot;
#include &quot;rapidjson/stringbuffer.h&quot;
</programlisting><simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_namespacetest_8cpp_1a743a79d3af927391fe3eb5c979136899">RAPIDJSON_NAMESPACE</link>   <link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">my::rapid::json</link></para>
</listitem>
            <listitem><para>#define <link linkend="_namespacetest_8cpp_1ad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>   namespace my { namespace rapid { namespace <link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">json</link> {</para>
</listitem>
            <listitem><para>#define <link linkend="_namespacetest_8cpp_1af18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>   } } }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_namespacetest_8cpp_1a8fe1221551117c355b83c87a13991f73">TEST</link> (NamespaceTest, Using)</para>
</listitem>
            <listitem><para><link linkend="_namespacetest_8cpp_1a6228e1447cd0572a116561d46c73ceb1">TEST</link> (NamespaceTest, Direct)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>static const char <link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">json</link> [] = &quot;{\&quot;hello\&quot;:\&quot;world\&quot;,\&quot;t\&quot;:true,\&quot;f\&quot;:false,\&quot;n\&quot;:null,\&quot;i\&quot;:123,\&quot;pi\&quot;:3.1416,\&quot;a\&quot;:[1,2,3,4]}&quot;</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_namespacetest_8cpp_1a743a79d3af927391fe3eb5c979136899"/><section>
    <title>RAPIDJSON_NAMESPACE</title>
<indexterm><primary>RAPIDJSON_NAMESPACE</primary><secondary>namespacetest.cpp</secondary></indexterm>
<indexterm><primary>namespacetest.cpp</primary><secondary>RAPIDJSON_NAMESPACE</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_NAMESPACE   <link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">my::rapid::json</link></computeroutput></para></section>
<anchor xml:id="_namespacetest_8cpp_1ad3806c8251fdc7da9618b7e922674ffc"/><section>
    <title>RAPIDJSON_NAMESPACE_BEGIN</title>
<indexterm><primary>RAPIDJSON_NAMESPACE_BEGIN</primary><secondary>namespacetest.cpp</secondary></indexterm>
<indexterm><primary>namespacetest.cpp</primary><secondary>RAPIDJSON_NAMESPACE_BEGIN</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_NAMESPACE_BEGIN   namespace my { namespace rapid { namespace <link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">json</link> {</computeroutput></para></section>
<anchor xml:id="_namespacetest_8cpp_1af18f052a98b9f5df5448d39484b743c1"/><section>
    <title>RAPIDJSON_NAMESPACE_END</title>
<indexterm><primary>RAPIDJSON_NAMESPACE_END</primary><secondary>namespacetest.cpp</secondary></indexterm>
<indexterm><primary>namespacetest.cpp</primary><secondary>RAPIDJSON_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_NAMESPACE_END   } } }</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_namespacetest_8cpp_1a6228e1447cd0572a116561d46c73ceb1"/><section>
    <title>TEST()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>namespacetest.cpp</secondary></indexterm>
<indexterm><primary>namespacetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (NamespaceTest , Direct )</computeroutput></para></section>
<anchor xml:id="_namespacetest_8cpp_1a8fe1221551117c355b83c87a13991f73"/><section>
    <title>TEST()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>namespacetest.cpp</secondary></indexterm>
<indexterm><primary>namespacetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (NamespaceTest , Using )</computeroutput></para></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee"/><section>
    <title>json</title>
<indexterm><primary>json</primary><secondary>namespacetest.cpp</secondary></indexterm>
<indexterm><primary>namespacetest.cpp</primary><secondary>json</secondary></indexterm>
<para><computeroutput>const char json[] = &quot;{\&quot;hello\&quot;:\&quot;world\&quot;,\&quot;t\&quot;:true,\&quot;f\&quot;:false,\&quot;n\&quot;:null,\&quot;i\&quot;:123,\&quot;pi\&quot;:3.1416,\&quot;a\&quot;:[1,2,3,4]}&quot;<computeroutput>[static]</computeroutput></computeroutput></para></section>
</section>
</section>
