<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classinternal_1_1_generic_regex_search" xml:lang="en-US">
<title>internal::GenericRegexSearch&lt; RegexType, Allocator &gt; Class Template Reference</title>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;regex.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef RegexType::EncodingType <link linkend="_classinternal_1_1_generic_regex_search_1a7b1f81c580c33200c83e1529c2fdbf54">Encoding</link></para>
</listitem>
            <listitem><para>typedef Encoding::Ch <link linkend="_classinternal_1_1_generic_regex_search_1a966f3a62fc838b5e9350f4c6a624d9a1">Ch</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classinternal_1_1_generic_regex_search_1a72f70e210a4bc944dba62655a008750b">GenericRegexSearch</link> (const RegexType &amp;regex, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> *allocator=0)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_generic_regex_search_1ad14ee51edf6f9bfe3b7cffa59c4c19c9">~GenericRegexSearch</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename InputStream &gt; </para><para>bool <link linkend="_classinternal_1_1_generic_regex_search_1ad204164a20e3ac403b405683b51c2d0b">Match</link> (InputStream &amp;is)</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_generic_regex_search_1a9d3fe83905549d2fd4c513b8eacd14de">Match</link> (const <link linkend="_classinternal_1_1_generic_regex_search_1a966f3a62fc838b5e9350f4c6a624d9a1">Ch</link> *s)</para>
</listitem>
            <listitem><para>template&lt;typename InputStream &gt; </para><para>bool <link linkend="_classinternal_1_1_generic_regex_search_1a766c684321471b468ff468648f186cf0">Search</link> (InputStream &amp;is)</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_generic_regex_search_1a97398161c60f3ed3e4aabaff952c6f1e">Search</link> (const <link linkend="_classinternal_1_1_generic_regex_search_1a966f3a62fc838b5e9350f4c6a624d9a1">Ch</link> *s)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Types    </title>
        <itemizedlist>
            <listitem><para>typedef RegexType::State <link linkend="_classinternal_1_1_generic_regex_search_1a0586261735313d8cf20042e50ee75c92">State</link></para>
</listitem>
            <listitem><para>typedef RegexType::Range <link linkend="_classinternal_1_1_generic_regex_search_1aaceb6517b628e447c6df61a8b7b33c7c">Range</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename InputStream &gt; </para><para>bool <link linkend="_classinternal_1_1_generic_regex_search_1a850b4f0e1cf3f7e0f6c02ae3d7da654a">SearchWithAnchoring</link> (InputStream &amp;is, bool anchorBegin, bool anchorEnd)</para>
</listitem>
            <listitem><para>size_t <link linkend="_classinternal_1_1_generic_regex_search_1a12ddb6629c0be52801d291a8e5005c06">GetStateSetSize</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_generic_regex_search_1aa16ed718784de143ec64861b2b662ea4">AddState</link> (<link linkend="_classinternal_1_1_stack">Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;l, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> index)</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_generic_regex_search_1a1a9c7b4f977805912d1c1f1866442fbe">MatchRange</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> rangeIndex, unsigned codepoint) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>const RegexType &amp; <link linkend="_classinternal_1_1_generic_regex_search_1aaec69557b0641a19b337ebd44b6d7a7b">regex_</link></para>
</listitem>
            <listitem><para><link linkend="_classrapidjson_1_1_allocator">Allocator</link> * <link linkend="_classinternal_1_1_generic_regex_search_1aa87a7caf0054f4e65446ecd91aba367c">allocator_</link></para>
</listitem>
            <listitem><para><link linkend="_classrapidjson_1_1_allocator">Allocator</link> * <link linkend="_classinternal_1_1_generic_regex_search_1a804573e03eb673a9633f638fe3e3b62f">ownAllocator_</link></para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_stack">Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; <link linkend="_classinternal_1_1_generic_regex_search_1a6b44c058a10cff21c2e3d20d32b84eba">state0_</link></para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_stack">Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; <link linkend="_classinternal_1_1_generic_regex_search_1a029a67ab36e5cb1b1394fc7a688c7cda">state1_</link></para>
</listitem>
            <listitem><para><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> * <link linkend="_classinternal_1_1_generic_regex_search_1a2f697f3edbd1e1f91d3f4535e494f4c2">stateSet_</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a966f3a62fc838b5e9350f4c6a624d9a1"/><section>
    <title>Ch</title>
<indexterm><primary>Ch</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>Ch</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef Encoding::Ch <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Ch</computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a7b1f81c580c33200c83e1529c2fdbf54"/><section>
    <title>Encoding</title>
<indexterm><primary>Encoding</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>Encoding</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef RegexType::EncodingType <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_classrapidjson_1_1_encoding">::Encoding</link></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1aaceb6517b628e447c6df61a8b7b33c7c"/><section>
    <title>Range</title>
<indexterm><primary>Range</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>Range</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef RegexType::Range <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Range<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a0586261735313d8cf20042e50ee75c92"/><section>
    <title>State</title>
<indexterm><primary>State</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>State</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef RegexType::State <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::State<computeroutput>[private]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a72f70e210a4bc944dba62655a008750b"/><section>
    <title>GenericRegexSearch()</title>
<indexterm><primary>GenericRegexSearch</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>GenericRegexSearch</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GenericRegexSearch (const RegexType &amp; regex, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> * allocator = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1ad14ee51edf6f9bfe3b7cffa59c4c19c9"/><section>
    <title>~GenericRegexSearch()</title>
<indexterm><primary>~GenericRegexSearch</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>~GenericRegexSearch</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::~<link linkend="_classinternal_1_1_generic_regex_search">GenericRegexSearch</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1aa16ed718784de143ec64861b2b662ea4"/><section>
    <title>AddState()</title>
<indexterm><primary>AddState</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>AddState</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::AddState (<link linkend="_classinternal_1_1_stack">Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; l, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> index)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a12ddb6629c0be52801d291a8e5005c06"/><section>
    <title>GetStateSetSize()</title>
<indexterm><primary>GetStateSetSize</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>GetStateSetSize</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>size_t <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GetStateSetSize ( ) const<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a9d3fe83905549d2fd4c513b8eacd14de"/><section>
    <title>Match()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Match</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>Match</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Match (const <link linkend="_classinternal_1_1_generic_regex_search_1a966f3a62fc838b5e9350f4c6a624d9a1">Ch</link> * s)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1ad204164a20e3ac403b405683b51c2d0b"/><section>
    <title>Match()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Match</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>Match</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename InputStream &gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Match (InputStream &amp; is)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a1a9c7b4f977805912d1c1f1866442fbe"/><section>
    <title>MatchRange()</title>
<indexterm><primary>MatchRange</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>MatchRange</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::MatchRange (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> rangeIndex, unsigned codepoint) const<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a97398161c60f3ed3e4aabaff952c6f1e"/><section>
    <title>Search()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Search</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>Search</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Search (const <link linkend="_classinternal_1_1_generic_regex_search_1a966f3a62fc838b5e9350f4c6a624d9a1">Ch</link> * s)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a766c684321471b468ff468648f186cf0"/><section>
    <title>Search()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Search</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>Search</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename InputStream &gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Search (InputStream &amp; is)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a850b4f0e1cf3f7e0f6c02ae3d7da654a"/><section>
    <title>SearchWithAnchoring()</title>
<indexterm><primary>SearchWithAnchoring</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>SearchWithAnchoring</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename InputStream &gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SearchWithAnchoring (InputStream &amp; is, bool anchorBegin, bool anchorEnd)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1aa87a7caf0054f4e65446ecd91aba367c"/><section>
    <title>allocator_</title>
<indexterm><primary>allocator_</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>allocator_</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_classrapidjson_1_1_allocator">Allocator</link>* <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::allocator_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a804573e03eb673a9633f638fe3e3b62f"/><section>
    <title>ownAllocator_</title>
<indexterm><primary>ownAllocator_</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>ownAllocator_</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_classrapidjson_1_1_allocator">Allocator</link>* <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ownAllocator_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1aaec69557b0641a19b337ebd44b6d7a7b"/><section>
    <title>regex_</title>
<indexterm><primary>regex_</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>regex_</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>const RegexType&amp; <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::regex_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a6b44c058a10cff21c2e3d20d32b84eba"/><section>
    <title>state0_</title>
<indexterm><primary>state0_</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>state0_</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_stack">Stack</link>&lt;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt; <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::state0_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a029a67ab36e5cb1b1394fc7a688c7cda"/><section>
    <title>state1_</title>
<indexterm><primary>state1_</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>state1_</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_stack">Stack</link>&lt;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt; <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::state1_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_generic_regex_search_1a2f697f3edbd1e1f91d3f4535e494f4c2"/><section>
    <title>stateSet_</title>
<indexterm><primary>stateSet_</primary><secondary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::GenericRegexSearch&lt; RegexType, Allocator &gt;</primary><secondary>stateSet_</secondary></indexterm>
<computeroutput>template&lt;typename RegexType , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>* <link linkend="_classinternal_1_1_generic_regex_search">internal::GenericRegexSearch</link>&lt; RegexType, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::stateSet_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/internal/<link linkend="_regex_8h">regex.h</link></section>
</section>
