<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_reader_8h_source" xml:lang="en-US">
<title>reader.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/reader.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available.</emphasis>
2 <emphasis role="comment">//</emphasis>
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015&#32;THL&#32;A29&#32;Limited,&#32;a&#32;Tencent&#32;company,&#32;and&#32;Milo&#32;Yip.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License.&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource.org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.&#32;See&#32;the&#32;License&#32;for&#32;the</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_READER_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_READER_H_</emphasis>
17 
20 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_allocators_8h">allocators.h</link>&quot;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stream_8h">stream.h</link>&quot;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_encodedstream_8h">encodedstream.h</link>&quot;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_clzll_8h">internal/clzll.h</link>&quot;</emphasis>
24 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_meta_8h">internal/meta.h</link>&quot;</emphasis>
25 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stack_8h">internal/stack.h</link>&quot;</emphasis>
26 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_strtod_8h">internal/strtod.h</link>&quot;</emphasis>
27 <emphasis role="preprocessor">#include&#32;&lt;limits&gt;</emphasis>
28 
29 <emphasis role="preprocessor">#if&#32;defined(RAPIDJSON_SIMD)&#32;&amp;&amp;&#32;defined(_MSC_VER)</emphasis>
30 <emphasis role="preprocessor">#include&#32;&lt;intrin.h&gt;</emphasis>
31 <emphasis role="preprocessor">#pragma&#32;intrinsic(_BitScanForward)</emphasis>
32 <emphasis role="preprocessor">#endif</emphasis>
33 <emphasis role="preprocessor">#ifdef&#32;RAPIDJSON_SSE42</emphasis>
34 <emphasis role="preprocessor">#include&#32;&lt;nmmintrin.h&gt;</emphasis>
35 <emphasis role="preprocessor">#elif&#32;defined(RAPIDJSON_SSE2)</emphasis>
36 <emphasis role="preprocessor">#include&#32;&lt;emmintrin.h&gt;</emphasis>
37 <emphasis role="preprocessor">#elif&#32;defined(RAPIDJSON_NEON)</emphasis>
38 <emphasis role="preprocessor">#include&#32;&lt;arm_neon.h&gt;</emphasis>
39 <emphasis role="preprocessor">#endif</emphasis>
40 
41 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
42 RAPIDJSON_DIAG_PUSH
43 RAPIDJSON_DIAG_OFF(old-style-cast)
44 RAPIDJSON_DIAG_OFF(padded)
45 RAPIDJSON_DIAG_OFF(<emphasis role="keywordflow">switch</emphasis>-<emphasis role="keyword">enum</emphasis>)
46 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
47 RAPIDJSON_DIAG_PUSH
48 RAPIDJSON_DIAG_OFF(4127)&#32;&#32;<emphasis role="comment">//&#32;conditional&#32;expression&#32;is&#32;constant</emphasis>
49 RAPIDJSON_DIAG_OFF(4702)&#32;&#32;<emphasis role="comment">//&#32;unreachable&#32;code</emphasis>
50 <emphasis role="preprocessor">#endif</emphasis>
51 
52 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
53 RAPIDJSON_DIAG_PUSH
54 RAPIDJSON_DIAG_OFF(effc++)
55 <emphasis role="preprocessor">#endif</emphasis>
56 
58 <emphasis role="preprocessor">#define&#32;RAPIDJSON_NOTHING&#32;</emphasis><emphasis role="comment">/*&#32;deliberately&#32;empty&#32;*/</emphasis><emphasis role="preprocessor"></emphasis>
59 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN</emphasis>
60 <emphasis role="preprocessor">#define&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(value)&#32;\</emphasis>
61 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_MULTILINEMACRO_BEGIN&#32;\</emphasis>
62 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;(RAPIDJSON_UNLIKELY(HasParseError()))&#32;{&#32;return&#32;value;&#32;}&#32;\</emphasis>
63 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_MULTILINEMACRO_END</emphasis>
64 <emphasis role="preprocessor">#endif</emphasis>
65 <emphasis role="preprocessor">#define&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID&#32;\</emphasis>
66 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(RAPIDJSON_NOTHING)</emphasis>
68 
99 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_PARSE_ERROR_NORETURN</emphasis>
100 <emphasis role="preprocessor">#define&#32;RAPIDJSON_PARSE_ERROR_NORETURN(parseErrorCode,&#32;offset)&#32;\</emphasis>
101 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_MULTILINEMACRO_BEGIN&#32;\</emphasis>
102 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_ASSERT(!HasParseError());&#32;</emphasis><emphasis role="comment">/*&#32;Error&#32;can&#32;only&#32;be&#32;assigned&#32;once&#32;*/</emphasis><emphasis role="preprocessor">&#32;\</emphasis>
103 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;SetParseError(parseErrorCode,&#32;offset);&#32;\</emphasis>
104 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_MULTILINEMACRO_END</emphasis>
105 <emphasis role="preprocessor">#endif</emphasis>
106 
118 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_PARSE_ERROR</emphasis>
119 <emphasis role="preprocessor">#define&#32;RAPIDJSON_PARSE_ERROR(parseErrorCode,&#32;offset)&#32;\</emphasis>
120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_MULTILINEMACRO_BEGIN&#32;\</emphasis>
121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_NORETURN(parseErrorCode,&#32;offset);&#32;\</emphasis>
122 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;&#32;\</emphasis>
123 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_MULTILINEMACRO_END</emphasis>
124 <emphasis role="preprocessor">#endif</emphasis>
125 
126 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_error_8h">error/error.h</link>&quot;</emphasis>&#32;<emphasis role="comment">//&#32;ParseErrorCode,&#32;ParseResult</emphasis>
127 
128 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
129 
131 <emphasis role="comment">//&#32;ParseFlag</emphasis>
132 
139 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_PARSE_DEFAULT_FLAGS</emphasis>
140 <emphasis role="preprocessor">#define&#32;RAPIDJSON_PARSE_DEFAULT_FLAGS&#32;kParseNoFlags</emphasis>
141 <emphasis role="preprocessor">#endif</emphasis>
142 
144 
146 <emphasis role="keyword">enum</emphasis>&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450">ParseFlag</link>&#32;{
147 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a1af603dc5f65bb815316589e782bc71a">kParseNoFlags</link>&#32;=&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
148 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01">kParseInsituFlag</link>&#32;=&#32;1,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
149 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9b3baa16346575d2dc072b23a88e1928">kParseValidateEncodingFlag</link>&#32;=&#32;2,&#32;
150 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450aadb14f5a3b6b33e28055e913a2eae5e9">kParseIterativeFlag</link>&#32;=&#32;4,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
151 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450af77d115d3bbed0a448b6b335f3b93b36">kParseStopWhenDoneFlag</link>&#32;=&#32;8,&#32;&#32;&#32;&#32;&#32;
152 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a057fbeacafb16bb7d24c9998262cae46">kParseFullPrecisionFlag</link>&#32;=&#32;16,&#32;&#32;&#32;
153 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a245d1b6af730f47f0e7bd27078f5e8c1">kParseCommentsFlag</link>&#32;=&#32;32,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
154 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450aa951ab03a51b32b60164436bc280cf01">kParseNumbersAsStringsFlag</link>&#32;=&#32;64,&#32;&#32;&#32;&#32;
155 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a953d6381de950e25c8c97ad54f52370a">kParseTrailingCommasFlag</link>&#32;=&#32;128,&#32;
156 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9849d65c1d3edd796bd75897c6a37eb6">kParseNanAndInfFlag</link>&#32;=&#32;256,&#32;&#32;&#32;&#32;&#32;&#32;
157 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a7593d429928f1a8224c5793928d4db3e">kParseEscapedApostropheFlag</link>&#32;=&#32;512,&#32;&#32;
158 &#32;&#32;&#32;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80">kParseDefaultFlags</link>&#32;=&#32;<link linkend="_reader_8h_1a77005e892e6601599beaf421b0395c31">RAPIDJSON_PARSE_DEFAULT_FLAGS</link>&#32;&#32;
159 };
160 
162 <emphasis role="comment">//&#32;Handler</emphasis>
163 
180 
191 <emphasis role="comment">//&#32;BaseReaderHandler</emphasis>
192 
194 
197 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Encoding&#32;=&#32;UTF8&lt;&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;Derived&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
198 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_base_reader_handler">BaseReaderHandler</link>&#32;{
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Encoding::Ch&#32;<link linkend="_struct_base_reader_handler_1a8302c755dd3560c8c5bac99162c28214">Ch</link>;
200 
201 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;internal::SelectIf&lt;internal::IsSame&lt;Derived,&#32;void&gt;,&#32;<link linkend="_struct_base_reader_handler">BaseReaderHandler</link>,&#32;Derived&gt;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">::Type</link>&#32;<link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>;
202 
203 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a836437f6ccc37f08ff933f009b18a78c">Default</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
204 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1ae2ebbde4628bf3659ddc5d18520935f5">Null</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
205 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1aa1c3ce42dbb856b3349792dc9d963587">Bool</link>(<emphasis role="keywordtype">bool</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
206 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a85e813aaf7189a2f87bd53953324fafc">Int</link>(<emphasis role="keywordtype">int</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
207 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a0e683306cbb7b4e350a35c18c5246f2a">Uint</link>(<emphasis role="keywordtype">unsigned</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
208 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a04011733ea584739c97ad5c6afa15a35">Int64</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
209 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a351aa3cd81856a487c21022e9cc64d2b">Uint64</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
210 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a8156ea6ae5b8cd23a8b700e92a8af1eb">Double</link>(<emphasis role="keywordtype">double</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
212 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a9ed0d83d5e6c8f5e4b32ca3735ff0bb7">RawNumber</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a8302c755dd3560c8c5bac99162c28214">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).String(str,&#32;len,&#32;copy);&#32;}
213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a3ac69e6326d0aeef7b1f2619742bbe00">String</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a8302c755dd3560c8c5bac99162c28214">Ch</link>*,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
214 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1ab0a7d9bcececb8d6ed748656f67f4917">StartObject</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
215 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1abc50b2e7e411b7b731715e05cd01e2eb">Key</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a8302c755dd3560c8c5bac99162c28214">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).String(str,&#32;len,&#32;copy);&#32;}
216 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a0406cee0af26bc3a0b7fb2414537b0ab">EndObject</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
217 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1a9dbb1143a250a904bb18a174553a3a00">StartArray</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_struct_base_reader_handler_1ae9d60a8779b6a77a7f283d64961879fb">EndArray</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_struct_base_reader_handler_1a973e47218d5a6cf51576b32c35fa50ac">Override</link>&amp;<emphasis role="keyword">&gt;</emphasis>(*this).Default();&#32;}
219 };
220 
222 <emphasis role="comment">//&#32;StreamLocalCopy</emphasis>
223 
224 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceinternal">internal</link>&#32;{
225 
226 template&lt;typename&#32;Stream,&#32;int&#32;=&#32;StreamTraits&lt;Stream&gt;::copyOptimization&gt;
227 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link>;
228 
230 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Stream&gt;
231 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link>&lt;<link linkend="_classrapidjson_1_1_stream">Stream</link>,&#32;1&gt;&#32;{
232 <emphasis role="keyword">public</emphasis>:
233 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy_3_01_stream_00_011_01_4_1aba475fed3eecc9f77ff059fdb7fe2a32">StreamLocalCopy</link>(<link linkend="_classrapidjson_1_1_stream">Stream</link>&amp;&#32;original)&#32;:&#32;s(original),&#32;original_(original)&#32;{}
234 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy_3_01_stream_00_011_01_4_1ac13d9994e6c828536fedf698f5824687">~StreamLocalCopy</link>()&#32;{&#32;original_&#32;=&#32;s;&#32;}
235 
236 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_stream">Stream</link>&#32;<link linkend="_classinternal_1_1_stream_local_copy_3_01_stream_00_011_01_4_1a1d3e8ae8756325df25715d4ffb9c1b44">s</link>;
237 
238 <emphasis role="keyword">private</emphasis>:
239 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link>&amp;)&#32;<emphasis role="comment">/*&#32;=&#32;delete&#32;*/</emphasis>;
240 
241 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_stream">Stream</link>&amp;&#32;original_;
242 };
243 
245 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Stream&gt;
246 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link>&lt;<link linkend="_classrapidjson_1_1_stream">Stream</link>,&#32;0&gt;&#32;{
247 <emphasis role="keyword">public</emphasis>:
248 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy_3_01_stream_00_010_01_4_1ac684a7be07d79d6ddd274dc1150f4b79">StreamLocalCopy</link>(<link linkend="_classrapidjson_1_1_stream">Stream</link>&amp;&#32;original)&#32;:&#32;s(original)&#32;{}
249 
250 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_stream">Stream</link>&amp;&#32;<link linkend="_classinternal_1_1_stream_local_copy_3_01_stream_00_010_01_4_1ad31147888384f4bd51eabc2d7acdc4b6">s</link>;
251 
252 <emphasis role="keyword">private</emphasis>:
253 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_stream_local_copy">StreamLocalCopy</link>&amp;)&#32;<emphasis role="comment">/*&#32;=&#32;delete&#32;*/</emphasis>;
254 };
255 
256 }&#32;<emphasis role="comment">//&#32;namespace&#32;internal</emphasis>
257 
259 <emphasis role="comment">//&#32;SkipWhitespace</emphasis>
260 
262 
265 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream&gt;
266 <emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(InputStream&amp;&#32;is)&#32;{
267 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy">internal::StreamLocalCopy&lt;InputStream&gt;</link>&#32;copy(is);
268 &#32;&#32;&#32;&#32;InputStream&amp;&#32;s(copy.s);
269 
270 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream::Ch&#32;c;
271 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;((c&#32;=&#32;s.Peek())&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.Take();
273 }
274 
275 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;end)&#32;{
276 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;end&#32;&amp;&amp;&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>))
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
278 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
279 }
280 
281 <emphasis role="preprocessor">#ifdef&#32;RAPIDJSON_SSE42</emphasis>
283 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SkipWhitespace_SIMD(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p)&#32;{
284 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fast&#32;return&#32;for&#32;single&#32;non-whitespace</emphasis>
285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
287 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
289 
290 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;16-byte&#32;align&#32;to&#32;the&#32;next&#32;boundary</emphasis>
291 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
292 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;nextAligned)
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
297 
298 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
299 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;whitespace[16]&#32;=&#32;<emphasis role="stringliteral">&quot;&#32;\n\r\t&quot;</emphasis>;
300 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespace[0]));
301 
302 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16)&#32;{
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;s&#32;=&#32;_mm_load_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;_mm_cmpistri(w,&#32;s,&#32;_SIDD_UBYTE_OPS&#32;|&#32;_SIDD_CMP_EQUAL_ANY&#32;|&#32;_SIDD_LEAST_SIGNIFICANT&#32;|&#32;_SIDD_NEGATIVE_POLARITY);
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;!=&#32;16)&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;is&#32;non-whitespace</emphasis>
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;r;
307 &#32;&#32;&#32;&#32;}
308 }
309 
310 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SkipWhitespace_SIMD(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;end)&#32;{
311 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fast&#32;return&#32;for&#32;single&#32;non-whitespace</emphasis>
312 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;!=&#32;end&#32;&amp;&amp;&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>))
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
316 
317 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;middle&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
318 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;whitespace[16]&#32;=&#32;<emphasis role="stringliteral">&quot;&#32;\n\r\t&quot;</emphasis>;
319 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespace[0]));
320 
321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;p&#32;&lt;=&#32;end&#32;-&#32;16;&#32;p&#32;+=&#32;16)&#32;{
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;s&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">int</emphasis>&#32;r&#32;=&#32;_mm_cmpistri(w,&#32;s,&#32;_SIDD_UBYTE_OPS&#32;|&#32;_SIDD_CMP_EQUAL_ANY&#32;|&#32;_SIDD_LEAST_SIGNIFICANT&#32;|&#32;_SIDD_NEGATIVE_POLARITY);
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;!=&#32;16)&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;is&#32;non-whitespace</emphasis>
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;r;
326 &#32;&#32;&#32;&#32;}
327 
328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(p,&#32;end);
329 }
330 
331 <emphasis role="preprocessor">#elif&#32;defined(RAPIDJSON_SSE2)</emphasis>
332 
334 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SkipWhitespace_SIMD(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p)&#32;{
335 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fast&#32;return&#32;for&#32;single&#32;non-whitespace</emphasis>
336 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
338 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
340 
341 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;16-byte&#32;align&#32;to&#32;the&#32;next&#32;boundary</emphasis>
342 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
343 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;nextAligned)
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
348 
349 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string</emphasis>
350 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;C16(c)&#32;{&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c&#32;}</emphasis>
351 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;whitespaces[4][16]&#32;=&#32;{&#32;C16(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>),&#32;C16(<emphasis role="charliteral">&apos;\n&apos;</emphasis>),&#32;C16(<emphasis role="charliteral">&apos;\r&apos;</emphasis>),&#32;C16(<emphasis role="charliteral">&apos;\t&apos;</emphasis>)&#32;};
352 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;C16</emphasis>
353 
354 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w0&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[0][0]));
355 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w1&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[1][0]));
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w2&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[2][0]));
357 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w3&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[3][0]));
358 
359 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16)&#32;{
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;s&#32;=&#32;_mm_load_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;x&#32;=&#32;_mm_cmpeq_epi8(s,&#32;w0);
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;_mm_or_si128(x,&#32;_mm_cmpeq_epi8(s,&#32;w1));
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;_mm_or_si128(x,&#32;_mm_cmpeq_epi8(s,&#32;w2));
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;_mm_or_si128(x,&#32;_mm_cmpeq_epi8(s,&#32;w3));
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;r&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis><emphasis role="keyword">&gt;</emphasis>(~_mm_movemask_epi8(x));
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;!=&#32;0)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;may&#32;be&#32;non-whitespace</emphasis>
367 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Find&#32;the&#32;index&#32;of&#32;first&#32;non-whitespace</emphasis>
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;offset;
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanForward(&amp;offset,&#32;r);
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;offset;
371 <emphasis role="preprocessor">#else</emphasis>
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;__builtin_ffs(r)&#32;-&#32;1;
373 <emphasis role="preprocessor">#endif</emphasis>
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
375 &#32;&#32;&#32;&#32;}
376 }
377 
378 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SkipWhitespace_SIMD(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;end)&#32;{
379 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fast&#32;return&#32;for&#32;single&#32;non-whitespace</emphasis>
380 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;!=&#32;end&#32;&amp;&amp;&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>))
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
382 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
384 
385 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string</emphasis>
386 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#define&#32;C16(c)&#32;{&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c,&#32;c&#32;}</emphasis>
387 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;whitespaces[4][16]&#32;=&#32;{&#32;C16(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>),&#32;C16(<emphasis role="charliteral">&apos;\n&apos;</emphasis>),&#32;C16(<emphasis role="charliteral">&apos;\r&apos;</emphasis>),&#32;C16(<emphasis role="charliteral">&apos;\t&apos;</emphasis>)&#32;};
388 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#undef&#32;C16</emphasis>
389 
390 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w0&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[0][0]));
391 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w1&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[1][0]));
392 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w2&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[2][0]));
393 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;w3&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;whitespaces[3][0]));
394 
395 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;p&#32;&lt;=&#32;end&#32;-&#32;16;&#32;p&#32;+=&#32;16)&#32;{
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;s&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__m128i&#32;x&#32;=&#32;_mm_cmpeq_epi8(s,&#32;w0);
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;_mm_or_si128(x,&#32;_mm_cmpeq_epi8(s,&#32;w1));
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;_mm_or_si128(x,&#32;_mm_cmpeq_epi8(s,&#32;w2));
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;_mm_or_si128(x,&#32;_mm_cmpeq_epi8(s,&#32;w3));
401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;r&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis><emphasis role="keyword">&gt;</emphasis>(~_mm_movemask_epi8(x));
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;!=&#32;0)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;may&#32;be&#32;non-whitespace</emphasis>
403 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Find&#32;the&#32;index&#32;of&#32;first&#32;non-whitespace</emphasis>
404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;offset;
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanForward(&amp;offset,&#32;r);
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;offset;
407 <emphasis role="preprocessor">#else</emphasis>
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;__builtin_ffs(r)&#32;-&#32;1;
409 <emphasis role="preprocessor">#endif</emphasis>
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
411 &#32;&#32;&#32;&#32;}
412 
413 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(p,&#32;end);
414 }
415 
416 <emphasis role="preprocessor">#elif&#32;defined(RAPIDJSON_NEON)</emphasis>
417 
419 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SkipWhitespace_SIMD(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p)&#32;{
420 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fast&#32;return&#32;for&#32;single&#32;non-whitespace</emphasis>
421 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
423 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
425 
426 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;16-byte&#32;align&#32;to&#32;the&#32;next&#32;boundary</emphasis>
427 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
428 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;nextAligned)
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>)
430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
433 
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w0&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
435 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w1&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
436 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w2&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\r&apos;</emphasis>);
437 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w3&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
438 
439 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16)&#32;{
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s&#32;=&#32;vld1q_u8(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8x16_t&#32;x&#32;=&#32;vceqq_u8(s,&#32;w0);
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;w1));
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;w2));
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;w3));
445 
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vmvnq_u8(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Negate</emphasis>
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vrev64q_u8(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rev&#32;in&#32;64</emphasis>
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;low&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;0);&#32;&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;high&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;1);&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
450 
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(low&#32;==&#32;0)&#32;{
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(high&#32;!=&#32;0)&#32;{
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(high);
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;8&#32;+&#32;(lz&#32;&gt;&gt;&#32;3);
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(low);
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;(lz&#32;&gt;&gt;&#32;3);
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
460 &#32;&#32;&#32;&#32;}
461 }
462 
463 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;*SkipWhitespace_SIMD(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;end)&#32;{
464 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Fast&#32;return&#32;for&#32;single&#32;non-whitespace</emphasis>
465 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(p&#32;!=&#32;end&#32;&amp;&amp;&#32;(*p&#32;==&#32;<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\r&apos;</emphasis>&#32;||&#32;*p&#32;==&#32;<emphasis role="charliteral">&apos;\t&apos;</emphasis>))
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++p;
467 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p;
469 
470 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w0&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;&#32;&apos;</emphasis>);
471 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w1&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\n&apos;</emphasis>);
472 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w2&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\r&apos;</emphasis>);
473 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;w3&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\t&apos;</emphasis>);
474 
475 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;p&#32;&lt;=&#32;end&#32;-&#32;16;&#32;p&#32;+=&#32;16)&#32;{
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s&#32;=&#32;vld1q_u8(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8x16_t&#32;x&#32;=&#32;vceqq_u8(s,&#32;w0);
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;w1));
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;w2));
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;w3));
481 
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vmvnq_u8(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Negate</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vrev64q_u8(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rev&#32;in&#32;64</emphasis>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;low&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;0);&#32;&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;high&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;1);&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
486 
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(low&#32;==&#32;0)&#32;{
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(high&#32;!=&#32;0)&#32;{
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(high);
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;8&#32;+&#32;(lz&#32;&gt;&gt;&#32;3);
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(low);
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;p&#32;+&#32;(lz&#32;&gt;&gt;&#32;3);
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
496 &#32;&#32;&#32;&#32;}
497 
498 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(p,&#32;end);
499 }
500 
501 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_NEON</emphasis>
502 
503 <emphasis role="preprocessor">#ifdef&#32;RAPIDJSON_SIMD</emphasis>
505 <emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(<link linkend="_struct_generic_insitu_string_stream">InsituStringStream</link>&amp;&#32;is)&#32;{
506 &#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(SkipWhitespace_SIMD(is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>));
507 }
508 
510 <emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(<link linkend="_struct_generic_string_stream">StringStream</link>&amp;&#32;is)&#32;{
511 &#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>&#32;=&#32;SkipWhitespace_SIMD(is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>);
512 }
513 
514 <emphasis role="keyword">template</emphasis>&lt;&gt;&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(<link linkend="_class_encoded_input_stream">EncodedInputStream</link>&lt;<link linkend="_struct_u_t_f8">UTF8&lt;&gt;</link>,&#32;<link linkend="_struct_memory_stream">MemoryStream</link>&gt;&amp;&#32;is)&#32;{
515 &#32;&#32;&#32;&#32;is.is_.src_&#32;=&#32;SkipWhitespace_SIMD(is.is_.src_,&#32;is.is_.end_);
516 }
517 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_SIMD</emphasis>
518 
520 <emphasis role="comment">//&#32;GenericReader</emphasis>
521 
523 
538 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SourceEncoding,&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetEncoding,&#32;<emphasis role="keyword">typename</emphasis>&#32;StackAllocator&#32;=&#32;CrtAllocator&gt;
539 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_reader">GenericReader</link>&#32;{
540 <emphasis role="keyword">public</emphasis>:
541 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SourceEncoding::Ch&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>;&#32;
542 
544 
547 &#32;&#32;&#32;&#32;<link linkend="_class_generic_reader_1aab875a34b3092df9fb4e2b8eac6dbb96">GenericReader</link>(StackAllocator*&#32;stackAllocator&#32;=&#32;0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;stackCapacity&#32;=&#32;kDefaultStackCapacity)&#32;:
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack_(stackAllocator,&#32;stackCapacity),&#32;parseResult_(),&#32;state_(IterativeParsingStartState)&#32;{}
549 
551 
558 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
559 &#32;&#32;&#32;&#32;<link linkend="_struct_parse_result">ParseResult</link>&#32;<link linkend="_class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099">Parse</link>(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450aadb14f5a3b6b33e28055e913a2eae5e9">kParseIterativeFlag</link>)
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParse&lt;parseFlags&gt;(is,&#32;handler);
562 
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parseResult_.<link linkend="_struct_parse_result_1a88b6d44f052a19e6436ae6aadc2c40b4">Clear</link>();
564 
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClearStackOnExit&#32;scope(*<emphasis role="keyword">this</emphasis>);
566 
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);
569 
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>))&#32;{
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a04b368d184e84b50580be2faa55f738a">kParseErrorDocumentEmpty</link>,&#32;is.Tell());
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseValue&lt;parseFlags&gt;(is,&#32;handler);
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);
577 
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450af77d115d3bbed0a448b6b335f3b93b36">kParseStopWhenDoneFlag</link>))&#32;{
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);
581 
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(is.Peek()&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>))&#32;{
583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a2293b39033220f4c2a568482c497dab5">kParseErrorDocumentRootNotSingular</link>,&#32;is.Tell());
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
588 
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseResult_;
590 &#32;&#32;&#32;&#32;}
591 
593 
599 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
600 &#32;&#32;&#32;&#32;<link linkend="_struct_parse_result">ParseResult</link>&#32;<link linkend="_class_generic_reader_1a76d91e5fd8dfe48aea7dd6d8a51dd6dc">Parse</link>(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Parse&lt;kParseDefaultFlags&gt;(is,&#32;handler);
602 &#32;&#32;&#32;&#32;}
603 
605 
607 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_reader_1a7de472eda2ad9de13cfd8c1de74f1754">IterativeParseInit</link>()&#32;{
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parseResult_.<link linkend="_struct_parse_result_1a88b6d44f052a19e6436ae6aadc2c40b4">Clear</link>();
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_&#32;=&#32;IterativeParsingStartState;
610 &#32;&#32;&#32;&#32;}
611 
613 
619 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
620 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_reader_1a257891331e0c259903e7066fb4cebf92">IterativeParseNext</link>(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(is.Peek()&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>))&#32;{
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
623 
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Token&#32;t&#32;=&#32;Tokenize(is.Peek());
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;n&#32;=&#32;Predict(state_,&#32;t);
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;d&#32;=&#32;Transit&lt;parseFlags&gt;(state_,&#32;t,&#32;n,&#32;is,&#32;handler);
627 
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&apos;ve&#32;finished&#32;or&#32;hit&#32;an&#32;error...</emphasis>
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(IsIterativeParsingCompleteState(d)))&#32;{
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Report&#32;errors.</emphasis>
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(d&#32;==&#32;IterativeParsingErrorState)&#32;{
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandleError(state_,&#32;is);
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
635 
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transition&#32;to&#32;the&#32;finish&#32;state.</emphasis>
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(d&#32;==&#32;IterativeParsingFinishState);
638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_&#32;=&#32;d;
639 
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;StopWhenDone&#32;is&#32;not&#32;set...</emphasis>
641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450af77d115d3bbed0a448b6b335f3b93b36">kParseStopWhenDoneFlag</link>))&#32;{
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...&#32;and&#32;extra&#32;non-whitespace&#32;data&#32;is&#32;found...</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is.Peek()&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...&#32;this&#32;is&#32;considered&#32;an&#32;error.</emphasis>
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandleError(state_,&#32;is);
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
650 
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Success!&#32;We&#32;are&#32;done!</emphasis>
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
654 
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transition&#32;to&#32;the&#32;new&#32;state.</emphasis>
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state_&#32;=&#32;d;
657 
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;parsed&#32;anything&#32;other&#32;than&#32;a&#32;delimiter,&#32;we&#32;invoked&#32;the&#32;handler,&#32;so&#32;we&#32;can&#32;return&#32;true&#32;now.</emphasis>
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsIterativeParsingDelimiterState(n))
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
662 
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;We&#32;reached&#32;the&#32;end&#32;of&#32;file.</emphasis>
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stack_.<link linkend="_classinternal_1_1_stack_1a02da31665a372738e81ded2f7b7d598e">Clear</link>();
665 
666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(state_&#32;!=&#32;IterativeParsingFinishState)&#32;{
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandleError(state_,&#32;is);
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
670 
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
672 &#32;&#32;&#32;&#32;}
673 
675 
677 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_reader_1aa1e9e1eef614fde971550ed2f955151d">IterativeParseComplete</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IsIterativeParsingCompleteState(state_);
679 &#32;&#32;&#32;&#32;}
680 
682 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_reader_1ac417441794477ea747b63adb6d3653a9">HasParseError</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseResult_.<link linkend="_struct_parse_result_1adfe0ef5b994e82f8aa9ebf0b30c924b1">IsError</link>();&#32;}
683 
685 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link>&#32;<link linkend="_class_generic_reader_1a937bf90919f50e1c370b312cee5833e8">GetParseErrorCode</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseResult_.<link linkend="_struct_parse_result_1a2aae3c2f42b31cc2409ee1e03bc4852e">Code</link>();&#32;}
686 
688 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_generic_reader_1ae9008523ccd06d839a57335835cb4091">GetErrorOffset</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseResult_.<link linkend="_struct_parse_result_1afbe762766ac21b2aae266105f1dfa643">Offset</link>();&#32;}
689 
690 <emphasis role="keyword">protected</emphasis>:
691 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_reader_1ae50079444295bf109730c3b708a818a6">SetParseError</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link>&#32;code,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;offset)&#32;{&#32;parseResult_.<link linkend="_struct_parse_result_1aa81b4a7b776b77216cb752385203a8c1">Set</link>(code,&#32;offset);&#32;}
692 
693 <emphasis role="keyword">private</emphasis>:
694 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Prohibit&#32;copy&#32;constructor&#32;&amp;&#32;assignment&#32;operator.</emphasis>
695 &#32;&#32;&#32;&#32;<link linkend="_class_generic_reader_1aab875a34b3092df9fb4e2b8eac6dbb96">GenericReader</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_reader">GenericReader</link>&amp;);
696 &#32;&#32;&#32;&#32;<link linkend="_class_generic_reader">GenericReader</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_reader">GenericReader</link>&amp;);
697 
698 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ClearStack()&#32;{&#32;stack_.<link linkend="_classinternal_1_1_stack_1a02da31665a372738e81ded2f7b7d598e">Clear</link>();&#32;}
699 
700 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;clear&#32;stack&#32;on&#32;any&#32;exit&#32;from&#32;ParseStream,&#32;e.g.&#32;due&#32;to&#32;exception</emphasis>
701 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ClearStackOnExit&#32;{
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;ClearStackOnExit(<link linkend="_class_generic_reader">GenericReader</link>&amp;&#32;r)&#32;:&#32;r_(r)&#32;{}
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~ClearStackOnExit()&#32;{&#32;r_.ClearStack();&#32;}
704 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_reader">GenericReader</link>&amp;&#32;r_;
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClearStackOnExit(<emphasis role="keyword">const</emphasis>&#32;ClearStackOnExit&amp;);
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClearStackOnExit&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;ClearStackOnExit&amp;);
708 &#32;&#32;&#32;&#32;};
709 
710 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream&gt;
711 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;SkipWhitespaceAndComments(InputStream&amp;&#32;is)&#32;{
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(is);
713 
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a245d1b6af730f47f0e7bd27078f5e8c1">kParseCommentsFlag</link>)&#32;{
715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(Consume(is,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)))&#32;{
716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(is,&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>))&#32;{
717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<emphasis role="keyword">true</emphasis>)&#32;{
718 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>))
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a2bec6b26bddd3e093a37fc0d6399e0be">kParseErrorUnspecificSyntaxError</link>,&#32;is.Tell());
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(is,&#32;<emphasis role="charliteral">&apos;*&apos;</emphasis>))&#32;{
721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(is,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>))
722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
725 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(Consume(is,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)))
729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(is.Peek()&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;&amp;&amp;&#32;is.Take()&#32;!=&#32;<emphasis role="charliteral">&apos;\n&apos;</emphasis>)&#32;{}
730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a2bec6b26bddd3e093a37fc0d6399e0be">kParseErrorUnspecificSyntaxError</link>,&#32;is.Tell());
732 
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_reader_8h_1a60338858b2582eca23f3e509a2d82e0e">SkipWhitespace</link>(is);
734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
736 &#32;&#32;&#32;&#32;}
737 
738 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;object:&#32;{&#32;string&#32;:&#32;value,&#32;...&#32;}</emphasis>
739 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
740 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseObject(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>);
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;&apos;{&apos;</emphasis>
743 
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.StartObject()))
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
746 
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
749 
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(is,&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>))&#32;{
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.EndObject(0)))&#32;&#32;<emphasis role="comment">//&#32;empty&#32;object</emphasis>
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
755 
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;memberCount&#32;=&#32;0;;)&#32;{
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(is.Peek()&#32;!=&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>))
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ae3142fbadf2c4cdfd0c7200d7b6b8ed3">kParseErrorObjectMissName</link>,&#32;is.Tell());
759 
760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseString&lt;parseFlags&gt;(is,&#32;handler,&#32;<emphasis role="keyword">true</emphasis>);
761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
762 
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
765 
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!Consume(is,&#32;<emphasis role="charliteral">&apos;:&apos;</emphasis>)))
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a55cda7eb30436986ab42a61e06caf017">kParseErrorObjectMissColon</link>,&#32;is.Tell());
768 
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
771 
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseValue&lt;parseFlags&gt;(is,&#32;handler);
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
774 
775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
777 
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++memberCount;
779 
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(is.Peek())&#32;{
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>:
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>:
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.EndObject(memberCount)))
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a34f70d7ed2fa121954f5fc5b5113d05f">kParseErrorObjectMissCommaOrCurlyBracket</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">break</emphasis>;&#32;<emphasis role="comment">//&#32;This&#32;useless&#32;break&#32;is&#32;only&#32;for&#32;making&#32;warning&#32;and&#32;coverage&#32;happy</emphasis>
793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
794 
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a953d6381de950e25c8c97ad54f52370a">kParseTrailingCommasFlag</link>)&#32;{
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;}&apos;</emphasis>)&#32;{
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.EndObject(memberCount)))
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
804 &#32;&#32;&#32;&#32;}
805 
806 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;array:&#32;[&#32;value,&#32;...&#32;]</emphasis>
807 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
808 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseArray(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>);
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;&apos;[&apos;</emphasis>
811 
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.StartArray()))
813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
814 
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
817 
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(is,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>))&#32;{
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.EndArray(0)))&#32;<emphasis role="comment">//&#32;empty&#32;array</emphasis>
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
823 
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;elementCount&#32;=&#32;0;;)&#32;{
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseValue&lt;parseFlags&gt;(is,&#32;handler);
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
827 
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++elementCount;
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
831 
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(is,&#32;<emphasis role="charliteral">&apos;,&apos;</emphasis>))&#32;{
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(is,&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>))&#32;{
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.EndArray(elementCount)))
838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7abfdd2bd90134fec4fe6a22762d16a5f5">kParseErrorArrayMissCommaOrSquareBracket</link>,&#32;is.Tell());
843 
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a953d6381de950e25c8c97ad54f52370a">kParseTrailingCommasFlag</link>)&#32;{
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;]&apos;</emphasis>)&#32;{
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.EndArray(elementCount)))
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
853 &#32;&#32;&#32;&#32;}
854 
855 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
856 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseNull(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>);
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
859 
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(Consume(is,&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(is,&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(is,&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>)))&#32;{
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.Null()))
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;is.Tell());
866 &#32;&#32;&#32;&#32;}
867 
868 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
869 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseTrue(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;t&apos;</emphasis>);
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
872 
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(Consume(is,&#32;<emphasis role="charliteral">&apos;r&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(is,&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(is,&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>)))&#32;{
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.Bool(<emphasis role="keyword">true</emphasis>)))
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;is.Tell());
879 &#32;&#32;&#32;&#32;}
880 
881 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
882 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseFalse(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(is.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>);
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
885 
886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(Consume(is,&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(is,&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(is,&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(is,&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>)))&#32;{
887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!handler.Bool(<emphasis role="keyword">false</emphasis>)))
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;is.Tell());
892 &#32;&#32;&#32;&#32;}
893 
894 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream&gt;
895 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Consume(InputStream&amp;&#32;is,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream::Ch&#32;expect)&#32;{
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(is.Peek()&#32;==&#32;expect))&#32;{
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
902 &#32;&#32;&#32;&#32;}
903 
904 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Helper&#32;function&#32;to&#32;parse&#32;four&#32;hexadecimal&#32;digits&#32;in&#32;\uXXXX&#32;in&#32;ParseString().</emphasis>
905 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream&gt;
906 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;ParseHex4(InputStream&amp;&#32;is,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;escapeOffset)&#32;{
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;codepoint&#32;=&#32;0;
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;4;&#32;i++)&#32;{
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;c&#32;=&#32;is.Peek();
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;&lt;&lt;=&#32;4;
911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;+=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(c);
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;-=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>)
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;-=&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;-&#32;10;
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>)
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;-=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;-&#32;10;
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7afc65ea941a0a26812f0f258d2429e5d2">kParseErrorStringUnicodeEscapeInvalidHex</link>,&#32;escapeOffset);
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(0);
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;codepoint;
925 &#32;&#32;&#32;&#32;}
926 
927 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;CharType&gt;
928 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>StackStream&#32;{
929 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;CharType&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>;
931 
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StackStream(<link linkend="_classinternal_1_1_stack">internal::Stack&lt;StackAllocator&gt;</link>&amp;&#32;stack)&#32;:&#32;stack_(stack),&#32;length_(0)&#32;{}
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;Put(<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;c)&#32;{
934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stack_.template&#32;Push&lt;Ch&gt;()&#32;=&#32;c;
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++length_;
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
937 
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>*&#32;Push(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;{
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length_&#32;+=&#32;count;
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stack_.template&#32;Push&lt;Ch&gt;(count);
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
942 
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Length()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;length_;&#32;}
944 
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>*&#32;Pop()&#32;{
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stack_.template&#32;Pop&lt;Ch&gt;(length_);
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
948 
949 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StackStream(<emphasis role="keyword">const</emphasis>&#32;StackStream&amp;);
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StackStream&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;StackStream&amp;);
952 
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stack">internal::Stack&lt;StackAllocator&gt;</link>&amp;&#32;stack_;
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length_;
955 &#32;&#32;&#32;&#32;};
956 
957 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;string&#32;and&#32;generate&#32;String&#32;event.&#32;Different&#32;code&#32;paths&#32;for&#32;kParseInsituFlag.</emphasis>
958 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
959 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseString(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isKey&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy">internal::StreamLocalCopy&lt;InputStream&gt;</link>&#32;copy(is);
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InputStream&amp;&#32;s(copy.s);
962 
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(s.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>);
964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.Take();&#32;&#32;<emphasis role="comment">//&#32;Skip&#32;&apos;\&quot;&apos;</emphasis>
965 
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;success&#32;=&#32;<emphasis role="keyword">false</emphasis>;
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01">kParseInsituFlag</link>)&#32;{
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream::Ch&#32;*head&#32;=&#32;s.PutBegin();
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseStringToStream&lt;parseFlags,&#32;SourceEncoding,&#32;SourceEncoding&gt;(s,&#32;s);
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;s.PutEnd(head)&#32;-&#32;1;
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(length&#32;&lt;=&#32;0xFFFFFFFF);
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetEncoding::Ch*&#32;<emphasis role="keyword">const</emphasis>&#32;str&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;TargetEncoding::Ch*<emphasis role="keyword">&gt;</emphasis>(head);
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;(isKey&#32;?&#32;handler.Key(str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(length),&#32;<emphasis role="keyword">false</emphasis>)&#32;:&#32;handler.String(str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(length),&#32;<emphasis role="keyword">false</emphasis>));
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StackStream&lt;typename&#32;TargetEncoding::Ch&gt;&#32;stackStream(stack_);
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseStringToStream&lt;parseFlags,&#32;SourceEncoding,&#32;TargetEncoding&gt;(s,&#32;stackStream);
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(stackStream.Length())&#32;-&#32;1;
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetEncoding::Ch*&#32;<emphasis role="keyword">const</emphasis>&#32;str&#32;=&#32;stackStream.Pop();
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;success&#32;=&#32;(isKey&#32;?&#32;handler.Key(str,&#32;length,&#32;<emphasis role="keyword">true</emphasis>)&#32;:&#32;handler.String(str,&#32;length,&#32;<emphasis role="keyword">true</emphasis>));
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!success))
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;s.Tell());
986 &#32;&#32;&#32;&#32;}
987 
988 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;string&#32;to&#32;an&#32;output&#32;is</emphasis>
989 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;function&#32;handles&#32;the&#32;prefix/suffix&#32;double&#32;quotes,&#32;escaping,&#32;and&#32;optional&#32;encoding&#32;validation.</emphasis>
990 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;SEncoding,&#32;<emphasis role="keyword">typename</emphasis>&#32;TEncoding,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;OutputStream&gt;
991 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseStringToStream(InputStream&amp;&#32;is,&#32;OutputStream&amp;&#32;os)&#32;{
993 <emphasis role="preprocessor">#define&#32;Z16&#32;0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</emphasis>
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;escape[256]&#32;=&#32;{
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;0,&#32;0,<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>,
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;0,&#32;0,&#32;0,
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,<emphasis role="charliteral">&apos;\b&apos;</emphasis>,&#32;0,&#32;0,&#32;0,<emphasis role="charliteral">&apos;\f&apos;</emphasis>,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,<emphasis role="charliteral">&apos;\n&apos;</emphasis>,&#32;0,
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;0,&#32;0,<emphasis role="charliteral">&apos;\r&apos;</emphasis>,&#32;0,<emphasis role="charliteral">&apos;\t&apos;</emphasis>,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,&#32;0,
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>,&#32;<link linkend="_writer_8h_1ae2c492a0a464591893d4255ea26d5e3a">Z16</link>
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1001 <emphasis role="preprocessor">#undef&#32;Z16</emphasis>
1003 
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;and&#32;copy&#32;string&#32;before&#32;&quot;\\\&quot;&quot;&#32;or&#32;&lt;&#32;0x20.&#32;This&#32;is&#32;an&#32;optional&#32;optimzation.</emphasis>
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9b3baa16346575d2dc072b23a88e1928">kParseValidateEncodingFlag</link>))
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ScanCopyUnescapedString(is,&#32;os);
1008 
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;c&#32;=&#32;is.Peek();
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(c&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>))&#32;{&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Escape</emphasis>
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;escapeOffset&#32;=&#32;is.Tell();&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;invalid&#32;escaping,&#32;report&#32;the&#32;initial&#32;&apos;\\&apos;&#32;as&#32;error&#32;offset</emphasis>
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;e&#32;=&#32;is.Peek();
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>)&#32;==&#32;1&#32;||&#32;<emphasis role="keywordtype">unsigned</emphasis>(e)&#32;&lt;&#32;256)&#32;&amp;&amp;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(escape[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(e)]))&#32;{
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
1016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;TEncoding::Ch<emphasis role="keyword">&gt;</emphasis>(escape[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(e)]));
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a7593d429928f1a8224c5793928d4db3e">kParseEscapedApostropheFlag</link>)&#32;&amp;&amp;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(e&#32;==&#32;<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>))&#32;{&#32;<emphasis role="comment">//&#32;Allow&#32;escaped&#32;apostrophe</emphasis>
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;\&apos;&apos;</emphasis>);
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(e&#32;==&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>))&#32;{&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Unicode</emphasis>
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;codepoint&#32;=&#32;ParseHex4(is,&#32;escapeOffset);
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(codepoint&#32;&gt;=&#32;0xD800&#32;&amp;&amp;&#32;codepoint&#32;&lt;=&#32;0xDFFF))&#32;{
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;high&#32;surrogate,&#32;check&#32;if&#32;followed&#32;by&#32;valid&#32;low&#32;surrogate</emphasis>
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(codepoint&#32;&lt;=&#32;0xDBFF))&#32;{
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;UTF-16&#32;surrogate&#32;pair</emphasis>
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!Consume(is,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;||&#32;!Consume(is,&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>)))
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ad9fced6763a06435ca448626c74e5c72">kParseErrorStringUnicodeSurrogateInvalid</link>,&#32;escapeOffset);
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;codepoint2&#32;=&#32;ParseHex4(is,&#32;escapeOffset);
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN_VOID;
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(codepoint2&#32;&lt;&#32;0xDC00&#32;||&#32;codepoint2&#32;&gt;&#32;0xDFFF))
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ad9fced6763a06435ca448626c74e5c72">kParseErrorStringUnicodeSurrogateInvalid</link>,&#32;escapeOffset);
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;codepoint&#32;=&#32;(((codepoint&#32;-&#32;0xD800)&#32;&lt;&lt;&#32;10)&#32;|&#32;(codepoint2&#32;-&#32;0xDC00))&#32;+&#32;0x10000;
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;single&#32;low&#32;surrogate</emphasis>
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ad9fced6763a06435ca448626c74e5c72">kParseErrorStringUnicodeSurrogateInvalid</link>,&#32;escapeOffset);
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TEncoding::Encode(os,&#32;codepoint);
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a98bb3f3b1e12fdb7f278b9fa4029306f">kParseErrorStringEscapeInvalid</link>,&#32;escapeOffset);
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(c&#32;==&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>))&#32;{&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Closing&#32;double&#32;quote</emphasis>
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;\0&apos;</emphasis>);&#32;&#32;&#32;<emphasis role="comment">//&#32;null-terminate&#32;the&#32;string</emphasis>
1052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(c)&#32;&lt;&#32;0x20))&#32;{&#32;<emphasis role="comment">//&#32;RFC&#32;4627:&#32;unescaped&#32;=&#32;%x20-21&#32;/&#32;%x23-5B&#32;/&#32;%x5D-10FFFF</emphasis>
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6369e5b4e4922720cbc45c5941efc4af">kParseErrorStringMissQuotationMark</link>,&#32;is.Tell());
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a17ecb2ed1524b513d64a93f4a7a8b456">kParseErrorStringInvalidEncoding</link>,&#32;is.Tell());
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;offset&#32;=&#32;is.Tell();
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>((parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9b3baa16346575d2dc072b23a88e1928">kParseValidateEncodingFlag</link>&#32;?
1063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_struct_transcoder">Transcoder&lt;SEncoding, TEncoding&gt;::Validate</link>(is,&#32;os)&#32;:
1064 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;!<link linkend="_struct_transcoder">Transcoder&lt;SEncoding, TEncoding&gt;::Transcode</link>(is,&#32;os))))
1065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a17ecb2ed1524b513d64a93f4a7a8b456">kParseErrorStringInvalidEncoding</link>,&#32;offset);
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1068 &#32;&#32;&#32;&#32;}
1069 
1070 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;OutputStream&gt;
1071 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;ScanCopyUnescapedString(InputStream&amp;,&#32;OutputStream&amp;)&#32;{
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;nothing&#32;for&#32;generic&#32;version</emphasis>
1073 &#32;&#32;&#32;&#32;}
1074 
1075 <emphasis role="preprocessor">#if&#32;defined(RAPIDJSON_SSE2)&#32;||&#32;defined(RAPIDJSON_SSE42)</emphasis>
1076 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;StringStream&#32;-&gt;&#32;StackStream&lt;char&gt;</emphasis>
1077 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;ScanCopyUnescapedString(<link linkend="_struct_generic_string_stream">StringStream</link>&amp;&#32;is,&#32;StackStream&lt;char&gt;&amp;&#32;os)&#32;{
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>;
1079 
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;one&#32;by&#32;one&#32;until&#32;alignment&#32;(unaligned&#32;load&#32;may&#32;cross&#32;page&#32;boundary&#32;and&#32;cause&#32;crash)</emphasis>
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;nextAligned)
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(*p)&#32;&lt;&#32;0x20))&#32;{
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>&#32;=&#32;p;
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(*p++);
1089 
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;dquote[16]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>&#32;};
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;bslash[16]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;};
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;space[16]&#32;&#32;=&#32;{&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F&#32;};
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;dq&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;dquote[0]));
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;bs&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;bslash[0]));
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;sp&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;space[0]));
1097 
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16)&#32;{
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;s&#32;=&#32;_mm_load_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t1&#32;=&#32;_mm_cmpeq_epi8(s,&#32;dq);
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t2&#32;=&#32;_mm_cmpeq_epi8(s,&#32;bs);
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t3&#32;=&#32;_mm_cmpeq_epi8(_mm_max_epu8(s,&#32;sp),&#32;sp);&#32;<emphasis role="comment">//&#32;s&#32;&lt;&#32;0x20&#32;&lt;=&gt;&#32;max(s,&#32;0x1F)&#32;==&#32;0x1F</emphasis>
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;x&#32;=&#32;_mm_or_si128(_mm_or_si128(t1,&#32;t2),&#32;t3);
1104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;r&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis><emphasis role="keyword">&gt;</emphasis>(_mm_movemask_epi8(x));
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(r&#32;!=&#32;0))&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;is&#32;escaped</emphasis>
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length;
1107 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#ifdef&#32;_MSC_VER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Find&#32;the&#32;index&#32;of&#32;first&#32;escaped</emphasis>
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;offset;
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanForward(&amp;offset,&#32;r);
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;offset;
1111 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#else</emphasis>
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(__builtin_ffs(r)&#32;-&#32;1);
1113 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;#endif</emphasis>
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;!=&#32;0)&#32;{
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;q&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(os.Push(length));
1116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;length;&#32;i++)
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q[i]&#32;=&#32;p[i];
1118 
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;length;
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_storeu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(os.Push(16)),&#32;s);
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1125 
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>&#32;=&#32;p;
1127 &#32;&#32;&#32;&#32;}
1128 
1129 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;InsituStringStream&#32;-&gt;&#32;InsituStringStream</emphasis>
1130 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;ScanCopyUnescapedString(<link linkend="_struct_generic_insitu_string_stream">InsituStringStream</link>&amp;&#32;is,&#32;<link linkend="_struct_generic_insitu_string_stream">InsituStringStream</link>&amp;&#32;os)&#32;{
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(&amp;is&#32;==&#32;&amp;os);
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)os;
1133 
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;==&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>)&#32;{
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipUnescapedString(is);
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1138 
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>;
1140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*q&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>;
1141 
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;one&#32;by&#32;one&#32;until&#32;alignment&#32;(unaligned&#32;load&#32;may&#32;cross&#32;page&#32;boundary&#32;and&#32;cause&#32;crash)</emphasis>
1143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
1144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;nextAligned)
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(*p)&#32;&lt;&#32;0x20))&#32;{
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;p;
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;q;
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*q++&#32;=&#32;*p++;
1152 
1153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
1154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;dquote[16]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>&#32;};
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;bslash[16]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;};
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;space[16]&#32;=&#32;{&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F&#32;};
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;dq&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;dquote[0]));
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;bs&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;bslash[0]));
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;sp&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;space[0]));
1160 
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16,&#32;q&#32;+=&#32;16)&#32;{
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;s&#32;=&#32;_mm_load_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
1163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t1&#32;=&#32;_mm_cmpeq_epi8(s,&#32;dq);
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t2&#32;=&#32;_mm_cmpeq_epi8(s,&#32;bs);
1165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t3&#32;=&#32;_mm_cmpeq_epi8(_mm_max_epu8(s,&#32;sp),&#32;sp);&#32;<emphasis role="comment">//&#32;s&#32;&lt;&#32;0x20&#32;&lt;=&gt;&#32;max(s,&#32;0x1F)&#32;==&#32;0x1F</emphasis>
1166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;x&#32;=&#32;_mm_or_si128(_mm_or_si128(t1,&#32;t2),&#32;t3);
1167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;r&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis><emphasis role="keyword">&gt;</emphasis>(_mm_movemask_epi8(x));
1168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(r&#32;!=&#32;0))&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;is&#32;escaped</emphasis>
1169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length;
1170 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Find&#32;the&#32;index&#32;of&#32;first&#32;escaped</emphasis>
1171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;offset;
1172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanForward(&amp;offset,&#32;r);
1173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;offset;
1174 <emphasis role="preprocessor">#else</emphasis>
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(__builtin_ffs(r)&#32;-&#32;1);
1176 <emphasis role="preprocessor">#endif</emphasis>
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pend&#32;=&#32;p&#32;+&#32;length;&#32;p&#32;!=&#32;pend;&#32;)
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*q++&#32;=&#32;*p++;
1179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_mm_storeu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(q),&#32;s);
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1183 
1184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;p;
1185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;q;
1186 &#32;&#32;&#32;&#32;}
1187 
1188 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;read/write&#32;pointers&#32;are&#32;the&#32;same&#32;for&#32;insitu&#32;stream,&#32;just&#32;skip&#32;unescaped&#32;characters</emphasis>
1189 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;SkipUnescapedString(<link linkend="_struct_generic_insitu_string_stream">InsituStringStream</link>&amp;&#32;is)&#32;{
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;==&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>);
1191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>;
1192 
1193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;one&#32;by&#32;one&#32;until&#32;alignment&#32;(unaligned&#32;load&#32;may&#32;cross&#32;page&#32;boundary&#32;and&#32;cause&#32;crash)</emphasis>
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;p&#32;!=&#32;nextAligned;&#32;p++)
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(*p)&#32;&lt;&#32;0x20))&#32;{
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;p;
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1200 
1201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
1202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;dquote[16]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>&#32;};
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;bslash[16]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>&#32;};
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;space[16]&#32;=&#32;{&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F,&#32;0x1F&#32;};
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;dq&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;dquote[0]));
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;bs&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;bslash[0]));
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;sp&#32;=&#32;_mm_loadu_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;space[0]));
1208 
1209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16)&#32;{
1210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;s&#32;=&#32;_mm_load_si128(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis>__m128i&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t1&#32;=&#32;_mm_cmpeq_epi8(s,&#32;dq);
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t2&#32;=&#32;_mm_cmpeq_epi8(s,&#32;bs);
1213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;t3&#32;=&#32;_mm_cmpeq_epi8(_mm_max_epu8(s,&#32;sp),&#32;sp);&#32;<emphasis role="comment">//&#32;s&#32;&lt;&#32;0x20&#32;&lt;=&gt;&#32;max(s,&#32;0x1F)&#32;==&#32;0x1F</emphasis>
1214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;__m128i&#32;x&#32;=&#32;_mm_or_si128(_mm_or_si128(t1,&#32;t2),&#32;t3);
1215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis>&#32;r&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">short</emphasis><emphasis role="keyword">&gt;</emphasis>(_mm_movemask_epi8(x));
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(r&#32;!=&#32;0))&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;is&#32;escaped</emphasis>
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length;
1218 <emphasis role="preprocessor">#ifdef&#32;_MSC_VER&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;</emphasis><emphasis role="comment">//&#32;Find&#32;the&#32;index&#32;of&#32;first&#32;escaped</emphasis>
1219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;offset;
1220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;_BitScanForward(&amp;offset,&#32;r);
1221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;offset;
1222 <emphasis role="preprocessor">#else</emphasis>
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(__builtin_ffs(r)&#32;-&#32;1);
1224 <emphasis role="preprocessor">#endif</emphasis>
1225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;length;
1226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1229 
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;p;
1231 &#32;&#32;&#32;&#32;}
1232 <emphasis role="preprocessor">#elif&#32;defined(RAPIDJSON_NEON)</emphasis>
1233 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;StringStream&#32;-&gt;&#32;StackStream&lt;char&gt;</emphasis>
1234 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;ScanCopyUnescapedString(<link linkend="_struct_generic_string_stream">StringStream</link>&amp;&#32;is,&#32;StackStream&lt;char&gt;&amp;&#32;os)&#32;{
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>;
1236 
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;one&#32;by&#32;one&#32;until&#32;alignment&#32;(unaligned&#32;load&#32;may&#32;cross&#32;page&#32;boundary&#32;and&#32;cause&#32;crash)</emphasis>
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;nextAligned)
1240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(*p)&#32;&lt;&#32;0x20))&#32;{
1241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>&#32;=&#32;p;
1242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1243 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(*p++);
1246 
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s0&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s1&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s2&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\b&apos;</emphasis>);
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s3&#32;=&#32;vmovq_n_u8(32);
1252 
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16)&#32;{
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s&#32;=&#32;vld1q_u8(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
1255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8x16_t&#32;x&#32;=&#32;vceqq_u8(s,&#32;s0);
1256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;s1));
1257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;s2));
1258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vcltq_u8(s,&#32;s3));
1259 
1260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vrev64q_u8(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rev&#32;in&#32;64</emphasis>
1261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;low&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;0);&#32;&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
1262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;high&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;1);&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
1263 
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length&#32;=&#32;0;
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;escaped&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(low&#32;==&#32;0)&#32;{
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(high&#32;!=&#32;0)&#32;{
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(high);
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;8&#32;+&#32;(lz&#32;&gt;&gt;&#32;3);
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;escaped&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(low);
1274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;lz&#32;&gt;&gt;&#32;3;
1275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;escaped&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(escaped))&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;is&#32;escaped</emphasis>
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;!=&#32;0)&#32;{
1279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;q&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(os.Push(length));
1280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;length;&#32;i++)
1281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;q[i]&#32;=&#32;p[i];
1282 
1283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;length;
1284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vst1q_u8(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(os.Push(16)),&#32;s);
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1289 
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_string_stream_1aeda813798e3f2d6bfdac86afc11b6b80">src_</link>&#32;=&#32;p;
1291 &#32;&#32;&#32;&#32;}
1292 
1293 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;InsituStringStream&#32;-&gt;&#32;InsituStringStream</emphasis>
1294 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;ScanCopyUnescapedString(<link linkend="_struct_generic_insitu_string_stream">InsituStringStream</link>&amp;&#32;is,&#32;<link linkend="_struct_generic_insitu_string_stream">InsituStringStream</link>&amp;&#32;os)&#32;{
1295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(&amp;is&#32;==&#32;&amp;os);
1296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)os;
1297 
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;==&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>)&#32;{
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipUnescapedString(is);
1300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1302 
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>;
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*q&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>;
1305 
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;one&#32;by&#32;one&#32;until&#32;alignment&#32;(unaligned&#32;load&#32;may&#32;cross&#32;page&#32;boundary&#32;and&#32;cause&#32;crash)</emphasis>
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(p&#32;!=&#32;nextAligned)
1309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(*p)&#32;&lt;&#32;0x20))&#32;{
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;p;
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;q;
1312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*q++&#32;=&#32;*p++;
1316 
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
1318 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s0&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s1&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s2&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\b&apos;</emphasis>);
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s3&#32;=&#32;vmovq_n_u8(32);
1322 
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16,&#32;q&#32;+=&#32;16)&#32;{
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s&#32;=&#32;vld1q_u8(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
1325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8x16_t&#32;x&#32;=&#32;vceqq_u8(s,&#32;s0);
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;s1));
1327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;s2));
1328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vcltq_u8(s,&#32;s3));
1329 
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vrev64q_u8(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rev&#32;in&#32;64</emphasis>
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;low&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;0);&#32;&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
1332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;high&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;1);&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
1333 
1334 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length&#32;=&#32;0;
1335 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;escaped&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(low&#32;==&#32;0)&#32;{
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(high&#32;!=&#32;0)&#32;{
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(high);
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;8&#32;+&#32;(lz&#32;&gt;&gt;&#32;3);
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;escaped&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(low);
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;=&#32;lz&#32;&gt;&gt;&#32;3;
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;escaped&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1346 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(escaped))&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;some&#32;of&#32;characters&#32;is&#32;escaped</emphasis>
1348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;pend&#32;=&#32;p&#32;+&#32;length;&#32;p&#32;!=&#32;pend;&#32;)&#32;{
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*q++&#32;=&#32;*p++;
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;vst1q_u8(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(q),&#32;s);
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1355 
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;p;
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;q;
1358 &#32;&#32;&#32;&#32;}
1359 
1360 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;read/write&#32;pointers&#32;are&#32;the&#32;same&#32;for&#32;insitu&#32;stream,&#32;just&#32;skip&#32;unescaped&#32;characters</emphasis>
1361 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;SkipUnescapedString(<link linkend="_struct_generic_insitu_string_stream">InsituStringStream</link>&amp;&#32;is)&#32;{
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;==&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>);
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;p&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>;
1364 
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;one&#32;by&#32;one&#32;until&#32;alignment&#32;(unaligned&#32;load&#32;may&#32;cross&#32;page&#32;boundary&#32;and&#32;cause&#32;crash)</emphasis>
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;nextAligned&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(p)&#32;+&#32;15)&#32;&amp;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(~15));
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;p&#32;!=&#32;nextAligned;&#32;p++)
1368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\&quot;&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(*p&#32;==&#32;<emphasis role="charliteral">&apos;\\&apos;</emphasis>)&#32;||&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(*p)&#32;&lt;&#32;0x20))&#32;{
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;p;
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1372 
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;rest&#32;of&#32;string&#32;using&#32;SIMD</emphasis>
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s0&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>);
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s1&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\\&apos;</emphasis>);
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s2&#32;=&#32;vmovq_n_u8(<emphasis role="charliteral">&apos;\b&apos;</emphasis>);
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s3&#32;=&#32;vmovq_n_u8(32);
1378 
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;&#32;p&#32;+=&#32;16)&#32;{
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;uint8x16_t&#32;s&#32;=&#32;vld1q_u8(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(p));
1381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint8x16_t&#32;x&#32;=&#32;vceqq_u8(s,&#32;s0);
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;s1));
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vceqq_u8(s,&#32;s2));
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vorrq_u8(x,&#32;vcltq_u8(s,&#32;s3));
1385 
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;=&#32;vrev64q_u8(x);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Rev&#32;in&#32;64</emphasis>
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;low&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;0);&#32;&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;high&#32;=&#32;vgetq_lane_u64(vreinterpretq_u64_u8(x),&#32;1);&#32;&#32;<emphasis role="comment">//&#32;extract</emphasis>
1389 
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(low&#32;==&#32;0)&#32;{
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(high&#32;!=&#32;0)&#32;{
1392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(high);
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;8&#32;+&#32;(lz&#32;&gt;&gt;&#32;3);
1394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;lz&#32;=&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">internal::clzll</link>(low);
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;lz&#32;&gt;&gt;&#32;3;
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1401 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1402 
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.<link linkend="_struct_generic_insitu_string_stream_1af3cc551dd07fcca39db84459f4d4e718">src_</link>&#32;=&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ab0e7a73638a7a8db81aa9b26714b0e3b">dst_</link>&#32;=&#32;p;
1404 &#32;&#32;&#32;&#32;}
1405 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_NEON</emphasis>
1406 
1407 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;StackCharacter,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;backup,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;pushOnTake&gt;
1408 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NumberStream;
1409 
1410 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;StackCharacter&gt;
1411 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NumberStream&lt;InputStream,&#32;StackCharacter,&#32;false,&#32;false&gt;&#32;{
1412 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream::Ch&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>;
1414 
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumberStream(<link linkend="_class_generic_reader">GenericReader</link>&amp;&#32;reader,&#32;InputStream&amp;&#32;s)&#32;:&#32;is(s)&#32;{&#32;(void)reader;&#32;&#32;}
1416 
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;Peek()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is.<link linkend="_struct_generic_insitu_string_stream_1ae21ba3ff4595ccd5caa4a9858e793f3f">Peek</link>();&#32;}
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;TakePush()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is.<link linkend="_struct_generic_insitu_string_stream_1afde4e46663225e4c32cfdbcd261f321e">Take</link>();&#32;}
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;Take()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is.<link linkend="_struct_generic_insitu_string_stream_1afde4e46663225e4c32cfdbcd261f321e">Take</link>();&#32;}
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;Push(<emphasis role="keywordtype">char</emphasis>)&#32;{}
1421 
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Tell()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;is.<link linkend="_struct_generic_insitu_string_stream_1aa9a84abb24e8c93b683a2e7bfea309db">Tell</link>();&#32;}
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Length()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;StackCharacter*&#32;Pop()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
1425 
1426 &#32;&#32;&#32;&#32;<emphasis role="keyword">protected</emphasis>:
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumberStream&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;NumberStream&amp;);
1428 
1429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;InputStream&amp;&#32;is;
1430 &#32;&#32;&#32;&#32;};
1431 
1432 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;StackCharacter&gt;
1433 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NumberStream&lt;InputStream,&#32;StackCharacter,&#32;true,&#32;false&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;NumberStream&lt;InputStream,&#32;StackCharacter,&#32;false,&#32;false&gt;&#32;{
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;NumberStream&lt;InputStream,&#32;StackCharacter,&#32;false,&#32;false&gt;&#32;Base;
1435 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumberStream(<link linkend="_class_generic_reader">GenericReader</link>&amp;&#32;reader,&#32;InputStream&amp;&#32;is)&#32;:&#32;Base(reader,&#32;is),&#32;stackStream(reader.stack_)&#32;{}
1437 
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;TakePush()&#32;{
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stackStream.Put(<emphasis role="keyword">static_cast&lt;</emphasis>StackCharacter<emphasis role="keyword">&gt;</emphasis>(Base::is.Peek()));
1440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Base::is.Take();
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1442 
1443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;Push(StackCharacter&#32;c)&#32;{
1444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stackStream.Put(c);
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1446 
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Length()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;stackStream.Length();&#32;}
1448 
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;StackCharacter*&#32;Pop()&#32;{
1450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stackStream.Put(<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
1451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;stackStream.Pop();
1452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1453 
1454 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StackStream&lt;StackCharacter&gt;&#32;stackStream;
1456 &#32;&#32;&#32;&#32;};
1457 
1458 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;StackCharacter&gt;
1459 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>NumberStream&lt;InputStream,&#32;StackCharacter,&#32;true,&#32;true&gt;&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;NumberStream&lt;InputStream,&#32;StackCharacter,&#32;true,&#32;false&gt;&#32;{
1460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;NumberStream&lt;InputStream,&#32;StackCharacter,&#32;true,&#32;false&gt;&#32;Base;
1461 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumberStream(<link linkend="_class_generic_reader">GenericReader</link>&amp;&#32;reader,&#32;InputStream&amp;&#32;is)&#32;:&#32;Base(reader,&#32;is)&#32;{}
1463 
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;Take()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;Base::TakePush();&#32;}
1465 &#32;&#32;&#32;&#32;};
1466 
1467 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
1468 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseNumber(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
1469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;internal::SelectIf&lt;internal::BoolType&lt;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450aa951ab03a51b32b60164436bc280cf01">kParseNumbersAsStringsFlag</link>)&#32;!=&#32;0&gt;,&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetEncoding::Ch,&#32;<emphasis role="keywordtype">char</emphasis>&gt;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">::Type</link>&#32;NumberCharacter;
1470 
1471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stream_local_copy">internal::StreamLocalCopy&lt;InputStream&gt;</link>&#32;copy(is);
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumberStream&lt;InputStream,&#32;NumberCharacter,
1473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450aa951ab03a51b32b60164436bc280cf01">kParseNumbersAsStringsFlag</link>)&#32;!=&#32;0)&#32;?
1474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01">kParseInsituFlag</link>)&#32;==&#32;0)&#32;:
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a057fbeacafb16bb7d24c9998262cae46">kParseFullPrecisionFlag</link>)&#32;!=&#32;0),
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450aa951ab03a51b32b60164436bc280cf01">kParseNumbersAsStringsFlag</link>)&#32;!=&#32;0&#32;&amp;&amp;
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01">kParseInsituFlag</link>)&#32;==&#32;0&gt;&#32;s(*<emphasis role="keyword">this</emphasis>,&#32;copy.s);
1478 
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;startOffset&#32;=&#32;s.Tell();
1480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d&#32;=&#32;0.0;
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useNanOrInf&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1482 
1483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;minus</emphasis>
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;minus&#32;=&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>);
1485 
1486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;int:&#32;zero&#32;/&#32;(&#32;digit1-9&#32;*DIGIT&#32;)</emphasis>
1487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;i&#32;=&#32;0;
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;i64&#32;=&#32;0;
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;use64bit&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;significandDigit&#32;=&#32;0;
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(s.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>))&#32;{
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;0;
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.TakePush();
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1497 
1498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minus)
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(i&#32;&gt;=&#32;214748364))&#32;{&#32;<emphasis role="comment">//&#32;2^31&#32;=&#32;2147483648</emphasis>
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(i&#32;!=&#32;214748364&#32;||&#32;s.Peek()&#32;&gt;&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>))&#32;{
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i64&#32;=&#32;i;
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;use64bit&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;i&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;significandDigit++;
1509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(i&#32;&gt;=&#32;429496729))&#32;{&#32;<emphasis role="comment">//&#32;2^32&#32;-&#32;1&#32;=&#32;4294967295</emphasis>
1513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(i&#32;!=&#32;429496729&#32;||&#32;s.Peek()&#32;&gt;&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>))&#32;{
1514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i64&#32;=&#32;i;
1515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;use64bit&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;=&#32;i&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;significandDigit++;
1521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;NaN&#32;or&#32;Infinity&#32;here</emphasis>
1524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;((parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9849d65c1d3edd796bd75897c6a37eb6">kParseNanAndInfFlag</link>)&#32;&amp;&amp;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>((s.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>&#32;||&#32;s.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>)))&#32;{
1525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(s,&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>))&#32;{
1526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(s,&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;N&apos;</emphasis>))&#32;{
1527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;std::numeric_limits&lt;double&gt;::quiet_NaN();
1528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useNanOrInf&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(Consume(s,&#32;<emphasis role="charliteral">&apos;I&apos;</emphasis>)))&#32;{
1532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(s,&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>))&#32;{
1533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;(minus&#32;?&#32;-std::numeric_limits&lt;double&gt;::infinity()&#32;:&#32;std::numeric_limits&lt;double&gt;::infinity());
1534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useNanOrInf&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1535 
1536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(s.Peek()&#32;==&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>&#32;&amp;&amp;&#32;!(Consume(s,&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>)
1537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;&amp;&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;t&apos;</emphasis>)&#32;&amp;&amp;&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;y&apos;</emphasis>))))&#32;{
1538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;s.Tell());
1539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1542 
1543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!useNanOrInf))&#32;{
1544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;s.Tell());
1545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;s.Tell());
1549 
1550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;64bit&#32;int</emphasis>
1551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;useDouble&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use64bit)&#32;{
1553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minus)
1554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(i64&#32;&gt;=&#32;<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0x0CCCCCCC,&#32;0xCCCCCCCC)))&#32;<emphasis role="comment">//&#32;2^63&#32;=&#32;9223372036854775808</emphasis>
1556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(i64&#32;!=&#32;<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0x0CCCCCCC,&#32;0xCCCCCCCC)&#32;||&#32;s.Peek()&#32;&gt;&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>))&#32;{
1557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i64);
1558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useDouble&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i64&#32;=&#32;i64&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;significandDigit++;
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(i64&#32;&gt;=&#32;<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0x19999999,&#32;0x99999999)))&#32;<emphasis role="comment">//&#32;2^64&#32;-&#32;1&#32;=&#32;18446744073709551615</emphasis>
1567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(i64&#32;!=&#32;<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0x19999999,&#32;0x99999999)&#32;||&#32;s.Peek()&#32;&gt;&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>))&#32;{
1568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i64);
1569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useDouble&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i64&#32;=&#32;i64&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;significandDigit++;
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1576 
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Force&#32;double&#32;for&#32;big&#32;integer</emphasis>
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(useDouble)&#32;{
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;d&#32;*&#32;10&#32;+&#32;(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1583 
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;frac&#32;=&#32;decimal-point&#32;1*DIGIT</emphasis>
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;expFrac&#32;=&#32;0;
1586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;decimalPosition;
1587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(s,&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>))&#32;{
1588 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decimalPosition&#32;=&#32;s.Length();
1589 
1590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)))
1591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a08a2cc2b4cacfba1673ed536eee229ce">kParseErrorNumberMissFraction</link>,&#32;s.Tell());
1592 
1593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!useDouble)&#32;{
1594 <emphasis role="preprocessor">#if&#32;RAPIDJSON_64BIT</emphasis>
1595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;i64&#32;to&#32;store&#32;significand&#32;in&#32;64-bit&#32;architecture</emphasis>
1596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!use64bit)
1597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i64&#32;=&#32;i;
1598 
1599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i64&#32;&gt;&#32;<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0x1FFFFF,&#32;0xFFFFFFFF))&#32;<emphasis role="comment">//&#32;2^53&#32;-&#32;1&#32;for&#32;fast&#32;path</emphasis>
1601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i64&#32;=&#32;i64&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--expFrac;
1605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i64&#32;!=&#32;0)
1606 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;significandDigit++;
1607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1609 
1610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i64);
1611 <emphasis role="preprocessor">#else</emphasis>
1612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;double&#32;to&#32;store&#32;significand&#32;in&#32;32-bit&#32;architecture</emphasis>
1613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(use64bit&#32;?&#32;i64&#32;:&#32;i);
1614 <emphasis role="preprocessor">#endif</emphasis>
1615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useDouble&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1617 
1618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(significandDigit&#32;&lt;&#32;17)&#32;{
1620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;d&#32;*&#32;10.0&#32;+&#32;(s.TakePush()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--expFrac;
1622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(d&#32;&gt;&#32;0.0))
1623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;significandDigit++;
1624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.TakePush();
1627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;decimalPosition&#32;=&#32;s.Length();&#32;<emphasis role="comment">//&#32;decimal&#32;position&#32;at&#32;the&#32;end&#32;of&#32;integer.</emphasis>
1631 
1632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;exp&#32;=&#32;e&#32;[&#32;minus&#32;/&#32;plus&#32;]&#32;1*DIGIT</emphasis>
1633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;exp&#32;=&#32;0;
1634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(s,&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>)&#32;||&#32;Consume(s,&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>))&#32;{
1635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!useDouble)&#32;{
1636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(use64bit&#32;?&#32;i64&#32;:&#32;i);
1637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;useDouble&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1638 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1639 
1640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;expMinus&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1641 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(s,&#32;<emphasis role="charliteral">&apos;+&apos;</emphasis>))
1642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
1643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(Consume(s,&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>))
1644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;expMinus&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1645 
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(s.Take()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expMinus)&#32;{
1649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;(exp&#32;+&#32;expFrac)&#32;must&#32;not&#32;underflow&#32;int&#32;=&gt;&#32;we&apos;re&#32;detecting&#32;when&#32;-exp&#32;gets</emphasis>
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;dangerously&#32;close&#32;to&#32;INT_MIN&#32;(a&#32;pessimistic&#32;next&#32;digit&#32;9&#32;would&#32;push&#32;it&#32;into</emphasis>
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;underflow&#32;territory):</emphasis>
1652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//</emphasis>
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;-(exp&#32;*&#32;10&#32;+&#32;9)&#32;+&#32;expFrac&#32;&gt;=&#32;INT_MIN</emphasis>
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&lt;=&gt;&#32;&#32;exp&#32;&lt;=&#32;(expFrac&#32;-&#32;INT_MIN&#32;-&#32;9)&#32;/&#32;10</emphasis>
1655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(expFrac&#32;&lt;=&#32;0);
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxExp&#32;=&#32;(expFrac&#32;+&#32;2147483639)&#32;/&#32;10;
1657 
1658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exp&#32;=&#32;exp&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(s.Take()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(exp&#32;&gt;&#32;maxExp))&#32;{
1661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;&#32;<emphasis role="comment">//&#32;Consume&#32;the&#32;rest&#32;of&#32;exponent</emphasis>
1662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.Take();
1663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;&#32;<emphasis role="comment">//&#32;positive&#32;exp</emphasis>
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;maxExp&#32;=&#32;308&#32;-&#32;expFrac;
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(s.Peek()&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;s.Peek()&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>))&#32;{
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exp&#32;=&#32;exp&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">int</emphasis><emphasis role="keyword">&gt;</emphasis>(s.Take()&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(exp&#32;&gt;&#32;maxExp))
1671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ae52aaa70fde46e4cc422420309700b82">kParseErrorNumberTooBig</link>,&#32;startOffset);
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a82cdbd740e22b819a70d05e585c2a442">kParseErrorNumberMissExponent</link>,&#32;s.Tell());
1677 
1678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(expMinus)
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exp&#32;=&#32;-exp;
1680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1681 
1682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Finish&#32;parsing,&#32;call&#32;event&#32;according&#32;to&#32;the&#32;type&#32;of&#32;number.</emphasis>
1683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;cont&#32;=&#32;<emphasis role="keyword">true</emphasis>;
1684 
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450aa951ab03a51b32b60164436bc280cf01">kParseNumbersAsStringsFlag</link>)&#32;{
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01">kParseInsituFlag</link>)&#32;{
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;s.Pop();&#32;&#32;<emphasis role="comment">//&#32;Pop&#32;stack&#32;no&#32;matter&#32;if&#32;it&#32;will&#32;be&#32;used&#32;or&#32;not.</emphasis>
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream::Ch*&#32;head&#32;=&#32;is.PutBegin();
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;s.Tell()&#32;-&#32;startOffset;
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(length&#32;&lt;=&#32;0xFFFFFFFF);
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;unable&#32;to&#32;insert&#32;the&#32;\0&#32;character&#32;here,&#32;it&#32;will&#32;erase&#32;the&#32;comma&#32;after&#32;this&#32;number</emphasis>
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetEncoding::Ch*&#32;<emphasis role="keyword">const</emphasis>&#32;str&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>typename&#32;TargetEncoding::Ch*<emphasis role="keyword">&gt;</emphasis>(head);
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.RawNumber(str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(length),&#32;<emphasis role="keyword">false</emphasis>);
1694 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;numCharsToCopy&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(s.Length());
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_generic_string_stream">GenericStringStream&lt;UTF8&lt;NumberCharacter&gt;</link>&#32;&gt;&#32;srcStream(s.Pop());
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StackStream&lt;typename&#32;TargetEncoding::Ch&gt;&#32;dstStream(stack_);
1699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(numCharsToCopy--)&#32;{
1700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_transcoder">Transcoder&lt;UTF8&lt;typename TargetEncoding::Ch&gt;</link>,&#32;TargetEncoding&gt;::Transcode(srcStream,&#32;dstStream);
1701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;dstStream.Put(<emphasis role="charliteral">&apos;\0&apos;</emphasis>);
1703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;TargetEncoding::Ch*&#32;str&#32;=&#32;dstStream.Pop();
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(dstStream.Length())&#32;-&#32;1;
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.RawNumber(str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(length),&#32;<emphasis role="keyword">true</emphasis>);
1706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;s.Length();
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;NumberCharacter*&#32;decimal&#32;=&#32;s.Pop();&#32;&#32;<emphasis role="comment">//&#32;Pop&#32;stack&#32;no&#32;matter&#32;if&#32;it&#32;will&#32;be&#32;used&#32;or&#32;not.</emphasis>
1711 
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(useDouble)&#32;{
1713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;p&#32;=&#32;exp&#32;+&#32;expFrac;
1714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a057fbeacafb16bb7d24c9998262cae46">kParseFullPrecisionFlag</link>)
1715 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;<link linkend="_namespaceinternal_1a6109c750ee4707d4f71de280816a1a00">internal::StrtodFullPrecision</link>(d,&#32;p,&#32;decimal,&#32;length,&#32;decimalPosition,&#32;exp);
1716 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1717 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;=&#32;<link linkend="_namespaceinternal_1a9e5fac4695310f09892fe52b1d24ab19">internal::StrtodNormalPrecision</link>(d,&#32;p);
1718 
1719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;&gt;&#32;max,&#32;instead&#32;of&#32;==&#32;inf,&#32;to&#32;fix&#32;bogus&#32;warning&#32;-Wfloat-equal</emphasis>
1720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(d&#32;&gt;&#32;(std::numeric_limits&lt;double&gt;::max)())&#32;{
1721 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Overflow</emphasis>
1722 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;internal::StrtodX&#32;should&#32;report&#32;overflow&#32;(or&#32;underflow)</emphasis>
1723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ae52aaa70fde46e4cc422420309700b82">kParseErrorNumberTooBig</link>,&#32;startOffset);
1724 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1725 
1726 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.Double(minus&#32;?&#32;-d&#32;:&#32;d);
1727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1728 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(useNanOrInf)&#32;{
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.Double(d);
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(use64bit)&#32;{
1733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minus)
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.Int64(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(~i64&#32;+&#32;1));
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.Uint64(i64);
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minus)
1740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.Int(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0">int32_t</link><emphasis role="keyword">&gt;</emphasis>(~i&#32;+&#32;1));
1741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cont&#32;=&#32;handler.Uint(i);
1743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(!cont))
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;startOffset);
1748 &#32;&#32;&#32;&#32;}
1749 
1750 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Parse&#32;any&#32;JSON&#32;value</emphasis>
1751 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
1752 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;ParseValue(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
1753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(is.Peek())&#32;{
1754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>:&#32;ParseNull&#32;&#32;&lt;parseFlags&gt;(is,&#32;handler);&#32;<emphasis role="keywordflow">break</emphasis>;
1755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;t&apos;</emphasis>:&#32;ParseTrue&#32;&#32;&lt;parseFlags&gt;(is,&#32;handler);&#32;<emphasis role="keywordflow">break</emphasis>;
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>:&#32;ParseFalse&#32;&lt;parseFlags&gt;(is,&#32;handler);&#32;<emphasis role="keywordflow">break</emphasis>;
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;&quot;&apos;</emphasis>:&#32;ParseString&lt;parseFlags&gt;(is,&#32;handler);&#32;<emphasis role="keywordflow">break</emphasis>;
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;{&apos;</emphasis>:&#32;ParseObject&lt;parseFlags&gt;(is,&#32;handler);&#32;<emphasis role="keywordflow">break</emphasis>;
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<emphasis role="charliteral">&apos;[&apos;</emphasis>:&#32;ParseArray&#32;&lt;parseFlags&gt;(is,&#32;handler);&#32;<emphasis role="keywordflow">break</emphasis>;
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;default&#32;:
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseNumber&lt;parseFlags&gt;(is,&#32;handler);
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1763 
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1765 &#32;&#32;&#32;&#32;}
1766 
1767 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Iterative&#32;Parsing</emphasis>
1768 
1769 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;States</emphasis>
1770 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;IterativeParsingState&#32;{
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingFinishState&#32;=&#32;0,&#32;<emphasis role="comment">//&#32;sink&#32;states&#32;at&#32;top</emphasis>
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;sink&#32;states&#32;at&#32;top</emphasis>
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingStartState,
1774 
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Object&#32;states</emphasis>
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectInitialState,
1777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberKeyState,
1778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberValueState,
1779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectFinishState,
1780 
1781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Array&#32;states</emphasis>
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayInitialState,
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayFinishState,
1785 
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Single&#32;value&#32;state</emphasis>
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingValueState,
1788 
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Delimiter&#32;states&#32;(at&#32;bottom)</emphasis>
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementDelimiterState,
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberDelimiterState,
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingKeyValueDelimiterState,
1793 
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;cIterativeParsingStateCount
1795 &#32;&#32;&#32;&#32;};
1796 
1797 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Tokens</emphasis>
1798 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;Token&#32;{
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LeftBracketToken&#32;=&#32;0,
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RightBracketToken,
1801 
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;LeftCurlyBracketToken,
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RightCurlyBracketToken,
1804 
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CommaToken,
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ColonToken,
1807 
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringToken,
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;FalseToken,
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;TrueToken,
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NullToken,
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;NumberToken,
1813 
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kTokenCount
1815 &#32;&#32;&#32;&#32;};
1816 
1817 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;Token&#32;Tokenize(<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>&#32;c)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1818 
1820 <emphasis role="preprocessor">#define&#32;N&#32;NumberToken</emphasis>
1821 <emphasis role="preprocessor">#define&#32;N16&#32;N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N</emphasis>
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Maps&#32;from&#32;ASCII&#32;to&#32;Token</emphasis>
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;tokenMap[256]&#32;=&#32;{
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N16,&#32;<emphasis role="comment">//&#32;00~0F</emphasis>
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N16,&#32;<emphasis role="comment">//&#32;10~1F</emphasis>
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N,&#32;N,&#32;StringToken,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;CommaToken,&#32;N,&#32;N,&#32;N,&#32;<emphasis role="comment">//&#32;20~2F</emphasis>
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;ColonToken,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;<emphasis role="comment">//&#32;30~3F</emphasis>
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N16,&#32;<emphasis role="comment">//&#32;40~4F</emphasis>
1829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;LeftBracketToken,&#32;N,&#32;RightBracketToken,&#32;N,&#32;N,&#32;<emphasis role="comment">//&#32;50~5F</emphasis>
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;FalseToken,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;NullToken,&#32;N,&#32;<emphasis role="comment">//&#32;60~6F</emphasis>
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N,&#32;N,&#32;N,&#32;N,&#32;TrueToken,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;N,&#32;LeftCurlyBracketToken,&#32;N,&#32;RightCurlyBracketToken,&#32;N,&#32;N,&#32;<emphasis role="comment">//&#32;70~7F</emphasis>
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;N16,&#32;N16,&#32;N16,&#32;N16,&#32;N16,&#32;N16,&#32;N16,&#32;N16&#32;<emphasis role="comment">//&#32;80~FF</emphasis>
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
1834 <emphasis role="preprocessor">#undef&#32;N</emphasis>
1835 <emphasis role="preprocessor">#undef&#32;N16</emphasis>
1837 
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_reader_1ab39a92bb26d50aee6469df604622218a">Ch</link>)&#32;==&#32;1&#32;||&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(c)&#32;&lt;&#32;256)
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Token<emphasis role="keyword">&gt;</emphasis>(tokenMap[<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(c)]);
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NumberToken;
1842 &#32;&#32;&#32;&#32;}
1843 
1844 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;IterativeParsingState&#32;Predict(IterativeParsingState&#32;state,&#32;Token&#32;token)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;current&#32;state&#32;x&#32;one&#32;lookahead&#32;token&#32;-&gt;&#32;new&#32;state</emphasis>
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;G[cIterativeParsingStateCount][kTokenCount]&#32;=&#32;{
1847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Finish(sink&#32;state)</emphasis>
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error(sink&#32;state)</emphasis>
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Start</emphasis>
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayInitialState,&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket</emphasis>
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectInitialState,&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket</emphasis>
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingValueState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectInitial</emphasis>
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket</emphasis>
1876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket</emphasis>
1878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectFinishState,&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1880 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1881 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberKeyState,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MemberKey</emphasis>
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket</emphasis>
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket</emphasis>
1892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingKeyValueDelimiterState,&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MemberValue</emphasis>
1902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket</emphasis>
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket</emphasis>
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectFinishState,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberDelimiterState,&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ObjectFinish(sink&#32;state)</emphasis>
1916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ArrayInitial</emphasis>
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayInitialState,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket(push&#32;Element&#32;state)</emphasis>
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayFinishState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1925 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectInitialState,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket(push&#32;Element&#32;state)</emphasis>
1926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1934 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Element</emphasis>
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket</emphasis>
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayFinishState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket</emphasis>
1940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementDelimiterState,&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ArrayFinish(sink&#32;state)</emphasis>
1950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState
1954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1955 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Single&#32;Value&#32;(sink&#32;state)</emphasis>
1956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,&#32;IterativeParsingErrorState,
1959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState
1960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;ElementDelimiter</emphasis>
1962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayInitialState,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket(push&#32;Element&#32;state)</emphasis>
1964 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayFinishState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectInitialState,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket(push&#32;Element&#32;state)</emphasis>
1966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingElementState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;MemberDelimiter</emphasis>
1976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket</emphasis>
1978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket</emphasis>
1980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectFinishState,&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberKeyState,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
1986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
1987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
1988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
1989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;KeyValueDelimiter</emphasis>
1990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingArrayInitialState,&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;bracket(push&#32;MemberValue&#32;state)</emphasis>
1992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;bracket</emphasis>
1993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingObjectInitialState,&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Left&#32;curly&#32;bracket(push&#32;MemberValue&#32;state)</emphasis>
1994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Right&#32;curly&#32;bracket</emphasis>
1995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Comma</emphasis>
1996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingErrorState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Colon</emphasis>
1997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
1998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;False</emphasis>
1999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;True</emphasis>
2000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberValueState,&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Null</emphasis>
2001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingMemberValueState&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
2002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;},
2003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};&#32;<emphasis role="comment">//&#32;End&#32;of&#32;G</emphasis>
2004 
2005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis>IterativeParsingState<emphasis role="keyword">&gt;</emphasis>(G[state][token]);
2006 &#32;&#32;&#32;&#32;}
2007 
2008 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Make&#32;an&#32;advance&#32;in&#32;the&#32;token&#32;stream&#32;and&#32;state&#32;based&#32;on&#32;the&#32;candidate&#32;destination&#32;state&#32;which&#32;was&#32;returned&#32;by&#32;Transit().</emphasis>
2009 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;May&#32;return&#32;a&#32;new&#32;state&#32;on&#32;state&#32;pop.</emphasis>
2010 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
2011 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;IterativeParsingState&#32;Transit(IterativeParsingState&#32;src,&#32;Token&#32;token,&#32;IterativeParsingState&#32;dst,&#32;InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)token;
2013 
2014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(dst)&#32;{
2015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingErrorState:
2016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dst;
2017 
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingObjectInitialState:
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingArrayInitialState:
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Push&#32;the&#32;state(Element&#32;or&#32;MemeberValue)&#32;if&#32;we&#32;are&#32;nested&#32;in&#32;another&#32;array&#32;or&#32;value&#32;of&#32;member.</emphasis>
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;In&#32;this&#32;way&#32;we&#32;can&#32;get&#32;the&#32;correct&#32;state&#32;on&#32;ObjectFinish&#32;or&#32;ArrayFinish&#32;by&#32;frame&#32;pop.</emphasis>
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;n&#32;=&#32;src;
2024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(src&#32;==&#32;IterativeParsingArrayInitialState&#32;||&#32;src&#32;==&#32;IterativeParsingElementDelimiterState)
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;IterativeParsingElementState;
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(src&#32;==&#32;IterativeParsingKeyValueDelimiterState)
2027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;IterativeParsingMemberValueState;
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Push&#32;current&#32;state.</emphasis>
2029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stack_.template&#32;Push&lt;SizeType&gt;(1)&#32;=&#32;n;
2030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Initialize&#32;and&#32;push&#32;the&#32;member/element&#32;count.</emphasis>
2031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stack_.template&#32;Push&lt;SizeType&gt;(1)&#32;=&#32;0;
2032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;handler</emphasis>
2033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hr&#32;=&#32;(dst&#32;==&#32;IterativeParsingObjectInitialState)&#32;?&#32;handler.StartObject()&#32;:&#32;handler.StartArray();
2034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;On&#32;handler&#32;short&#32;circuits&#32;the&#32;parsing.</emphasis>
2035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hr)&#32;{
2036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
2037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dst;
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2044 
2045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingMemberKeyState:
2046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseString&lt;parseFlags&gt;(is,&#32;handler,&#32;<emphasis role="keyword">true</emphasis>);
2047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_reader_1ac417441794477ea747b63adb6d3653a9">HasParseError</link>())
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dst;
2051 
2052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingKeyValueDelimiterState:
2053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(token&#32;==&#32;ColonToken);
2054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dst;
2056 
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingMemberValueState:
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;be&#32;non-compound&#32;value.&#32;Or&#32;it&#32;would&#32;be&#32;ObjectInitial&#32;or&#32;ArrayInitial&#32;state.</emphasis>
2059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseValue&lt;parseFlags&gt;(is,&#32;handler);
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_reader_1ac417441794477ea747b63adb6d3653a9">HasParseError</link>())&#32;{
2061 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2063 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dst;
2064 
2065 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingElementState:
2066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;be&#32;non-compound&#32;value.&#32;Or&#32;it&#32;would&#32;be&#32;ObjectInitial&#32;or&#32;ArrayInitial&#32;state.</emphasis>
2067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseValue&lt;parseFlags&gt;(is,&#32;handler);
2068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_reader_1ac417441794477ea747b63adb6d3653a9">HasParseError</link>())&#32;{
2069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dst;
2072 
2073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingMemberDelimiterState:
2074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingElementDelimiterState:
2075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Update&#32;member/element&#32;count.</emphasis>
2077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stack_.template&#32;Top&lt;SizeType&gt;()&#32;=&#32;*stack_.template&#32;Top&lt;SizeType&gt;()&#32;+&#32;1;
2078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;dst;
2079 
2080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingObjectFinishState:
2081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transit&#32;from&#32;delimiter&#32;is&#32;only&#32;allowed&#32;when&#32;trailing&#32;commas&#32;are&#32;enabled</emphasis>
2083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a953d6381de950e25c8c97ad54f52370a">kParseTrailingCommasFlag</link>)&#32;&amp;&amp;&#32;src&#32;==&#32;IterativeParsingMemberDelimiterState)&#32;{
2084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ae3142fbadf2c4cdfd0c7200d7b6b8ed3">kParseErrorObjectMissName</link>,&#32;is.Tell());
2085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;member&#32;count.</emphasis>
2088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;c&#32;=&#32;*stack_.template&#32;Pop&lt;SizeType&gt;(1);
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;object&#32;is&#32;not&#32;empty,&#32;count&#32;the&#32;last&#32;member.</emphasis>
2090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(src&#32;==&#32;IterativeParsingMemberValueState)
2091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++c;
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Restore&#32;the&#32;state.</emphasis>
2093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;n&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>IterativeParsingState<emphasis role="keyword">&gt;</emphasis>(*stack_.template&#32;Pop&lt;SizeType&gt;(1));
2094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transit&#32;to&#32;Finish&#32;state&#32;if&#32;this&#32;is&#32;the&#32;topmost&#32;scope.</emphasis>
2095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;==&#32;IterativeParsingStartState)
2096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;IterativeParsingFinishState;
2097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;handler</emphasis>
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hr&#32;=&#32;handler.EndObject(c);
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;On&#32;handler&#32;short&#32;circuits&#32;the&#32;parsing.</emphasis>
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hr)&#32;{
2101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
2102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
2106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
2107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2109 
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingArrayFinishState:
2111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
2112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transit&#32;from&#32;delimiter&#32;is&#32;only&#32;allowed&#32;when&#32;trailing&#32;commas&#32;are&#32;enabled</emphasis>
2113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a953d6381de950e25c8c97ad54f52370a">kParseTrailingCommasFlag</link>)&#32;&amp;&amp;&#32;src&#32;==&#32;IterativeParsingElementDelimiterState)&#32;{
2114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;is.Tell());
2115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;element&#32;count.</emphasis>
2118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;c&#32;=&#32;*stack_.template&#32;Pop&lt;SizeType&gt;(1);
2119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;the&#32;array&#32;is&#32;not&#32;empty,&#32;count&#32;the&#32;last&#32;element.</emphasis>
2120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(src&#32;==&#32;IterativeParsingElementState)
2121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++c;
2122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Restore&#32;the&#32;state.</emphasis>
2123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;n&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>IterativeParsingState<emphasis role="keyword">&gt;</emphasis>(*stack_.template&#32;Pop&lt;SizeType&gt;(1));
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transit&#32;to&#32;Finish&#32;state&#32;if&#32;this&#32;is&#32;the&#32;topmost&#32;scope.</emphasis>
2125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(n&#32;==&#32;IterativeParsingStartState)
2126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;IterativeParsingFinishState;
2127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;handler</emphasis>
2128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hr&#32;=&#32;handler.EndArray(c);
2129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;On&#32;handler&#32;short&#32;circuits&#32;the&#32;parsing.</emphasis>
2130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!hr)&#32;{
2131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga7f8c4265b2edda78568ae3338aaf1461">RAPIDJSON_PARSE_ERROR_NORETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a6fed2d9a15f88540a1ba785f0de2cbe6">kParseErrorTermination</link>,&#32;is.Tell());
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;is.Take();
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;n;
2137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2139 
2140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;This&#32;branch&#32;is&#32;for&#32;IterativeParsingValueState&#32;actually.</emphasis>
2142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Use&#32;`default:`&#32;rather&#32;than</emphasis>
2143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;`case&#32;IterativeParsingValueState:`&#32;is&#32;for&#32;code&#32;coverage.</emphasis>
2144 
2145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;IterativeParsingStartState&#32;is&#32;not&#32;enumerated&#32;in&#32;this&#32;switch-case.</emphasis>
2146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;impossible&#32;for&#32;that&#32;case.&#32;And&#32;it&#32;can&#32;be&#32;caught&#32;by&#32;following&#32;assertion.</emphasis>
2147 
2148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;IterativeParsingFinishState&#32;is&#32;not&#32;enumerated&#32;in&#32;this&#32;switch-case&#32;either.</emphasis>
2149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;It&#32;is&#32;a&#32;&quot;derivative&quot;&#32;state&#32;which&#32;cannot&#32;triggered&#32;from&#32;Predict()&#32;directly.</emphasis>
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Therefore&#32;it&#32;cannot&#32;happen&#32;here.&#32;And&#32;it&#32;can&#32;be&#32;caught&#32;by&#32;following&#32;assertion.</emphasis>
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(dst&#32;==&#32;IterativeParsingValueState);
2152 
2153 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;be&#32;non-compound&#32;value.&#32;Or&#32;it&#32;would&#32;be&#32;ObjectInitial&#32;or&#32;ArrayInitial&#32;state.</emphasis>
2154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ParseValue&lt;parseFlags&gt;(is,&#32;handler);
2155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_reader_1ac417441794477ea747b63adb6d3653a9">HasParseError</link>())&#32;{
2156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingErrorState;
2157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;IterativeParsingFinishState;
2159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2160 &#32;&#32;&#32;&#32;}
2161 
2162 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;InputStream&gt;
2163 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;HandleError(IterativeParsingState&#32;src,&#32;InputStream&amp;&#32;is)&#32;{
2164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_reader_1ac417441794477ea747b63adb6d3653a9">HasParseError</link>())&#32;{
2165 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error&#32;flag&#32;has&#32;been&#32;set.</emphasis>
2166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
2167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2168 
2169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(src)&#32;{
2170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingStartState:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a04b368d184e84b50580be2faa55f738a">kParseErrorDocumentEmpty</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">return</emphasis>;
2171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingFinishState:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a2293b39033220f4c2a568482c497dab5">kParseErrorDocumentRootNotSingular</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">return</emphasis>;
2172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingObjectInitialState:
2173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingMemberDelimiterState:&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7ae3142fbadf2c4cdfd0c7200d7b6b8ed3">kParseErrorObjectMissName</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">return</emphasis>;
2174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingMemberKeyState:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a55cda7eb30436986ab42a61e06caf017">kParseErrorObjectMissColon</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">return</emphasis>;
2175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingMemberValueState:&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a34f70d7ed2fa121954f5fc5b5113d05f">kParseErrorObjectMissCommaOrCurlyBracket</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">return</emphasis>;
2176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingKeyValueDelimiterState:
2177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingArrayInitialState:
2178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;IterativeParsingElementDelimiterState:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7a20a50e257aab726699ab02192db72ba9">kParseErrorValueInvalid</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">return</emphasis>;
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(src&#32;==&#32;IterativeParsingElementState);&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gae3689840fa6e89a241313f33b602f865">RAPIDJSON_PARSE_ERROR</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga8d4b32dfc45840bca189ade2bbcb6ba7abfdd2bd90134fec4fe6a22762d16a5f5">kParseErrorArrayMissCommaOrSquareBracket</link>,&#32;is.Tell());&#32;<emphasis role="keywordflow">return</emphasis>;
2180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2181 &#32;&#32;&#32;&#32;}
2182 
2183 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsIterativeParsingDelimiterState(IterativeParsingState&#32;s)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s&#32;&gt;=&#32;IterativeParsingElementDelimiterState;
2185 &#32;&#32;&#32;&#32;}
2186 
2187 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsIterativeParsingCompleteState(IterativeParsingState&#32;s)<emphasis role="keyword">&#32;const&#32;</emphasis>{
2188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s&#32;&lt;=&#32;IterativeParsingErrorState;
2189 &#32;&#32;&#32;&#32;}
2190 
2191 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,&#32;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
2192 &#32;&#32;&#32;&#32;<link linkend="_struct_parse_result">ParseResult</link>&#32;IterativeParse(InputStream&amp;&#32;is,&#32;<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
2193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parseResult_.<link linkend="_struct_parse_result_1a88b6d44f052a19e6436ae6aadc2c40b4">Clear</link>();
2194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ClearStackOnExit&#32;scope(*<emphasis role="keyword">this</emphasis>);
2195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;state&#32;=&#32;IterativeParsingStartState;
2196 
2197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
2198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(is.Peek()&#32;!=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>)&#32;{
2200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Token&#32;t&#32;=&#32;Tokenize(is.Peek());
2201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;n&#32;=&#32;Predict(state,&#32;t);
2202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;IterativeParsingState&#32;d&#32;=&#32;Transit&lt;parseFlags&gt;(state,&#32;t,&#32;n,&#32;is,&#32;handler);
2203 
2204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(d&#32;==&#32;IterativeParsingErrorState)&#32;{
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandleError(state,&#32;is);
2206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2208 
2209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;state&#32;=&#32;d;
2210 
2211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;further&#32;consume&#32;streams&#32;if&#32;a&#32;root&#32;JSON&#32;has&#32;been&#32;parsed.</emphasis>
2212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;((parseFlags&#32;&amp;&#32;<link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450af77d115d3bbed0a448b6b335f3b93b36">kParseStopWhenDoneFlag</link>)&#32;&amp;&amp;&#32;state&#32;==&#32;IterativeParsingFinishState)
2213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
2214 
2215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SkipWhitespaceAndComments&lt;parseFlags&gt;(is);
2216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_PARSE_ERROR_EARLY_RETURN(parseResult_);
2217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2218 
2219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Handle&#32;the&#32;end&#32;of&#32;file.</emphasis>
2220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(state&#32;!=&#32;IterativeParsingFinishState)
2221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HandleError(state,&#32;is);
2222 
2223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseResult_;
2224 &#32;&#32;&#32;&#32;}
2225 
2226 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kDefaultStackCapacity&#32;=&#32;256;&#32;&#32;&#32;&#32;
2227 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stack">internal::Stack&lt;StackAllocator&gt;</link>&#32;stack_;&#32;&#32;
2228 &#32;&#32;&#32;&#32;<link linkend="_struct_parse_result">ParseResult</link>&#32;parseResult_;
2229 &#32;&#32;&#32;&#32;IterativeParsingState&#32;state_;
2230 };&#32;<emphasis role="comment">//&#32;class&#32;GenericReader</emphasis>
2231 
2233 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_reader">GenericReader&lt;UTF8&lt;&gt;</link>,&#32;<link linkend="_struct_u_t_f8">UTF8&lt;&gt;</link>&#32;&gt;&#32;<link linkend="_reader_8h_1a84f3b66a66647f4ac4267078359188ba">Reader</link>;
2234 
2235 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
2236 
2237 <emphasis role="preprocessor">#if&#32;defined(__clang__)&#32;||&#32;defined(_MSC_VER)</emphasis>
2238 RAPIDJSON_DIAG_POP
2239 <emphasis role="preprocessor">#endif</emphasis>
2240 
2241 
2242 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
2243 RAPIDJSON_DIAG_POP
2244 <emphasis role="preprocessor">#endif</emphasis>
2245 
2246 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_READER_H_</emphasis>
</programlisting></section>
