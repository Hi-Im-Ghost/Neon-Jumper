<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_button" xml:lang="en-US">
<title>Button Class Reference</title>
<indexterm><primary>Button</primary></indexterm>
<para>
<computeroutput>#include &lt;Button.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">ButtonState</link> { <link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957ac54af48e7b4defd52b6ec5e9925cc0fc">IDLE</link>
, <link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957ade61a8af7d75db6eedb8578208983e5f">HOVER</link>
, <link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957a2e515aeaab1c943310f4967133711a07">ACTIVE</link>
 }</para>

<para>Typ wyliczeniowy dla stanów przycisków. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_button_1ae7c4b8c939fe4b5fc7e44749626b7506">Button</link> (const std::string &amp;<link linkend="_class_button_1aadf908b0777f2ae5c28d949fda3384c1">text</link>, float posX, float posY, float <link linkend="_class_button_1aadac7dd7b0a0350f354a947ab096c532">width</link>, float <link linkend="_class_button_1ab646f3e8a3cb3e76e26391ef94a2f9d7">height</link>)</para>

<para>Konstruktor który tworzy przycisk na wskazanej w parametrach pozycji x i y oraz wysokości i szerokości z tekstem. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_button_1ae36d992ac6b380f00a2a45063a6c2aa1">intersects</link> (const sf::Shape &amp;shape)</para>
</listitem>
            <listitem><para>void <link linkend="_class_button_1a75f6aee61f3803d1c38da9e47e31a892">setState</link> (<link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">ButtonState</link> newState)</para>

<para>Ustawia stan przycisku. </para>
</listitem>
            <listitem><para><link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">ButtonState</link> <link linkend="_class_button_1aff051c1b5c0c9e90dba4cb089e4b95a5">getState</link> ()</para>

<para>Zwraca stan przycisku. </para>
</listitem>
            <listitem><para>void <link linkend="_class_button_1aa8ab3a2b310cc81d0bf24618bbb892ab">render</link> (sf::RenderTarget &amp;window)</para>

<para>Przenosi na ekran przycisk. </para>
</listitem>
            <listitem><para>void <link linkend="_class_button_1ad306077cd91e58136dc7610d6edf30eb">update</link> (const sf::RectangleShape &amp;cursor)</para>

<para>Służy do aktualizacji stanu przycisku kursorem myszy. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>sf::Color <link linkend="_class_button_1a9587b2191d6ce2f5e3df793e960929bb">colorIdle</link></para>

<para>Przechowuje kolor podstawowy. </para>
</listitem>
            <listitem><para>sf::Color <link linkend="_class_button_1a936427ac9c7f34725211e3587c9ad2dc">colorHover</link></para>

<para>Przechowuje kolor interakcji. </para>
</listitem>
            <listitem><para>sf::Color <link linkend="_class_button_1a99f0d1583e7b423a3977204d8329478b">colorActive</link></para>

<para>Przechowuje kolor aktywacji. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_button_1a24abc35f84c996c644c3ff0823d5323d">initText</link> (const std::string &amp;<link linkend="_class_button_1aadf908b0777f2ae5c28d949fda3384c1">text</link>)</para>

<para>Metoda służąca do inicjalizacji tekstu przekazanego przez parametr. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>sf::RectangleShape <link linkend="_class_button_1a90e71a861bb0b6a8205ff8509ff97fb7">buttonShape</link></para>

<para>Zmienna reprezentujaca kształt prostokąta dla przycisków. </para>
</listitem>
            <listitem><para>sf::Text <link linkend="_class_button_1aadf908b0777f2ae5c28d949fda3384c1">text</link></para>

<para>Zmienna przechowujaca tekst. </para>
</listitem>
            <listitem><para>sf::Font <link linkend="_class_button_1ab6290d275363f4b0e133eec450845ca1">font</link></para>

<para>Zmienna przechowująca informację o rodzaju czcionki. </para>
</listitem>
            <listitem><para>float <link linkend="_class_button_1aadac7dd7b0a0350f354a947ab096c532">width</link></para>

<para>Zmienna przechowująca szerokość przycisku. </para>
</listitem>
            <listitem><para>float <link linkend="_class_button_1ab646f3e8a3cb3e76e26391ef94a2f9d7">height</link></para>

<para>Zmienna przechowujaca wysokość przycisku. </para>
</listitem>
            <listitem><para><link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">ButtonState</link> <link linkend="_class_button_1ae823b05599aa1650bdc496c0d377c106">state</link></para>

<para>Obiekt dla typu wyliczeniowego reprezentujacy stan przycisku. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_button_1ad8312db93093c21df8b1d2be74ae1957"/><section>
    <title>ButtonState</title>
<indexterm><primary>ButtonState</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>ButtonState</secondary></indexterm>
<para><computeroutput>enum <link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">Button::ButtonState</link></computeroutput></para><para>

<para>Typ wyliczeniowy dla stanów przycisków. </para>
</para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>IDLE</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>IDLE</secondary></indexterm>
<anchor xml:id="_class_button_1ad8312db93093c21df8b1d2be74ae1957ac54af48e7b4defd52b6ec5e9925cc0fc"/>IDLE</entry><entry></entry></row><row><entry><indexterm><primary>HOVER</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>HOVER</secondary></indexterm>
<anchor xml:id="_class_button_1ad8312db93093c21df8b1d2be74ae1957ade61a8af7d75db6eedb8578208983e5f"/>HOVER</entry><entry></entry></row><row><entry><indexterm><primary>ACTIVE</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>ACTIVE</secondary></indexterm>
<anchor xml:id="_class_button_1ad8312db93093c21df8b1d2be74ae1957a2e515aeaab1c943310f4967133711a07"/>ACTIVE</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_button_1ae7c4b8c939fe4b5fc7e44749626b7506"/><section>
    <title>Button()</title>
<indexterm><primary>Button</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>Button</secondary></indexterm>
<para><computeroutput>Button::Button (const std::string &amp; text, float posX, float posY, float width, float height)</computeroutput></para><para>

<para>Konstruktor który tworzy przycisk na wskazanej w parametrach pozycji x i y oraz wysokości i szerokości z tekstem. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_button_1aff051c1b5c0c9e90dba4cb089e4b95a5"/><section>
    <title>getState()</title>
<indexterm><primary>getState</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>getState</secondary></indexterm>
<para><computeroutput><link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">ButtonState</link> Button::getState ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Zwraca stan przycisku. </para>
</para>
</section>
<anchor xml:id="_class_button_1a24abc35f84c996c644c3ff0823d5323d"/><section>
    <title>initText()</title>
<indexterm><primary>initText</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>initText</secondary></indexterm>
<para><computeroutput>void Button::initText (const std::string &amp; text)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Metoda służąca do inicjalizacji tekstu przekazanego przez parametr. </para>
</para>
</section>
<anchor xml:id="_class_button_1ae36d992ac6b380f00a2a45063a6c2aa1"/><section>
    <title>intersects()</title>
<indexterm><primary>intersects</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>intersects</secondary></indexterm>
<para><computeroutput>bool Button::intersects (const sf::Shape &amp; shape)</computeroutput></para></section>
<anchor xml:id="_class_button_1aa8ab3a2b310cc81d0bf24618bbb892ab"/><section>
    <title>render()</title>
<indexterm><primary>render</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>render</secondary></indexterm>
<para><computeroutput>void Button::render (sf::RenderTarget &amp; window)</computeroutput></para><para>

<para>Przenosi na ekran przycisk. </para>
</para>
</section>
<anchor xml:id="_class_button_1a75f6aee61f3803d1c38da9e47e31a892"/><section>
    <title>setState()</title>
<indexterm><primary>setState</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>setState</secondary></indexterm>
<para><computeroutput>void Button::setState (<link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">ButtonState</link> newState)</computeroutput></para><para>

<para>Ustawia stan przycisku. </para>
</para>
</section>
<anchor xml:id="_class_button_1ad306077cd91e58136dc7610d6edf30eb"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void Button::update (const sf::RectangleShape &amp; cursor)</computeroutput></para><para>

<para>Służy do aktualizacji stanu przycisku kursorem myszy. </para>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_button_1a90e71a861bb0b6a8205ff8509ff97fb7"/><section>
    <title>buttonShape</title>
<indexterm><primary>buttonShape</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>buttonShape</secondary></indexterm>
<para><computeroutput>sf::RectangleShape Button::buttonShape<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna reprezentujaca kształt prostokąta dla przycisków. </para>
</para>
</section>
<anchor xml:id="_class_button_1a99f0d1583e7b423a3977204d8329478b"/><section>
    <title>colorActive</title>
<indexterm><primary>colorActive</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>colorActive</secondary></indexterm>
<para><computeroutput>sf::Color Button::colorActive</computeroutput></para><para>

<para>Przechowuje kolor aktywacji. </para>
</para>
</section>
<anchor xml:id="_class_button_1a936427ac9c7f34725211e3587c9ad2dc"/><section>
    <title>colorHover</title>
<indexterm><primary>colorHover</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>colorHover</secondary></indexterm>
<para><computeroutput>sf::Color Button::colorHover</computeroutput></para><para>

<para>Przechowuje kolor interakcji. </para>
</para>
</section>
<anchor xml:id="_class_button_1a9587b2191d6ce2f5e3df793e960929bb"/><section>
    <title>colorIdle</title>
<indexterm><primary>colorIdle</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>colorIdle</secondary></indexterm>
<para><computeroutput>sf::Color Button::colorIdle</computeroutput></para><para>

<para>Przechowuje kolor podstawowy. </para>
</para>
</section>
<anchor xml:id="_class_button_1ab6290d275363f4b0e133eec450845ca1"/><section>
    <title>font</title>
<indexterm><primary>font</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>font</secondary></indexterm>
<para><computeroutput>sf::Font Button::font<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informację o rodzaju czcionki. </para>
</para>
</section>
<anchor xml:id="_class_button_1ab646f3e8a3cb3e76e26391ef94a2f9d7"/><section>
    <title>height</title>
<indexterm><primary>height</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>height</secondary></indexterm>
<para><computeroutput>float Button::height<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowujaca wysokość przycisku. </para>
</para>
</section>
<anchor xml:id="_class_button_1ae823b05599aa1650bdc496c0d377c106"/><section>
    <title>state</title>
<indexterm><primary>state</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>state</secondary></indexterm>
<para><computeroutput><link linkend="_class_button_1ad8312db93093c21df8b1d2be74ae1957">ButtonState</link> Button::state<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Obiekt dla typu wyliczeniowego reprezentujacy stan przycisku. </para>
</para>
</section>
<anchor xml:id="_class_button_1aadf908b0777f2ae5c28d949fda3384c1"/><section>
    <title>text</title>
<indexterm><primary>text</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>text</secondary></indexterm>
<para><computeroutput>sf::Text Button::text<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowujaca tekst. </para>
</para>
</section>
<anchor xml:id="_class_button_1aadac7dd7b0a0350f354a947ab096c532"/><section>
    <title>width</title>
<indexterm><primary>width</primary><secondary>Button</secondary></indexterm>
<indexterm><primary>Button</primary><secondary>width</secondary></indexterm>
<para><computeroutput>float Button::width<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca szerokość przycisku. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/UI/<link linkend="__button_8h">Button.h</link>src/UI/<link linkend="__button_8cpp">Button.cpp</link></section>
</section>
