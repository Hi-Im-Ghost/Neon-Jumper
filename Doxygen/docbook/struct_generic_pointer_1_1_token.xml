<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_generic_pointer_1_1_token" xml:lang="en-US">
<title>GenericPointer&lt; ValueType, Allocator &gt;::Token Struct Reference</title>
<indexterm><primary>GenericPointer&lt; ValueType, Allocator &gt;::Token</primary></indexterm>
<para>

<para>A token is the basic units of internal representation. </para>
 
</para>
<para>
<computeroutput>#include &lt;pointer.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>const <link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link> * <link linkend="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c">name</link></para>

<para>Name of the token. It has null character at the end but it can contain null character. </para>
</listitem>
            <listitem><para><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link></para>

<para>Length of the name. </para>
</listitem>
            <listitem><para><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link></para>

<para>A valid array index, if it is not equal to kPointerInvalidIndex. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>, typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> = CrtAllocator&gt;
struct GenericPointer&lt; ValueType, Allocator &gt;::Token</title></simplesect>

<para>A token is the basic units of internal representation. </para>



<para>A JSON pointer string representation &quot;/foo/123&quot; is parsed to two tokens: &quot;foo&quot; and 123. 123 will be represented in both numeric form and string form. They are resolved according to the actual value type (object or array).</para>

<para>For token that are not numbers, or the numeric value is out of bound (greater than limits of SizeType), they are only treated as string form (i.e. the token&apos;s index will be equal to kPointerInvalidIndex).</para>

<para>This struct is public so that user can create a Pointer without parsing and allocation, using a special constructor. </para>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf"/><section>
    <title>index</title>
<indexterm><primary>index</primary><secondary>GenericPointer&lt; ValueType, Allocator &gt;::Token</secondary></indexterm>
<indexterm><primary>GenericPointer&lt; ValueType, Allocator &gt;::Token</primary><secondary>index</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_pointer">GenericPointer</link>&lt; <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Token::index</computeroutput></para><para>

<para>A valid array index, if it is not equal to kPointerInvalidIndex. </para>
</para>
</section>
<anchor xml:id="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d"/><section>
    <title>length</title>
<indexterm><primary>length</primary><secondary>GenericPointer&lt; ValueType, Allocator &gt;::Token</secondary></indexterm>
<indexterm><primary>GenericPointer&lt; ValueType, Allocator &gt;::Token</primary><secondary>length</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_pointer">GenericPointer</link>&lt; <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Token::length</computeroutput></para><para>

<para>Length of the name. </para>
</para>
</section>
<anchor xml:id="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c"/><section>
    <title>name</title>
<indexterm><primary>name</primary><secondary>GenericPointer&lt; ValueType, Allocator &gt;::Token</secondary></indexterm>
<indexterm><primary>GenericPointer&lt; ValueType, Allocator &gt;::Token</primary><secondary>name</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = CrtAllocator&gt; </computeroutput><para><computeroutput>const <link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>* <link linkend="_class_generic_pointer">GenericPointer</link>&lt; <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Token::name</computeroutput></para><para>

<para>Name of the token. It has null character at the end but it can contain null character. </para>
</para>
</section>
<para>
The documentation for this struct was generated from the following file:</para>
src/rapidjson/include/rapidjson/<link linkend="_pointer_8h">pointer.h</link></section>
</section>
