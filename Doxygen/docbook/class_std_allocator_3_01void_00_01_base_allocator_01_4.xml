<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4" xml:lang="en-US">
<title>StdAllocator&lt; void, BaseAllocator &gt; Class Template Reference</title>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;allocators.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for StdAllocator&lt; void, BaseAllocator &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_std_allocator_3_01void_00_01_base_allocator_01_4.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind">rebind</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef BaseAllocator <link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a72dfb6c478f475a31ef99be2fbe9332f">BaseAllocatorType</link></para>
</listitem>
            <listitem><para>typedef allocator_type::value_type <link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a1df4e2d5cfdec13a30e19fa73507c542">value_type</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ae04f7a523d5d80dde6ce700e2807ff27">StdAllocator</link> () RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ab7d8af9c46aaee8e3e2c60b95b1d595d">StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link> &amp;rhs) RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para><link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a47cf6d8a7f37c6f1c03c158948d88553">StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp;rhs) RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a8ee693f821d2a7209947faab4a77e304">StdAllocator</link> (const BaseAllocator &amp;baseAllocator) RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a223afcc6a4765478ca3c89f1164913d4">~StdAllocator</link> () RAPIDJSON_NOEXCEPT</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Types    </title>
        <itemizedlist>
            <listitem><para>typedef std::allocator&lt; void &gt; <link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1aa894cbe0a0970c07b34e4320e6054c10">allocator_type</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>BaseAllocator <link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ac691821bb9f8c7f557c7d3c069b37dc2">baseAllocator_</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename , typename &gt; </para><para>class <link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1afb3a6a655f835f6b9ec21fab41291287">StdAllocator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1aa894cbe0a0970c07b34e4320e6054c10"/><section>
    <title>allocator_type</title>
<indexterm><primary>allocator_type</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>allocator_type</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput>typedef std::allocator&lt;void&gt; <link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;::allocator_type<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a72dfb6c478f475a31ef99be2fbe9332f"/><section>
    <title>BaseAllocatorType</title>
<indexterm><primary>BaseAllocatorType</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>BaseAllocatorType</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput>typedef BaseAllocator <link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;::BaseAllocatorType</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a1df4e2d5cfdec13a30e19fa73507c542"/><section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput>typedef allocator_type::value_type <link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;::value_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ae04f7a523d5d80dde6ce700e2807ff27"/><section>
    <title>StdAllocator()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ab7d8af9c46aaee8e3e2c60b95b1d595d"/><section>
    <title>StdAllocator()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a47cf6d8a7f37c6f1c03c158948d88553"/><section>
    <title>StdAllocator()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a8ee693f821d2a7209947faab4a77e304"/><section>
    <title>StdAllocator()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> (const BaseAllocator &amp; baseAllocator)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a223afcc6a4765478ca3c89f1164913d4"/><section>
    <title>~StdAllocator()</title>
<indexterm><primary>~StdAllocator</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>~StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;::~<link linkend="_class_std_allocator">StdAllocator</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1afb3a6a655f835f6b9ec21fab41291287"/><section>
    <title>StdAllocator</title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><computeroutput>template&lt;typename , typename &gt; </computeroutput><para><computeroutput>friend class <link linkend="_class_std_allocator">StdAllocator</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ac691821bb9f8c7f557c7d3c069b37dc2"/><section>
    <title>baseAllocator_</title>
<indexterm><primary>baseAllocator_</primary><secondary>StdAllocator&lt; void, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; void, BaseAllocator &gt;</primary><secondary>baseAllocator_</secondary></indexterm>
<computeroutput>template&lt;typename BaseAllocator &gt; </computeroutput><para><computeroutput>BaseAllocator <link linkend="_class_std_allocator">StdAllocator</link>&lt; void, BaseAllocator &gt;::baseAllocator_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/<link linkend="_allocators_8h">allocators.h</link></section>
</section>
