<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_writer" xml:lang="en-US">
<title>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt; Class Template Reference</title>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary></indexterm>
<para>

<para>JSON writer. </para>
 
</para>
<para>
<computeroutput>#include &lt;writer.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_writer_1_1_level">Level</link></para>

<para>Information for each nested level. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef SourceEncoding::Ch <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_writer_1af4f54830d6927d9daf5bd53bfd134dd3">Writer</link> (OutputStream &amp;os, StackAllocator *stackAllocator=0, size_t levelDepth=<link linkend="_class_writer_1a9cb4caeb9d8971f305edff1d70e67acb">kDefaultLevelDepth</link>)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_class_writer_1a7b885cea71542fc436be80eff447fb64">Writer</link> (StackAllocator *allocator=0, size_t levelDepth=<link linkend="_class_writer_1a9cb4caeb9d8971f305edff1d70e67acb">kDefaultLevelDepth</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_class_writer_1a8b53e8f137f7fcf694f5500711b3f58d">Reset</link> (OutputStream &amp;os)</para>

<para>Reset the writer with a new stream. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a07d74d36dd3191b06e0aab678c246157">IsComplete</link> () const</para>

<para>Checks whether the output is a complete JSON. </para>
</listitem>
            <listitem><para>int <link linkend="_class_writer_1ad35ddb56c6969d9584bf1e73bebda5ab">GetMaxDecimalPlaces</link> () const</para>
</listitem>
            <listitem><para>void <link linkend="_class_writer_1a58e3f94dc5af1432a8eace5ba427eca7">SetMaxDecimalPlaces</link> (int maxDecimalPlaces)</para>

<para>Sets the maximum number of decimal places for double output. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Implementation of Handler</title>

<para><formalpara><title>See also</title>

<para>Handler </para>
</formalpara>
</para>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_writer_1af700ed03c8810d48a4aaa3c5baeaf26c">Null</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ad7491f4dedb02e7456b240b23ef8c1ad">Bool</link> (bool b)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ad471415aa7741e732bab0bcfbb9522a8">Int</link> (int i)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a5fb0c3228f89f6f9bef15f3e6e6f1739">Uint</link> (unsigned u)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a4144d7086ed9d3d807c373de242bde45">Int64</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a55bb9f286ecdaf4cdb07bddb02e0cb2d">Uint64</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u64)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a22a43e8a7193105deec6b808736f7a1a">Double</link> (double d)</para>

<para>Writes the given <computeroutput>double</computeroutput> value to the stream. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ad462dc606fddea0f34fc0e190c3bdaee">RawNumber</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy=false)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a8b4dc44f471403a83c9959575796ceab">String</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy=false)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1aec3200b2fc80ec87d1c37f775256b2e1">StartObject</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a19096d2ccb90761f63ab1240337bf90a">Key</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy=false)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a0771a565261564c27676b7300b11f2b5">EndObject</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> memberCount=0)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a38715785194b42cd67ba5dd52bf7967e">StartArray</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ac88d533095591a878500b63b351d4013">EndArray</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> elementCount=0)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static const int <link linkend="_class_writer_1ab46d66ae0ca78cb03ab7fb865d129934">kDefaultMaxDecimalPlaces</link> = 324</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Protected Member Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_writer_1aaa9cddc35dbc6a612ef01633ed8a6687">WriteInt</link> (int i)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a9159dbd1625b1506cd13c79e3b7bad4a">WriteUint</link> (unsigned u)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a439aacf94c862df151c16d9c907afe0f">WriteInt64</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1aa1d514cd0200ec1732e74fe26ebcf463">WriteUint64</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a114c748ae1f770c20f6ecd7cfc7b67bb">WriteDouble</link> (double d)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Convenience extensions    </title>
        <itemizedlist>
            <listitem><para>static const size_t <link linkend="_class_writer_1a9cb4caeb9d8971f305edff1d70e67acb">kDefaultLevelDepth</link> = 32</para>
</listitem>
            <listitem><para>OutputStream * <link linkend="_class_writer_1a3a3f60140f78dd67b5274978fd3a33ff">os_</link></para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; StackAllocator &gt; <link linkend="_class_writer_1a9e6c13c06fc721dfd8486f17b9ff29de">level_stack_</link></para>
</listitem>
            <listitem><para>int <link linkend="_class_writer_1a3d4ef664c3cdf34a286b13d27adcdd4d">maxDecimalPlaces_</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1affc6b9e0332b50bee0d33f8b1841c9a6">hasRoot_</link></para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a2a2c6f51644b2013471aec4dac0d7466">String</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *const &amp;str)</para>

<para>Simpler but slower overload. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ab6057b7fa9737edb4da55a7afefa966d">Key</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *const &amp;str)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ae0d1615104e4e88040b9640e6784008a">RawValue</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *json, size_t length, <link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type)</para>

<para>Write a raw JSON value. </para>
</listitem>
            <listitem><para>void <link linkend="_class_writer_1a8ca4e364c546b2eb526caa68dde011d2">Flush</link> ()</para>

<para>Flush the output stream. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a44862b3eba8d84b909c69aba875c9f4d">WriteNull</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a42ad68b6950431bb8ca0199568546eaf">WriteBool</link> (bool b)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a31d0feda654ca245c41462be7dc59998">WriteInt</link> (int i)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a2861227e93707d1478d2cf56644dca3b">WriteUint</link> (unsigned u)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1aa58d3f80c06394648de5055ecfb41587">WriteInt64</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ad07b325157220e3aa791c1c8c904021e">WriteUint64</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u64)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1ae7a0fc4740681d845d92c1213bd25aa1">WriteDouble</link> (double d)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1acda4412ef5f4cac6e89f9544e4b10f70">WriteString</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a94140803bba7863a1b39c936bbe6d262">ScanWriteUnescapedString</link> (<link linkend="_struct_generic_string_stream">GenericStringStream</link>&lt; SourceEncoding &gt; &amp;is, size_t length)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a81c72a2eecd47e042f56ca93a27a5cb1">WriteStartObject</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a7e3f6760a50a72f4217a9b2d625c43ee">WriteEndObject</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a3c3560a96cac58f98f4a74d6cb227204">WriteStartArray</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1aabda2df1be6e83cef416e9b1f042e8f4">WriteEndArray</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1a8ee1135b2595261819b134907f67614e">WriteRawValue</link> (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *json, size_t length)</para>
</listitem>
            <listitem><para>void <link linkend="_class_writer_1a1fc40f8b9f3abc2548c0c5782ce1755d">Prefix</link> (<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_writer_1adc1cadbabc309d31f19cf7463251d879">EndValue</link> (bool ret)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename OutputStream, typename SourceEncoding = UTF8&lt;&gt;, typename TargetEncoding = UTF8&lt;&gt;, typename StackAllocator = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt;
class Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</title></simplesect>

<para>JSON writer. </para>



<para><link linkend="_class_writer">Writer</link> implements the concept Handler. It generates JSON text by events to an output os.</para>

<para>User may programmatically calls the functions of a writer to generate JSON text.</para>

<para>On the other side, a writer can also be passed to objects that generates events,</para>

<para>for example <link linkend="_class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099">Reader::Parse()</link> and Document::Accept().</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>OutputStream</entry><entry>
<para>Type of output stream. </para>
</entry>
                            </row>
                            <row>
<entry>SourceEncoding</entry><entry>
<para>Encoding of source string. </para>
</entry>
                            </row>
                            <row>
<entry>TargetEncoding</entry><entry>
<para>Encoding of output stream. </para>
</entry>
                            </row>
                            <row>
<entry>StackAllocator</entry><entry>
<para>Type of allocator for allocating memory of stack. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>implements Handler concept </para>
</note>
</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139"/><section>
    <title>Ch</title>
<indexterm><primary>Ch</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Ch</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>typedef SourceEncoding::Ch <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Ch</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_writer_1af4f54830d6927d9daf5bd53bfd134dd3"/><section>
    <title>Writer()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Writer</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Writer</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput><link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;<link linkend="_class_writer">::Writer</link> (OutputStream &amp; os, StackAllocator * stackAllocator = <computeroutput>0</computeroutput>
, size_t levelDepth = <computeroutput><link linkend="_class_writer_1a9cb4caeb9d8971f305edff1d70e67acb">kDefaultLevelDepth</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>os</entry><entry>
<para>Output stream. </para>
</entry>
                            </row>
                            <row>
<entry>stackAllocator</entry><entry>
<para>User supplied allocator. If it is null, it will create a private one. </para>
</entry>
                            </row>
                            <row>
<entry>levelDepth</entry><entry>
<para>Initial capacity of stack. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_writer_1a7b885cea71542fc436be80eff447fb64"/><section>
    <title>Writer()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Writer</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Writer</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput><link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;<link linkend="_class_writer">::Writer</link> (StackAllocator * allocator = <computeroutput>0</computeroutput>
, size_t levelDepth = <computeroutput><link linkend="_class_writer_1a9cb4caeb9d8971f305edff1d70e67acb">kDefaultLevelDepth</link></computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_writer_1ad7491f4dedb02e7456b240b23ef8c1ad"/><section>
    <title>Bool()</title>
<indexterm><primary>Bool</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Bool</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Bool (bool b)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a22a43e8a7193105deec6b808736f7a1a"/><section>
    <title>Double()</title>
<indexterm><primary>Double</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Double</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Double (double d)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Writes the given <computeroutput>double</computeroutput> value to the stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>d</entry><entry>
<para>The value to be written. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>Whether it is succeed. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_writer_1ac88d533095591a878500b63b351d4013"/><section>
    <title>EndArray()</title>
<indexterm><primary>EndArray</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>EndArray</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::EndArray (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> elementCount = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a0771a565261564c27676b7300b11f2b5"/><section>
    <title>EndObject()</title>
<indexterm><primary>EndObject</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>EndObject</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::EndObject (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> memberCount = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1adc1cadbabc309d31f19cf7463251d879"/><section>
    <title>EndValue()</title>
<indexterm><primary>EndValue</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>EndValue</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::EndValue (bool ret)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a8ca4e364c546b2eb526caa68dde011d2"/><section>
    <title>Flush()</title>
<indexterm><primary>Flush</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Flush</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>void <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Flush ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Flush the output stream. </para>
</para>

<para>Allows the user to flush the output stream immediately. </para>
</section>
<anchor xml:id="_class_writer_1ad35ddb56c6969d9584bf1e73bebda5ab"/><section>
    <title>GetMaxDecimalPlaces()</title>
<indexterm><primary>GetMaxDecimalPlaces</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>GetMaxDecimalPlaces</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>int <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::GetMaxDecimalPlaces ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1ad471415aa7741e732bab0bcfbb9522a8"/><section>
    <title>Int()</title>
<indexterm><primary>Int</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Int</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Int (int i)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a4144d7086ed9d3d807c373de242bde45"/><section>
    <title>Int64()</title>
<indexterm><primary>Int64</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Int64</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Int64 (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a07d74d36dd3191b06e0aab678c246157"/><section>
    <title>IsComplete()</title>
<indexterm><primary>IsComplete</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>IsComplete</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::IsComplete ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Checks whether the output is a complete JSON. </para>
</para>

<para>A complete JSON has a complete root object or array. </para>
</section>
<anchor xml:id="_class_writer_1ab6057b7fa9737edb4da55a7afefa966d"/><section>
    <title>Key()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Key</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Key</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Key (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *const &amp; str)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a19096d2ccb90761f63ab1240337bf90a"/><section>
    <title>Key()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Key</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Key</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Key (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> * str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1af700ed03c8810d48a4aaa3c5baeaf26c"/><section>
    <title>Null()</title>
<indexterm><primary>Null</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Null</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Null ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a1fc40f8b9f3abc2548c0c5782ce1755d"/><section>
    <title>Prefix()</title>
<indexterm><primary>Prefix</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Prefix</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>void <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Prefix (<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1ad462dc606fddea0f34fc0e190c3bdaee"/><section>
    <title>RawNumber()</title>
<indexterm><primary>RawNumber</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>RawNumber</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::RawNumber (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> * str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1ae0d1615104e4e88040b9640e6784008a"/><section>
    <title>RawValue()</title>
<indexterm><primary>RawValue</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>RawValue</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::RawValue (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> * json, size_t length, <link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Write a raw JSON value. </para>
</para>

<para>For user to write a stringified JSON as a value.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>json</entry><entry>
<para>A well-formed JSON value. It should not contain null character within [0, length - 1] range. </para>
</entry>
                            </row>
                            <row>
<entry>length</entry><entry>
<para>Length of the json. </para>
</entry>
                            </row>
                            <row>
<entry>type</entry><entry>
<para>Type of the root of json. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_writer_1a8b53e8f137f7fcf694f5500711b3f58d"/><section>
    <title>Reset()</title>
<indexterm><primary>Reset</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Reset</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>void <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Reset (OutputStream &amp; os)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Reset the writer with a new stream. </para>
</para>

<para>This function reset the writer with a new stream and default settings, in order to make a <link linkend="_class_writer">Writer</link> object reusable for output multiple JSONs.</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>os</entry><entry>
<para>New output stream. <literallayout><computeroutput><link linkend="_class_writer">Writer&lt;OutputStream&gt;</link>&#32;writer(os1);
writer.StartObject();
<emphasis role="comment">//&#32;...</emphasis>
writer.EndObject();

writer.Reset(os2);
writer.StartObject();
<emphasis role="comment">//&#32;...</emphasis>
writer.EndObject();
</computeroutput></literallayout> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_writer_1a94140803bba7863a1b39c936bbe6d262"/><section>
    <title>ScanWriteUnescapedString()</title>
<indexterm><primary>ScanWriteUnescapedString</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>ScanWriteUnescapedString</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::ScanWriteUnescapedString (<link linkend="_struct_generic_string_stream">GenericStringStream</link>&lt; SourceEncoding &gt; &amp; is, size_t length)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a58e3f94dc5af1432a8eace5ba427eca7"/><section>
    <title>SetMaxDecimalPlaces()</title>
<indexterm><primary>SetMaxDecimalPlaces</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>SetMaxDecimalPlaces</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>void <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::SetMaxDecimalPlaces (int maxDecimalPlaces)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Sets the maximum number of decimal places for double output. </para>
</para>

<para>This setting truncates the output with specified number of decimal places.</para>

<para>For example,</para>

<para><literallayout><computeroutput>writer.SetMaxDecimalPlaces(3);
writer.StartArray();
writer.Double(0.12345);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;0.123&quot;</emphasis>
writer.Double(0.0001);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;0.0&quot;</emphasis>
writer.Double(1.234567890123456e30);&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;1.234567890123456e30&quot;&#32;(do&#32;not&#32;truncate&#32;significand&#32;for&#32;positive&#32;exponent)</emphasis>
writer.Double(1.23e-4);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&quot;0.0&quot;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(do&#32;truncate&#32;significand&#32;for&#32;negative&#32;exponent)</emphasis>
writer.EndArray();
</computeroutput></literallayout></para>

<para>The default setting does not truncate any decimal places. You can restore to this setting by calling <literallayout><computeroutput>writer.SetMaxDecimalPlaces(<link linkend="_class_writer_1ab46d66ae0ca78cb03ab7fb865d129934">Writer::kDefaultMaxDecimalPlaces</link>);
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_class_writer_1a38715785194b42cd67ba5dd52bf7967e"/><section>
    <title>StartArray()</title>
<indexterm><primary>StartArray</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>StartArray</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::StartArray ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1aec3200b2fc80ec87d1c37f775256b2e1"/><section>
    <title>StartObject()</title>
<indexterm><primary>StartObject</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>StartObject</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::StartObject ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a2a2c6f51644b2013471aec4dac0d7466"/><section>
    <title>String()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>String</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>String</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::String (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> *const &amp; str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Simpler but slower overload. </para>
</para>
</section>
<anchor xml:id="_class_writer_1a8b4dc44f471403a83c9959575796ceab"/><section>
    <title>String()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>String</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>String</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::String (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> * str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a5fb0c3228f89f6f9bef15f3e6e6f1739"/><section>
    <title>Uint()</title>
<indexterm><primary>Uint</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Uint</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Uint (unsigned u)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a55bb9f286ecdaf4cdb07bddb02e0cb2d"/><section>
    <title>Uint64()</title>
<indexterm><primary>Uint64</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>Uint64</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::Uint64 (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u64)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a42ad68b6950431bb8ca0199568546eaf"/><section>
    <title>WriteBool()</title>
<indexterm><primary>WriteBool</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteBool</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteBool (bool b)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1ae7a0fc4740681d845d92c1213bd25aa1"/><section>
    <title>WriteDouble()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>WriteDouble</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteDouble</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteDouble (double d)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a114c748ae1f770c20f6ecd7cfc7b67bb"/><section>
    <title>WriteDouble()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>WriteDouble</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteDouble</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; <link linkend="_fwd_8h_1ab956b6537825abf8aac4112e81cfad7e">StringBuffer</link> &gt;::WriteDouble (double d)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1aabda2df1be6e83cef416e9b1f042e8f4"/><section>
    <title>WriteEndArray()</title>
<indexterm><primary>WriteEndArray</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteEndArray</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteEndArray ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a7e3f6760a50a72f4217a9b2d625c43ee"/><section>
    <title>WriteEndObject()</title>
<indexterm><primary>WriteEndObject</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteEndObject</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteEndObject ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a31d0feda654ca245c41462be7dc59998"/><section>
    <title>WriteInt()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>WriteInt</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteInt</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteInt (int i)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1aaa9cddc35dbc6a612ef01633ed8a6687"/><section>
    <title>WriteInt()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>WriteInt</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteInt</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; <link linkend="_fwd_8h_1ab956b6537825abf8aac4112e81cfad7e">StringBuffer</link> &gt;::WriteInt (int i)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1aa58d3f80c06394648de5055ecfb41587"/><section>
    <title>WriteInt64()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>WriteInt64</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteInt64</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteInt64 (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a439aacf94c862df151c16d9c907afe0f"/><section>
    <title>WriteInt64()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>WriteInt64</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteInt64</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; <link linkend="_fwd_8h_1ab956b6537825abf8aac4112e81cfad7e">StringBuffer</link> &gt;::WriteInt64 (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a44862b3eba8d84b909c69aba875c9f4d"/><section>
    <title>WriteNull()</title>
<indexterm><primary>WriteNull</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteNull</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteNull ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a8ee1135b2595261819b134907f67614e"/><section>
    <title>WriteRawValue()</title>
<indexterm><primary>WriteRawValue</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteRawValue</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteRawValue (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> * json, size_t length)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a3c3560a96cac58f98f4a74d6cb227204"/><section>
    <title>WriteStartArray()</title>
<indexterm><primary>WriteStartArray</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteStartArray</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteStartArray ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a81c72a2eecd47e042f56ca93a27a5cb1"/><section>
    <title>WriteStartObject()</title>
<indexterm><primary>WriteStartObject</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteStartObject</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteStartObject ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1acda4412ef5f4cac6e89f9544e4b10f70"/><section>
    <title>WriteString()</title>
<indexterm><primary>WriteString</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteString</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteString (const <link linkend="_class_writer_1ab08bff5fd2daec65f4a78779ca3d2139">Ch</link> * str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a2861227e93707d1478d2cf56644dca3b"/><section>
    <title>WriteUint()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>WriteUint</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteUint</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteUint (unsigned u)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a9159dbd1625b1506cd13c79e3b7bad4a"/><section>
    <title>WriteUint()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>WriteUint</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteUint</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; <link linkend="_fwd_8h_1ab956b6537825abf8aac4112e81cfad7e">StringBuffer</link> &gt;::WriteUint (unsigned u)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1aa1d514cd0200ec1732e74fe26ebcf463"/><section>
    <title>WriteUint64()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>WriteUint64</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteUint64</secondary></indexterm>
<para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; <link linkend="_fwd_8h_1ab956b6537825abf8aac4112e81cfad7e">StringBuffer</link> &gt;::WriteUint64 (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1ad07b325157220e3aa791c1c8c904021e"/><section>
    <title>WriteUint64()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>WriteUint64</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>WriteUint64</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::WriteUint64 (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u64)<computeroutput>[inline]</computeroutput>, <computeroutput>[protected]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_writer_1affc6b9e0332b50bee0d33f8b1841c9a6"/><section>
    <title>hasRoot_</title>
<indexterm><primary>hasRoot_</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>hasRoot_</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::hasRoot_<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a9cb4caeb9d8971f305edff1d70e67acb"/><section>
    <title>kDefaultLevelDepth</title>
<indexterm><primary>kDefaultLevelDepth</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>kDefaultLevelDepth</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>const size_t <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::kDefaultLevelDepth = 32<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1ab46d66ae0ca78cb03ab7fb865d129934"/><section>
    <title>kDefaultMaxDecimalPlaces</title>
<indexterm><primary>kDefaultMaxDecimalPlaces</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>kDefaultMaxDecimalPlaces</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>const int <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::kDefaultMaxDecimalPlaces = 324<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a9e6c13c06fc721dfd8486f17b9ff29de"/><section>
    <title>level_stack_</title>
<indexterm><primary>level_stack_</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>level_stack_</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt;StackAllocator&gt; <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::level_stack_<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a3d4ef664c3cdf34a286b13d27adcdd4d"/><section>
    <title>maxDecimalPlaces_</title>
<indexterm><primary>maxDecimalPlaces_</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>maxDecimalPlaces_</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>int <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::maxDecimalPlaces_<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_writer_1a3a3f60140f78dd67b5274978fd3a33ff"/><section>
    <title>os_</title>
<indexterm><primary>os_</primary><secondary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</secondary></indexterm>
<indexterm><primary>Writer&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;</primary><secondary>os_</secondary></indexterm>
<computeroutput>template&lt;typename OutputStream , typename SourceEncoding  = UTF8&lt;&gt;, typename TargetEncoding  = UTF8&lt;&gt;, typename StackAllocator  = CrtAllocator, unsigned writeFlags = kWriteDefaultFlags&gt; </computeroutput><para><computeroutput>OutputStream* <link linkend="_class_writer">Writer</link>&lt; OutputStream, SourceEncoding, TargetEncoding, StackAllocator, writeFlags &gt;::os_<computeroutput>[protected]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following files:</para>
src/rapidjson/include/rapidjson/<link linkend="_fwd_8h">fwd.h</link>src/rapidjson/include/rapidjson/<link linkend="_writer_8h">writer.h</link></section>
</section>
