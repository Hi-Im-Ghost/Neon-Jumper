<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g" xml:lang="en-US">
<title>RapidJSON configuration</title>
<indexterm><primary>RapidJSON configuration</primary></indexterm>
<para>

<para>Configuration macros for library features. </para>
 
</para>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga860570d04d489be08b9835d2ec58bac5">RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</link>   (64 * 1024)</para>

<para>User-defined kDefaultChunkCapacity definition. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga04a88f0b2db9091006eb7fc6deb6077b">RAPIDJSON_DEFAULT_ALLOCATOR</link>   <link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&lt;<link linkend="_class_crt_allocator">CrtAllocator</link>&gt;</para>

<para>Allows to choose default allocator. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga1178cffff7c596922a5ed3fda30c5520">RAPIDJSON_DEFAULT_STACK_ALLOCATOR</link>   <link linkend="_class_crt_allocator">CrtAllocator</link></para>

<para>Allows to choose default stack allocator for Document. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5c88aa612939b592d15d3fc4bdf54272">RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY</link>   16</para>

<para>User defined kDefaultObjectCapacity value. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga10ba0ee06d0ac2803d0f2290d46b19f7">RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY</link>   16</para>

<para>User defined kDefaultArrayCapacity value. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf1ff1685be6cbebb5d4b2ab997776f45">RAPIDJSON_MAJOR_VERSION</link>   1</para>

<para>Major version of RapidJSON in integer. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf9125105c593a636a79f1c2d96835376">RAPIDJSON_MINOR_VERSION</link>   1</para>

<para>Minor version of RapidJSON in integer. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf967d31be43666ce7f53756d73bd1cdf">RAPIDJSON_PATCH_VERSION</link>   0</para>

<para>Patch version of RapidJSON in integer. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad283cfde97d9a32b7d8e8107b11f70a6">RAPIDJSON_VERSION_STRING</link>       RAPIDJSON_STRINGIFY(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf967d31be43666ce7f53756d73bd1cdf">RAPIDJSON_MAJOR_VERSION.RAPIDJSON_MINOR_VERSION.RAPIDJSON_PATCH_VERSION</link>)</para>

<para>Version of RapidJSON in &quot;&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;&quot; string format. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga743a79d3af927391fe3eb5c979136899">RAPIDJSON_NAMESPACE</link>   rapidjson</para>

<para>provide custom rapidjson namespace </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>   namespace <link linkend="_simdtest_8cpp_1a743a79d3af927391fe3eb5c979136899">RAPIDJSON_NAMESPACE</link> {</para>

<para>provide custom rapidjson namespace (opening expression) </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>   }</para>

<para>provide custom rapidjson namespace (closing expression) </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2f2eef0ee4477f3fe5874703a66e997f">RAPIDJSON_HAS_STDSTRING</link>   0</para>

<para>Enable RapidJSON support for <computeroutput>std::string</computeroutput>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga87dc65109882910388121e1dba15038b">RAPIDJSON_USE_MEMBERSMAP</link></para>

<para>Enable RapidJSON support for object members handling in a <computeroutput>std::multimap</computeroutput>. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242">RAPIDJSON_ALIGN</link>(x)   (((x) + static_cast&lt;size_t&gt;(7u)) &amp; ~static_cast&lt;size_t&gt;(7u))</para>

<para>Data alignment of the machine. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga93fb983f78208d12c822376e1ea6d185">RAPIDJSON_48BITPOINTER_OPTIMIZATION</link>   0</para>

<para>Use only lower 48-bit address for some pointers. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(x)   assert(x)</para>

<para>Assertion. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1">RAPIDJSON_LIKELY</link>(x)   (x)</para>

<para>Compiler branching hint for expression with high probability to be true. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(x)   (x)</para>

<para>Compiler branching hint for expression with low probability to be true. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(x)   <link linkend="_unittest_8h_1abeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(x)</para>

<para>Assertion (in non-throwing contexts). </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga8d06f2d50592811d2890b45243b8adcc">RAPIDJSON_VALIDATE_DEFAULT_FLAGS</link>   <link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942a6479c4dbb9ae91ad95b4e6876a96cfa4">kValidateNoFlags</link></para>

<para>User-defined kValidateDefaultFlags definition. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Configuration macros for library features. </para>

<para>Some RapidJSON features are configurable to adapt the library to a wide variety of platforms, environments and usage scenarios. Most of the features can be configured in terms of overridden or predefined preprocessor macros at compile-time.</para>

<para>Some additional customization is available in the <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s">RapidJSON error handling</link> APIs.</para>

<para><note><title>Note</title>

<para>These macros should be given on the compiler command-line (where applicable) to avoid inconsistent values when compiling different translation units of a single application. </para>
</note>
</para>
</section>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga93fb983f78208d12c822376e1ea6d185"/><section>
    <title>RAPIDJSON_48BITPOINTER_OPTIMIZATION</title>
<indexterm><primary>RAPIDJSON_48BITPOINTER_OPTIMIZATION</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_48BITPOINTER_OPTIMIZATION</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_48BITPOINTER_OPTIMIZATION   0</computeroutput></para><para>

<para>Use only lower 48-bit address for some pointers. </para>
</para>

<para>This optimization uses the fact that current X86-64 architecture only implement lower 48-bit virtual address. The higher 16-bit can be used for storing other data. <computeroutput><link linkend="_class_generic_value">GenericValue</link></computeroutput> uses this optimization to reduce its size form 24 bytes to 16 bytes in 64-bit architecture. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242"/><section>
    <title>RAPIDJSON_ALIGN</title>
<indexterm><primary>RAPIDJSON_ALIGN</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_ALIGN</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_ALIGN( x)   (((x) + static_cast&lt;size_t&gt;(7u)) &amp; ~static_cast&lt;size_t&gt;(7u))</computeroutput></para><para>

<para>Data alignment of the machine. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para>pointer to align</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Some machines require strict data alignment. The default is 8 bytes. User can customize by defining the RAPIDJSON_ALIGN function macro. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga860570d04d489be08b9835d2ec58bac5"/><section>
    <title>RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</title>
<indexterm><primary>RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY   (64 * 1024)</computeroutput></para><para>

<para>User-defined kDefaultChunkCapacity definition. </para>
</para>

<para>User can define this as any <computeroutput>size</computeroutput> that is a power of 2. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c"/><section>
    <title>RAPIDJSON_ASSERT</title>
<indexterm><primary>RAPIDJSON_ASSERT</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_ASSERT</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_ASSERT( x)   assert(x)</computeroutput></para><para>

<para>Assertion. </para>
</para>

<para>By default, rapidjson uses C <computeroutput>assert()</computeroutput> for internal assertions. User can override it by defining <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT(x)</link> macro.</para>

<para><note><title>Note</title>

<para>Parsing errors are handled and can be customized by the <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s">RapidJSON error handling</link> APIs. </para>
</note>
</para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga04a88f0b2db9091006eb7fc6deb6077b"/><section>
    <title>RAPIDJSON_DEFAULT_ALLOCATOR</title>
<indexterm><primary>RAPIDJSON_DEFAULT_ALLOCATOR</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_DEFAULT_ALLOCATOR</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_DEFAULT_ALLOCATOR   <link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&lt;<link linkend="_class_crt_allocator">CrtAllocator</link>&gt;</computeroutput></para><para>

<para>Allows to choose default allocator. </para>
</para>

<para>User can define this to use <link linkend="_class_crt_allocator">CrtAllocator</link> or <link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga1178cffff7c596922a5ed3fda30c5520"/><section>
    <title>RAPIDJSON_DEFAULT_STACK_ALLOCATOR</title>
<indexterm><primary>RAPIDJSON_DEFAULT_STACK_ALLOCATOR</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_DEFAULT_STACK_ALLOCATOR</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_DEFAULT_STACK_ALLOCATOR   <link linkend="_class_crt_allocator">CrtAllocator</link></computeroutput></para><para>

<para>Allows to choose default stack allocator for Document. </para>
</para>

<para>User can define this to use <link linkend="_class_crt_allocator">CrtAllocator</link> or <link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2f2eef0ee4477f3fe5874703a66e997f"/><section>
    <title>RAPIDJSON_HAS_STDSTRING</title>
<indexterm><primary>RAPIDJSON_HAS_STDSTRING</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_HAS_STDSTRING</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_HAS_STDSTRING   0</computeroutput></para><para>

<para>Enable RapidJSON support for <computeroutput>std::string</computeroutput>. </para>
</para>

<para>By defining this preprocessor symbol to <computeroutput>1</computeroutput>, several convenience functions for using rapidjson::GenericValue with <computeroutput>std::string</computeroutput> are enabled, especially for construction and comparison. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5dc14176a9e71ace282404b0bcda57a1"/><section>
    <title>RAPIDJSON_LIKELY</title>
<indexterm><primary>RAPIDJSON_LIKELY</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_LIKELY</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_LIKELY( x)   (x)</computeroutput></para><para>

<para>Compiler branching hint for expression with high probability to be true. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para>Boolean expression likely to be true. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf1ff1685be6cbebb5d4b2ab997776f45"/><section>
    <title>RAPIDJSON_MAJOR_VERSION</title>
<indexterm><primary>RAPIDJSON_MAJOR_VERSION</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_MAJOR_VERSION</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_MAJOR_VERSION   1</computeroutput></para><para>

<para>Major version of RapidJSON in integer. </para>
</para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf9125105c593a636a79f1c2d96835376"/><section>
    <title>RAPIDJSON_MINOR_VERSION</title>
<indexterm><primary>RAPIDJSON_MINOR_VERSION</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_MINOR_VERSION</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_MINOR_VERSION   1</computeroutput></para><para>

<para>Minor version of RapidJSON in integer. </para>
</para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga743a79d3af927391fe3eb5c979136899"/><section>
    <title>RAPIDJSON_NAMESPACE</title>
<indexterm><primary>RAPIDJSON_NAMESPACE</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_NAMESPACE</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_NAMESPACE   rapidjson</computeroutput></para><para>

<para>provide custom rapidjson namespace </para>
</para>

<para>In order to avoid symbol clashes and/or &quot;One Definition Rule&quot; errors between multiple inclusions of (different versions of) RapidJSON in a single binary, users can customize the name of the main RapidJSON namespace.</para>

<para>In case of a single nesting level, defining <computeroutput>RAPIDJSON_NAMESPACE</computeroutput> to a custom name (e.g. <computeroutput>MyRapidJSON</computeroutput>) is sufficient. If multiple levels are needed, both <link linkend="_namespacetest_8cpp_1ad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link> and <link linkend="_namespacetest_8cpp_1af18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link> need to be defined as well:</para>

<para><literallayout><computeroutput><emphasis role="comment">//&#32;in&#32;some&#32;.cpp&#32;file</emphasis>
<emphasis role="preprocessor">#define&#32;RAPIDJSON_NAMESPACE&#32;my::rapidjson</emphasis>
<emphasis role="preprocessor">#define&#32;RAPIDJSON_NAMESPACE_BEGIN&#32;namespace&#32;my&#32;{&#32;namespace&#32;rapidjson&#32;{</emphasis>
<emphasis role="preprocessor">#define&#32;RAPIDJSON_NAMESPACE_END&#32;&#32;&#32;}&#32;}</emphasis>
<emphasis role="preprocessor">#include&#32;&quot;rapidjson/...&quot;</emphasis>
</computeroutput></literallayout></para>

<para><formalpara><title>See also</title>

<para><link linkend="_namespacerapidjson">rapidjson</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc"/><section>
    <title>RAPIDJSON_NAMESPACE_BEGIN</title>
<indexterm><primary>RAPIDJSON_NAMESPACE_BEGIN</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_NAMESPACE_BEGIN</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_NAMESPACE_BEGIN   namespace <link linkend="_simdtest_8cpp_1a743a79d3af927391fe3eb5c979136899">RAPIDJSON_NAMESPACE</link> {</computeroutput></para><para>

<para>provide custom rapidjson namespace (opening expression) </para>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga743a79d3af927391fe3eb5c979136899">RAPIDJSON_NAMESPACE</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1"/><section>
    <title>RAPIDJSON_NAMESPACE_END</title>
<indexterm><primary>RAPIDJSON_NAMESPACE_END</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_NAMESPACE_END</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_NAMESPACE_END   }</computeroutput></para><para>

<para>provide custom rapidjson namespace (closing expression) </para>
</para>

<para><formalpara><title>See also</title>

<para><link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga743a79d3af927391fe3eb5c979136899">RAPIDJSON_NAMESPACE</link> </para>
</formalpara>
</para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952"/><section>
    <title>RAPIDJSON_NOEXCEPT_ASSERT</title>
<indexterm><primary>RAPIDJSON_NOEXCEPT_ASSERT</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_NOEXCEPT_ASSERT</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_NOEXCEPT_ASSERT( x)   <link linkend="_unittest_8h_1abeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(x)</computeroutput></para><para>

<para>Assertion (in non-throwing contexts). </para>
</para>

<para>Some functions provide a <computeroutput>noexcept</computeroutput> guarantee, if the compiler supports it. In these cases, the <link linkend="_unittest_8h_1abeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link> macro cannot be overridden to throw an exception. This macro adds a separate customization point for such cases.</para>

<para>Defaults to C <computeroutput>assert()</computeroutput> (as <link linkend="_unittest_8h_1abeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>), if <computeroutput>noexcept</computeroutput> is supported, and to <link linkend="_unittest_8h_1abeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link> otherwise. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf967d31be43666ce7f53756d73bd1cdf"/><section>
    <title>RAPIDJSON_PATCH_VERSION</title>
<indexterm><primary>RAPIDJSON_PATCH_VERSION</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_PATCH_VERSION</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_PATCH_VERSION   0</computeroutput></para><para>

<para>Patch version of RapidJSON in integer. </para>
</para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5"/><section>
    <title>RAPIDJSON_UNLIKELY</title>
<indexterm><primary>RAPIDJSON_UNLIKELY</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_UNLIKELY</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_UNLIKELY( x)   (x)</computeroutput></para><para>

<para>Compiler branching hint for expression with low probability to be true. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>x</entry><entry>
<para>Boolean expression unlikely to be true. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga87dc65109882910388121e1dba15038b"/><section>
    <title>RAPIDJSON_USE_MEMBERSMAP</title>
<indexterm><primary>RAPIDJSON_USE_MEMBERSMAP</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_USE_MEMBERSMAP</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_USE_MEMBERSMAP</computeroutput></para><para>

<para>Enable RapidJSON support for object members handling in a <computeroutput>std::multimap</computeroutput>. </para>
</para>

<para>By defining this preprocessor symbol to <computeroutput>1</computeroutput>, rapidjson::GenericValue object members are stored in a <computeroutput>std::multimap</computeroutput> for faster lookup and deletion times, a trade off with a slightly slower insertion time and a small object allocat(or)ed memory overhead. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga8d06f2d50592811d2890b45243b8adcc"/><section>
    <title>RAPIDJSON_VALIDATE_DEFAULT_FLAGS</title>
<indexterm><primary>RAPIDJSON_VALIDATE_DEFAULT_FLAGS</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_VALIDATE_DEFAULT_FLAGS</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_VALIDATE_DEFAULT_FLAGS   <link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942a6479c4dbb9ae91ad95b4e6876a96cfa4">kValidateNoFlags</link></computeroutput></para><para>

<para>User-defined kValidateDefaultFlags definition. </para>
</para>

<para>User can define this as any <computeroutput>ValidateFlag</computeroutput> combinations. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga10ba0ee06d0ac2803d0f2290d46b19f7"/><section>
    <title>RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY</title>
<indexterm><primary>RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY   16</computeroutput></para><para>

<para>User defined kDefaultArrayCapacity value. </para>
</para>

<para>User can define this as any natural number. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5c88aa612939b592d15d3fc4bdf54272"/><section>
    <title>RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY</title>
<indexterm><primary>RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY   16</computeroutput></para><para>

<para>User defined kDefaultObjectCapacity value. </para>
</para>

<para>User can define this as any natural number. </para>
</section>
<anchor xml:id="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad283cfde97d9a32b7d8e8107b11f70a6"/><section>
    <title>RAPIDJSON_VERSION_STRING</title>
<indexterm><primary>RAPIDJSON_VERSION_STRING</primary><secondary>RapidJSON configuration</secondary></indexterm>
<indexterm><primary>RapidJSON configuration</primary><secondary>RAPIDJSON_VERSION_STRING</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_VERSION_STRING       RAPIDJSON_STRINGIFY(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf967d31be43666ce7f53756d73bd1cdf">RAPIDJSON_MAJOR_VERSION.RAPIDJSON_MINOR_VERSION.RAPIDJSON_PATCH_VERSION</link>)</computeroutput></para><para>

<para>Version of RapidJSON in &quot;&lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;&quot; string format. </para>
</para>
</section>
</section>
</section>
