<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_level_two_state" xml:lang="en-US">
<title>LevelTwoState Class Reference</title>
<indexterm><primary>LevelTwoState</primary></indexterm>
<para>
<computeroutput>#include &lt;LevelTwoState.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for LevelTwoState:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_level_two_state.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_level_two_state_1a163ba0c525f25d7ee56f58d4bc40171e">LevelTwoState</link> (std::stack&lt; <link linkend="_class_game_state">GameState</link> * &gt; *<link linkend="_class_game_state_1a6e9e1aa616cd1071425f2766a76957ec">states</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1aca927200ca6e61366401ac3ae0247dc1">update</link> (float deltaTime) override</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a442f2cd1d36c3919177d677c62828a17">render</link> (sf::RenderTarget &amp;window) override</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a65ea3507d5cb9957a940185c7fb9c4e2">loadGame</link> ()</para>

<para>Wczytuje grę </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_level_two_state_1a9b16e37984b8dca7003b543ad1424b77">initValues</link> ()</para>

<para>Inicjalizacja podstawowych wartości klasy. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a139c8204fd318fd3ebe6bd0c34f957a5">initHitboxes</link> ()</para>

<para>Rozmieszczenie hitboxów na mapie. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1af10ab66c4f8950caf408330d9d61648b">initDmgBoxes</link> ()</para>

<para>Rozmieszczenie obszarów zadających obrażenia na mapie. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a0bfd788d18fcc4e31ea0c0ac2f3972c5">initPauseButtons</link> ()</para>

<para>Inicjalizacja przycisków menu pauzy. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a0e3462e761c2a1388a1fc8912b2183cb">initEndButtons</link> ()</para>

<para>Inicjalizacja przycisków ekranu końcowego gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a9e96b08989f79d03172d36d0ad7a8431">initEndTrigger</link> ()</para>

<para>Inicjalizacja obszaru zakończenia gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a909cd3afcd67dc87cbe00ced11822964">initView</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1aa0e7f3d03a12891b6342b0b99bf97e9e">initViewPlayer</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1ab480fba3e22f9239e8ab6515284dbaf3">initEnemies</link> ()</para>

<para>Rozmieszczenie wrogów na mapie. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1ab5cbec107009eb5a6d9771f9e6ee7ac4">updateInput</link> ()</para>

<para>Czytanie klawiatury i wykonywanie odpowiednich operacji. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1aac012451de8345c8e14b42daf7276fa1">updatePaused</link> ()</para>

<para>Aktualizacja logiki gry podczas, gdy jest zapauzowana. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a67b82f49f0e4408e4fa938e153d4eab8">updateEnd</link> ()</para>

<para>Aktualizacja logiki po zakończeniu gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1adff85bb51976c5bc088c9dc96768169d">updateEntities</link> (float deltaTime)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1ad5cba366caeed8d83053e539ccf9c373">renderPaused</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a4bd07c0aac0d3d68a0ffa31241b4de2b">renderEnd</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a8f4072ff815628c8f20488a60142509d">renderEntities</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1af6ab6409ce5abbf530e5ff8b7617b4e9">updateEndTrigger</link> ()</para>

<para>Sprawdza, czy gracz nie wszedł na teren obszaru kończącego poziom. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a982e04960a62ed005cbcc7320ba62fb3">updateDmgTriggers</link> ()</para>

<para>Sprawdza czy gracz nie wszedł na teren obszaru zadającego obrażenia. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1a50e6d2840d4197f3f190de95ff50dd28">killPlayerTriggers</link> ()</para>

<para>Sprawdza czy gracz nie utonął, jeśli tak to zabija go. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_two_state_1aecea0c76cd6fb808e1543256decf0352">saveGame</link> ()</para>

<para>Zapisuje grę </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_player">Player</link> * <link linkend="_class_level_two_state_1a469bbf78ec84759245e10ac70adacc73">player</link></para>

<para>Odniesienie do obiektu gracza. </para>
</listitem>
            <listitem><para>std::list&lt; sf::RectangleShape &gt; <link linkend="_class_level_two_state_1a7ad92daf6ef97e948859dc855312d559">hitboxes</link></para>

<para>Lista hitboxów otoczenia. </para>
</listitem>
            <listitem><para>std::list&lt; sf::RectangleShape &gt; <link linkend="_class_level_two_state_1a575268e3daaec3cfa9b50bf95007a833">dmgboxes</link></para>

<para>Lista obszarów zadających obrażenia. </para>
</listitem>
            <listitem><para><link linkend="_class_load_map">LoadMap</link> <link linkend="_class_level_two_state_1a9984b1898dafc94488b4b7ecc7982a20">map</link></para>

<para>Odniesienie do wybranej przez nas mapy. </para>
</listitem>
            <listitem><para>std::list&lt; <link linkend="_class_enemy">Enemy</link> * &gt; <link linkend="_class_level_two_state_1aa99428d28b78c4053a45fbb3bb89fe73">enemies</link></para>

<para>Lista odniesień do wszystkich wrogów. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_two_state_1a6c2f1246e95f1b8d02a8c1811335d7ac">endMenuBtn</link></para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_two_state_1aa6320f0adf2f5d8afc4765308533cc9e">pauseResumeBtn</link></para>

<para>Odniesienie do przycisku powrotu do rozgrywki. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_two_state_1aae7cb005a7ca5aced940d1bde0f3f3ad">pauseExitBtn</link></para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_two_state_1a817be74f8d90f8b0287be73032c50052">loadBtn</link></para>

<para>Odniesienie do przycisku wczytania zapisu gry. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_two_state_1a08dad9c426b62223f0b3831f93e0e64e">saveBtn</link></para>

<para>Odniesienie do przycisku zapisu gry. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_level_two_state_1a46949a9ae2783460731891d944e16f0e">renderHitboxes</link> = false</para>

<para>Zmienna debug służąca do renderowania hitbox-ów. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_level_two_state_1a9f99d8d04959c85da282441f297827f3">level2</link></para>

<para>zmienna okreslajaca czy jestesmy na lvl2 </para>
</listitem>
            <listitem><para>int <link linkend="_class_level_two_state_1aa0cbae750b25cc91831e83ba3bf8e027">i</link> = 1</para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</listitem>
            <listitem><para>int <link linkend="_class_level_two_state_1a31c901a3ecb6dc8c3c9c829b3325a7ec">x</link> = 1</para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</listitem>
            <listitem><para>sf::RectangleShape <link linkend="_class_level_two_state_1a0e431278e634bbb8ad9d13cb8cc1e515">endLevelTrigger</link></para>

<para>Obszar wykrywający czy gracz przeszedł poziom. </para>
</listitem>
            <listitem><para><link linkend="_class_player_h_u_d">PlayerHUD</link> * <link linkend="_class_level_two_state_1a8fbdb4026b243b58cebd89fe0f1455a1">hud</link></para>

<para>Odniesienie do interfejsu użytkownika. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_level_two_state_1a163ba0c525f25d7ee56f58d4bc40171e"/><section>
    <title>LevelTwoState()</title>
<indexterm><primary>LevelTwoState</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>LevelTwoState</secondary></indexterm>
<para><computeroutput>LevelTwoState::LevelTwoState (std::stack&lt; <link linkend="_class_game_state">GameState</link> * &gt; * states)<computeroutput>[explicit]</computeroutput></computeroutput></para>
<para>Konstruktor przyjmujący odniesienie do stosu stanów aplikacji 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>states</entry><entry>
<para>odniesienie do stosu wszystkich stanów aplikacji </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_level_two_state_1af10ab66c4f8950caf408330d9d61648b"/><section>
    <title>initDmgBoxes()</title>
<indexterm><primary>initDmgBoxes</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initDmgBoxes</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initDmgBoxes ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Rozmieszczenie obszarów zadających obrażenia na mapie. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a0e3462e761c2a1388a1fc8912b2183cb"/><section>
    <title>initEndButtons()</title>
<indexterm><primary>initEndButtons</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initEndButtons</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initEndButtons ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja przycisków ekranu końcowego gry. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a9e96b08989f79d03172d36d0ad7a8431"/><section>
    <title>initEndTrigger()</title>
<indexterm><primary>initEndTrigger</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initEndTrigger</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initEndTrigger ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja obszaru zakończenia gry. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1ab480fba3e22f9239e8ab6515284dbaf3"/><section>
    <title>initEnemies()</title>
<indexterm><primary>initEnemies</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initEnemies</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initEnemies ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Rozmieszczenie wrogów na mapie. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a139c8204fd318fd3ebe6bd0c34f957a5"/><section>
    <title>initHitboxes()</title>
<indexterm><primary>initHitboxes</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initHitboxes</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initHitboxes ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Rozmieszczenie hitboxów na mapie. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a0bfd788d18fcc4e31ea0c0ac2f3972c5"/><section>
    <title>initPauseButtons()</title>
<indexterm><primary>initPauseButtons</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initPauseButtons</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initPauseButtons ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja przycisków menu pauzy. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a9b16e37984b8dca7003b543ad1424b77"/><section>
    <title>initValues()</title>
<indexterm><primary>initValues</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initValues</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initValues ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja podstawowych wartości klasy. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a909cd3afcd67dc87cbe00ced11822964"/><section>
    <title>initView()</title>
<indexterm><primary>initView</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initView</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initView (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Inicjalizacja kamery dla menu pauzy 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_two_state_1aa0e7f3d03a12891b6342b0b99bf97e9e"/><section>
    <title>initViewPlayer()</title>
<indexterm><primary>initViewPlayer</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>initViewPlayer</secondary></indexterm>
<para><computeroutput>void LevelTwoState::initViewPlayer (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Inicjalizacja kamery gracza 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_two_state_1a50e6d2840d4197f3f190de95ff50dd28"/><section>
    <title>killPlayerTriggers()</title>
<indexterm><primary>killPlayerTriggers</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>killPlayerTriggers</secondary></indexterm>
<para><computeroutput>void LevelTwoState::killPlayerTriggers ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Sprawdza czy gracz nie utonął, jeśli tak to zabija go. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a65ea3507d5cb9957a940185c7fb9c4e2"/><section>
    <title>loadGame()</title>
<indexterm><primary>loadGame</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>loadGame</secondary></indexterm>
<para><computeroutput>void LevelTwoState::loadGame ( )</computeroutput></para><para>

<para>Wczytuje grę </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a442f2cd1d36c3919177d677c62828a17"/><section>
    <title>render()</title>
<indexterm><primary>render</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>render</secondary></indexterm>
<para><computeroutput>void LevelTwoState::render (sf::RenderTarget &amp; window)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Wyświetla elementy stanu na ekranie 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym renderowane są elementy </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_class_game_state_1ab54d45c62b2ec2719bd48788b982b471">GameState</link>.</para>
</section>
<anchor xml:id="_class_level_two_state_1a4bd07c0aac0d3d68a0ffa31241b4de2b"/><section>
    <title>renderEnd()</title>
<indexterm><primary>renderEnd</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>renderEnd</secondary></indexterm>
<para><computeroutput>void LevelTwoState::renderEnd (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Wyświetlanie elementów gdy gracz zakończy grę 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym renderowane są elementy </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_two_state_1a8f4072ff815628c8f20488a60142509d"/><section>
    <title>renderEntities()</title>
<indexterm><primary>renderEntities</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>renderEntities</secondary></indexterm>
<para><computeroutput>void LevelTwoState::renderEntities (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Wyświetlanie przeciwników i gracza na ekranie 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym renderowane są elementy </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_two_state_1ad5cba366caeed8d83053e539ccf9c373"/><section>
    <title>renderPaused()</title>
<indexterm><primary>renderPaused</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>renderPaused</secondary></indexterm>
<para><computeroutput>void LevelTwoState::renderPaused (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Wyświetlanie na ekranie elementów, gdy rozgrywka jest spauzowana 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym renderowane są elementy </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_two_state_1aecea0c76cd6fb808e1543256decf0352"/><section>
    <title>saveGame()</title>
<indexterm><primary>saveGame</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>saveGame</secondary></indexterm>
<para><computeroutput>void LevelTwoState::saveGame ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zapisuje grę </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1aca927200ca6e61366401ac3ae0247dc1"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void LevelTwoState::update (float deltaTime)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Odświeża logikę stanu 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>deltaTime</entry><entry>
<para>czas pomiędzy klatkami aplikacji </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implements <link linkend="_class_game_state_1a360521bb5b371ea942a9e4e2ba1e8145">GameState</link>.</para>
</section>
<anchor xml:id="_class_level_two_state_1a982e04960a62ed005cbcc7320ba62fb3"/><section>
    <title>updateDmgTriggers()</title>
<indexterm><primary>updateDmgTriggers</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>updateDmgTriggers</secondary></indexterm>
<para><computeroutput>void LevelTwoState::updateDmgTriggers ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Sprawdza czy gracz nie wszedł na teren obszaru zadającego obrażenia. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a67b82f49f0e4408e4fa938e153d4eab8"/><section>
    <title>updateEnd()</title>
<indexterm><primary>updateEnd</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>updateEnd</secondary></indexterm>
<para><computeroutput>void LevelTwoState::updateEnd ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Aktualizacja logiki po zakończeniu gry. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1af6ab6409ce5abbf530e5ff8b7617b4e9"/><section>
    <title>updateEndTrigger()</title>
<indexterm><primary>updateEndTrigger</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>updateEndTrigger</secondary></indexterm>
<para><computeroutput>void LevelTwoState::updateEndTrigger ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Sprawdza, czy gracz nie wszedł na teren obszaru kończącego poziom. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1adff85bb51976c5bc088c9dc96768169d"/><section>
    <title>updateEntities()</title>
<indexterm><primary>updateEntities</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>updateEntities</secondary></indexterm>
<para><computeroutput>void LevelTwoState::updateEntities (float deltaTime)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Aktualizacja logiki wrogów na mapie 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>deltaTime</entry><entry>
<para>czas pomiędzy klatkami aplikacji </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_two_state_1ab5cbec107009eb5a6d9771f9e6ee7ac4"/><section>
    <title>updateInput()</title>
<indexterm><primary>updateInput</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>updateInput</secondary></indexterm>
<para><computeroutput>void LevelTwoState::updateInput ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Czytanie klawiatury i wykonywanie odpowiednich operacji. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1aac012451de8345c8e14b42daf7276fa1"/><section>
    <title>updatePaused()</title>
<indexterm><primary>updatePaused</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>updatePaused</secondary></indexterm>
<para><computeroutput>void LevelTwoState::updatePaused ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Aktualizacja logiki gry podczas, gdy jest zapauzowana. </para>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_level_two_state_1a575268e3daaec3cfa9b50bf95007a833"/><section>
    <title>dmgboxes</title>
<indexterm><primary>dmgboxes</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>dmgboxes</secondary></indexterm>
<para><computeroutput>std::list&lt;sf::RectangleShape&gt; LevelTwoState::dmgboxes<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Lista obszarów zadających obrażenia. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a0e431278e634bbb8ad9d13cb8cc1e515"/><section>
    <title>endLevelTrigger</title>
<indexterm><primary>endLevelTrigger</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>endLevelTrigger</secondary></indexterm>
<para><computeroutput>sf::RectangleShape LevelTwoState::endLevelTrigger<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Obszar wykrywający czy gracz przeszedł poziom. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a6c2f1246e95f1b8d02a8c1811335d7ac"/><section>
    <title>endMenuBtn</title>
<indexterm><primary>endMenuBtn</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>endMenuBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelTwoState::endMenuBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1aa99428d28b78c4053a45fbb3bb89fe73"/><section>
    <title>enemies</title>
<indexterm><primary>enemies</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>enemies</secondary></indexterm>
<para><computeroutput>std::list&lt;<link linkend="_class_enemy">Enemy</link>*&gt; LevelTwoState::enemies<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Lista odniesień do wszystkich wrogów. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a7ad92daf6ef97e948859dc855312d559"/><section>
    <title>hitboxes</title>
<indexterm><primary>hitboxes</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>hitboxes</secondary></indexterm>
<para><computeroutput>std::list&lt;sf::RectangleShape&gt; LevelTwoState::hitboxes<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Lista hitboxów otoczenia. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a8fbdb4026b243b58cebd89fe0f1455a1"/><section>
    <title>hud</title>
<indexterm><primary>hud</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>hud</secondary></indexterm>
<para><computeroutput><link linkend="_class_player_h_u_d">PlayerHUD</link>* LevelTwoState::hud<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do interfejsu użytkownika. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1aa0cbae750b25cc91831e83ba3bf8e027"/><section>
    <title>i</title>
<indexterm><primary>i</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>i</secondary></indexterm>
<para><computeroutput>int LevelTwoState::i = 1<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a9f99d8d04959c85da282441f297827f3"/><section>
    <title>level2</title>
<indexterm><primary>level2</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>level2</secondary></indexterm>
<para><computeroutput>bool LevelTwoState::level2<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>zmienna okreslajaca czy jestesmy na lvl2 </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a817be74f8d90f8b0287be73032c50052"/><section>
    <title>loadBtn</title>
<indexterm><primary>loadBtn</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>loadBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelTwoState::loadBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku wczytania zapisu gry. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a9984b1898dafc94488b4b7ecc7982a20"/><section>
    <title>map</title>
<indexterm><primary>map</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>map</secondary></indexterm>
<para><computeroutput><link linkend="_class_load_map">LoadMap</link> LevelTwoState::map<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do wybranej przez nas mapy. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1aae7cb005a7ca5aced940d1bde0f3f3ad"/><section>
    <title>pauseExitBtn</title>
<indexterm><primary>pauseExitBtn</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>pauseExitBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelTwoState::pauseExitBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1aa6320f0adf2f5d8afc4765308533cc9e"/><section>
    <title>pauseResumeBtn</title>
<indexterm><primary>pauseResumeBtn</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>pauseResumeBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelTwoState::pauseResumeBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku powrotu do rozgrywki. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a469bbf78ec84759245e10ac70adacc73"/><section>
    <title>player</title>
<indexterm><primary>player</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>player</secondary></indexterm>
<para><computeroutput><link linkend="_class_player">Player</link>* LevelTwoState::player<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do obiektu gracza. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a46949a9ae2783460731891d944e16f0e"/><section>
    <title>renderHitboxes</title>
<indexterm><primary>renderHitboxes</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>renderHitboxes</secondary></indexterm>
<para><computeroutput>bool LevelTwoState::renderHitboxes = false<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna debug służąca do renderowania hitbox-ów. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a08dad9c426b62223f0b3831f93e0e64e"/><section>
    <title>saveBtn</title>
<indexterm><primary>saveBtn</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>saveBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelTwoState::saveBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku zapisu gry. </para>
</para>
</section>
<anchor xml:id="_class_level_two_state_1a31c901a3ecb6dc8c3c9c829b3325a7ec"/><section>
    <title>x</title>
<indexterm><primary>x</primary><secondary>LevelTwoState</secondary></indexterm>
<indexterm><primary>LevelTwoState</primary><secondary>x</secondary></indexterm>
<para><computeroutput>int LevelTwoState::x = 1<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/states/<link linkend="__level_two_state_8h">LevelTwoState.h</link>src/states/<link linkend="__level_two_state_8cpp">LevelTwoState.cpp</link></section>
</section>
