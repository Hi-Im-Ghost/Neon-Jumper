<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_src_rapidjson_doc_schema_zh_cn" xml:lang="en-US">

<para>（本功能于 v1.1.0 发布）</para>

<para>JSON <link linkend="_class_schema">Schema</link> 是描述 JSON 格式的一个标准草案。一个 schema 本身也是一个 JSON。使用 JSON <link linkend="_class_schema">Schema</link> 去校验 JSON，可以让你的代码安全地访问 DOM，而无须检查类型或键值是否存在等。这也能确保输出的 JSON 是符合指定的 schema。</para>

<para>RapidJSON 实现了一个 <link xlink:href="http://json-schema.org/documentation.html">JSON Schema Draft v4</link> 的校验器。若你不熟悉 JSON Schema，可以参考 <link xlink:href="http://spacetelescope.github.io/understanding-json-schema/">Understanding JSON Schema</link>。</para>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1BasicUsage">
<title>Basic Usage</title>

<para>首先，你要把 JSON <link linkend="_class_schema">Schema</link> 解析成 <computeroutput>Document</computeroutput>，再把它编译成一个 <computeroutput>SchemaDocument</computeroutput>。</para>

<para>然后，利用该 <computeroutput>SchemaDocument</computeroutput> 创建一个 <computeroutput>SchemaValidator</computeroutput>。它与 <computeroutput><link linkend="_class_writer">Writer</link></computeroutput> 相似，都是能够处理 SAX 事件的。因此，你可以用 <computeroutput>document.Accept(validator)</computeroutput> 去校验一个 JSON，然后再获取校验结果。</para>

<para><literallayout><computeroutput>#include&#32;&quot;rapidjson/schema.h&quot;

//&#32;...

Document&#32;sd;
if&#32;(sd.Parse(schemaJson).HasParseError())&#32;{
&#32;&#32;&#32;&#32;//&#32;此&#32;schema&#32;不是合法的&#32;JSON
&#32;&#32;&#32;&#32;//&#32;...&#32;&#32;&#32;&#32;&#32;&#32;&#32;
}
SchemaDocument&#32;schema(sd);&#32;//&#32;把一个&#32;Document&#32;编译至&#32;SchemaDocument
//&#32;之后不再需要&#32;sd

Document&#32;d;
if&#32;(d.Parse(inputJson).HasParseError())&#32;{
&#32;&#32;&#32;&#32;//&#32;输入不是一个合法的&#32;JSON
&#32;&#32;&#32;&#32;//&#32;...&#32;&#32;&#32;&#32;&#32;&#32;&#32;
}

SchemaValidator&#32;validator(schema);
if&#32;(!d.Accept(validator))&#32;{
&#32;&#32;&#32;&#32;//&#32;输入的&#32;JSON&#32;不合乎&#32;schema
&#32;&#32;&#32;&#32;//&#32;打印诊断信息
&#32;&#32;&#32;&#32;StringBuffer&#32;sb;
&#32;&#32;&#32;&#32;validator.GetInvalidSchemaPointer().StringifyUriFragment(sb);
&#32;&#32;&#32;&#32;printf(&quot;Invalid&#32;schema:&#32;%s\n&quot;,&#32;sb.GetString());
&#32;&#32;&#32;&#32;printf(&quot;Invalid&#32;keyword:&#32;%s\n&quot;,&#32;validator.GetInvalidSchemaKeyword());
&#32;&#32;&#32;&#32;sb.Clear();
&#32;&#32;&#32;&#32;validator.GetInvalidDocumentPointer().StringifyUriFragment(sb);
&#32;&#32;&#32;&#32;printf(&quot;Invalid&#32;document:&#32;%s\n&quot;,&#32;sb.GetString());
}
</computeroutput></literallayout></para>

<para>一些注意点：</para>

<para><itemizedlist>
<listitem>
<para>一个 <computeroutput>SchemaDocment</computeroutput> 能被多个 <computeroutput>SchemaValidator</computeroutput> 引用。它不会被 <computeroutput>SchemaValidator</computeroutput> 修改。</para>
</listitem><listitem>
<para>可以重复使用一个 <computeroutput>SchemaValidator</computeroutput> 来校验多个文件。在校验其他文件前，须先调用 <computeroutput>validator.Reset()</computeroutput>。</para>
</listitem></itemizedlist>
</para>
</section>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1ParsingSerialization">
<title>在解析／生成时进行校验</title>

<para>与大部分 JSON <link linkend="_class_schema">Schema</link> 校验器有所不同，RapidJSON 提供了一个基于 SAX 的 schema 校验器实现。因此，你可以在输入流解析 JSON 的同时进行校验。若校验器遇到一个与 schema 不符的值，就会立即终止解析。这设计对于解析大型 JSON 文件时特别有用。</para>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1DomParsing">
<title>DOM 解析</title>

<para>在使用 DOM 进行解析时，<computeroutput>Document</computeroutput> 除了接收 SAX 事件外，还需做一些准备及结束工作，因此，为了连接 <computeroutput>Reader</computeroutput>、<computeroutput>SchemaValidator</computeroutput> 和 <computeroutput>Document</computeroutput> 要做多一点事情。<computeroutput><link linkend="_class_schema_validating_reader">SchemaValidatingReader</link></computeroutput> 是一个辅助类去做那些工作。</para>

<para><literallayout><computeroutput>#include&#32;&quot;rapidjson/filereadstream.h&quot;

//&#32;...
SchemaDocument&#32;schema(sd);&#32;//&#32;把一个&#32;Document&#32;编译至&#32;SchemaDocument

//&#32;使用&#32;reader&#32;解析&#32;JSON
FILE*&#32;fp&#32;=&#32;fopen(&quot;big.json&quot;,&#32;&quot;r&quot;);
FileReadStream&#32;is(fp,&#32;buffer,&#32;sizeof(buffer));

//&#32;用&#32;reader&#32;解析&#32;JSON，校验它的&#32;SAX&#32;事件，并存储至&#32;d
Document&#32;d;
SchemaValidatingReader&lt;kParseDefaultFlags,&#32;FileReadStream,&#32;UTF8&lt;&gt;&#32;&gt;&#32;reader(is,&#32;schema);
d.Populate(reader);

if&#32;(!reader.GetParseResult())&#32;{
&#32;&#32;&#32;&#32;//&#32;不是一个合法的&#32;JSON
&#32;&#32;&#32;&#32;//&#32;当&#32;reader.GetParseResult().Code()&#32;==&#32;kParseErrorTermination,
&#32;&#32;&#32;&#32;//&#32;它可能是被以下原因中止：
&#32;&#32;&#32;&#32;//&#32;(1)&#32;校验器发现&#32;JSON&#32;不合乎&#32;schema；或
&#32;&#32;&#32;&#32;//&#32;(2)&#32;输入流有&#32;I/O&#32;错误。

&#32;&#32;&#32;&#32;//&#32;检查校验结果
&#32;&#32;&#32;&#32;if&#32;(!reader.IsValid())&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;输入的&#32;JSON&#32;不合乎&#32;schema
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;打印诊断信息
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StringBuffer&#32;sb;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reader.GetInvalidSchemaPointer().StringifyUriFragment(sb);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;Invalid&#32;schema:&#32;%s\n&quot;,&#32;sb.GetString());
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;Invalid&#32;keyword:&#32;%s\n&quot;,&#32;reader.GetInvalidSchemaKeyword());
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sb.Clear();
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;reader.GetInvalidDocumentPointer().StringifyUriFragment(sb);
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;Invalid&#32;document:&#32;%s\n&quot;,&#32;sb.GetString());
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1SaxParsing">
<title>Parsing</title>

<para>使用 SAX 解析时，情况就简单得多。若只需要校验 JSON 而无需进一步处理，那么仅需要：</para>

<para><literallayout><computeroutput>SchemaValidator&#32;validator(schema);
Reader&#32;reader;
if&#32;(!reader.Parse(stream,&#32;validator))&#32;{
&#32;&#32;&#32;&#32;if&#32;(!validator.IsValid())&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;...&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>这种方式和 <link xlink:href="example/schemavalidator/schemavalidator.cpp">schemavalidator</link> 例子完全相同。这带来的独特优势是，无论 JSON 多巨大，永远维持低内存用量（内存用量只与 <link linkend="_class_schema">Schema</link> 的复杂度相关）。</para>

<para>若你需要进一步处理 SAX 事件，便可使用模板类 <computeroutput><link linkend="_class_generic_schema_validator">GenericSchemaValidator</link></computeroutput> 去设置校验器的输出 <computeroutput>Handler</computeroutput>：</para>

<para><literallayout><computeroutput>MyHandler&#32;handler;
GenericSchemaValidator&lt;SchemaDocument,&#32;MyHandler&gt;&#32;validator(schema,&#32;handler);
Reader&#32;reader;
if&#32;(!reader.Parse(ss,&#32;validator))&#32;{
&#32;&#32;&#32;&#32;if&#32;(!validator.IsValid())&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;...&#32;&#32;&#32;&#32;
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1Serialization">
<title>Serialization</title>

<para>我们也可以在生成（serialization）的时候进行校验。这能确保输出的 JSON 符合一个 JSON Schema。</para>

<para><literallayout><computeroutput>StringBuffer&#32;sb;
Writer&lt;StringBuffer&gt;&#32;writer(sb);
GenericSchemaValidator&lt;SchemaDocument,&#32;Writer&lt;StringBuffer&gt;&#32;&gt;&#32;validator(s,&#32;writer);
if&#32;(!d.Accept(validator))&#32;{
&#32;&#32;&#32;&#32;//&#32;Some&#32;problem&#32;during&#32;Accept(),&#32;it&#32;may&#32;be&#32;validation&#32;or&#32;encoding&#32;issues.
&#32;&#32;&#32;&#32;if&#32;(!validator.IsValid())&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;...
&#32;&#32;&#32;&#32;}
}
</computeroutput></literallayout></para>

<para>当然，如果你的应用仅需要 SAX 风格的生成，那么只需要把 SAX 事件由原来发送到 <computeroutput><link linkend="_class_writer">Writer</link></computeroutput>，改为发送到 <computeroutput>SchemaValidator</computeroutput>。</para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1RemoteSchema">
<title>远程 Schema</title>

<para>JSON <link linkend="_class_schema">Schema</link> 支持 <link xlink:href="http://spacetelescope.github.io/understanding-json-schema/structuring.html"><computeroutput>$ref</computeroutput> 关键字</link>，它是一个 <link linkend="_pointer_8zh-cn_8md">JSON pointer</link> 引用至一个本地（local）或远程（remote） schema。本地指针的首字符是 <computeroutput>#</computeroutput>，而远程指针是一个相对或绝对 URI。例如：</para>

<para><literallayout><computeroutput>{&#32;&quot;$ref&quot;:&#32;&quot;definitions.json#/address&quot;&#32;}
</computeroutput></literallayout></para>

<para>由于 <computeroutput>SchemaDocument</computeroutput> 并不知道如何处理那些 URI，它需要使用者提供一个 <computeroutput>IRemoteSchemaDocumentProvider</computeroutput> 的实例去处理。</para>

<para><literallayout><computeroutput>class&#32;MyRemoteSchemaDocumentProvider&#32;:&#32;public&#32;IRemoteSchemaDocumentProvider&#32;{
public:
&#32;&#32;&#32;&#32;virtual&#32;const&#32;SchemaDocument*&#32;GetRemoteDocument(const&#32;char*&#32;uri,&#32;SizeType&#32;length)&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;Resolve&#32;the&#32;uri&#32;and&#32;returns&#32;a&#32;pointer&#32;to&#32;that&#32;schema.
&#32;&#32;&#32;&#32;}
};

//&#32;...

MyRemoteSchemaDocumentProvider&#32;provider;
SchemaDocument&#32;schema(sd,&#32;&amp;provider);
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1Conformance">
<title>Conformance</title>

<para>RapidJSON 通过了 <link xlink:href="https://github.com/json-schema/JSON-Schema-Test-Suite">JSON Schema Test Suite</link> (Json <link linkend="_class_schema">Schema</link> draft 4) 中 263 个测试的 262 个。</para>

<para>没通过的测试是 <computeroutput>refRemote.json</computeroutput> 中的 &quot;change resolution scope&quot; - &quot;changed scope ref invalid&quot;。这是由于未实现 <computeroutput>id</computeroutput> schema 关键字及 URI 合并功能。</para>

<para>除此以外，关于字符串类型的 <computeroutput>format</computeroutput> schema 关键字也会被忽略，因为标准中并没需求必须实现。</para>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1RegEx">
<title>正则表达式</title>

<para><computeroutput>pattern</computeroutput> 及 <computeroutput>patternProperties</computeroutput> 这两个 schema 关键字使用了正则表达式去匹配所需的模式。</para>

<para>RapidJSON 实现了一个简单的 NFA 正则表达式引擎，并预设使用。它支持以下语法。</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row  class='markdownTableHead'>
<entry>
<para>语法   </para>
</entry><entry>
<para>描述    </para>
</entry></row>
</thead><tbody>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>ab</computeroutput>   </para>
</entry><entry>
<para>串联    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>a&amp;#124;b</computeroutput>   </para>
</entry><entry>
<para>交替    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>a?</computeroutput>   </para>
</entry><entry>
<para>零或一次    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>a*</computeroutput>   </para>
</entry><entry>
<para>零或多次    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>a+</computeroutput>   </para>
</entry><entry>
<para>一或多次    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>a{3}</computeroutput>   </para>
</entry><entry>
<para>刚好 3 次    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>a{3,}</computeroutput>   </para>
</entry><entry>
<para>至少 3 次    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>a{3,5}</computeroutput>   </para>
</entry><entry>
<para>3 至 5 次    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>(ab)</computeroutput>   </para>
</entry><entry>
<para>分组    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>^a</computeroutput>   </para>
</entry><entry>
<para>在开始处    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>a$</computeroutput>   </para>
</entry><entry>
<para>在结束处    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>.</computeroutput>   </para>
</entry><entry>
<para>任何字符    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>[abc]</computeroutput>   </para>
</entry><entry>
<para>字符组    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>[a-c]</computeroutput>   </para>
</entry><entry>
<para>字符组范围    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>[a-z0-9_]</computeroutput>   </para>
</entry><entry>
<para>字符组组合    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>[^abc]</computeroutput>   </para>
</entry><entry>
<para>字符组取反    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>[^a-c]</computeroutput>   </para>
</entry><entry>
<para>字符组范围取反    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>[\b]</computeroutput>   </para>
</entry><entry>
<para>退格符 (U+0008)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>\&amp;#124;</computeroutput>, <computeroutput>\\</computeroutput>, ...   </para>
</entry><entry>
<para>转义字符    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>\f</computeroutput>   </para>
</entry><entry>
<para>馈页 (U+000C)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>\n</computeroutput>   </para>
</entry><entry>
<para>馈行 (U+000A)    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>\r</computeroutput>   </para>
</entry><entry>
<para>回车 (U+000D)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>\t</computeroutput>   </para>
</entry><entry>
<para>制表 (U+0009)    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>\v</computeroutput>   </para>
</entry><entry>
<para>垂直制表 (U+000B)   </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>对于使用 C++11 编译器的使用者，也可使用 <computeroutput>std::regex</computeroutput>，只需定义 <computeroutput>RAPIDJSON_SCHEMA_USE_INTERNALREGEX=0</computeroutput> 及 <computeroutput>RAPIDJSON_SCHEMA_USE_STDREGEX=1</computeroutput>。若你的 schema 无需使用 <computeroutput>pattern</computeroutput> 或 <computeroutput>patternProperties</computeroutput>，可以把两个宏都设为零，以禁用此功能，这样做可节省一些代码体积。</para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_schema_zh_cn_1Performance">
<title>Performance</title>

<para>大部分 C++ JSON 库都未支持 JSON Schema。因此我们尝试按照 <link xlink:href="https://github.com/ebdrup/json-schema-benchmark">json-schema-benchmark</link> 去评估 RapidJSON 的 JSON <link linkend="_class_schema">Schema</link> 校验器。该评测测试了 11 个运行在 node.js 上的 JavaScript 库。</para>

<para>该评测校验 <link xlink:href="https://github.com/json-schema/JSON-Schema-Test-Suite">JSON Schema Test Suite</link> 中的测试，当中排除了一些测试套件及个别测试。我们在 <link xlink:href="test/perftest/schematest.cpp"><computeroutput>schematest.cpp</computeroutput></link> 实现了相同的评测。</para>

<para>在 MacBook Pro (2.8 GHz Intel Core i7) 上收集到以下结果。</para>

<para><informaltable frame="all">
    <tgroup cols="3" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
      <colspec colname='c3'/>
<thead>
      <row  class='markdownTableHead'>
<entry>
<para>校验器   </para>
</entry><entry align='center'>
<para>相对速度   </para>
</entry><entry align='center'>
<para>每秒执行的测试数目    </para>
</entry></row>
</thead><tbody>
      <row  class='markdownTableRowOdd'>
<entry>
<para>RapidJSON   </para>
</entry><entry align='center'>
<para>155%   </para>
</entry><entry align='center'>
<para>30682    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><link xlink:href="https://github.com/epoberezkin/ajv"><computeroutput>ajv</computeroutput></link>   </para>
</entry><entry align='center'>
<para>100%   </para>
</entry><entry align='center'>
<para>19770 (± 1.31%)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><link xlink:href="https://github.com/mafintosh/is-my-json-valid"><computeroutput>is-my-json-valid</computeroutput></link>   </para>
</entry><entry align='center'>
<para>70%   </para>
</entry><entry align='center'>
<para>13835 (± 2.84%)    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><link xlink:href="https://github.com/bugventure/jsen"><computeroutput>jsen</computeroutput></link>   </para>
</entry><entry align='center'>
<para>57.7%   </para>
</entry><entry align='center'>
<para>11411 (± 1.27%)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><link xlink:href="https://github.com/AlexeyGrishin/schemasaurus"><computeroutput>schemasaurus</computeroutput></link>   </para>
</entry><entry align='center'>
<para>26%   </para>
</entry><entry align='center'>
<para>5145 (± 1.62%)    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><link xlink:href="https://github.com/playlyfe/themis"><computeroutput>themis</computeroutput></link>   </para>
</entry><entry align='center'>
<para>19.9%   </para>
</entry><entry align='center'>
<para>3935 (± 2.69%)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><link xlink:href="https://github.com/zaggino/z-schema"><computeroutput>z-schema</computeroutput></link>   </para>
</entry><entry align='center'>
<para>7%   </para>
</entry><entry align='center'>
<para>1388 (± 0.84%)    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><link xlink:href="https://github.com/pandastrike/jsck#readme"><computeroutput>jsck</computeroutput></link>   </para>
</entry><entry align='center'>
<para>3.1%   </para>
</entry><entry align='center'>
<para>606 (± 2.84%)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><link xlink:href="https://github.com/tdegrunt/jsonschema#readme"><computeroutput>jsonschema</computeroutput></link>   </para>
</entry><entry align='center'>
<para>0.9%   </para>
</entry><entry align='center'>
<para>185 (± 1.01%)    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><link xlink:href="https://github.com/Prestaul/skeemas#readme"><computeroutput>skeemas</computeroutput></link>   </para>
</entry><entry align='center'>
<para>0.8%   </para>
</entry><entry align='center'>
<para>154 (± 0.79%)    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para>tv4   </para>
</entry><entry align='center'>
<para>0.5%   </para>
</entry><entry align='center'>
<para>93 (± 0.94%)    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><link xlink:href="https://github.com/natesilva/jayschema"><computeroutput>jayschema</computeroutput></link>   </para>
</entry><entry align='center'>
<para>0.1%   </para>
</entry><entry align='center'>
<para>21 (± 1.14%)   </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>换言之，RapidJSON 比最快的 JavaScript 库（ajv）快约 1.5x。比最慢的快 1400x。 </para>
</section>
</section>
