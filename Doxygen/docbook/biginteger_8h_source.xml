<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_biginteger_8h_source" xml:lang="en-US">
<title>biginteger.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/internal/biginteger.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available.</emphasis>
2 <emphasis role="comment">//&#32;</emphasis>
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015&#32;THL&#32;A29&#32;Limited,&#32;a&#32;Tencent&#32;company,&#32;and&#32;Milo&#32;Yip.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License.&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource.org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed&#32;</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.&#32;See&#32;the&#32;License&#32;for&#32;the&#32;</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_BIGINTEGER_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_BIGINTEGER_H_</emphasis>
17 
18 <emphasis role="preprocessor">#include&#32;&quot;../rapidjson.h&quot;</emphasis>
19 
20 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;!defined(__INTEL_COMPILER)&#32;&amp;&amp;&#32;defined(_M_AMD64)</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;intrin.h&gt;</emphasis>&#32;<emphasis role="comment">//&#32;for&#32;_umul128</emphasis>
22 <emphasis role="preprocessor">#if&#32;!defined(_ARM64EC_)</emphasis>
23 <emphasis role="preprocessor">#pragma&#32;intrinsic(_umul128)</emphasis>
24 <emphasis role="preprocessor">#else</emphasis>
25 <emphasis role="preprocessor">#pragma&#32;comment(lib,&quot;softintrin&quot;</emphasis>)
26 <emphasis role="preprocessor">#endif</emphasis>
27 <emphasis role="preprocessor">#endif</emphasis>
28 
29 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
30 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceinternal">internal</link>&#32;{
31 
32 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_big_integer">BigInteger</link>&#32;{
33 <emphasis role="keyword">public</emphasis>:
34 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>;
35 
36 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer_1abec623168bc9494dec2f50643b897f72">BigInteger</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;rhs)&#32;:&#32;count_(rhs.count_)&#32;{
37 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(digits_,&#32;rhs.digits_,&#32;count_&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>));
38 &#32;&#32;&#32;&#32;}
39 
40 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1ad02b0ef9da203efddd4af07e923732c0">BigInteger</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u)&#32;:&#32;count_(1)&#32;{
41 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[0]&#32;=&#32;u;
42 &#32;&#32;&#32;&#32;}
43 
44 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Ch&gt;
45 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer_1a4dc2632b2aa2973d18864a127d7c141a">BigInteger</link>(<emphasis role="keyword">const</emphasis>&#32;Ch*&#32;decimals,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length)&#32;:&#32;count_(1)&#32;{
46 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(length&#32;&gt;&#32;0);
47 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[0]&#32;=&#32;0;
48 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;
49 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kMaxDigitPerIteration&#32;=&#32;19;&#32;&#32;<emphasis role="comment">//&#32;2^64&#32;=&#32;18446744073709551616&#32;&gt;&#32;10^19</emphasis>
50 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(length&#32;&gt;=&#32;kMaxDigitPerIteration)&#32;{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AppendDecimal64(decimals&#32;+&#32;i,&#32;decimals&#32;+&#32;i&#32;+&#32;kMaxDigitPerIteration);
52 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;length&#32;-=&#32;kMaxDigitPerIteration;
53 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;kMaxDigitPerIteration;
54 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
55 
56 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(length&#32;&gt;&#32;0)
57 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AppendDecimal64(decimals&#32;+&#32;i,&#32;decimals&#32;+&#32;i&#32;+&#32;length);
58 &#32;&#32;&#32;&#32;}
59 &#32;&#32;&#32;&#32;
60 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;<link linkend="_classinternal_1_1_big_integer_1ac783203409480350dbbcd9e0c95001be">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&#32;&amp;rhs)
61 &#32;&#32;&#32;&#32;{
62 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;rhs)&#32;{
63 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count_&#32;=&#32;rhs.count_;
64 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(digits_,&#32;rhs.digits_,&#32;count_&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>));
65 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
66 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
67 &#32;&#32;&#32;&#32;}
68 &#32;&#32;&#32;&#32;
69 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;<link linkend="_classinternal_1_1_big_integer_1a0ffe0c4c762312682d60e82c38b38c45">operator=</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u)&#32;{
70 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[0]&#32;=&#32;u;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
71 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count_&#32;=&#32;1;
72 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
73 &#32;&#32;&#32;&#32;}
74 
75 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;<link linkend="_classinternal_1_1_big_integer_1ad77a8a66494070c1518d8ca4948cbfae">operator+=</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u)&#32;{
76 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>&#32;backup&#32;=&#32;digits_[0];
77 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[0]&#32;+=&#32;u;
78 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count_&#32;-&#32;1;&#32;i++)&#32;{
79 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digits_[i]&#32;&gt;=&#32;backup)
80 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;&#32;<emphasis role="comment">//&#32;no&#32;carry</emphasis>
81 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;backup&#32;=&#32;digits_[i&#32;+&#32;1];
82 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[i&#32;+&#32;1]&#32;+=&#32;1;
83 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
84 
85 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Last&#32;carry</emphasis>
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digits_[count_&#32;-&#32;1]&#32;&lt;&#32;backup)
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PushBack(1);
88 
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
90 &#32;&#32;&#32;&#32;}
91 
92 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;<link linkend="_classinternal_1_1_big_integer_1a212b816f6d07b5b50347bde5a96a0160">operator*=</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u)&#32;{
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(u&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;0;
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(u&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;u;
96 
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;k&#32;=&#32;0;
98 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count_;&#32;i++)&#32;{
99 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;hi;
100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[i]&#32;=&#32;MulAdd64(digits_[i],&#32;u,&#32;k,&#32;&amp;hi);
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k&#32;=&#32;hi;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
104 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&gt;&#32;0)
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PushBack(k);
106 
107 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
108 &#32;&#32;&#32;&#32;}
109 
110 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;<link linkend="_classinternal_1_1_big_integer_1ad6b2e9b15ae1e1c9c2f8e68112b3f265">operator*=</link>(<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;u)&#32;{
111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(u&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;0;
112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(u&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
113 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*<emphasis role="keyword">this</emphasis>&#32;==&#32;1)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;u;
114 
115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;k&#32;=&#32;0;
116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count_;&#32;i++)&#32;{
117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;c&#32;=&#32;digits_[i]&#32;&gt;&gt;&#32;32;
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;d&#32;=&#32;digits_[i]&#32;&amp;&#32;0xFFFFFFFF;
119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;uc&#32;=&#32;u&#32;*&#32;c;
120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;ud&#32;=&#32;u&#32;*&#32;d;
121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;p0&#32;=&#32;ud&#32;+&#32;k;
122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;p1&#32;=&#32;uc&#32;+&#32;(p0&#32;&gt;&gt;&#32;32);
123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[i]&#32;=&#32;(p0&#32;&amp;&#32;0xFFFFFFFF)&#32;|&#32;(p1&#32;&lt;&lt;&#32;32);
124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;k&#32;=&#32;p1&#32;&gt;&gt;&#32;32;
125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(k&#32;&gt;&#32;0)
128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PushBack(k);
129 
130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
131 &#32;&#32;&#32;&#32;}
132 
133 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;<link linkend="_classinternal_1_1_big_integer_1a06a6f5d1d81b91248b0ab3c2d65a500a">operator&lt;&lt;=</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;shift)&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classinternal_1_1_big_integer_1ae12dd6759f1f76501db3d1bcafce39cd">IsZero</link>()&#32;||&#32;shift&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
135 
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;offset&#32;=&#32;shift&#32;/&#32;kTypeBit;
137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;interShift&#32;=&#32;shift&#32;%&#32;kTypeBit;
138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(count_&#32;+&#32;offset&#32;&lt;=&#32;kCapacity);
139 
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(interShift&#32;==&#32;0)&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memmove(digits_&#32;+&#32;offset,&#32;digits_,&#32;count_&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>));
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count_&#32;+=&#32;offset;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[count_]&#32;=&#32;0;
146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;count_;&#32;i&#32;&gt;&#32;0;&#32;i--)
147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[i&#32;+&#32;offset]&#32;=&#32;(digits_[i]&#32;&lt;&lt;&#32;interShift)&#32;|&#32;(digits_[i&#32;-&#32;1]&#32;&gt;&gt;&#32;(kTypeBit&#32;-&#32;interShift));
148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[offset]&#32;=&#32;digits_[0]&#32;&lt;&lt;&#32;interShift;
149 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count_&#32;+=&#32;offset;
150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digits_[count_])
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;count_++;
152 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
153 
154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(digits_,&#32;0,&#32;offset&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>));
155 
156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
157 &#32;&#32;&#32;&#32;}
158 
159 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1a52b424669238bdebc134e793d3b470ae">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count_&#32;==&#32;rhs.count_&#32;&amp;&amp;&#32;std::memcmp(digits_,&#32;rhs.digits_,&#32;count_&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>))&#32;==&#32;0;
161 &#32;&#32;&#32;&#32;}
162 
163 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1a8b6ab0d652d461c1136e0388d352628b">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count_&#32;==&#32;1&#32;&amp;&amp;&#32;digits_[0]&#32;==&#32;rhs;
165 &#32;&#32;&#32;&#32;}
166 
167 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;<link linkend="_classinternal_1_1_big_integer_1af491885747a0442492134c23a6ec4c65">MultiplyPow5</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;exp)&#32;{
168 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;kPow5[12]&#32;=&#32;{
169 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5,
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5,
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5,
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
173 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5,
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5&#32;*&#32;5
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;};
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exp&#32;==&#32;0)&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;exp&#32;&gt;=&#32;27;&#32;exp&#32;-=&#32;27)&#32;*<emphasis role="keyword">this</emphasis>&#32;*=&#32;<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0X6765C793,&#32;0XFA10079D);&#32;<emphasis role="comment">//&#32;5^27</emphasis>
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;&#32;exp&#32;&gt;=&#32;13;&#32;exp&#32;-=&#32;13)&#32;*<emphasis role="keyword">this</emphasis>&#32;*=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(1220703125u);&#32;<emphasis role="comment">//&#32;5^13</emphasis>
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exp&#32;&gt;&#32;0)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;*=&#32;kPow5[exp&#32;-&#32;1];
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
187 &#32;&#32;&#32;&#32;}
188 
189 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Compute&#32;absolute&#32;difference&#32;of&#32;this&#32;and&#32;rhs.</emphasis>
190 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assume&#32;this&#32;!=&#32;rhs</emphasis>
191 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1ad7ad62e6b62af38283ee940eb4015b26">Difference</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;rhs,&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>*&#32;out)<emphasis role="keyword">&#32;const&#32;</emphasis>{
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;cmp&#32;=&#32;<link linkend="_classinternal_1_1_big_integer_1af8e90fff5382de6c1cda5f751017200c">Compare</link>(rhs);
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(cmp&#32;!=&#32;0);
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&#32;*<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;*b;&#32;&#32;<emphasis role="comment">//&#32;Makes&#32;a&#32;&gt;&#32;b</emphasis>
195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ret;
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(cmp&#32;&lt;&#32;0)&#32;{&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;=&#32;&amp;rhs;&#32;b&#32;=&#32;<emphasis role="keyword">this</emphasis>;&#32;ret&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;}
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;=&#32;<emphasis role="keyword">this</emphasis>;&#32;b&#32;=&#32;&amp;rhs;&#32;ret&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;}
198 
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>&#32;borrow&#32;=&#32;0;
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;count_;&#32;i++)&#32;{
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>&#32;d&#32;=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;digits_[i]&#32;-&#32;borrow;
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;b-&gt;count_)
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;d&#32;-=&#32;b-&gt;digits_[i];
204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;borrow&#32;=&#32;(d&#32;&gt;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;digits_[i])&#32;?&#32;1&#32;:&#32;0;
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out-&gt;digits_[i]&#32;=&#32;d;
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(d&#32;!=&#32;0)
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out-&gt;count_&#32;=&#32;i&#32;+&#32;1;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
209 
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;ret;
211 &#32;&#32;&#32;&#32;}
212 
213 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1af8e90fff5382de6c1cda5f751017200c">Compare</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer">BigInteger</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count_&#32;!=&#32;rhs.count_)
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;count_&#32;&lt;&#32;rhs.count_&#32;?&#32;-1&#32;:&#32;1;
216 
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;count_;&#32;i--&#32;&gt;&#32;0;)
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(digits_[i]&#32;!=&#32;rhs.digits_[i])
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;digits_[i]&#32;&lt;&#32;rhs.digits_[i]&#32;?&#32;-1&#32;:&#32;1;
220 
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
222 &#32;&#32;&#32;&#32;}
223 
224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1aa0ad6e74839b7c7fe77c9742ec079525">GetCount</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;count_;&#32;}
225 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>&#32;<link linkend="_classinternal_1_1_big_integer_1a7288eefd49735c3c3edec698f56738bd">GetDigit</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;index)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(index&#32;&lt;&#32;count_);&#32;<emphasis role="keywordflow">return</emphasis>&#32;digits_[index];&#32;}
226 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_big_integer_1ae12dd6759f1f76501db3d1bcafce39cd">IsZero</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;count_&#32;==&#32;1&#32;&amp;&amp;&#32;digits_[0]&#32;==&#32;0;&#32;}
227 
228 <emphasis role="keyword">private</emphasis>:
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Ch&gt;
230 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AppendDecimal64(<emphasis role="keyword">const</emphasis>&#32;Ch*&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;Ch*&#32;end)&#32;{
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u&#32;=&#32;ParseUint64(begin,&#32;end);
232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_classinternal_1_1_big_integer_1ae12dd6759f1f76501db3d1bcafce39cd">IsZero</link>())
233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;u;
234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;exp&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(end&#32;-&#32;begin);
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_classinternal_1_1_big_integer_1af491885747a0442492134c23a6ec4c65">MultiplyPow5</link>(exp)&#32;&lt;&lt;=&#32;exp)&#32;+=&#32;u;&#32;&#32;&#32;<emphasis role="comment">//&#32;*this&#32;=&#32;*this&#32;*&#32;10^exp&#32;+&#32;u</emphasis>
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
238 &#32;&#32;&#32;&#32;}
239 
240 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;PushBack(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link>&#32;digit)&#32;{
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(count_&#32;&lt;&#32;kCapacity);
242 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;digits_[count_++]&#32;=&#32;digit;
243 &#32;&#32;&#32;&#32;}
244 
245 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Ch&gt;
246 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;ParseUint64(<emphasis role="keyword">const</emphasis>&#32;Ch*&#32;begin,&#32;<emphasis role="keyword">const</emphasis>&#32;Ch*&#32;end)&#32;{
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;r&#32;=&#32;0;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Ch*&#32;p&#32;=&#32;begin;&#32;p&#32;!=&#32;end;&#32;++p)&#32;{
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(*p&#32;&gt;=&#32;Ch(<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&amp;&amp;&#32;*p&#32;&lt;=&#32;Ch(<emphasis role="charliteral">&apos;9&apos;</emphasis>));
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r&#32;=&#32;r&#32;*&#32;10u&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis><emphasis role="keyword">&gt;</emphasis>(*p&#32;-&#32;Ch(<emphasis role="charliteral">&apos;0&apos;</emphasis>));
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r;
253 &#32;&#32;&#32;&#32;}
254 
255 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Assume&#32;a&#32;*&#32;b&#32;+&#32;k&#32;&lt;&#32;2^128</emphasis>
256 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;MulAdd64(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;b,&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;k,&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>*&#32;outHigh)&#32;{
257 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;defined(_M_AMD64)</emphasis>
258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;low&#32;=&#32;_umul128(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;b,&#32;outHigh)&#32;+&#32;k;
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(low&#32;&lt;&#32;k)
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(*outHigh)++;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;low;
262 <emphasis role="preprocessor">#elif&#32;(__GNUC__&#32;&gt;&#32;4&#32;||&#32;(__GNUC__&#32;==&#32;4&#32;&amp;&amp;&#32;__GNUC_MINOR__&#32;&gt;=&#32;6))&#32;&amp;&amp;&#32;defined(__x86_64__)</emphasis>
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;__extension__&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;__int128&#32;uint128;
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uint128&#32;p&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint128<emphasis role="keyword">&gt;</emphasis>(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;*&#32;<emphasis role="keyword">static_cast&lt;</emphasis>uint128<emphasis role="keyword">&gt;</emphasis>(b);
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;p&#32;+=&#32;k;
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*outHigh&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(p&#32;&gt;&gt;&#32;64);
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(p);
268 <emphasis role="preprocessor">#else</emphasis>
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;a0&#32;=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;&amp;&#32;0xFFFFFFFF,&#32;a1&#32;=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;&gt;&gt;&#32;32,&#32;b0&#32;=&#32;b&#32;&amp;&#32;0xFFFFFFFF,&#32;b1&#32;=&#32;b&#32;&gt;&gt;&#32;32;
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;x0&#32;=&#32;a0&#32;*&#32;b0,&#32;x1&#32;=&#32;a0&#32;*&#32;b1,&#32;x2&#32;=&#32;a1&#32;*&#32;b0,&#32;x3&#32;=&#32;a1&#32;*&#32;b1;
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x1&#32;+=&#32;(x0&#32;&gt;&gt;&#32;32);&#32;<emphasis role="comment">//&#32;can&apos;t&#32;give&#32;carry</emphasis>
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x1&#32;+=&#32;x2;
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(x1&#32;&lt;&#32;x2)
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x3&#32;+=&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;32);
275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;lo&#32;=&#32;(x1&#32;&lt;&lt;&#32;32)&#32;+&#32;(x0&#32;&amp;&#32;0xFFFFFFFF);
276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;hi&#32;=&#32;x3&#32;+&#32;(x1&#32;&gt;&gt;&#32;32);
277 
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;lo&#32;+=&#32;k;
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(lo&#32;&lt;&#32;k)
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hi++;
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*outHigh&#32;=&#32;hi;
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;lo;
283 <emphasis role="preprocessor">#endif</emphasis>
284 &#32;&#32;&#32;&#32;}
285 
286 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kBitCount&#32;=&#32;3328;&#32;&#32;<emphasis role="comment">//&#32;64bit&#32;*&#32;54&#32;&gt;&#32;10^1000</emphasis>
287 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kCapacity&#32;=&#32;kBitCount&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>);
288 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kTypeBit&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>)&#32;*&#32;8;
289 
290 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link>&#32;digits_[kCapacity];
291 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;count_;
292 };
293 
294 }&#32;<emphasis role="comment">//&#32;namespace&#32;internal</emphasis>
295 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
296 
297 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_BIGINTEGER_H_</emphasis>
</programlisting></section>
