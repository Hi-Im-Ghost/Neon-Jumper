<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classinternal_1_1_big_integer" xml:lang="en-US">
<title>internal::BigInteger Class Reference</title>
<indexterm><primary>internal::BigInteger</primary></indexterm>
<para>
<computeroutput>#include &lt;biginteger.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classinternal_1_1_big_integer_1abec623168bc9494dec2f50643b897f72">BigInteger</link> (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer_1ad02b0ef9da203efddd4af07e923732c0">BigInteger</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)</para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para><link linkend="_classinternal_1_1_big_integer_1a4dc2632b2aa2973d18864a127d7c141a">BigInteger</link> (const Ch *decimals, size_t length)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; <link linkend="_classinternal_1_1_big_integer_1ac783203409480350dbbcd9e0c95001be">operator=</link> (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp;rhs)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; <link linkend="_classinternal_1_1_big_integer_1a0ffe0c4c762312682d60e82c38b38c45">operator=</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; <link linkend="_classinternal_1_1_big_integer_1ad77a8a66494070c1518d8ca4948cbfae">operator+=</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; <link linkend="_classinternal_1_1_big_integer_1a212b816f6d07b5b50347bde5a96a0160">operator*=</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; <link linkend="_classinternal_1_1_big_integer_1ad6b2e9b15ae1e1c9c2f8e68112b3f265">operator*=</link> (<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> u)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; <link linkend="_classinternal_1_1_big_integer_1a06a6f5d1d81b91248b0ab3c2d65a500a">operator&lt;&lt;=</link> (size_t shift)</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_big_integer_1a52b424669238bdebc134e793d3b470ae">operator==</link> (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp;rhs) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_big_integer_1a8b6ab0d652d461c1136e0388d352628b">operator==</link> (const <link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> rhs) const</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; <link linkend="_classinternal_1_1_big_integer_1af491885747a0442492134c23a6ec4c65">MultiplyPow5</link> (unsigned exp)</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_big_integer_1ad7ad62e6b62af38283ee940eb4015b26">Difference</link> (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp;rhs, <link linkend="_classinternal_1_1_big_integer">BigInteger</link> *out) const</para>
</listitem>
            <listitem><para>int <link linkend="_classinternal_1_1_big_integer_1af8e90fff5382de6c1cda5f751017200c">Compare</link> (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp;rhs) const</para>
</listitem>
            <listitem><para>size_t <link linkend="_classinternal_1_1_big_integer_1aa0ad6e74839b7c7fe77c9742ec079525">GetCount</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> <link linkend="_classinternal_1_1_big_integer_1a7288eefd49735c3c3edec698f56738bd">GetDigit</link> (size_t index) const</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_big_integer_1ae12dd6759f1f76501db3d1bcafce39cd">IsZero</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename Ch &gt; </para><para>void <link linkend="_classinternal_1_1_big_integer_1adcdffd9049832290ce37e283c51e2f50">AppendDecimal64</link> (const Ch *begin, const Ch *end)</para>
</listitem>
            <listitem><para>void <link linkend="_classinternal_1_1_big_integer_1a18a4939a983f296085fed6bc5b56d5c1">PushBack</link> (<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> digit)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename Ch &gt; </para><para>static <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_classinternal_1_1_big_integer_1acebb94526a2f5f26f0de244b7f76a3db">ParseUint64</link> (const Ch *begin, const Ch *end)</para>
</listitem>
            <listitem><para>static <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_classinternal_1_1_big_integer_1a3857418321694cd20071203b2f08ebfe">MulAdd64</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> b, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> k, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> *outHigh)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> <link linkend="_classinternal_1_1_big_integer_1a0b505df38fedd862a748fe1e629d918a">digits_</link> [<link linkend="_classinternal_1_1_big_integer_1a8a908718d685b9bd39fb52f2e511b0c6">kCapacity</link>]</para>
</listitem>
            <listitem><para>size_t <link linkend="_classinternal_1_1_big_integer_1ad4bf5198afe86d754ec57a82605e644b">count_</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Private Attributes    </title>
        <itemizedlist>
            <listitem><para>static const size_t <link linkend="_classinternal_1_1_big_integer_1a89d6a00e78a914d0b873784539416dc5">kBitCount</link> = 3328</para>
</listitem>
            <listitem><para>static const size_t <link linkend="_classinternal_1_1_big_integer_1a8a908718d685b9bd39fb52f2e511b0c6">kCapacity</link> = <link linkend="_classinternal_1_1_big_integer_1a89d6a00e78a914d0b873784539416dc5">kBitCount</link> / sizeof(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>)</para>
</listitem>
            <listitem><para>static const size_t <link linkend="_classinternal_1_1_big_integer_1a662666ad4bc9122cb80ba2ac6e88a745">kTypeBit</link> = sizeof(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>) * 8</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c"/><section>
    <title>Type</title>
<indexterm><primary>Type</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>Type</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> <link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">internal::BigInteger::Type</link></computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classinternal_1_1_big_integer_1abec623168bc9494dec2f50643b897f72"/><section>
    <title>BigInteger()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>BigInteger</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>BigInteger</secondary></indexterm>
<para><computeroutput>internal::BigInteger::BigInteger (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1ad02b0ef9da203efddd4af07e923732c0"/><section>
    <title>BigInteger()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>BigInteger</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>BigInteger</secondary></indexterm>
<para><computeroutput>internal::BigInteger::BigInteger (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a4dc2632b2aa2973d18864a127d7c141a"/><section>
    <title>BigInteger()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>BigInteger</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>BigInteger</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>internal::BigInteger::BigInteger (const Ch * decimals, size_t length)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classinternal_1_1_big_integer_1adcdffd9049832290ce37e283c51e2f50"/><section>
    <title>AppendDecimal64()</title>
<indexterm><primary>AppendDecimal64</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>AppendDecimal64</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>void internal::BigInteger::AppendDecimal64 (const Ch * begin, const Ch * end)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1af8e90fff5382de6c1cda5f751017200c"/><section>
    <title>Compare()</title>
<indexterm><primary>Compare</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>Compare</secondary></indexterm>
<para><computeroutput>int internal::BigInteger::Compare (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1ad7ad62e6b62af38283ee940eb4015b26"/><section>
    <title>Difference()</title>
<indexterm><primary>Difference</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>Difference</secondary></indexterm>
<para><computeroutput>bool internal::BigInteger::Difference (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; rhs, <link linkend="_classinternal_1_1_big_integer">BigInteger</link> * out) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1aa0ad6e74839b7c7fe77c9742ec079525"/><section>
    <title>GetCount()</title>
<indexterm><primary>GetCount</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>GetCount</secondary></indexterm>
<para><computeroutput>size_t internal::BigInteger::GetCount ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a7288eefd49735c3c3edec698f56738bd"/><section>
    <title>GetDigit()</title>
<indexterm><primary>GetDigit</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>GetDigit</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> internal::BigInteger::GetDigit (size_t index) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1ae12dd6759f1f76501db3d1bcafce39cd"/><section>
    <title>IsZero()</title>
<indexterm><primary>IsZero</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>IsZero</secondary></indexterm>
<para><computeroutput>bool internal::BigInteger::IsZero ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a3857418321694cd20071203b2f08ebfe"/><section>
    <title>MulAdd64()</title>
<indexterm><primary>MulAdd64</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>MulAdd64</secondary></indexterm>
<para><computeroutput>static <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> internal::BigInteger::MulAdd64 (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> a, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> b, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> k, <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> * outHigh)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1af491885747a0442492134c23a6ec4c65"/><section>
    <title>MultiplyPow5()</title>
<indexterm><primary>MultiplyPow5</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>MultiplyPow5</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; internal::BigInteger::MultiplyPow5 (unsigned exp)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1ad6b2e9b15ae1e1c9c2f8e68112b3f265"/><section>
    <title>operator*=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; internal::BigInteger::operator*= (<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link> u)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a212b816f6d07b5b50347bde5a96a0160"/><section>
    <title>operator*=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator*=</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator*=</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; internal::BigInteger::operator*= (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1ad77a8a66494070c1518d8ca4948cbfae"/><section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator+=</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; internal::BigInteger::operator+= (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a06a6f5d1d81b91248b0ab3c2d65a500a"/><section>
    <title>operator&lt;&lt;=()</title>
<indexterm><primary>operator&lt;&lt;=</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator&lt;&lt;=</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; internal::BigInteger::operator&lt;&lt;= (size_t shift)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1ac783203409480350dbbcd9e0c95001be"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; internal::BigInteger::operator= (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a0ffe0c4c762312682d60e82c38b38c45"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator=</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; internal::BigInteger::operator= (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a52b424669238bdebc134e793d3b470ae"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool internal::BigInteger::operator== (const <link linkend="_classinternal_1_1_big_integer">BigInteger</link> &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a8b6ab0d652d461c1136e0388d352628b"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool internal::BigInteger::operator== (const <link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1acebb94526a2f5f26f0de244b7f76a3db"/><section>
    <title>ParseUint64()</title>
<indexterm><primary>ParseUint64</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>ParseUint64</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>static <link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> internal::BigInteger::ParseUint64 (const Ch * begin, const Ch * end)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a18a4939a983f296085fed6bc5b56d5c1"/><section>
    <title>PushBack()</title>
<indexterm><primary>PushBack</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>PushBack</secondary></indexterm>
<para><computeroutput>void internal::BigInteger::PushBack (<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> digit)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classinternal_1_1_big_integer_1ad4bf5198afe86d754ec57a82605e644b"/><section>
    <title>count_</title>
<indexterm><primary>count_</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>count_</secondary></indexterm>
<para><computeroutput>size_t internal::BigInteger::count_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a0b505df38fedd862a748fe1e629d918a"/><section>
    <title>digits_</title>
<indexterm><primary>digits_</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>digits_</secondary></indexterm>
<para><computeroutput><link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link> internal::BigInteger::digits_[<link linkend="_classinternal_1_1_big_integer_1a8a908718d685b9bd39fb52f2e511b0c6">kCapacity</link>]<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a89d6a00e78a914d0b873784539416dc5"/><section>
    <title>kBitCount</title>
<indexterm><primary>kBitCount</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>kBitCount</secondary></indexterm>
<para><computeroutput>const size_t internal::BigInteger::kBitCount = 3328<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a8a908718d685b9bd39fb52f2e511b0c6"/><section>
    <title>kCapacity</title>
<indexterm><primary>kCapacity</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>kCapacity</secondary></indexterm>
<para><computeroutput>const size_t internal::BigInteger::kCapacity = <link linkend="_classinternal_1_1_big_integer_1a89d6a00e78a914d0b873784539416dc5">kBitCount</link> / sizeof(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>)<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_big_integer_1a662666ad4bc9122cb80ba2ac6e88a745"/><section>
    <title>kTypeBit</title>
<indexterm><primary>kTypeBit</primary><secondary>internal::BigInteger</secondary></indexterm>
<indexterm><primary>internal::BigInteger</primary><secondary>kTypeBit</secondary></indexterm>
<para><computeroutput>const size_t internal::BigInteger::kTypeBit = sizeof(<link linkend="_classinternal_1_1_big_integer_1a1310812fca26ebae77594ba08678fc4c">Type</link>) * 8<computeroutput>[static]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/internal/<link linkend="_biginteger_8h">biginteger.h</link></section>
</section>
