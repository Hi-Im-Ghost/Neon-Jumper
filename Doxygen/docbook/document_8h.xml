<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_document_8h" xml:lang="en-US">
<title>src/rapidjson/include/rapidjson/document.h File Reference</title>
<indexterm><primary>src/rapidjson/include/rapidjson/document.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;reader.h&quot;
#include &quot;internal/meta.h&quot;
#include &quot;internal/strfunc.h&quot;
#include &quot;memorystream.h&quot;
#include &quot;encodedstream.h&quot;
#include &lt;new&gt;
#include &lt;limits&gt;
#include &lt;iterator&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_generic_member">GenericMember&lt; Encoding, Allocator &gt;</link></para>

<para>Name-value pair in a JSON object value. </para>
</listitem>
            <listitem><para>class <link linkend="_class_generic_member_iterator">GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</link></para>

<para>(Constant) member iterator for a JSON object value </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_string_ref">GenericStringRef&lt; CharType &gt;</link></para>

<para>Reference to a constant string (not taking a copy) </para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_generic_value_impl">internal::IsGenericValueImpl&lt; T, Encoding, Allocator &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_generic_value_impl_3_01_t_00_01typename_01_void_3_01typename_01_t_1_1_enco3a51e9d8b4986f001b39e1e8edecb66a">internal::IsGenericValueImpl&lt; T, typename Void&lt; typename T::EncodingType &gt;::Type, typename Void&lt; typename T::AllocatorType &gt;::Type &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt; T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper">internal::TypeHelper&lt; ValueType, T &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01bool_01_4">internal::TypeHelper&lt; ValueType, bool &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01int_01_4">internal::TypeHelper&lt; ValueType, int &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01unsigned_01_4">internal::TypeHelper&lt; ValueType, unsigned &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01int64__t_01_4">internal::TypeHelper&lt; ValueType, int64_t &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01uint64__t_01_4">internal::TypeHelper&lt; ValueType, uint64_t &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01double_01_4">internal::TypeHelper&lt; ValueType, double &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01float_01_4">internal::TypeHelper&lt; ValueType, float &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01const_01typename_01_value_type_1_1_ch_01_5_01_4">internal::TypeHelper&lt; ValueType, const typename ValueType::Ch * &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_array_01_4">internal::TypeHelper&lt; ValueType, typename ValueType::Array &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_const_array_01_4">internal::TypeHelper&lt; ValueType, typename ValueType::ConstArray &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_object_01_4">internal::TypeHelper&lt; ValueType, typename ValueType::Object &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_const_object_01_4">internal::TypeHelper&lt; ValueType, typename ValueType::ConstObject &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_generic_value">GenericValue&lt; Encoding, Allocator &gt;</link></para>

<para>Represents a JSON value. Use Value for <link linkend="_struct_u_t_f8">UTF8</link> encoding and default allocator. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_flag">GenericValue&lt; Encoding, Allocator &gt;::Flag</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_string">GenericValue&lt; Encoding, Allocator &gt;::String</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_short_string">GenericValue&lt; Encoding, Allocator &gt;::ShortString</link></para>
</listitem>
            <listitem><para>union <link linkend="_union_generic_value_1_1_number">GenericValue&lt; Encoding, Allocator &gt;::Number</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_number_1_1_i">GenericValue&lt; Encoding, Allocator &gt;::Number::I</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_number_1_1_u">GenericValue&lt; Encoding, Allocator &gt;::Number::U</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_object_data">GenericValue&lt; Encoding, Allocator &gt;::ObjectData</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_array_data">GenericValue&lt; Encoding, Allocator &gt;::ArrayData</link></para>
</listitem>
            <listitem><para>union <link linkend="_union_generic_value_1_1_data">GenericValue&lt; Encoding, Allocator &gt;::Data</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_generic_document">GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</link></para>

<para>A document for parsing JSON text as DOM. </para>
</listitem>
            <listitem><para>class <link linkend="_class_generic_array">GenericArray&lt; Const, ValueT &gt;</link></para>

<para>Helper class for accessing Value of array type. </para>
</listitem>
            <listitem><para>class <link linkend="_class_generic_object">GenericObject&lt; Const, ValueT &gt;</link></para>

<para>Helper class for accessing Value of object type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespaceinternal">internal</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga04a88f0b2db9091006eb7fc6deb6077b">RAPIDJSON_DEFAULT_ALLOCATOR</link>   <link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&lt;<link linkend="_class_crt_allocator">CrtAllocator</link>&gt;</para>

<para>Allows to choose default allocator. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga1178cffff7c596922a5ed3fda30c5520">RAPIDJSON_DEFAULT_STACK_ALLOCATOR</link>   <link linkend="_class_crt_allocator">CrtAllocator</link></para>

<para>Allows to choose default stack allocator for Document. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5c88aa612939b592d15d3fc4bdf54272">RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY</link>   16</para>

<para>User defined kDefaultObjectCapacity value. </para>
</listitem>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga10ba0ee06d0ac2803d0f2290d46b19f7">RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY</link>   16</para>

<para>User defined kDefaultArrayCapacity value. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_struct_u_t_f8">UTF8</link>&lt;&gt; &gt; <link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link></para>

<para><link linkend="_class_generic_value">GenericValue</link> with <link linkend="_struct_u_t_f8">UTF8</link> encoding. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_struct_u_t_f8">UTF8</link>&lt;&gt; &gt; <link linkend="_document_8h_1ac6ea5b168e3fe8c7fa532450fc9391f7">Document</link></para>

<para><link linkend="_class_generic_document">GenericDocument</link> with <link linkend="_struct_u_t_f8">UTF8</link> encoding. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename CharType &gt; </para><para><link linkend="_struct_generic_string_ref">GenericStringRef</link>&lt; CharType &gt; <link linkend="_document_8h_1aa6b9fd9f6aa49405a574c362ba9af6b5">StringRef</link> (const CharType *str)</para>

<para>Mark a character pointer as constant string. </para>
</listitem>
            <listitem><para>template&lt;typename CharType &gt; </para><para><link linkend="_struct_generic_string_ref">GenericStringRef</link>&lt; CharType &gt; <link linkend="_document_8h_1a578c51ab574a50a9c760b9da7c7562f2">StringRef</link> (const CharType *str, size_t length)</para>

<para>Mark a character pointer as constant string. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_document_8h_1ac6ea5b168e3fe8c7fa532450fc9391f7"/><section>
    <title>Document</title>
<indexterm><primary>Document</primary><secondary>document.h</secondary></indexterm>
<indexterm><primary>document.h</primary><secondary>Document</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_generic_document">GenericDocument</link>&lt;<link linkend="_struct_u_t_f8">UTF8</link>&lt;&gt; &gt; <link linkend="_document_8h_1ac6ea5b168e3fe8c7fa532450fc9391f7">Document</link></computeroutput></para><para>

<para><link linkend="_class_generic_document">GenericDocument</link> with <link linkend="_struct_u_t_f8">UTF8</link> encoding. </para>
</para>
</section>
<anchor xml:id="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481"/><section>
    <title>Value</title>
<indexterm><primary>Value</primary><secondary>document.h</secondary></indexterm>
<indexterm><primary>document.h</primary><secondary>Value</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_generic_value">GenericValue</link>&lt;<link linkend="_struct_u_t_f8">UTF8</link>&lt;&gt; &gt; <link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link></computeroutput></para><para>

<para><link linkend="_class_generic_value">GenericValue</link> with <link linkend="_struct_u_t_f8">UTF8</link> encoding. </para>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_document_8h_1aa6b9fd9f6aa49405a574c362ba9af6b5"/><section>
    <title>StringRef()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>StringRef</primary><secondary>document.h</secondary></indexterm>
<indexterm><primary>document.h</primary><secondary>StringRef</secondary></indexterm>
<computeroutput>template&lt;typename CharType &gt; </computeroutput><para><computeroutput><link linkend="_struct_generic_string_ref">GenericStringRef</link>&lt; CharType &gt; StringRef (const CharType * str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Mark a character pointer as constant string. </para>
</para>

<para>Mark a plain character pointer as a &quot;string literal&quot;. This function can be used to avoid copying a character string to be referenced as a value in a JSON <link linkend="_class_generic_value">GenericValue</link> object, if the string&apos;s lifetime is known to be valid long enough. 
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>CharType</entry><entry>
<para>Character type of the string </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Constant string, lifetime assumed to be longer than the use of the string in e.g. a <link linkend="_class_generic_value">GenericValue</link> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_struct_generic_string_ref">GenericStringRef</link> string reference object</para>
</formalpara>
<formalpara><title>See also</title>

<para><link linkend="_class_generic_value_1abb2887958974fef1b2b5c8e32cc72ddb">GenericValue::GenericValue(StringRefType)</link>, <link linkend="_class_generic_value_1a2b7837d3adb6c0ad184269826ea78e97">GenericValue::operator=(StringRefType)</link>, GenericValue::SetString(StringRefType), GenericValue::PushBack(StringRefType, Allocator&amp;), GenericValue::AddMember </para>
</formalpara>
</para>
</section>
<anchor xml:id="_document_8h_1a578c51ab574a50a9c760b9da7c7562f2"/><section>
    <title>StringRef()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>StringRef</primary><secondary>document.h</secondary></indexterm>
<indexterm><primary>document.h</primary><secondary>StringRef</secondary></indexterm>
<computeroutput>template&lt;typename CharType &gt; </computeroutput><para><computeroutput><link linkend="_struct_generic_string_ref">GenericStringRef</link>&lt; CharType &gt; StringRef (const CharType * str, size_t length)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Mark a character pointer as constant string. </para>
</para>

<para>Mark a plain character pointer as a &quot;string literal&quot;. This function can be used to avoid copying a character string to be referenced as a value in a JSON <link linkend="_class_generic_value">GenericValue</link> object, if the string&apos;s lifetime is known to be valid long enough.</para>

<para>This version has better performance with supplied length, and also supports string containing null characters.</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>CharType</entry><entry>
<para>character type of the string </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Constant string, lifetime assumed to be longer than the use of the string in e.g. a <link linkend="_class_generic_value">GenericValue</link> </para>
</entry>
                            </row>
                            <row>
<entry>length</entry><entry>
<para>The length of source string. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para><link linkend="_struct_generic_string_ref">GenericStringRef</link> string reference object </para>
</formalpara>
</para>
</section>
</section>
</section>
