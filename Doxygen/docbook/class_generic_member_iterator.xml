<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_generic_member_iterator" xml:lang="en-US">
<title>GenericMemberIterator&lt; Const, Encoding, Allocator &gt; Class Template Reference</title>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary></indexterm>
<para>

<para>(Constant) member iterator for a JSON object value </para>
 
</para>
<para>
<computeroutput>#include &lt;document.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link> <link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link></para>

<para>Iterator type itself. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; true, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; <link linkend="_class_generic_member_iterator_1ae5be27a73dce0be58ee2776db896d591">ConstIterator</link></para>

<para>Constant iterator type. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; false, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; <link linkend="_class_generic_member_iterator_1abc26eb06f2962765b11dcd06ce84ac02">NonConstIterator</link></para>

<para>Non-constant iterator type. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
<simplesect><title>stepping</title>
        <itemizedlist>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator_1a37bbba2bf6f56aee43ccf3caf5ac51d0">operator++</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator_1ae413025561a25dbb7c95b93ff387cc55">operator--</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator_1a83c8be6d960213ce32d68a880a8d9089">operator++</link> (int)</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator_1a4606c8baec5ea2b5139a503f7caa5444">operator--</link> (int)</para>
</listitem>
        </itemizedlist>
</simplesect>
</simplesect>
<simplesect><title>increment/decrement</title>
        <itemizedlist>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator_1a472098839cec785b43a005a23d7a284b">operator+</link> (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n) const</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator_1a343099509473934b40b9a4264c472721">operator-</link> (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n) const</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator_1a6b86a449909e8611c449f428809eb237">operator+=</link> (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n)</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator_1aa3f9472c44eb8e0c040d24935bfa8e82">operator-=</link> (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>relations</title>
        <itemizedlist>
            <listitem><para>template&lt;bool Const_&gt; </para><para>bool <link linkend="_class_generic_member_iterator_1a79ec0aac9cd098fddd656b3ce55d0c0a">operator==</link> (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;that) const</para>
</listitem>
            <listitem><para>template&lt;bool Const_&gt; </para><para>bool <link linkend="_class_generic_member_iterator_1ad1d518be7ace72462fc77cd4c6f250e2">operator!=</link> (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;that) const</para>
</listitem>
            <listitem><para>template&lt;bool Const_&gt; </para><para>bool <link linkend="_class_generic_member_iterator_1a1d6b406f68ff02515fdc3e0385057a12">operator&lt;=</link> (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;that) const</para>
</listitem>
            <listitem><para>template&lt;bool Const_&gt; </para><para>bool <link linkend="_class_generic_member_iterator_1ab6d9e8fce04a598f10453b3f722c78ac">operator&gt;=</link> (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;that) const</para>
</listitem>
            <listitem><para>template&lt;bool Const_&gt; </para><para>bool <link linkend="_class_generic_member_iterator_1aaadf9036c5d4563cf00019ba840dd09a">operator&lt;</link> (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;that) const</para>
</listitem>
            <listitem><para>template&lt;bool Const_&gt; </para><para>bool <link linkend="_class_generic_member_iterator_1a1b2faefeb0d9bbc04bd02d69d25828f5">operator&gt;</link> (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;that) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_generic_member_iterator_1a82bdd5798f1a5ac0e3e7ba4bd6938cfc">GenericValue&lt; Encoding, Allocator &gt;</link></para>
</listitem>
            <listitem><para>template&lt;bool , typename , typename &gt; </para><para>class <link linkend="_class_generic_member_iterator_1aa375aeb1ffac85cddc3a72a6c24ec6e1">GenericMemberIterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>std::iterator_traits support    </title>
        <itemizedlist>
            <listitem><para>typedef ValueType <link linkend="_class_generic_member_iterator_1a79326e02032d06d80e09ded797501553">value_type</link></para>
</listitem>
            <listitem><para>typedef ValueType * <link linkend="_class_generic_member_iterator_1a7c3623bc81b06495fd3128398487e99e">pointer</link></para>
</listitem>
            <listitem><para>typedef ValueType &amp; <link linkend="_class_generic_member_iterator_1a182876d698903331bd0b11db6d1beeca">reference</link></para>
</listitem>
            <listitem><para>typedef std::ptrdiff_t <link linkend="_class_generic_member_iterator_1ae60bbcbaec51d36eef299996543872e6">difference_type</link></para>
</listitem>
            <listitem><para>typedef std::random_access_iterator_tag <link linkend="_class_generic_member_iterator_1a36cd90aef13c0cce916929f63fdb5c86">iterator_category</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator_1a7c3623bc81b06495fd3128398487e99e">pointer</link> <link linkend="_class_generic_member_iterator_1ac0bd6e77617593892fc13afb00e62f29">Pointer</link></para>

<para>Pointer to (const) <link linkend="_class_generic_member">GenericMember</link>. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator_1a182876d698903331bd0b11db6d1beeca">reference</link> <link linkend="_class_generic_member_iterator_1a8042a85a9e233d65de5b6c66d9a1109a">Reference</link></para>

<para>Reference to (const) <link linkend="_class_generic_member">GenericMember</link>. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator_1ae60bbcbaec51d36eef299996543872e6">difference_type</link> <link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link></para>

<para>Signed integer type (e.g. <computeroutput>ptrdiff_t</computeroutput>) </para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1a2708717d497a0aadacdf75900de4c5b4">GenericMemberIterator</link> ()</para>

<para>Default constructor (singular value) </para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1a2697fd327a90654b0bf91c988e43f95e">GenericMemberIterator</link> (const <link linkend="_class_generic_member_iterator_1abc26eb06f2962765b11dcd06ce84ac02">NonConstIterator</link> &amp;it)</para>

<para>Iterator conversions to more const. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator_1a3106e0e66d8a692d9ff9f91b99421302">operator=</link> (const <link linkend="_class_generic_member_iterator_1abc26eb06f2962765b11dcd06ce84ac02">NonConstIterator</link> &amp;it)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>dereference    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_generic_member_iterator_1a8042a85a9e233d65de5b6c66d9a1109a">Reference</link> <link linkend="_class_generic_member_iterator_1a56ad403f7e7a35d6060931685d6cbbe8">operator*</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1ac0bd6e77617593892fc13afb00e62f29">Pointer</link> <link linkend="_class_generic_member_iterator_1abc95a8e52653a8baa2927b03239f4be9">operator-&gt;</link> () const</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1a8042a85a9e233d65de5b6c66d9a1109a">Reference</link> <link linkend="_class_generic_member_iterator_1a41b59f1bd367a98ee5d1138cc81e98a7">operator[]</link> (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n) const</para>
</listitem>
            <listitem><para><link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> <link linkend="_class_generic_member_iterator_1ae119ae8ed78dbd980f83d367f59a3c94">operator-</link> (<link linkend="_class_generic_member_iterator_1ae5be27a73dce0be58ee2776db896d591">ConstIterator</link> that) const</para>

<para>Distance. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt;
class GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</title></simplesect>

<para>(Constant) member iterator for a JSON object value </para>



<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Const</entry><entry>
<para>Is this a constant iterator? </para>
</entry>
                            </row>
                            <row>
<entry>Encoding</entry><entry>
<para>Encoding of the value. (Even non-string values need to have the same encoding in a document) </para>
</entry>
                            </row>
                            <row>
<entry>Allocator</entry><entry>
<para>Allocator type for allocating memory of object, array and string.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                This class implements a <link linkend="_class_random">Random</link> Access Iterator for <link linkend="_class_generic_member">GenericMember</link> elements of a <link linkend="_class_generic_value">GenericValue</link>, see ISO/IEC 14882:2003(E) C++ standard, 24.1 [lib.iterator.requirements].</para>

<para><note><title>Note</title>

<para>This iterator implementation is mainly intended to avoid implicit conversions from iterator values to <computeroutput>NULL</computeroutput>, e.g. from GenericValue::FindMember.</para>

<para>Define <computeroutput>RAPIDJSON_NOMEMBERITERATORCLASS</computeroutput> to fall back to a pointer-based implementation, if your platform doesn&apos;t provide the C++ &lt;iterator&gt; header.</para>
</note>
<formalpara><title>See also</title>

<para><link linkend="_class_generic_member">GenericMember</link>, <link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">GenericValue::MemberIterator</link>, <link linkend="_class_generic_value_1aac08c3e660a9036d3dcb8b10ff6c61f4">GenericValue::ConstMemberIterator</link> </para>
</formalpara>
</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_generic_member_iterator_1ae5be27a73dce0be58ee2776db896d591"/><section>
    <title>ConstIterator</title>
<indexterm><primary>ConstIterator</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>ConstIterator</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt;true,<link linkend="_classrapidjson_1_1_encoding">Encoding</link>,<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ConstIterator</computeroutput></para><para>

<para>Constant iterator type. </para>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1ae60bbcbaec51d36eef299996543872e6"/><section>
    <title>difference_type</title>
<indexterm><primary>difference_type</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef std::ptrdiff_t <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e"/><section>
    <title>DifferenceType</title>
<indexterm><primary>DifferenceType</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>DifferenceType</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator_1ae60bbcbaec51d36eef299996543872e6">difference_type</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DifferenceType</computeroutput></para><para>

<para>Signed integer type (e.g. <computeroutput>ptrdiff_t</computeroutput>) </para>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8"/><section>
    <title>Iterator</title>
<indexterm><primary>Iterator</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>Iterator</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Iterator</computeroutput></para><para>

<para>Iterator type itself. </para>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1a36cd90aef13c0cce916929f63fdb5c86"/><section>
    <title>iterator_category</title>
<indexterm><primary>iterator_category</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>iterator_category</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef std::random_access_iterator_tag <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::iterator_category</computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1abc26eb06f2962765b11dcd06ce84ac02"/><section>
    <title>NonConstIterator</title>
<indexterm><primary>NonConstIterator</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>NonConstIterator</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt;false,<link linkend="_classrapidjson_1_1_encoding">Encoding</link>,<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::NonConstIterator</computeroutput></para><para>

<para>Non-constant iterator type. </para>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1a7c3623bc81b06495fd3128398487e99e"/><section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef ValueType* <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::pointer</computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1ac0bd6e77617593892fc13afb00e62f29"/><section>
    <title>Pointer</title>
<indexterm><primary>Pointer</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>Pointer</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator_1a7c3623bc81b06495fd3128398487e99e">pointer</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_fwd_8h_1a0e5c49dba7ec654cdda5735347c00397">::Pointer</link></computeroutput></para><para>

<para>Pointer to (const) <link linkend="_class_generic_member">GenericMember</link>. </para>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1a182876d698903331bd0b11db6d1beeca"/><section>
    <title>reference</title>
<indexterm><primary>reference</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef ValueType&amp; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a8042a85a9e233d65de5b6c66d9a1109a"/><section>
    <title>Reference</title>
<indexterm><primary>Reference</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>Reference</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator_1a182876d698903331bd0b11db6d1beeca">reference</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Reference</computeroutput></para><para>

<para>Reference to (const) <link linkend="_class_generic_member">GenericMember</link>. </para>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1a79326e02032d06d80e09ded797501553"/><section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>typedef ValueType <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::value_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_generic_member_iterator_1a2708717d497a0aadacdf75900de4c5b4"/><section>
    <title>GenericMemberIterator()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>GenericMemberIterator</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>GenericMemberIterator</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_member_iterator">::GenericMemberIterator</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor (singular value) </para>
</para>

<para>Creates an iterator pointing to no element. <note><title>Note</title>

<para>All operations, except for comparisons, are undefined on such values. </para>
</note>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1a2697fd327a90654b0bf91c988e43f95e"/><section>
    <title>GenericMemberIterator()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>GenericMemberIterator</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>GenericMemberIterator</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_member_iterator">::GenericMemberIterator</link> (const <link linkend="_class_generic_member_iterator_1abc26eb06f2962765b11dcd06ce84ac02">NonConstIterator</link> &amp; it)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Iterator conversions to more const. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>it</entry><entry>
<para>(Non-const) iterator to copy from</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                Allows the creation of an iterator from another <link linkend="_class_generic_member_iterator">GenericMemberIterator</link> that is &quot;less const&quot;. Especially, creating a non-constant iterator from a constant iterator are disabled: <itemizedlist>
<listitem>
<para>const -&gt; non-const (not ok) </para>
</listitem>
<listitem>
<para>const -&gt; const (ok) </para>
</listitem>
<listitem>
<para>non-const -&gt; const (ok) </para>
</listitem>
<listitem>
<para>non-const -&gt; non-const (ok)</para>
</listitem>
</itemizedlist>
<note><title>Note</title>

<para>If the <computeroutput>Const</computeroutput> template parameter is already <computeroutput>false</computeroutput>, this constructor effectively defines a regular copy-constructor. Otherwise, the copy constructor is implicitly defined. </para>
</note>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_generic_member_iterator_1ad1d518be7ace72462fc77cd4c6f250e2"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;bool Const_&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator!= (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a56ad403f7e7a35d6060931685d6cbbe8"/><section>
    <title>operator*()</title>
<indexterm><primary>operator*</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator*</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1a8042a85a9e233d65de5b6c66d9a1109a">Reference</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator* ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a472098839cec785b43a005a23d7a284b"/><section>
    <title>operator+()</title>
<indexterm><primary>operator+</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator+</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator+ (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a37bbba2bf6f56aee43ccf3caf5ac51d0"/><section>
    <title>operator++()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator++ ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a83c8be6d960213ce32d68a880a8d9089"/><section>
    <title>operator++()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator++</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator++</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator++ (int )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a6b86a449909e8611c449f428809eb237"/><section>
    <title>operator+=()</title>
<indexterm><primary>operator+=</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator+=</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator+= (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1ae119ae8ed78dbd980f83d367f59a3c94"/><section>
    <title>operator-()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator- (<link linkend="_class_generic_member_iterator_1ae5be27a73dce0be58ee2776db896d591">ConstIterator</link> that) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Distance. </para>
</para>
</section>
<anchor xml:id="_class_generic_member_iterator_1a343099509473934b40b9a4264c472721"/><section>
    <title>operator-()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator-</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator-</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator- (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1ae413025561a25dbb7c95b93ff387cc55"/><section>
    <title>operator--()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator-- ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a4606c8baec5ea2b5139a503f7caa5444"/><section>
    <title>operator--()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator--</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator--</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator-- (int )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1aa3f9472c44eb8e0c040d24935bfa8e82"/><section>
    <title>operator-=()</title>
<indexterm><primary>operator-=</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator-=</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator-= (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1abc95a8e52653a8baa2927b03239f4be9"/><section>
    <title>operator-&gt;()</title>
<indexterm><primary>operator-&gt;</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator-&gt;</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ac0bd6e77617593892fc13afb00e62f29">Pointer</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator-&gt; ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1aaadf9036c5d4563cf00019ba840dd09a"/><section>
    <title>operator&lt;()</title>
<indexterm><primary>operator&lt;</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator&lt;</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;bool Const_&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator&lt; (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a1d6b406f68ff02515fdc3e0385057a12"/><section>
    <title>operator&lt;=()</title>
<indexterm><primary>operator&lt;=</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator&lt;=</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;bool Const_&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator&lt;= (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a3106e0e66d8a692d9ff9f91b99421302"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1ad1cf1ecf6210b47906c9f179c893a8b8">Iterator</link> &amp; <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator= (const <link linkend="_class_generic_member_iterator_1abc26eb06f2962765b11dcd06ce84ac02">NonConstIterator</link> &amp; it)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a79ec0aac9cd098fddd656b3ce55d0c0a"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;bool Const_&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator== (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a1b2faefeb0d9bbc04bd02d69d25828f5"/><section>
    <title>operator&gt;()</title>
<indexterm><primary>operator&gt;</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator&gt;</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;bool Const_&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator&gt; (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1ab6d9e8fce04a598f10453b3f722c78ac"/><section>
    <title>operator&gt;=()</title>
<indexterm><primary>operator&gt;=</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator&gt;=</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;bool Const_&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator&gt;= (const <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const_, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a41b59f1bd367a98ee5d1138cc81e98a7"/><section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_member_iterator_1a8042a85a9e233d65de5b6c66d9a1109a">Reference</link> <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; Const, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator[] (<link linkend="_class_generic_member_iterator_1aaa13c83e6e0d1f5b413d62cacd8f6a2e">DifferenceType</link> n) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_class_generic_member_iterator_1aa375aeb1ffac85cddc3a72a6c24ec6e1"/><section>
    <title>GenericMemberIterator</title>
<indexterm><primary>GenericMemberIterator</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>GenericMemberIterator</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;bool , typename , typename &gt; </computeroutput><para><computeroutput>friend class <link linkend="_class_generic_member_iterator">GenericMemberIterator</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_member_iterator_1a82bdd5798f1a5ac0e3e7ba4bd6938cfc"/><section>
    <title>GenericValue&lt; Encoding, Allocator &gt;</title>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericMemberIterator&lt; Const, Encoding, Allocator &gt;</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<computeroutput>template&lt;bool Const, typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>friend class <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/<link linkend="_document_8h">document.h</link></section>
</section>
