<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_classinternal_1_1_stack" xml:lang="en-US">
<title>internal::Stack&lt; Allocator &gt; Class Template Reference</title>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary></indexterm>
<para>

<para>A type-unsafe stack for storing different types of data. </para>
 
</para>
<para>
<computeroutput>#include &lt;stack.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classinternal_1_1_stack_1af09ab91f9e5143deccf7c9af837f451e">Stack</link> (<link linkend="_classrapidjson_1_1_allocator">Allocator</link> *allocator, size_t stackCapacity)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_stack_1afedce84c8816abe9277a71ebd5e1808a">~Stack</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classinternal_1_1_stack_1a5e601199a21d84b1ac612f558be0f2c3">Swap</link> (<link linkend="_classinternal_1_1_stack">Stack</link> &amp;rhs) RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para>void <link linkend="_classinternal_1_1_stack_1a02da31665a372738e81ded2f7b7d598e">Clear</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_classinternal_1_1_stack_1a3852b8494d69c91f6a238a51572e591e">ShrinkToFit</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>RAPIDJSON_FORCEINLINE void <link linkend="_classinternal_1_1_stack_1a7ae5de892834b7fc16099eb5e23dd97c">Reserve</link> (size_t count=1)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>RAPIDJSON_FORCEINLINE <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1a2d3b995140893ce92e9b94ada11ee3f3">Push</link> (size_t count=1)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>RAPIDJSON_FORCEINLINE <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1a8b82b6705a41aa259936a81b927bcac0">PushUnsafe</link> (size_t count=1)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1a1cb63cab765815c0624c6676b3712b03">Pop</link> (size_t count)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1a9c2611699081d74be865ebe67315dc6d">Top</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1a18e79cab61089f955d42b6c45bb51c23">Top</link> () const</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1acb8a65d110faf22be514db83524409c5">End</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1a242967361d9e254d13b85cfc2161861e">End</link> () const</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1a6acd2f7a16458184084c40d9f06f4a55">Bottom</link> ()</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack_1aeb6c4af6d6de57865232e1926dc0834e">Bottom</link> () const</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_stack_1a657ae4d477b25d4e0045aee0efd809c3">HasAllocator</link> () const</para>
</listitem>
            <listitem><para><link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; <link linkend="_classinternal_1_1_stack_1aa6f933acc7ecd92a2b567db5fa8cd43a">GetAllocator</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_classinternal_1_1_stack_1a2b8bda380e33838a99e3c73ff9785f03">Empty</link> () const</para>
</listitem>
            <listitem><para>size_t <link linkend="_classinternal_1_1_stack_1ac484468a2791bd3e9ba609bd1600ab48">GetSize</link> () const</para>
</listitem>
            <listitem><para>size_t <link linkend="_classinternal_1_1_stack_1a67d5d7ee9424d3dd46cf9d001b6cdc6b">GetCapacity</link> () const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>void <link linkend="_classinternal_1_1_stack_1a5a530d1d2a39a05812e4fee0e299004a">Expand</link> (size_t count)</para>
</listitem>
            <listitem><para>void <link linkend="_classinternal_1_1_stack_1a0a23948aa17a9870a5e228d465e40e92">Resize</link> (size_t newCapacity)</para>
</listitem>
            <listitem><para>void <link linkend="_classinternal_1_1_stack_1a5efa6fdbfaf93c5e519a2e6f39bd081f">Destroy</link> ()</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_stack_1af4109a9e632f85f70ac01c69d3ccdb3b">Stack</link> (const <link linkend="_classinternal_1_1_stack">Stack</link> &amp;)</para>
</listitem>
            <listitem><para><link linkend="_classinternal_1_1_stack">Stack</link> &amp; <link linkend="_classinternal_1_1_stack_1a4423184cd64d118e78a042b9d2b2b4ac">operator=</link> (const <link linkend="_classinternal_1_1_stack">Stack</link> &amp;)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_classrapidjson_1_1_allocator">Allocator</link> * <link linkend="_classinternal_1_1_stack_1a029e18096d082b1c81d7e1075a15eaad">allocator_</link></para>
</listitem>
            <listitem><para><link linkend="_classrapidjson_1_1_allocator">Allocator</link> * <link linkend="_classinternal_1_1_stack_1a71e95d02ac850a97e1ee3628a207cbe9">ownAllocator_</link></para>
</listitem>
            <listitem><para>char * <link linkend="_classinternal_1_1_stack_1ae2601d824b6b2f17eadd6739eec5c942">stack_</link></para>
</listitem>
            <listitem><para>char * <link linkend="_classinternal_1_1_stack_1aad0ee46c4a6180e2f3e0d9f4348c31f2">stackTop_</link></para>
</listitem>
            <listitem><para>char * <link linkend="_classinternal_1_1_stack_1af21b647d9f73246e9c96fa0966bdaf5d">stackEnd_</link></para>
</listitem>
            <listitem><para>size_t <link linkend="_classinternal_1_1_stack_1a224b9fa2406bc1c411068fa36c67c90f">initialCapacity_</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt;
class internal::Stack&lt; Allocator &gt;</title></simplesect>

<para>A type-unsafe stack for storing different types of data. </para>



<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Allocator</entry><entry>
<para>Allocator for allocating stack memory. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_classinternal_1_1_stack_1af09ab91f9e5143deccf7c9af837f451e"/><section>
    <title>Stack()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Stack</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Stack</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Stack (<link linkend="_classrapidjson_1_1_allocator">Allocator</link> * allocator, size_t stackCapacity)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1afedce84c8816abe9277a71ebd5e1808a"/><section>
    <title>~Stack()</title>
<indexterm><primary>~Stack</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>~Stack</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::~<link linkend="_classinternal_1_1_stack">Stack</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1af4109a9e632f85f70ac01c69d3ccdb3b"/><section>
    <title>Stack()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Stack</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Stack</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Stack (const <link linkend="_classinternal_1_1_stack">Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; )<computeroutput>[private]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_classinternal_1_1_stack_1a6acd2f7a16458184084c40d9f06f4a55"/><section>
    <title>Bottom()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Bottom</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Bottom</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Bottom ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1aeb6c4af6d6de57865232e1926dc0834e"/><section>
    <title>Bottom()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Bottom</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Bottom</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Bottom ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a02da31665a372738e81ded2f7b7d598e"/><section>
    <title>Clear()</title>
<indexterm><primary>Clear</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Clear</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>void <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a5efa6fdbfaf93c5e519a2e6f39bd081f"/><section>
    <title>Destroy()</title>
<indexterm><primary>Destroy</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Destroy</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>void <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Destroy ( )<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a2b8bda380e33838a99e3c73ff9785f03"/><section>
    <title>Empty()</title>
<indexterm><primary>Empty</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Empty</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Empty ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1acb8a65d110faf22be514db83524409c5"/><section>
    <title>End()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>End</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>End</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::End ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a242967361d9e254d13b85cfc2161861e"/><section>
    <title>End()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>End</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>End</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::End ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a5a530d1d2a39a05812e4fee0e299004a"/><section>
    <title>Expand()</title>
<indexterm><primary>Expand</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Expand</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>void <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Expand (size_t count)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1aa6f933acc7ecd92a2b567db5fa8cd43a"/><section>
    <title>GetAllocator()</title>
<indexterm><primary>GetAllocator</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>GetAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GetAllocator ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a67d5d7ee9424d3dd46cf9d001b6cdc6b"/><section>
    <title>GetCapacity()</title>
<indexterm><primary>GetCapacity</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>GetCapacity</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>size_t <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GetCapacity ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1ac484468a2791bd3e9ba609bd1600ab48"/><section>
    <title>GetSize()</title>
<indexterm><primary>GetSize</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>GetSize</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>size_t <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GetSize ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a657ae4d477b25d4e0045aee0efd809c3"/><section>
    <title>HasAllocator()</title>
<indexterm><primary>HasAllocator</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>HasAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>bool <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::HasAllocator ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a4423184cd64d118e78a042b9d2b2b4ac"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_classinternal_1_1_stack">Stack</link> &amp; <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator= (const <link linkend="_classinternal_1_1_stack">Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; )<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a1cb63cab765815c0624c6676b3712b03"/><section>
    <title>Pop()</title>
<indexterm><primary>Pop</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Pop</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Pop (size_t count)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a2d3b995140893ce92e9b94ada11ee3f3"/><section>
    <title>Push()</title>
<indexterm><primary>Push</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Push</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Push (size_t count = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a8b82b6705a41aa259936a81b927bcac0"/><section>
    <title>PushUnsafe()</title>
<indexterm><primary>PushUnsafe</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>PushUnsafe</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::PushUnsafe (size_t count = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a7ae5de892834b7fc16099eb5e23dd97c"/><section>
    <title>Reserve()</title>
<indexterm><primary>Reserve</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Reserve</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE void <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Reserve (size_t count = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a0a23948aa17a9870a5e228d465e40e92"/><section>
    <title>Resize()</title>
<indexterm><primary>Resize</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Resize</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>void <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Resize (size_t newCapacity)<computeroutput>[inline]</computeroutput>, <computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a3852b8494d69c91f6a238a51572e591e"/><section>
    <title>ShrinkToFit()</title>
<indexterm><primary>ShrinkToFit</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>ShrinkToFit</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>void <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ShrinkToFit ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a5e601199a21d84b1ac612f558be0f2c3"/><section>
    <title>Swap()</title>
<indexterm><primary>Swap</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Swap</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>void <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Swap (<link linkend="_classinternal_1_1_stack">Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a9c2611699081d74be865ebe67315dc6d"/><section>
    <title>Top()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Top</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Top</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Top ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a18e79cab61089f955d42b6c45bb51c23"/><section>
    <title>Top()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Top</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>Top</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Top ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_classinternal_1_1_stack_1a029e18096d082b1c81d7e1075a15eaad"/><section>
    <title>allocator_</title>
<indexterm><primary>allocator_</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>allocator_</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_classrapidjson_1_1_allocator">Allocator</link>* <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::allocator_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a224b9fa2406bc1c411068fa36c67c90f"/><section>
    <title>initialCapacity_</title>
<indexterm><primary>initialCapacity_</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>initialCapacity_</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>size_t <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::initialCapacity_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1a71e95d02ac850a97e1ee3628a207cbe9"/><section>
    <title>ownAllocator_</title>
<indexterm><primary>ownAllocator_</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>ownAllocator_</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput><link linkend="_classrapidjson_1_1_allocator">Allocator</link>* <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ownAllocator_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1ae2601d824b6b2f17eadd6739eec5c942"/><section>
    <title>stack_</title>
<indexterm><primary>stack_</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>stack_</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>char* <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::stack_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1af21b647d9f73246e9c96fa0966bdaf5d"/><section>
    <title>stackEnd_</title>
<indexterm><primary>stackEnd_</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>stackEnd_</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>char* <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::stackEnd_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<anchor xml:id="_classinternal_1_1_stack_1aad0ee46c4a6180e2f3e0d9f4348c31f2"/><section>
    <title>stackTop_</title>
<indexterm><primary>stackTop_</primary><secondary>internal::Stack&lt; Allocator &gt;</secondary></indexterm>
<indexterm><primary>internal::Stack&lt; Allocator &gt;</primary><secondary>stackTop_</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>char* <link linkend="_classinternal_1_1_stack">internal::Stack</link>&lt; <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::stackTop_<computeroutput>[private]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/internal/<link linkend="_stack_8h">stack.h</link></section>
</section>
