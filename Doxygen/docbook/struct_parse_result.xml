<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_parse_result" xml:lang="en-US">
<title>ParseResult Struct Reference</title>
<indexterm><primary>ParseResult</primary></indexterm>
<para>

<para>Result of parsing (wraps ParseErrorCode) </para>
 
</para>
<para>
<computeroutput>#include &lt;error.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef bool(ParseResult::* <link linkend="_struct_parse_result_1a991cd2759ba802bdb5e960d40890e874">BooleanType</link>) () const</para>

<para>! Unspecified boolean type </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_parse_result_1acd4a266f815bec59fa27f64f1923fe9e">ParseResult</link> ()</para>

<para>Default constructor, no error. </para>
</listitem>
            <listitem><para><link linkend="_struct_parse_result_1a38ca49a53e80633d0864ad5026adaf84">ParseResult</link> (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, size_t offset)</para>

<para>Constructor to set an error. </para>
</listitem>
            <listitem><para><link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> <link linkend="_struct_parse_result_1a2aae3c2f42b31cc2409ee1e03bc4852e">Code</link> () const</para>

<para>Get the error code. </para>
</listitem>
            <listitem><para>size_t <link linkend="_struct_parse_result_1afbe762766ac21b2aae266105f1dfa643">Offset</link> () const</para>

<para>Get the error offset, if <link linkend="_struct_parse_result_1adfe0ef5b994e82f8aa9ebf0b30c924b1">IsError()</link>, 0 otherwise. </para>
</listitem>
            <listitem><para><link linkend="_struct_parse_result_1abcd534680e4067ab797b1c6e930ac91c">operator BooleanType</link> () const</para>

<para>Explicit conversion to <computeroutput>bool</computeroutput>, returns <computeroutput>true</computeroutput>, iff !<link linkend="_struct_parse_result_1adfe0ef5b994e82f8aa9ebf0b30c924b1">IsError()</link>. </para>
</listitem>
            <listitem><para>bool <link linkend="_struct_parse_result_1adfe0ef5b994e82f8aa9ebf0b30c924b1">IsError</link> () const</para>

<para>Whether the result is an error. </para>
</listitem>
            <listitem><para>bool <link linkend="_struct_parse_result_1a4d98465a5dc6055e367a7ea7089fc73d">operator==</link> (const <link linkend="_struct_parse_result">ParseResult</link> &amp;that) const</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_parse_result_1a6de18a7e43013b2defc51d892c2cf90f">operator==</link> (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code) const</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_parse_result_1aa1fcc912cede0ef0526e0cbfcb14e4c2">operator!=</link> (const <link linkend="_struct_parse_result">ParseResult</link> &amp;that) const</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_parse_result_1afbe78dd07fd1bc09adb1609dda028ee0">operator!=</link> (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code) const</para>
</listitem>
            <listitem><para>void <link linkend="_struct_parse_result_1a88b6d44f052a19e6436ae6aadc2c40b4">Clear</link> ()</para>

<para>Reset error code. </para>
</listitem>
            <listitem><para>void <link linkend="_struct_parse_result_1aa81b4a7b776b77216cb752385203a8c1">Set</link> (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, size_t offset=0)</para>

<para>Update error code and offset. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_struct_parse_result_1a58c9982e833d1c74686506ac7449200c">operator==</link> (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, const <link linkend="_struct_parse_result">ParseResult</link> &amp;err)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_parse_result_1a0498aebcfdd3d4a5dcb989ee29b93d4d">operator!=</link> (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, const <link linkend="_struct_parse_result">ParseResult</link> &amp;err)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>Result of parsing (wraps ParseErrorCode) </para>



<para><literallayout><computeroutput><link linkend="_class_generic_document">Document</link>&#32;doc;
<link linkend="_struct_parse_result">ParseResult</link>&#32;ok&#32;=&#32;doc.<link linkend="_class_generic_document_1a901db1678f99a1b550003eed75bc380a">Parse</link>(<emphasis role="stringliteral">&quot;[42]&quot;</emphasis>);
<emphasis role="keywordflow">if</emphasis>&#32;(!ok)&#32;{
&#32;&#32;&#32;&#32;fprintf(stderr,&#32;<emphasis role="stringliteral">&quot;JSON&#32;parse&#32;error:&#32;%s&#32;(%u)&quot;</emphasis>,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga28835eb93d2c3c07bbea13515eb31415">GetParseError_En</link>(ok.<link linkend="_struct_parse_result_1a2aae3c2f42b31cc2409ee1e03bc4852e">Code</link>()),&#32;ok.<link linkend="_struct_parse_result_1afbe762766ac21b2aae266105f1dfa643">Offset</link>());
&#32;&#32;&#32;&#32;exit(EXIT_FAILURE);
}
</computeroutput></literallayout> <formalpara><title>See also</title>

<para><link linkend="_class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099">GenericReader::Parse</link>, <link linkend="_class_generic_document_1a901db1678f99a1b550003eed75bc380a">GenericDocument::Parse</link> </para>
</formalpara>
</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_struct_parse_result_1a991cd2759ba802bdb5e960d40890e874"/><section>
    <title>BooleanType</title>
<indexterm><primary>BooleanType</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>BooleanType</secondary></indexterm>
<para><computeroutput>typedef bool(ParseResult::* ParseResult::BooleanType) () const</computeroutput></para><para>

<para>! Unspecified boolean type </para>
</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct_parse_result_1acd4a266f815bec59fa27f64f1923fe9e"/><section>
    <title>ParseResult()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ParseResult</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>ParseResult</secondary></indexterm>
<para><computeroutput>ParseResult::ParseResult ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor, no error. </para>
</para>
</section>
<anchor xml:id="_struct_parse_result_1a38ca49a53e80633d0864ad5026adaf84"/><section>
    <title>ParseResult()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ParseResult</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>ParseResult</secondary></indexterm>
<para><computeroutput>ParseResult::ParseResult (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, size_t offset)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor to set an error. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct_parse_result_1a88b6d44f052a19e6436ae6aadc2c40b4"/><section>
    <title>Clear()</title>
<indexterm><primary>Clear</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>Clear</secondary></indexterm>
<para><computeroutput>void ParseResult::Clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Reset error code. </para>
</para>
</section>
<anchor xml:id="_struct_parse_result_1a2aae3c2f42b31cc2409ee1e03bc4852e"/><section>
    <title>Code()</title>
<indexterm><primary>Code</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>Code</secondary></indexterm>
<para><computeroutput><link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> ParseResult::Code ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the error code. </para>
</para>
</section>
<anchor xml:id="_struct_parse_result_1adfe0ef5b994e82f8aa9ebf0b30c924b1"/><section>
    <title>IsError()</title>
<indexterm><primary>IsError</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>IsError</secondary></indexterm>
<para><computeroutput>bool ParseResult::IsError ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Whether the result is an error. </para>
</para>
</section>
<anchor xml:id="_struct_parse_result_1afbe762766ac21b2aae266105f1dfa643"/><section>
    <title>Offset()</title>
<indexterm><primary>Offset</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>Offset</secondary></indexterm>
<para><computeroutput>size_t ParseResult::Offset ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the error offset, if <link linkend="_struct_parse_result_1adfe0ef5b994e82f8aa9ebf0b30c924b1">IsError()</link>, 0 otherwise. </para>
</para>
</section>
<anchor xml:id="_struct_parse_result_1abcd534680e4067ab797b1c6e930ac91c"/><section>
    <title>operator BooleanType()</title>
<indexterm><primary>operator BooleanType</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>operator BooleanType</secondary></indexterm>
<para><computeroutput>ParseResult::operator <link linkend="_struct_parse_result_1a991cd2759ba802bdb5e960d40890e874">BooleanType</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Explicit conversion to <computeroutput>bool</computeroutput>, returns <computeroutput>true</computeroutput>, iff !<link linkend="_struct_parse_result_1adfe0ef5b994e82f8aa9ebf0b30c924b1">IsError()</link>. </para>
</para>
</section>
<anchor xml:id="_struct_parse_result_1aa1fcc912cede0ef0526e0cbfcb14e4c2"/><section>
    <title>operator!=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool ParseResult::operator!= (const <link linkend="_struct_parse_result">ParseResult</link> &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_parse_result_1afbe78dd07fd1bc09adb1609dda028ee0"/><section>
    <title>operator!=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator!=</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool ParseResult::operator!= (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_parse_result_1a4d98465a5dc6055e367a7ea7089fc73d"/><section>
    <title>operator==()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool ParseResult::operator== (const <link linkend="_struct_parse_result">ParseResult</link> &amp; that) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_parse_result_1a6de18a7e43013b2defc51d892c2cf90f"/><section>
    <title>operator==()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator==</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool ParseResult::operator== (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_parse_result_1aa81b4a7b776b77216cb752385203a8c1"/><section>
    <title>Set()</title>
<indexterm><primary>Set</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>Set</secondary></indexterm>
<para><computeroutput>void ParseResult::Set (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, size_t offset = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Update error code and offset. </para>
</para>
</section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_struct_parse_result_1a0498aebcfdd3d4a5dcb989ee29b93d4d"/><section>
    <title>operator!=</title>
<indexterm><primary>operator!=</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>operator!=</secondary></indexterm>
<para><computeroutput>bool operator!= (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, const <link linkend="_struct_parse_result">ParseResult</link> &amp; err)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_parse_result_1a58c9982e833d1c74686506ac7449200c"/><section>
    <title>operator==</title>
<indexterm><primary>operator==</primary><secondary>ParseResult</secondary></indexterm>
<indexterm><primary>ParseResult</primary><secondary>operator==</secondary></indexterm>
<para><computeroutput>bool operator== (<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> code, const <link linkend="_struct_parse_result">ParseResult</link> &amp; err)<computeroutput>[friend]</computeroutput></computeroutput></para></section>
<para>
The documentation for this struct was generated from the following file:</para>
src/rapidjson/include/rapidjson/error/<link linkend="_error_8h">error.h</link></section>
</section>
