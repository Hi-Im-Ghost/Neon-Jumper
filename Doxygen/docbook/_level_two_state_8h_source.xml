<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="__level_two_state_8h_source" xml:lang="en-US">
<title>LevelTwoState.h</title>
<indexterm><primary>src/states/LevelTwoState.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="preprocessor">#ifndef&#32;TREES_JSON_LEVELTWOSTATE_H</emphasis>
2 <emphasis role="preprocessor">#define&#32;TREES_JSON_LEVELTWOSTATE_H</emphasis>
3 
4 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="__game_state_8h">GameState.h</link>&quot;</emphasis>
5 <emphasis role="preprocessor">#include&#32;&quot;../entities/Player.h&quot;</emphasis>
6 <emphasis role="preprocessor">#include&#32;&quot;../LoadMap.h&quot;</emphasis>
7 <emphasis role="preprocessor">#include&#32;&quot;../entities/Slime.h&quot;</emphasis>
8 
13 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_level_two_state">LevelTwoState</link>&#32;:&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_class_game_state">GameState</link>&#32;{
14 <emphasis role="keyword">private</emphasis>:
16 &#32;&#32;&#32;&#32;<link linkend="_class_player">Player</link>*&#32;player;
18 &#32;&#32;&#32;&#32;std::list&lt;sf::RectangleShape&gt;&#32;hitboxes;
20 &#32;&#32;&#32;&#32;std::list&lt;sf::RectangleShape&gt;&#32;dmgboxes;
22 &#32;&#32;&#32;&#32;<link linkend="_class_load_map">LoadMap</link>&#32;map;
23 
25 &#32;&#32;&#32;&#32;std::list&lt;Enemy*&gt;&#32;enemies;
26 
28 &#32;&#32;&#32;&#32;<link linkend="_class_button">Button</link>*&#32;endMenuBtn;
30 &#32;&#32;&#32;&#32;<link linkend="_class_button">Button</link>*&#32;pauseResumeBtn;
32 &#32;&#32;&#32;&#32;<link linkend="_class_button">Button</link>*&#32;pauseExitBtn;
34 &#32;&#32;&#32;&#32;<link linkend="_class_button">Button</link>*&#32;loadBtn;
36 &#32;&#32;&#32;&#32;<link linkend="_class_button">Button</link>*&#32;saveBtn;
38 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;renderHitboxes&#32;=&#32;<emphasis role="keyword">false</emphasis>;
39 
41 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;level2;
43 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;i&#32;=&#32;1;
45 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">int</emphasis>&#32;x&#32;=&#32;1;
46 
48 &#32;&#32;&#32;&#32;sf::RectangleShape&#32;endLevelTrigger;
50 &#32;&#32;&#32;&#32;<link linkend="_class_player_h_u_d">PlayerHUD</link>*&#32;hud;
51 
53 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initValues();
55 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initHitboxes();
57 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initDmgBoxes();
59 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initPauseButtons();
61 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initEndButtons();
63 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initEndTrigger();
65 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initView(sf::RenderTarget&amp;&#32;window);
67 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initViewPlayer(sf::RenderTarget&#32;&amp;window);
69 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;initEnemies();
70 
72 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateInput();
74 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updatePaused();
76 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateEnd();
78 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateEntities(<emphasis role="keywordtype">float</emphasis>&#32;deltaTime);
80 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;renderPaused(sf::RenderTarget&amp;&#32;window);
82 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;renderEnd(sf::RenderTarget&amp;&#32;window);
84 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;renderEntities(sf::RenderTarget&amp;&#32;window);
85 
87 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateEndTrigger();
89 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;updateDmgTriggers();
91 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;killPlayerTriggers();
92 
94 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;saveGame();
95 
96 <emphasis role="keyword">protected</emphasis>:
97 <emphasis role="comment">//&#32;Duplicates</emphasis>
98 
99 <emphasis role="keyword">public</emphasis>:
101 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_level_two_state_1a163ba0c525f25d7ee56f58d4bc40171e">LevelTwoState</link>(std::stack&lt;GameState*&gt;*&#32;<link linkend="_class_game_state_1a6e9e1aa616cd1071425f2766a76957ec">states</link>);
102 
104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_level_two_state_1aca927200ca6e61366401ac3ae0247dc1">update</link>(<emphasis role="keywordtype">float</emphasis>&#32;deltaTime)&#32;<emphasis role="keyword">override</emphasis>;
106 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_level_two_state_1a442f2cd1d36c3919177d677c62828a17">render</link>(sf::RenderTarget&amp;&#32;window)&#32;<emphasis role="keyword">override</emphasis>;
107 
109 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_level_two_state_1a65ea3507d5cb9957a940185c7fb9c4e2">loadGame</link>();
110 };
111 
112 
113 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//TREES_JSON_LEVELTWOSTATE_H</emphasis>
</programlisting></section>
