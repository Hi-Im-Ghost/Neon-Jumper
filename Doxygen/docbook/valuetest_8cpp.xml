<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_valuetest_8cpp" xml:lang="en-US">
<title>src/rapidjson/test/unittest/valuetest.cpp File Reference</title>
<indexterm><primary>src/rapidjson/test/unittest/valuetest.cpp</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;unittest.h&quot;
#include &quot;rapidjson/document.h&quot;
#include &lt;algorithm&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_terminate_handler">TerminateHandler&lt; e &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_value_int_comparer">ValueIntComparer</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_valuetest_8cpp_1a59abe708b636f5305e064d40eca97f6e">TEST_TERMINATION</link>(e,  <link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">json</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_valuetest_8cpp_1ae9ec383f03705ac84cb50c042f7d77aa">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Size)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1ac79776999b1881b3eb830808965b470a">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, DefaultConstructor)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1ab024bed5c69229eb9fef9b80009c2e09">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, AssignmentOperator)</para>
</listitem>
            <listitem><para>template&lt;typename A , typename B &gt; </para><para>void <link linkend="_valuetest_8cpp_1a7215f0e515c63ea0fb6ebea7072b4784">TestEqual</link> (const A &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, const B &amp;b)</para>
</listitem>
            <listitem><para>template&lt;typename A , typename B &gt; </para><para>void <link linkend="_valuetest_8cpp_1aa7e66eb49840df8036ff9555dd60f3dd">TestUnequal</link> (const A &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, const B &amp;b)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a3cf9cc967e6d126a803ea2fd4aea0bfb">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, EqualtoOperator)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> &gt; </para><para>void <link linkend="_valuetest_8cpp_1aa9d67844f199ae6ee2ed65d916062fd1">TestCopyFrom</link> ()</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a7e3241d047b28072c5f16f4ae4c0153e">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, CopyFrom)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a8c1dab50315bd8f2bf0c04ada2553307">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Swap)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a9365b27a15b68a607aa589c66201ddf3">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Null)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a3f67e5c70398386811fffe14bb9e287e">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, True)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a8cd738d531b7a43bb1024e9eeb18fa51">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, False)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a623133005f75695d60ba1b2109583199">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Int)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a15e4416e4ce7195c1904b4610cef090b">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Uint)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a0365dc424d118a687e8be8a40cbe9e8f">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Int64)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a5587588d34b05fc843c6a633d322fb0f">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Uint64)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a2b4a84b0a1f8c6440d4760e6b3a263be">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Double)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1af4d964359656e20c5ab6b5d68f469684">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Float)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a4a1a96730a9e8d7f24c7cfb739af26e1">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, IsLosslessDouble)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a1f66c1a1327cd497b9780a890ecdb188">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, IsLosslessFloat)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a121a3968f392a9a7cab157ba967122a6">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, String)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a7375e84e88ce8ac6feba71f371aafe18">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, SetStringNull)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </para><para>static void <link linkend="_valuetest_8cpp_1acb35b408d50c9b453a88a0ed3d4301a2">TestArray</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;x, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1af7de9c0c3f094fef0e8fa6ec4464ef44">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Array)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1adca33ae49676c7da0bdb665f44ff4f18">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, ArrayHelper)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </para><para>static void <link linkend="_valuetest_8cpp_1a42268fd90f33cdf46d8cfd6363159b03">TestObject</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;x, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1ab6db11e01d6d068d50c5869531768ebc">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, Object)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a2c018959622cff2bdcc7a842e311f16d">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, ObjectHelper)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1acc5ba075c6a07d2c57bfa43462cb2790">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, EraseMember_String)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a57d59fdf3ae8a0e1561f16d3e674f153">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, BigNestedArray)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a922fe62da3f8d665a75e629d23b4ba37">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, BigNestedObject)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a412c0e36b706954df020d0e91f53cedc">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, RemoveLastElement)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a03046b32b1fbdd384c38ba1b0b6c1a42">TEST</link> (<link linkend="_document_8h_1ac6ea5b168e3fe8c7fa532450fc9391f7">Document</link>, <link linkend="_class_crt_allocator">CrtAllocator</link>)</para>
</listitem>
            <listitem><para>static void <link linkend="_valuetest_8cpp_1a609615ec321d4c30382541a647538e74">TestShortStringOptimization</link> (const char *str)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1ae2be318dd1f5ddc7b09d26e5c9262e9e">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, AllocateShortString)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a0c76874aa107a8a551105338679e87a9">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, AcceptTerminationByHandler)</para>
</listitem>
            <listitem><para>static void <link linkend="_valuetest_8cpp_1a55ba1574882a478f4e51df66d9a071f8">MergeDuplicateKey</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> &amp;v, <link linkend="_class_generic_value_1a7beb83860c1b8d2a0e2a7da9796b2fa1">Value::AllocatorType</link> &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para><link linkend="_valuetest_8cpp_1a16a86b414bc21585ddd60f3cabf90871">TEST</link> (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>, <link linkend="_valuetest_8cpp_1a55ba1574882a478f4e51df66d9a071f8">MergeDuplicateKey</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_valuetest_8cpp_1a59abe708b636f5305e064d40eca97f6e"/><section>
    <title>TEST_TERMINATION</title>
<indexterm><primary>TEST_TERMINATION</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST_TERMINATION</secondary></indexterm>
<para><computeroutput>#define TEST_TERMINATION( e,  <link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">json</link>)</computeroutput></para><emphasis role="strong">Value:</emphasis><programlisting linenumbering="unnumbered">{\
&#32;&#32;&#32;&#32;Document&#32;d;&#32;\
&#32;&#32;&#32;&#32;EXPECT_FALSE(d.Parse(<link linkend="_namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee">json</link>).HasParseError());&#32;\
&#32;&#32;&#32;&#32;Reader&#32;reader;&#32;\
&#32;&#32;&#32;&#32;TerminateHandler&lt;e&gt;&#32;h;\
&#32;&#32;&#32;&#32;EXPECT_FALSE(d.Accept(h));\
}
</programlisting></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_valuetest_8cpp_1a55ba1574882a478f4e51df66d9a071f8"/><section>
    <title>MergeDuplicateKey()</title>
<indexterm><primary>MergeDuplicateKey</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>MergeDuplicateKey</secondary></indexterm>
<para><computeroutput>static void MergeDuplicateKey (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> &amp; v, <link linkend="_class_generic_value_1a7beb83860c1b8d2a0e2a7da9796b2fa1">Value::AllocatorType</link> &amp; a)<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a03046b32b1fbdd384c38ba1b0b6c1a42"/><section>
    <title>TEST()<computeroutput>[1/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1ac6ea5b168e3fe8c7fa532450fc9391f7">Document</link> , <link linkend="_class_crt_allocator">CrtAllocator</link> )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a0c76874aa107a8a551105338679e87a9"/><section>
    <title>TEST()<computeroutput>[2/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , AcceptTerminationByHandler )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1ae2be318dd1f5ddc7b09d26e5c9262e9e"/><section>
    <title>TEST()<computeroutput>[3/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , AllocateShortString )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1af7de9c0c3f094fef0e8fa6ec4464ef44"/><section>
    <title>TEST()<computeroutput>[4/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Array )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1adca33ae49676c7da0bdb665f44ff4f18"/><section>
    <title>TEST()<computeroutput>[5/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , ArrayHelper )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1ab024bed5c69229eb9fef9b80009c2e09"/><section>
    <title>TEST()<computeroutput>[6/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , AssignmentOperator )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a57d59fdf3ae8a0e1561f16d3e674f153"/><section>
    <title>TEST()<computeroutput>[7/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , BigNestedArray )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a922fe62da3f8d665a75e629d23b4ba37"/><section>
    <title>TEST()<computeroutput>[8/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , BigNestedObject )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a7e3241d047b28072c5f16f4ae4c0153e"/><section>
    <title>TEST()<computeroutput>[9/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , CopyFrom )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1ac79776999b1881b3eb830808965b470a"/><section>
    <title>TEST()<computeroutput>[10/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , DefaultConstructor )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a2b4a84b0a1f8c6440d4760e6b3a263be"/><section>
    <title>TEST()<computeroutput>[11/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Double )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a3cf9cc967e6d126a803ea2fd4aea0bfb"/><section>
    <title>TEST()<computeroutput>[12/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , EqualtoOperator )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1acc5ba075c6a07d2c57bfa43462cb2790"/><section>
    <title>TEST()<computeroutput>[13/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , EraseMember_String )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a8cd738d531b7a43bb1024e9eeb18fa51"/><section>
    <title>TEST()<computeroutput>[14/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , False )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1af4d964359656e20c5ab6b5d68f469684"/><section>
    <title>TEST()<computeroutput>[15/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Float )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a623133005f75695d60ba1b2109583199"/><section>
    <title>TEST()<computeroutput>[16/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Int )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a0365dc424d118a687e8be8a40cbe9e8f"/><section>
    <title>TEST()<computeroutput>[17/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Int64 )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a4a1a96730a9e8d7f24c7cfb739af26e1"/><section>
    <title>TEST()<computeroutput>[18/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , IsLosslessDouble )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a1f66c1a1327cd497b9780a890ecdb188"/><section>
    <title>TEST()<computeroutput>[19/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , IsLosslessFloat )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a16a86b414bc21585ddd60f3cabf90871"/><section>
    <title>TEST()<computeroutput>[20/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , <link linkend="_valuetest_8cpp_1a55ba1574882a478f4e51df66d9a071f8">MergeDuplicateKey</link> )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a9365b27a15b68a607aa589c66201ddf3"/><section>
    <title>TEST()<computeroutput>[21/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Null )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1ab6db11e01d6d068d50c5869531768ebc"/><section>
    <title>TEST()<computeroutput>[22/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Object )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a2c018959622cff2bdcc7a842e311f16d"/><section>
    <title>TEST()<computeroutput>[23/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , ObjectHelper )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a412c0e36b706954df020d0e91f53cedc"/><section>
    <title>TEST()<computeroutput>[24/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , RemoveLastElement )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a7375e84e88ce8ac6feba71f371aafe18"/><section>
    <title>TEST()<computeroutput>[25/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , SetStringNull )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1ae9ec383f03705ac84cb50c042f7d77aa"/><section>
    <title>TEST()<computeroutput>[26/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Size )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a121a3968f392a9a7cab157ba967122a6"/><section>
    <title>TEST()<computeroutput>[27/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , String )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a8c1dab50315bd8f2bf0c04ada2553307"/><section>
    <title>TEST()<computeroutput>[28/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Swap )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a3f67e5c70398386811fffe14bb9e287e"/><section>
    <title>TEST()<computeroutput>[29/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , True )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a15e4416e4ce7195c1904b4610cef090b"/><section>
    <title>TEST()<computeroutput>[30/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Uint )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a5587588d34b05fc843c6a633d322fb0f"/><section>
    <title>TEST()<computeroutput>[31/31]</computeroutput></title>
<indexterm><primary>TEST</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TEST</secondary></indexterm>
<para><computeroutput>TEST (<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> , Uint64 )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1acb35b408d50c9b453a88a0ed3d4301a2"/><section>
    <title>TestArray()</title>
<indexterm><primary>TestArray</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TestArray</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>static void TestArray (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; x, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1aa9d67844f199ae6ee2ed65d916062fd1"/><section>
    <title>TestCopyFrom()</title>
<indexterm><primary>TestCopyFrom</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TestCopyFrom</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> &gt; </computeroutput><para><computeroutput>void TestCopyFrom ( )</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a7215f0e515c63ea0fb6ebea7072b4784"/><section>
    <title>TestEqual()</title>
<indexterm><primary>TestEqual</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TestEqual</secondary></indexterm>
<computeroutput>template&lt;typename A , typename B &gt; </computeroutput><para><computeroutput>void TestEqual (const A &amp; a, const B &amp; b)</computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a42268fd90f33cdf46d8cfd6363159b03"/><section>
    <title>TestObject()</title>
<indexterm><primary>TestObject</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TestObject</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; </computeroutput><para><computeroutput>static void TestObject (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; x, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1a609615ec321d4c30382541a647538e74"/><section>
    <title>TestShortStringOptimization()</title>
<indexterm><primary>TestShortStringOptimization</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TestShortStringOptimization</secondary></indexterm>
<para><computeroutput>static void TestShortStringOptimization (const char * str)<computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_valuetest_8cpp_1aa7e66eb49840df8036ff9555dd60f3dd"/><section>
    <title>TestUnequal()</title>
<indexterm><primary>TestUnequal</primary><secondary>valuetest.cpp</secondary></indexterm>
<indexterm><primary>valuetest.cpp</primary><secondary>TestUnequal</secondary></indexterm>
<computeroutput>template&lt;typename A , typename B &gt; </computeroutput><para><computeroutput>void TestUnequal (const A &amp; a, const B &amp; b)</computeroutput></para></section>
</section>
</section>
