<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_pointer_8h_source" xml:lang="en-US">
<title>pointer.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/pointer.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available.</emphasis>
2 <emphasis role="comment">//&#32;</emphasis>
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015&#32;THL&#32;A29&#32;Limited,&#32;a&#32;Tencent&#32;company,&#32;and&#32;Milo&#32;Yip.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License.&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource.org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed&#32;</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.&#32;See&#32;the&#32;License&#32;for&#32;the&#32;</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_POINTER_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_POINTER_H_</emphasis>
17 
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_document_8h">document.h</link>&quot;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_uri_8h">uri.h</link>&quot;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_itoa_8h">internal/itoa.h</link>&quot;</emphasis>
21 
22 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
23 RAPIDJSON_DIAG_PUSH
24 RAPIDJSON_DIAG_OFF(<emphasis role="keywordflow">switch</emphasis>-<emphasis role="keyword">enum</emphasis>)
25 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
26 RAPIDJSON_DIAG_PUSH
27 RAPIDJSON_DIAG_OFF(4512)&#32;<emphasis role="comment">//&#32;assignment&#32;operator&#32;could&#32;not&#32;be&#32;generated</emphasis>
28 <emphasis role="preprocessor">#endif</emphasis>
29 
30 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
31 
32 <emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;kPointerInvalidIndex&#32;=&#32;~SizeType(0);&#32;&#32;
33 
35 
38 <emphasis role="keyword">enum</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be">PointerParseErrorCode</link>&#32;{
39 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>&#32;=&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
40 
41 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77">kPointerParseErrorTokenMustBeginWithSolidus</link>,&#32;&#32;&#32;&#32;
42 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b">kPointerParseErrorInvalidEscape</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
43 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35">kPointerParseErrorInvalidPercentEncoding</link>,&#32;&#32;&#32;&#32;&#32;&#32;&#32;
44 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38">kPointerParseErrorCharacterMustPercentEncode</link>&#32;&#32;&#32;&#32;
45 };
46 
48 <emphasis role="comment">//&#32;GenericPointer</emphasis>
49 
51 
79 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator&#32;=&#32;CrtAllocator&gt;
80 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_pointer">GenericPointer</link>&#32;{
81 <emphasis role="keyword">public</emphasis>:
82 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_encoding">ValueType::EncodingType</link>&#32;<link linkend="_class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b">EncodingType</link>;&#32;&#32;
83 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">ValueType::Ch</link>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri&lt;ValueType, Allocator&gt;</link>&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>;
85 
86 
88 
100 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_generic_pointer_1_1_token">Token</link>&#32;{
101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c">name</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
104 &#32;&#32;&#32;&#32;};
105 
107 
108 
110 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe">GenericPointer</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)&#32;:&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>(<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>),&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>(),&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>(),&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>(),&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>(),&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>)&#32;{}
111 
113 
117 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0">GenericPointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)&#32;:&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>(<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>),&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>(),&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>(),&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>(),&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>(),&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>)&#32;{
118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parse(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;<link linkend="_namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e">internal::StrLen</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>));
119 &#32;&#32;&#32;&#32;}
120 
121 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
123 
128 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe">GenericPointer</link>(<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)&#32;:&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>(<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>),&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>(),&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>(),&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>(),&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>(),&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>)&#32;{
129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parse(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.c_str(),&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.size());
130 &#32;&#32;&#32;&#32;}
131 <emphasis role="preprocessor">#endif</emphasis>
132 
134 
140 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc">GenericPointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)&#32;:&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>(<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>),&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>(),&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>(),&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>(),&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>(),&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>)&#32;{
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Parse(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;length);
142 &#32;&#32;&#32;&#32;}
143 
145 
166 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84">GenericPointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_generic_pointer_1_1_token">Token</link>*&#32;tokens,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;tokenCount)&#32;:&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>(),&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>(const_cast&lt;<link linkend="_struct_generic_pointer_1_1_token">Token</link>*&gt;(tokens)),&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>(tokenCount),&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>(),&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>)&#32;{}
167 
169 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a7803645e8f7f349ee09c7d50351e9432">GenericPointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;rhs)&#32;:&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>(),&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>(),&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>(),&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>(),&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>)&#32;{
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;rhs;
171 &#32;&#32;&#32;&#32;}
172 
174 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a4395ca3f5c646e47cc9b93d21d1660ae">GenericPointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;rhs,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)&#32;:&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>(<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>),&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>(),&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>(),&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>(),&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>(),&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>(),&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>)&#32;{
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*<emphasis role="keyword">this</emphasis>&#32;=&#32;rhs;
176 &#32;&#32;&#32;&#32;}
177 
179 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb">~GenericPointer</link>()&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>)&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;user-supplied&#32;tokens&#32;constructor&#32;is&#32;used,&#32;nameBuffer_&#32;is&#32;nullptr&#32;and&#32;tokens_&#32;are&#32;not&#32;deallocated.</emphasis>
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Allocator::Free</link>(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>);
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a">RAPIDJSON_DELETE</link>(<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>);
183 &#32;&#32;&#32;&#32;}
184 
186 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;<link linkend="_class_generic_pointer_1ae1b46fbcab2c8557825f7be842acbfe7">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;rhs)&#32;{
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;&amp;rhs)&#32;{
188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;delete&#32;ownAllcator</emphasis>
189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>)
190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Allocator::Free</link>(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>);
191 
192 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;=&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;
193 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>&#32;=&#32;rhs.<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>;
194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;=&#32;rhs.<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>;
195 
196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rhs.<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>)
197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CopyFromRaw(rhs);&#32;<emphasis role="comment">//&#32;Normally&#32;parsed&#32;tokens.</emphasis>
198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;=&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;<emphasis role="comment">//&#32;User&#32;supplied&#32;const&#32;tokens.</emphasis>
200 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;=&#32;0;
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
204 &#32;&#32;&#32;&#32;}
205 
207 
211 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;<link linkend="_class_generic_pointer_1af148818f7c2b10243221953d887044c6">Swap</link>(<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;other)&#32;RAPIDJSON_NOEXCEPT&#32;{
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">internal::Swap</link>(<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>,&#32;other.allocator_);
213 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">internal::Swap</link>(<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>,&#32;other.ownAllocator_);
214 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">internal::Swap</link>(<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>,&#32;other.nameBuffer_);
215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">internal::Swap</link>(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>,&#32;other.tokens_);
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">internal::Swap</link>(<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>,&#32;other.tokenCount_);
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">internal::Swap</link>(<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>,&#32;other.parseErrorOffset_);
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">internal::Swap</link>(<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>,&#32;other.parseErrorCode_);
219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
220 &#32;&#32;&#32;&#32;}
221 
223 
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_pointer_1a249c61b5d4bed20c3f8972c57f46a937">swap</link>(<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;b)&#32;RAPIDJSON_NOEXCEPT&#32;{&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>.Swap(b);&#32;}
235 
237 
239 
240 
242 
247 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_generic_pointer_1_1_token">Token</link>&amp;&#32;token,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&#32;r;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>&#32;=&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;*p&#32;=&#32;r.CopyFromRaw(*<emphasis role="keyword">this</emphasis>,&#32;1,&#32;token.<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>&#32;+&#32;1);
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(p,&#32;token.<link linkend="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c">name</link>,&#32;(token.<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>&#32;+&#32;1)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>));
252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>].<link linkend="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c">name</link>&#32;=&#32;p;
253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>&#32;=&#32;token.<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>;
254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>].<link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link>&#32;=&#32;token.<link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link>;
255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r;
256 &#32;&#32;&#32;&#32;}
257 
259 
265 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&#32;<link linkend="_class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77">Append</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;name,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_generic_pointer_1_1_token">Token</link>&#32;token&#32;=&#32;{&#32;name,&#32;length,&#32;kPointerInvalidIndex&#32;};
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(token,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
268 &#32;&#32;&#32;&#32;}
269 
271 
276 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
277 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">RAPIDJSON_DISABLEIF_RETURN</link>((internal::NotExpr&lt;internal::IsSame&lt;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">internal::RemoveConst&lt;T&gt;::Type</link>,&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&gt;&#32;&gt;),&#32;(<link linkend="_class_generic_pointer">GenericPointer</link>))
278 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>*&#32;name,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(name,&#32;<link linkend="_namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e">internal::StrLen</link>(name),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
280 &#32;&#32;&#32;&#32;}
281 
282 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
284 
289 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;Ch&gt;&amp;&#32;name,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(name.c_str(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(name.size()),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
291 &#32;&#32;&#32;&#32;}
292 <emphasis role="preprocessor">#endif</emphasis>
293 
295 
300 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[21];
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>*&#32;end&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)&#32;==&#32;4&#32;?&#32;<link linkend="_namespaceinternal_1a90e3cb218b557548f361e99dc718b4b1">internal::u32toa</link>(index,&#32;buffer)&#32;:&#32;<link linkend="_namespaceinternal_1a489150922c0320e4290b455bf3c6e36c">internal::u64toa</link>(index,&#32;buffer);
303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(end&#32;-&#32;buffer);
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buffer[length]&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
305 
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>)&#32;==&#32;1)&#32;{
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Token&#32;token&#32;=&#32;{&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*<emphasis role="keyword">&gt;</emphasis>(buffer),&#32;length,&#32;index&#32;};
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(token,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;name[21];
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;=&#32;length;&#32;i++)
313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name[i]&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link><emphasis role="keyword">&gt;</emphasis>(buffer[i]);
314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Token&#32;token&#32;=&#32;{&#32;name,&#32;length,&#32;index&#32;};
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(token,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
317 &#32;&#32;&#32;&#32;}
318 
320 
325 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;token,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token.IsString())
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(token.GetString(),&#32;token.GetStringLength(),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
329 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(token.IsUint64());
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(token.GetUint64()&#32;&lt;=&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(~0));
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78">Append</link>(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(token.GetUint64()),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
333 &#32;&#32;&#32;&#32;}
334 
336 
337 
339 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsValid()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;==&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>;&#32;}
340 
342 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;GetParseErrorOffset()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>;&#32;}
343 
345 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be">PointerParseErrorCode</link>&#32;GetParseErrorCode()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>;&#32;}
346 
348 
350 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&amp;&#32;GetAllocator()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>;&#32;}
351 
353 
354 
356 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Token*&#32;GetTokens()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;}
357 
359 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;GetTokenCount()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;}
360 
362 
364 
365 
367 
370 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator==(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsValid()&#32;||&#32;!rhs.IsValid()&#32;||&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;!=&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>)
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
373 
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;i++)&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].index&#32;!=&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link>&#32;||
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>&#32;!=&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>&#32;||&#32;
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>&#32;!=&#32;0&#32;&amp;&amp;&#32;std::memcmp(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c">name</link>,&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c">name</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>)*&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>)&#32;!=&#32;0))
378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
382 
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
384 &#32;&#32;&#32;&#32;}
385 
387 
390 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator!=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;!(*<emphasis role="keyword">this</emphasis>&#32;==&#32;rhs);&#32;}
391 
393 
396 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;operator&lt;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;rhs)<emphasis role="keyword">&#32;const&#32;</emphasis>{
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsValid())
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!rhs.IsValid())
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
401 
402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;!=&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>)
403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;&lt;&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;
404 
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;i++)&#32;{
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].index&#32;!=&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link>)
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link>&#32;&lt;&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf">index</link>;
408 
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].length&#32;!=&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>)
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>&#32;&lt;&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>;
411 
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;cmp&#32;=&#32;std::memcmp(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].name,&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c">name</link>,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>)&#32;*&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>[i].<link linkend="_struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d">length</link>))
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;cmp&#32;&lt;&#32;0;
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
415 
416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
417 &#32;&#32;&#32;&#32;}
418 
420 
422 
423 
425 
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;OutputStream&gt;
430 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Stringify(OutputStream&amp;&#32;os)<emphasis role="keyword">&#32;const&#32;</emphasis>{
431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Stringify&lt;false,&#32;OutputStream&gt;(os);
432 &#32;&#32;&#32;&#32;}
433 
435 
439 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;OutputStream&gt;
440 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;StringifyUriFragment(OutputStream&amp;&#32;os)<emphasis role="keyword">&#32;const&#32;</emphasis>{
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Stringify&lt;true,&#32;OutputStream&gt;(os);
442 &#32;&#32;&#32;&#32;}
443 
445 
447 
448 
450 
464 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Create(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;alreadyExist&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(IsValid());
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;v&#32;=&#32;&amp;root;
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exist&#32;=&#32;<emphasis role="keyword">true</emphasis>;
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Token&#32;*t&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;t&#32;!=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;++t)&#32;{
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsArray()&#32;&amp;&amp;&#32;t-&gt;name[0]&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;&amp;&amp;&#32;t-&gt;length&#32;==&#32;1)&#32;{
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;PushBack(<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>().Move(),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;((*v)[v-&gt;Size()&#32;-&#32;1]);
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exist&#32;=&#32;<emphasis role="keyword">false</emphasis>;
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t-&gt;index&#32;==&#32;kPointerInvalidIndex)&#32;{&#32;<emphasis role="comment">//&#32;must&#32;be&#32;object&#32;name</emphasis>
476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!v-&gt;IsObject())
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;SetObject();&#32;<emphasis role="comment">//&#32;Change&#32;to&#32;Object</emphasis>
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;object&#32;name&#32;or&#32;array&#32;index</emphasis>
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!v-&gt;IsArray()&#32;&amp;&amp;&#32;!v-&gt;IsObject())
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;SetArray();&#32;<emphasis role="comment">//&#32;Change&#32;to&#32;Array</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
483 
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsArray())&#32;{
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t-&gt;index&#32;&gt;=&#32;v-&gt;Size())&#32;{
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;Reserve(t-&gt;index&#32;+&#32;1,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(t-&gt;index&#32;&gt;=&#32;v-&gt;Size())
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;PushBack(<link linkend="_class_generic_value">ValueType</link>().Move(),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exist&#32;=&#32;<emphasis role="keyword">false</emphasis>;
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;((*v)[t-&gt;index]);
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::MemberIterator</link>&#32;m&#32;=&#32;v-&gt;FindMember(<link linkend="_class_generic_value">GenericValue&lt;EncodingType&gt;</link>(<link linkend="_struct_generic_string_ref">GenericStringRef&lt;Ch&gt;</link>(t-&gt;name,&#32;t-&gt;length)));
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;==&#32;v-&gt;MemberEnd())&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;AddMember(<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>(t-&gt;name,&#32;t-&gt;length,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>).Move(),&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>().Move(),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m&#32;=&#32;v-&gt;MemberEnd();
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;(--m)-&gt;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>;&#32;<emphasis role="comment">//&#32;Assumes&#32;AddMember()&#32;appends&#32;at&#32;the&#32;end</emphasis>
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exist&#32;=&#32;<emphasis role="keyword">false</emphasis>;
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;m-&gt;value;
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
506 
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(alreadyExist)
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*alreadyExist&#32;=&#32;exist;
509 
510 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*v;
511 &#32;&#32;&#32;&#32;}
512 
514 
519 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
520 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Create(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;alreadyExist&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(document,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>(),&#32;alreadyExist);
522 &#32;&#32;&#32;&#32;}
523 
525 
527 
528 
530 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;For&#32;use&#32;with&#32;JSON&#32;pointers&#32;into&#32;JSON&#32;schema&#32;documents.</emphasis>
546 <emphasis role="comment"></emphasis>&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>&#32;GetUri(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>&amp;&#32;rootUri,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;kIdString[]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;d&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>&#32;};
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&#32;kIdValue(kIdString,&#32;2);
549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>&#32;base&#32;=&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>(rootUri,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(IsValid());
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;v&#32;=&#32;&amp;root;
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Token&#32;*t&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;t&#32;!=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;++t)&#32;{
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(v-&gt;GetType())&#32;{
554 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>:
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;if&#32;we&#32;have&#32;an&#32;id,&#32;and&#32;if&#32;so&#32;resolve&#32;with&#32;the&#32;current&#32;base</emphasis>
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::MemberIterator</link>&#32;m&#32;=&#32;v-&gt;FindMember(kIdValue);
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;!=&#32;v-&gt;MemberEnd()&#32;&amp;&amp;&#32;(m-&gt;value).IsString())&#32;{
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>&#32;here&#32;=&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>(m-&gt;value,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>).Resolve(base,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;base&#32;=&#32;here;
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m&#32;=&#32;v-&gt;FindMember(<link linkend="_class_generic_value">GenericValue&lt;EncodingType&gt;</link>(<link linkend="_struct_generic_string_ref">GenericStringRef&lt;Ch&gt;</link>(t-&gt;name,&#32;t-&gt;length)));
563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;==&#32;v-&gt;MemberEnd())
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;m-&gt;value;
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>:
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t-&gt;index&#32;==&#32;kPointerInvalidIndex&#32;||&#32;t-&gt;index&#32;&gt;=&#32;v-&gt;Size())
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;((*v)[t-&gt;index]);
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
576 
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error:&#32;unresolved&#32;token</emphasis>
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(unresolvedTokenIndex)
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*unresolvedTokenIndex&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(t&#32;-&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>);
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>(<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;base;
583 &#32;&#32;&#32;&#32;}
584 
585 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>&#32;GetUri(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc">UriType</link>&amp;&#32;rootUri,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
586 &#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetUri(<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_class_generic_value">ValueType</link>&amp;<emphasis role="keyword">&gt;</emphasis>(root),&#32;rootUri,&#32;unresolvedTokenIndex,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
587 &#32;&#32;&#32;&#32;}
588 
589 
591 
592 
594 
607 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;Get(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(IsValid());
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;v&#32;=&#32;&amp;root;
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Token&#32;*t&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;t&#32;!=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;++t)&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(v-&gt;GetType())&#32;{
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>:
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::MemberIterator</link>&#32;m&#32;=&#32;v-&gt;FindMember(<link linkend="_class_generic_value">GenericValue&lt;EncodingType&gt;</link>(<link linkend="_struct_generic_string_ref">GenericStringRef&lt;Ch&gt;</link>(t-&gt;name,&#32;t-&gt;length)));
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;==&#32;v-&gt;MemberEnd())
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;m-&gt;value;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>:
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t-&gt;index&#32;==&#32;kPointerInvalidIndex&#32;||&#32;t-&gt;index&#32;&gt;=&#32;v-&gt;Size())
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;((*v)[t-&gt;index]);
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
628 
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Error:&#32;unresolved&#32;token</emphasis>
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(unresolvedTokenIndex)
631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*unresolvedTokenIndex&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(t&#32;-&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>);
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v;
635 &#32;&#32;&#32;&#32;}
636 
638 
642 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;Get(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0)<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Get(<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_class_generic_value">ValueType</link>&amp;<emphasis role="keyword">&gt;</emphasis>(root),&#32;unresolvedTokenIndex);
644 &#32;&#32;&#32;&#32;}
645 
647 
649 
650 
652 
661 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;GetWithDefault(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;alreadyExist;
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;v&#32;=&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>,&#32;&amp;alreadyExist);
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;alreadyExist&#32;?&#32;v&#32;:&#32;v.CopyFrom(<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
665 &#32;&#32;&#32;&#32;}
666 
668 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;GetWithDefault(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;alreadyExist;
670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;v&#32;=&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>,&#32;&amp;alreadyExist);
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;alreadyExist&#32;?&#32;v&#32;:&#32;v.SetString(<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
672 &#32;&#32;&#32;&#32;}
673 
674 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
676 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;GetWithDefault(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;alreadyExist;
678 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;v&#32;=&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>,&#32;&amp;alreadyExist);
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;alreadyExist&#32;?&#32;v&#32;:&#32;v.SetString(<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
680 &#32;&#32;&#32;&#32;}
681 <emphasis role="preprocessor">#endif</emphasis>
682 
684 
687 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
688 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T&gt;</link>&#32;&gt;),&#32;(<link linkend="_class_generic_value">ValueType</link>&amp;))
689 &#32;&#32;&#32;&#32;GetWithDefault(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetWithDefault(root,&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>(<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>).Move(),&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
691 &#32;&#32;&#32;&#32;}
692 
694 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
695 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;GetWithDefault(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>());
697 &#32;&#32;&#32;&#32;}
698 
700 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
701 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;GetWithDefault(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>());
703 &#32;&#32;&#32;&#32;}
704 &#32;&#32;&#32;&#32;
705 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
707 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
708 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;GetWithDefault(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>());
710 &#32;&#32;&#32;&#32;}
711 <emphasis role="preprocessor">#endif</emphasis>
712 
714 
717 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
718 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T&gt;</link>&#32;&gt;),&#32;(<link linkend="_class_generic_value">ValueType</link>&amp;))
719 &#32;&#32;&#32;&#32;GetWithDefault(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
720 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>());
721 &#32;&#32;&#32;&#32;}
722 
724 
726 
727 
729 
738 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)&#32;=&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>;
740 &#32;&#32;&#32;&#32;}
741 
743 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>).CopyFrom(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>);
745 &#32;&#32;&#32;&#32;}
746 
748 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)&#32;=&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>).Move();
750 &#32;&#32;&#32;&#32;}
751 
752 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
754 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)&#32;=&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>).Move();
756 &#32;&#32;&#32;&#32;}
757 <emphasis role="preprocessor">#endif</emphasis>
758 
760 
763 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
764 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T&gt;</link>&#32;&gt;),&#32;(<link linkend="_class_generic_value">ValueType</link>&amp;))
765 &#32;&#32;&#32;&#32;Set(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)&#32;=&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>).Move();
767 &#32;&#32;&#32;&#32;}
768 
770 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
771 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(document)&#32;=&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>;
773 &#32;&#32;&#32;&#32;}
774 
776 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
777 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(document).CopyFrom(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>());
779 &#32;&#32;&#32;&#32;}
780 
782 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
783 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(document)&#32;=&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>()).Move();
785 &#32;&#32;&#32;&#32;}
786 
787 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
789 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
790 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;Set(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(document)&#32;=&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">ValueType</link>(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;document.<link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link>()).Move();
792 &#32;&#32;&#32;&#32;}
793 <emphasis role="preprocessor">#endif</emphasis>
794 
796 
799 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
800 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1aaf4d7d852098878d24188d134182d42f">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T&gt;</link>&#32;&gt;),&#32;(<link linkend="_class_generic_value">ValueType</link>&amp;))
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Set(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(document)&#32;=&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>;
803 &#32;&#32;&#32;&#32;}
804 
806 
808 
809 
811 
820 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_class_generic_pointer_1af148818f7c2b10243221953d887044c6">Swap</link>(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root,&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">ValueType::AllocatorType</link>&amp;&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(root,&#32;<link linkend="_class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0">allocator</link>).<link linkend="_class_generic_pointer_1af148818f7c2b10243221953d887044c6">Swap</link>(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
822 &#32;&#32;&#32;&#32;}
823 
825 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;stackAllocator&gt;
826 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_class_generic_pointer_1af148818f7c2b10243221953d887044c6">Swap</link>(<link linkend="_class_generic_document">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</link>&amp;&#32;document,&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Create(document).<link linkend="_class_generic_pointer_1af148818f7c2b10243221953d887044c6">Swap</link>(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
828 &#32;&#32;&#32;&#32;}
829 
831 
833 
839 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Erase(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;root)<emphasis role="keyword">&#32;const&#32;</emphasis>{
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(IsValid());
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;==&#32;0)&#32;<emphasis role="comment">//&#32;Cannot&#32;erase&#32;the&#32;root</emphasis>
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
843 
844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;v&#32;=&#32;&amp;root;
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Token*&#32;last&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;(<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;-&#32;1);
846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;Token&#32;*t&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;t&#32;!=&#32;last;&#32;++t)&#32;{
847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(v-&gt;GetType())&#32;{
848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>:
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::MemberIterator</link>&#32;m&#32;=&#32;v-&gt;FindMember(<link linkend="_class_generic_value">GenericValue&lt;EncodingType&gt;</link>(<link linkend="_struct_generic_string_ref">GenericStringRef&lt;Ch&gt;</link>(t-&gt;name,&#32;t-&gt;length)));
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;==&#32;v-&gt;MemberEnd())
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;m-&gt;value;
854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>:
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(t-&gt;index&#32;==&#32;kPointerInvalidIndex&#32;||&#32;t-&gt;index&#32;&gt;=&#32;v-&gt;Size())
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v&#32;=&#32;&amp;((*v)[t-&gt;index]);
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
865 
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(v-&gt;GetType())&#32;{
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>:
868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;v-&gt;EraseMember(<link linkend="_struct_generic_string_ref">GenericStringRef&lt;Ch&gt;</link>(last-&gt;name,&#32;last-&gt;length));
869 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>:
870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(last-&gt;index&#32;==&#32;kPointerInvalidIndex&#32;||&#32;last-&gt;index&#32;&gt;=&#32;v-&gt;Size())
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;Erase(v-&gt;Begin()&#32;+&#32;last-&gt;index);
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:
875 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
876 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
877 &#32;&#32;&#32;&#32;}
878 
879 <emphasis role="keyword">private</emphasis>:
881 
887 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;CopyFromRaw(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&amp;&#32;rhs,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;extraToken&#32;=&#32;0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;extraNameBufferSize&#32;=&#32;0)&#32;{
888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>)&#32;<emphasis role="comment">//&#32;allocator&#32;is&#32;independently&#32;owned.</emphasis>
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>&#32;=&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>&#32;=&#32;<link linkend="_rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b">RAPIDJSON_NEW</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>)();
890 
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;nameBufferSize&#32;=&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;<emphasis role="comment">//&#32;null&#32;terminators&#32;for&#32;tokens</emphasis>
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Token&#32;*t&#32;=&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;t&#32;!=&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;++t)
893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;nameBufferSize&#32;+=&#32;t-&gt;length;
894 
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;=&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;+&#32;extraToken;
896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Token&#32;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>-&gt;Malloc(<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(Token)&#32;+&#32;(nameBufferSize&#32;+&#32;extraNameBufferSize)&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>)));
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>);
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;&gt;&#32;0)&#32;{
899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>,&#32;rhs.<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>,&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(Token));
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(nameBufferSize&#32;&gt;&#32;0)&#32;{
902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>,&#32;rhs.<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>,&#32;nameBufferSize&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>));
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
904 
905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Adjust&#32;pointers&#32;to&#32;name&#32;buffer</emphasis>
906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::ptrdiff_t&#32;diff&#32;=&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;-&#32;rhs.<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>;
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Token&#32;*t&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;t&#32;!=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;rhs.<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;++t)
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;t-&gt;name&#32;+=&#32;diff;
909 
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;+&#32;nameBufferSize;
911 &#32;&#32;&#32;&#32;}
912 
914 
918 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;NeedPercentEncode(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;c)<emphasis role="keyword">&#32;const&#32;</emphasis>{
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!((c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)&#32;||&#32;(c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=<emphasis role="charliteral">&apos;Z&apos;</emphasis>)&#32;||&#32;(c&#32;&gt;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;c&#32;&lt;=&#32;<emphasis role="charliteral">&apos;z&apos;</emphasis>)&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;-&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;.&apos;</emphasis>&#32;||&#32;c&#32;==&#32;<emphasis role="charliteral">&apos;_&apos;</emphasis>&#32;||&#32;c&#32;==<emphasis role="charliteral">&apos;~&apos;</emphasis>);
920 &#32;&#32;&#32;&#32;}
921 
923 <emphasis role="preprocessor">#ifndef&#32;__clang__&#32;</emphasis><emphasis role="comment">//&#32;-Wdocumentation</emphasis>
929 <emphasis role="comment"></emphasis>#endif
930 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;Parse(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length)&#32;{
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>&#32;!=&#32;NULL);
932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;==&#32;0);
933 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;==&#32;0);
934 
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;own&#32;allocator&#32;if&#32;user&#32;did&#32;not&#32;supply.</emphasis>
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>)
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>&#32;=&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>&#32;=&#32;<link linkend="_rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b">RAPIDJSON_NEW</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>)();
938 
939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Count&#32;number&#32;of&#32;&apos;/&apos;&#32;as&#32;tokenCount</emphasis>
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;=&#32;0;
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;s&#32;=&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>;&#32;s&#32;!=&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>&#32;+&#32;length;&#32;s++)&#32;
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*s&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>++;
944 
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Token*&#32;token&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Token&#32;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>-&gt;Malloc(<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(Token)&#32;+&#32;length&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>)));
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;name&#32;=&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>);
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;
948 
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Detect&#32;if&#32;it&#32;is&#32;a&#32;URI&#32;fragment</emphasis>
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;uriFragment&#32;=&#32;<emphasis role="keyword">false</emphasis>;
951 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>[i]&#32;==&#32;<emphasis role="charliteral">&apos;#&apos;</emphasis>)&#32;{
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uriFragment&#32;=&#32;<emphasis role="keyword">true</emphasis>;
953 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
954 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
955 
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;!=&#32;length&#32;&amp;&amp;&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>[i]&#32;!=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77">kPointerParseErrorTokenMustBeginWithSolidus</link>;
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;error;
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
960 
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;length)&#32;{
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>[i]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>);
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;&#32;<emphasis role="comment">//&#32;consumes&#32;&apos;/&apos;</emphasis>
964 
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token-&gt;name&#32;=&#32;name;
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isNumber&#32;=&#32;<emphasis role="keyword">true</emphasis>;
967 
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(i&#32;&lt;&#32;length&#32;&amp;&amp;&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>[i]&#32;!=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;c&#32;=&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>[i];
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uriFragment)&#32;{
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Decoding&#32;percent-encoding&#32;for&#32;URI&#32;fragment</emphasis>
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;%&apos;</emphasis>)&#32;{
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PercentDecodeStream&#32;is(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>[i],&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>&#32;+&#32;length);
974 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_generic_insitu_string_stream">GenericInsituStringStream&lt;EncodingType&gt;</link>&#32;os(name);
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;begin&#32;=&#32;os.PutBegin();
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_transcoder">Transcoder</link>&lt;<link linkend="_struct_u_t_f8">UTF8&lt;&gt;</link>,&#32;<link linkend="_class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b">EncodingType</link>&gt;().Validate(is,&#32;os)&#32;||&#32;!is.IsValid())&#32;{
977 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35">kPointerParseErrorInvalidPercentEncoding</link>;
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;error;
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
980 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len&#32;=&#32;os.PutEnd(begin);
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i&#32;+=&#32;is.Tell()&#32;-&#32;1;
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(len&#32;==&#32;1)
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;*name;
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;name&#32;+=&#32;len;
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNumber&#32;=&#32;<emphasis role="keyword">false</emphasis>;
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">continue</emphasis>;
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(NeedPercentEncode(c))&#32;{
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38">kPointerParseErrorCharacterMustPercentEncode</link>;
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;error;
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
995 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
996 
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Escaping&#32;&quot;~0&quot;&#32;-&gt;&#32;&apos;~&apos;,&#32;&quot;~1&quot;&#32;-&gt;&#32;&apos;/&apos;</emphasis>
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>)&#32;{
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;&lt;&#32;length)&#32;{
1002 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>[i];
1003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>;
1004 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>)&#32;&#32;c&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
1005 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1006 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b">kPointerParseErrorInvalidEscape</link>;
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;error;
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b">kPointerParseErrorInvalidEscape</link>;
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;error;
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1016 
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;check&#32;for&#32;index:&#32;all&#32;of&#32;characters&#32;are&#32;digit</emphasis>
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;&lt;&#32;&apos;0&apos;&#32;||&#32;c&#32;&gt;&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNumber&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1020 
1021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*name++&#32;=&#32;c;
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token-&gt;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(name&#32;-&#32;token-&gt;name);
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(token-&gt;length&#32;==&#32;0)
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNumber&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*name++&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;&#32;<emphasis role="comment">//&#32;Null&#32;terminator</emphasis>
1027 
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Second&#32;check&#32;for&#32;index:&#32;more&#32;than&#32;one&#32;digit&#32;cannot&#32;have&#32;leading&#32;zero</emphasis>
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNumber&#32;&amp;&amp;&#32;token-&gt;length&#32;&gt;&#32;1&#32;&amp;&amp;&#32;token-&gt;name[0]&#32;==&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>)
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNumber&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1031 
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String&#32;to&#32;SizeType&#32;conversion</emphasis>
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;n&#32;=&#32;0;
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isNumber)&#32;{
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;token-&gt;length;&#32;j++)&#32;{
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;m&#32;=&#32;n&#32;*&#32;10&#32;+&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(token-&gt;name[j]&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;&lt;&#32;n)&#32;{&#32;&#32;&#32;<emphasis role="comment">//&#32;overflow&#32;detection</emphasis>
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isNumber&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n&#32;=&#32;m;
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1044 
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token-&gt;index&#32;=&#32;isNumber&#32;?&#32;n&#32;:&#32;kPointerInvalidIndex;
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;token++;
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1048 
1049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(name&#32;&lt;=&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;+&#32;length);&#32;<emphasis role="comment">//&#32;Should&#32;not&#32;overflow&#32;buffer</emphasis>
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link>;
1051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1052 
1053 &#32;&#32;&#32;&#32;error:
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Allocator::Free</link>(<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>);
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>&#32;=&#32;0;
1056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;=&#32;0;
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>&#32;=&#32;0;
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>&#32;=&#32;i;
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1060 &#32;&#32;&#32;&#32;}
1061 
1063 
1068 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keywordtype">bool</emphasis>&#32;uriFragment,&#32;<emphasis role="keyword">typename</emphasis>&#32;OutputStream&gt;
1069 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;Stringify(OutputStream&amp;&#32;os)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(IsValid());
1071 
1072 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uriFragment)
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;#&apos;</emphasis>);
1074 
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(Token&#32;*t&#32;=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;t&#32;!=&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>&#32;+&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;++t)&#32;{
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;/&apos;</emphasis>);
1077 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;t-&gt;length;&#32;j++)&#32;{
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;c&#32;=&#32;t-&gt;name[j];
1079 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>)&#32;{
1080 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;~&apos;</emphasis>);
1081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(c&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;~&apos;</emphasis>);
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(<emphasis role="charliteral">&apos;1&apos;</emphasis>);
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uriFragment&#32;&amp;&amp;&#32;NeedPercentEncode(c))&#32;{&#32;
1088 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Transcode&#32;to&#32;UTF8&#32;sequence</emphasis>
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_struct_generic_string_stream">GenericStringStream&lt;typename ValueType::EncodingType&gt;</link>&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>(&amp;t-&gt;name[j]);
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PercentEncodeStream&lt;OutputStream&gt;&#32;target(os);
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_struct_transcoder">Transcoder</link>&lt;<link linkend="_class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b">EncodingType</link>,&#32;<link linkend="_struct_u_t_f8">UTF8&lt;&gt;</link>&#32;&gt;().Validate(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;target))
1092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;j&#32;+=&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.Tell()&#32;-&#32;1;
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os.Put(c);
1097 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1100 &#32;&#32;&#32;&#32;}
1101 
1103 
1108 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis>PercentDecodeStream&#32;{
1109 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">ValueType::Ch</link>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>;
1111 
1113 
1117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PercentDecodeStream(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;end)&#32;:&#32;src_(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>),&#32;head_(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>),&#32;end_(end),&#32;valid_(true)&#32;{}
1118 
1119 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;Take()&#32;{
1120 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*src_&#32;!=&#32;<emphasis role="charliteral">&apos;%&apos;</emphasis>&#32;||&#32;src_&#32;+&#32;3&#32;&gt;&#32;end_)&#32;{&#32;<emphasis role="comment">//&#32;%XY&#32;triplet</emphasis>
1121 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1122 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1123 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src_++;
1125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;c&#32;=&#32;0;
1126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">int</emphasis>&#32;j&#32;=&#32;0;&#32;j&#32;&lt;&#32;2;&#32;j++)&#32;{
1127 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link><emphasis role="keyword">&gt;</emphasis>(c&#32;&lt;&lt;&#32;4);
1128 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>&#32;h&#32;=&#32;*src_;
1129 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;(h&#32;&gt;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>&#32;&amp;&amp;&#32;h&#32;&lt;=&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>)&#32;c&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link><emphasis role="keyword">&gt;</emphasis>(c&#32;+&#32;h&#32;-&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>);
1130 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h&#32;&gt;=&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;&amp;&amp;&#32;h&#32;&lt;=&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>)&#32;c&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link><emphasis role="keyword">&gt;</emphasis>(c&#32;+&#32;h&#32;-&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>&#32;+&#32;10);
1131 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(h&#32;&gt;=&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;&amp;&amp;&#32;h&#32;&lt;=&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>)&#32;c&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link><emphasis role="keyword">&gt;</emphasis>(c&#32;+&#32;h&#32;-&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>&#32;+&#32;10);
1132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;src_++;
1137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1138 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;c;
1139 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1140 
1141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;Tell()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(src_&#32;-&#32;head_);&#32;}
1142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsValid()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;valid_;&#32;}
1143 
1144 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1145 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;src_;&#32;&#32;&#32;&#32;&#32;
1146 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;head_;&#32;&#32;&#32;&#32;
1147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;end_;&#32;&#32;&#32;&#32;&#32;
1148 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;valid_;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1149 &#32;&#32;&#32;&#32;};
1150 
1152 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;OutputStream&gt;
1153 &#32;&#32;&#32;&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_pointer_1_1_percent_encode_stream">PercentEncodeStream</link>&#32;{
1154 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>:
1155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1_1_percent_encode_stream_1a8e16af18669e49d0ab528ba0066475d2">PercentEncodeStream</link>(OutputStream&amp;&#32;os)&#32;:&#32;os_(os)&#32;{}
1156 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_pointer_1_1_percent_encode_stream_1ab932ed9ab00c9e0672755133fc8d8c11">Put</link>(<emphasis role="keywordtype">char</emphasis>&#32;c)&#32;{&#32;<emphasis role="comment">//&#32;UTF-8&#32;must&#32;be&#32;byte</emphasis>
1157 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;u&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis><emphasis role="keyword">&gt;</emphasis>(c);
1158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;hexDigits[16]&#32;=&#32;{&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;2&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;3&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;4&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;5&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;6&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;7&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;8&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;9&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;A&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;B&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;C&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;D&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;E&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;F&apos;</emphasis>&#32;};
1159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os_.Put(<emphasis role="charliteral">&apos;%&apos;</emphasis>);
1160 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os_.Put(<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;OutputStream::Ch<emphasis role="keyword">&gt;</emphasis>(hexDigits[u&#32;&gt;&gt;&#32;4]));
1161 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;os_.Put(<emphasis role="keyword">static_cast&lt;</emphasis>typename&#32;OutputStream::Ch<emphasis role="keyword">&gt;</emphasis>(hexDigits[u&#32;&amp;&#32;15]));
1162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1163 &#32;&#32;&#32;&#32;<emphasis role="keyword">private</emphasis>:
1164 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputStream&amp;&#32;os_;
1165 &#32;&#32;&#32;&#32;};
1166 
1167 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf">allocator_</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1168 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;<link linkend="_class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab">ownAllocator_</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1169 &#32;&#32;&#32;&#32;<link linkend="_class_generic_pointer_1ab292356c11b4015c98d21b966b11f285">Ch</link>*&#32;<link linkend="_class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86">nameBuffer_</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1170 &#32;&#32;&#32;&#32;<link linkend="_struct_generic_pointer_1_1_token">Token</link>*&#32;<link linkend="_class_generic_pointer_1a997793c66ea1a264089c37c8731eb138">tokens_</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1171 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8">tokenCount_</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1172 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37">parseErrorOffset_</link>;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1173 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be">PointerParseErrorCode</link>&#32;<link linkend="_class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0">parseErrorCode_</link>;&#32;&#32;
1174 };
1175 
1177 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;Value&gt;</link>&#32;<link linkend="_pointer_8h_1a8db3e2eda83fba7d12ee284fff895262">Pointer</link>;
1178 
1180 
1181 
1183 
1184 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1185 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a7ce0d37e372f630e46e221e45714e84b">CreateValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1186 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Create(root,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1187 }
1188 
1189 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1190 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a7ce0d37e372f630e46e221e45714e84b">CreateValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1191 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Create(root,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1192 }
1193 
1194 <emphasis role="comment">//&#32;No&#32;allocator&#32;parameter</emphasis>
1195 
1196 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1197 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a7ce0d37e372f630e46e221e45714e84b">CreateValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>)&#32;{
1198 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Create(document);
1199 }
1200 
1201 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1202 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a7ce0d37e372f630e46e221e45714e84b">CreateValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N])&#32;{
1203 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Create(document);
1204 }
1205 
1207 
1208 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1209 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>*&#32;<link linkend="_pointer_8h_1a581633984b11d0587c2ad06649efefc4">GetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0)&#32;{
1210 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Get(root,&#32;unresolvedTokenIndex);
1211 }
1212 
1213 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1214 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>*&#32;<link linkend="_pointer_8h_1a581633984b11d0587c2ad06649efefc4">GetValueByPointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0)&#32;{
1215 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Get(root,&#32;unresolvedTokenIndex);
1216 }
1217 
1218 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1219 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>*&#32;<link linkend="_pointer_8h_1a581633984b11d0587c2ad06649efefc4">GetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType&#32;(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0)&#32;{
1220 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Get(root,&#32;unresolvedTokenIndex);
1221 }
1222 
1223 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1224 <emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>*&#32;<link linkend="_pointer_8h_1a581633984b11d0587c2ad06649efefc4">GetValueByPointer</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keywordtype">size_t</emphasis>*&#32;unresolvedTokenIndex&#32;=&#32;0)&#32;{
1225 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Get(root,&#32;unresolvedTokenIndex);
1226 }
1227 
1229 
1230 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1231 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1232 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1233 }
1234 
1235 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1236 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;T::Ch*&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1237 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1238 }
1239 
1240 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1241 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1242 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;T::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1243 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1244 }
1245 <emphasis role="preprocessor">#endif</emphasis>
1246 
1247 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1248 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;))
1249 <link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;const&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&lt;typename&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>::<link linkend="_class_generic_value">ValueType</link>&gt;&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;T2&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;typename&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1250 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1251 }
1252 
1253 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1254 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1255 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1256 }
1257 
1258 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1259 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;T::Ch*&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1260 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1261 }
1262 
1263 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1264 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1265 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;T::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1266 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1267 }
1268 <emphasis role="preprocessor">#endif</emphasis>
1269 
1270 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1271 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;))
1272 <link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;const&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;T2&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;typename&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1273 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1274 }
1275 
1276 <emphasis role="comment">//&#32;No&#32;allocator&#32;parameter</emphasis>
1277 
1278 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1279 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1280 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1281 }
1282 
1283 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1284 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;DocumentType::Ch*&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1285 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1286 }
1287 
1288 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1289 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1290 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;DocumentType::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1291 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1292 }
1293 <emphasis role="preprocessor">#endif</emphasis>
1294 
1295 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1296 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;))
1297 <link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;T2&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1298 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1299 }
1300 
1301 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1302 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1303 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1304 }
1305 
1306 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1307 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;DocumentType::Ch*&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1308 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1309 }
1310 
1311 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1312 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1313 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;DocumentType::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1314 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1315 }
1316 <emphasis role="preprocessor">#endif</emphasis>
1317 
1318 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1319 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;))
1320 <link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;T2&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)&#32;{
1321 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>);
1322 }
1323 
1325 
1326 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1327 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1328 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1329 }
1330 
1331 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1332 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1333 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1334 }
1335 
1336 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1337 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;T::Ch*&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1338 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1339 }
1340 
1341 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1342 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1343 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;T::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1344 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1345 }
1346 <emphasis role="preprocessor">#endif</emphasis>
1347 
1348 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1349 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;))
1350 <link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;const&#32;<link linkend="_class_generic_pointer">GenericPointer</link>&lt;typename&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>::<link linkend="_class_generic_value">ValueType</link>&gt;&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;T2&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;typename&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1351 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1352 }
1353 
1354 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1355 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1356 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1357 }
1358 
1359 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1360 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1361 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1362 }
1363 
1364 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1365 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;T::Ch*&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1366 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1367 }
1368 
1369 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1370 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1371 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;T::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1372 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1373 }
1374 <emphasis role="preprocessor">#endif</emphasis>
1375 
1376 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1377 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;))
1378 <link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;T2&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1379 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1380 }
1381 
1382 <emphasis role="comment">//&#32;No&#32;allocator&#32;parameter</emphasis>
1383 
1384 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1385 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1386 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1387 }
1388 
1389 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1390 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1391 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1392 }
1393 
1394 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1395 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;DocumentType::Ch*&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1396 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1397 }
1398 
1399 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1400 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1401 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;DocumentType::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1402 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1403 }
1404 <emphasis role="preprocessor">#endif</emphasis>
1405 
1406 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1407 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;))
1408 <link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;T2&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1409 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1410 }
1411 
1412 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1413 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1414 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1415 }
1416 
1417 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1418 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1419 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1420 }
1421 
1422 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1423 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;DocumentType::Ch*&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1424 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1425 }
1426 
1427 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_STDSTRING</emphasis>
1428 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1429 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">const</emphasis>&#32;std::basic_string&lt;typename&#32;DocumentType::Ch&gt;&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1430 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1431 }
1432 <emphasis role="preprocessor">#endif</emphasis>
1433 
1434 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N,&#32;<emphasis role="keyword">typename</emphasis>&#32;T2&gt;
1435 <link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,&#32;<link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue&lt;T2&gt;</link>&#32;&gt;),&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;))
1436 <link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;T2&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1438 }
1439 
1441 
1442 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1443 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac">SwapValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1444 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Swap(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1445 }
1446 
1447 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1448 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac">SwapValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;T::AllocatorType&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)&#32;{
1449 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).<link linkend="_class_generic_pointer_1af148818f7c2b10243221953d887044c6">Swap</link>(root,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
1450 }
1451 
1452 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType&gt;
1453 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac">SwapValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1454 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Swap(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1455 }
1456 
1457 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;DocumentType,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1458 <emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac">SwapValueByPointer</link>(DocumentType&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N],&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1459 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename DocumentType::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).<link linkend="_class_generic_pointer_1af148818f7c2b10243221953d887044c6">Swap</link>(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>);
1460 }
1461 
1463 
1464 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
1465 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_pointer_8h_1a7342710933f35ad7267c871f4a8cc55f">EraseValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>)&#32;{
1466 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Erase(root);
1467 }
1468 
1469 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;CharType,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;N&gt;
1470 <emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_pointer_8h_1a7342710933f35ad7267c871f4a8cc55f">EraseValueByPointer</link>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N])&#32;{
1471 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;typename T::ValueType&gt;</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;N&#32;-&#32;1).Erase(root);
1472 }
1473 
1475 
1476 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
1477 
1478 <emphasis role="preprocessor">#if&#32;defined(__clang__)&#32;||&#32;defined(_MSC_VER)</emphasis>
1479 RAPIDJSON_DIAG_POP
1480 <emphasis role="preprocessor">#endif</emphasis>
1481 
1482 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_POINTER_H_</emphasis>
</programlisting></section>
