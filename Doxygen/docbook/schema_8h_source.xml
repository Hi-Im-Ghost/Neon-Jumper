<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_schema_8h_source" xml:lang="en-US">
<title>schema.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/schema.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available-&gt;</emphasis>
2 <emphasis role="comment">//&#32;</emphasis>
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015&#32;THL&#32;A29&#32;Limited,&#32;a&#32;Tencent&#32;company,&#32;and&#32;Milo&#32;Yip-&gt;&#32;All&#32;rights&#32;reserved-&gt;</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License-&gt;&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource-&gt;org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed&#32;</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied-&gt;&#32;See&#32;the&#32;License&#32;for&#32;the&#32;</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License-&gt;</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_SCHEMA_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_H_</emphasis>
17 
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_document_8h">document.h</link>&quot;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_pointer_8h">pointer.h</link>&quot;</emphasis>
20 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stringbuffer_8h">stringbuffer.h</link>&quot;</emphasis>
21 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_en_8h">error/en.h</link>&quot;</emphasis>
22 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_uri_8h">uri.h</link>&quot;</emphasis>
23 <emphasis role="preprocessor">#include&#32;&lt;cmath&gt;</emphasis>&#32;<emphasis role="comment">//&#32;abs,&#32;floor</emphasis>
24 
25 <emphasis role="preprocessor">#if&#32;!defined(RAPIDJSON_SCHEMA_USE_INTERNALREGEX)</emphasis>
26 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_USE_INTERNALREGEX&#32;1</emphasis>
27 <emphasis role="preprocessor">#else</emphasis>
28 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_USE_INTERNALREGEX&#32;0</emphasis>
29 <emphasis role="preprocessor">#endif</emphasis>
30 
31 <emphasis role="preprocessor">#if&#32;!RAPIDJSON_SCHEMA_USE_INTERNALREGEX&#32;&amp;&amp;&#32;defined(RAPIDJSON_SCHEMA_USE_STDREGEX)&#32;&amp;&amp;&#32;(__cplusplus&#32;&gt;=201103L&#32;||&#32;(defined(_MSC_VER)&#32;&amp;&amp;&#32;_MSC_VER&#32;&gt;=&#32;1800))</emphasis>
32 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_USE_STDREGEX&#32;1</emphasis>
33 <emphasis role="preprocessor">#else</emphasis>
34 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_USE_STDREGEX&#32;0</emphasis>
35 <emphasis role="preprocessor">#endif</emphasis>
36 
37 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_USE_INTERNALREGEX</emphasis>
38 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_regex_8h">internal/regex.h</link>&quot;</emphasis>
39 <emphasis role="preprocessor">#elif&#32;RAPIDJSON_SCHEMA_USE_STDREGEX</emphasis>
40 <emphasis role="preprocessor">#include&#32;&lt;regex&gt;</emphasis>
41 <emphasis role="preprocessor">#endif</emphasis>
42 
43 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_USE_INTERNALREGEX&#32;||&#32;RAPIDJSON_SCHEMA_USE_STDREGEX</emphasis>
44 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HAS_REGEX&#32;1</emphasis>
45 <emphasis role="preprocessor">#else</emphasis>
46 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HAS_REGEX&#32;0</emphasis>
47 <emphasis role="preprocessor">#endif</emphasis>
48 
49 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
50 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_VERBOSE&#32;0</emphasis>
51 <emphasis role="preprocessor">#endif</emphasis>
52 
53 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
54 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stringbuffer_8h">stringbuffer.h</link>&quot;</emphasis>
55 <emphasis role="preprocessor">#endif</emphasis>
56 
57 RAPIDJSON_DIAG_PUSH
58 
59 <emphasis role="preprocessor">#if&#32;defined(__GNUC__)</emphasis>
60 RAPIDJSON_DIAG_OFF(effc++)
61 <emphasis role="preprocessor">#endif</emphasis>
62 
63 <emphasis role="preprocessor">#ifdef&#32;__clang__</emphasis>
64 RAPIDJSON_DIAG_OFF(weak-vtables)
65 RAPIDJSON_DIAG_OFF(exit-time-destructors)
66 RAPIDJSON_DIAG_OFF(c++98-compat-pedantic)
67 RAPIDJSON_DIAG_OFF(variadic-macros)
68 <emphasis role="preprocessor">#elif&#32;defined(_MSC_VER)</emphasis>
69 RAPIDJSON_DIAG_OFF(4512)&#32;<emphasis role="comment">//&#32;assignment&#32;operator&#32;could&#32;not&#32;be&#32;generated</emphasis>
70 <emphasis role="preprocessor">#endif</emphasis>
71 
72 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
73 
75 <emphasis role="comment">//&#32;Verbose&#32;Utilities</emphasis>
76 
77 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
78 
79 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceinternal">internal</link>&#32;{
80 
81 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintInvalidKeyword(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;keyword)&#32;{
82 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Fail&#32;keyword:&#32;%s\n&quot;</emphasis>,&#32;keyword);
83 }
84 
85 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintInvalidKeyword(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;keyword)&#32;{
86 &#32;&#32;&#32;&#32;wprintf(L<emphasis role="stringliteral">&quot;Fail&#32;keyword:&#32;%ls\n&quot;</emphasis>,&#32;keyword);
87 }
88 
89 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintInvalidDocument(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;document)&#32;{
90 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;Fail&#32;document:&#32;%s\n\n&quot;</emphasis>,&#32;document);
91 }
92 
93 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintInvalidDocument(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;document)&#32;{
94 &#32;&#32;&#32;&#32;wprintf(L<emphasis role="stringliteral">&quot;Fail&#32;document:&#32;%ls\n\n&quot;</emphasis>,&#32;document);
95 }
96 
97 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintValidatorPointers(<emphasis role="keywordtype">unsigned</emphasis>&#32;depth,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;d)&#32;{
98 &#32;&#32;&#32;&#32;printf(<emphasis role="stringliteral">&quot;S:&#32;%*s%s\nD:&#32;%*s%s\n\n&quot;</emphasis>,&#32;depth&#32;*&#32;4,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;s,&#32;depth&#32;*&#32;4,&#32;<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;d);
99 }
100 
101 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;PrintValidatorPointers(<emphasis role="keywordtype">unsigned</emphasis>&#32;depth,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;s,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">wchar_t</emphasis>*&#32;d)&#32;{
102 &#32;&#32;&#32;&#32;wprintf(L<emphasis role="stringliteral">&quot;S:&#32;%*ls%ls\nD:&#32;%*ls%ls\n\n&quot;</emphasis>,&#32;depth&#32;*&#32;4,&#32;L<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;s,&#32;depth&#32;*&#32;4,&#32;L<emphasis role="stringliteral">&quot;&#32;&quot;</emphasis>,&#32;d);
103 }
104 
105 }&#32;<emphasis role="comment">//&#32;namespace&#32;internal</emphasis>
106 
107 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
108 
110 <emphasis role="comment">//&#32;RAPIDJSON_INVALID_KEYWORD_RETURN</emphasis>
111 
112 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
113 <emphasis role="preprocessor">#define&#32;RAPIDJSON_INVALID_KEYWORD_VERBOSE(keyword)&#32;internal::PrintInvalidKeyword(keyword)</emphasis>
114 <emphasis role="preprocessor">#else</emphasis>
115 <emphasis role="preprocessor">#define&#32;RAPIDJSON_INVALID_KEYWORD_VERBOSE(keyword)</emphasis>
116 <emphasis role="preprocessor">#endif</emphasis>
117 
118 <emphasis role="preprocessor">#define&#32;RAPIDJSON_INVALID_KEYWORD_RETURN(code)\</emphasis>
119 <emphasis role="preprocessor">RAPIDJSON_MULTILINEMACRO_BEGIN\</emphasis>
120 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;context.invalidCode&#32;=&#32;code;\</emphasis>
121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;context.invalidKeyword&#32;=&#32;SchemaType::GetValidateErrorKeyword(code).GetString();\</emphasis>
122 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_INVALID_KEYWORD_VERBOSE(context.invalidKeyword);\</emphasis>
123 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;false;\</emphasis>
124 <emphasis role="preprocessor">RAPIDJSON_MULTILINEMACRO_END</emphasis>
125 
127 <emphasis role="comment">//&#32;ValidateFlag</emphasis>
128 
135 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_VALIDATE_DEFAULT_FLAGS</emphasis>
136 <emphasis role="preprocessor">#define&#32;RAPIDJSON_VALIDATE_DEFAULT_FLAGS&#32;kValidateNoFlags</emphasis>
137 <emphasis role="preprocessor">#endif</emphasis>
138 
140 
142 <emphasis role="keyword">enum</emphasis>&#32;<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942">ValidateFlag</link>&#32;{
143 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942a6479c4dbb9ae91ad95b4e6876a96cfa4">kValidateNoFlags</link>&#32;=&#32;0,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
144 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942ab0d30a1c30a84eb96f5dda97abbde002">kValidateContinueOnErrorFlag</link>&#32;=&#32;1,&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
145 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942a70564fe50c13963b485000be542c52c9">kValidateDefaultFlags</link>&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga8d06f2d50592811d2890b45243b8adcc">RAPIDJSON_VALIDATE_DEFAULT_FLAGS</link>&#32;&#32;&#32;&#32;
146 };
147 
149 <emphasis role="comment">//&#32;Forward&#32;declarations</emphasis>
150 
151 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator&gt;
152 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_schema_document">GenericSchemaDocument</link>;
153 
154 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceinternal">internal</link>&#32;{
155 
156 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType&gt;
157 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_schema">Schema</link>;
158 
160 <emphasis role="comment">//&#32;ISchemaValidator</emphasis>
161 
162 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>&#32;{
163 <emphasis role="keyword">public</emphasis>:
164 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_validator_1aac77356c7a3f439bc5fb5302f3060c1d">~ISchemaValidator</link>()&#32;{}
165 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
166 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_validator_1a29b7df0935c87630bbb70c1e19d4c722">SetValidateFlags</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;flags)&#32;=&#32;0;
167 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_validator_1aa27d587f8e6fa2b95235a6ffa077429d">GetValidateFlags</link>()&#32;<emphasis role="keyword">const</emphasis>&#32;=&#32;0;
168 };
169 
171 <emphasis role="comment">//&#32;ISchemaStateFactory</emphasis>
172 
173 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SchemaType&gt;
174 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_i_schema_state_factory">ISchemaStateFactory</link>&#32;{
175 <emphasis role="keyword">public</emphasis>:
176 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1ae769eac75f9561fc8d0da7fadad2f6b4">~ISchemaStateFactory</link>()&#32;{}
177 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>*&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1ada66af7e924238f29314e3b462f1e3fb">CreateSchemaValidator</link>(<emphasis role="keyword">const</emphasis>&#32;SchemaType&amp;,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inheritContinueOnErrors)&#32;=&#32;0;
178 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1a112cbf154077050bc30ffe670032442c">DestroySchemaValidator</link>(<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>*&#32;validator)&#32;=&#32;0;
179 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1ab26076418c94535cec2af570e8b0a436">CreateHasher</link>()&#32;=&#32;0;
180 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1addfcf00963cc777edf642b204f07c8d6">GetHashCode</link>(<emphasis role="keywordtype">void</emphasis>*&#32;hasher)&#32;=&#32;0;
181 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1a70b8d88180d2e6993105b17f19101635">DestroryHasher</link>(<emphasis role="keywordtype">void</emphasis>*&#32;hasher)&#32;=&#32;0;
182 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1abf29f19ba86e08f62b84b74a879b8922">MallocState</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;=&#32;0;
183 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_state_factory_1a27bd2138940cac3c330dd8399c49b22b">FreeState</link>(<emphasis role="keywordtype">void</emphasis>*&#32;p)&#32;=&#32;0;
184 };
185 
187 <emphasis role="comment">//&#32;IValidationErrorHandler</emphasis>
188 
189 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SchemaType&gt;
190 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_i_validation_error_handler">IValidationErrorHandler</link>&#32;{
191 <emphasis role="keyword">public</emphasis>:
192 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaType::Ch&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22e6a5f35edb9b614156ad606dcc79d7">Ch</link>;
193 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaType::SValue&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>;
194 
195 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a79e5eb5707b73497cff913093dfec060">~IValidationErrorHandler</link>()&#32;{}
196 
197 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a195a561f0bbbfb66961c9331a6afab39">NotMultipleOf</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected)&#32;=&#32;0;
198 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1ad8bd123f154f4c39f48b366219878526">NotMultipleOf</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected)&#32;=&#32;0;
199 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1ada3d2275ccdeb4874f34942d257af9c5">NotMultipleOf</link>(<emphasis role="keywordtype">double</emphasis>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected)&#32;=&#32;0;
200 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a7dc32dfac536f8577cbcb702efde26d2">AboveMaximum</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;=&#32;0;
201 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a78554707b14366d2ff7763290e1a6219">AboveMaximum</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;=&#32;0;
202 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a5b9e4690c26adbf4128b0b16f9e0625f">AboveMaximum</link>(<emphasis role="keywordtype">double</emphasis>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;=&#32;0;
203 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a5ad9849c01a0bfa923d37ef2f1b4c933">BelowMinimum</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;=&#32;0;
204 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1aa7bbfd1a69ba08ae31f87cb96ab5ec04">BelowMinimum</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;=&#32;0;
205 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a921da9a7fa127035a2a259b19813230e">BelowMinimum</link>(<emphasis role="keywordtype">double</emphasis>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;=&#32;0;
206 
207 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1ae000553bd9312a5090eed393541243af">TooLong</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22e6a5f35edb9b614156ad606dcc79d7">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expected)&#32;=&#32;0;
208 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a57f0cd2c2c9781af0e4c447700537f23">TooShort</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22e6a5f35edb9b614156ad606dcc79d7">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expected)&#32;=&#32;0;
209 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a9551391add918d6679f9a2a85dffc19c">DoesNotMatch</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22e6a5f35edb9b614156ad606dcc79d7">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length)&#32;=&#32;0;
210 
211 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a0ac36d4217d9a14205cbe392601f3ee7">DisallowedItem</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index)&#32;=&#32;0;
212 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1afc144690ba0e24636a72f541efd32c3b">TooFewItems</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;=&#32;0;
213 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a9371ca15622897a429971f69c07c47ef">TooManyItems</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;=&#32;0;
214 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a3a0836796f39c946f31f87b80ddd6cf1">DuplicateItems</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index1,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index2)&#32;=&#32;0;
215 
216 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a3494e9d2bff94979649e186aba71b32e">TooManyProperties</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;=&#32;0;
217 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1adf515d2fad2e55bc0735a6fb16eec9e6">TooFewProperties</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;=&#32;0;
218 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1ac0073bef86b572b4517876b304aada0f">StartMissingProperties</link>()&#32;=&#32;0;
219 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a3a2165f53ab565e052bcd35b6d19e473">AddMissingProperty</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;name)&#32;=&#32;0;
220 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a3a01eec1a969cfb600340a2bad157c9c">EndMissingProperties</link>()&#32;=&#32;0;
221 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1abd92773fa046eeb6fd8416468e62e5b1">PropertyViolations</link>(<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;=&#32;0;
222 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a689b8acc4cbe3e8683c1a29950438ac8">DisallowedProperty</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22e6a5f35edb9b614156ad606dcc79d7">Ch</link>*&#32;name,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length)&#32;=&#32;0;
223 
224 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1ab3cf4b9fe450ff76f52d70a2888f0342">StartDependencyErrors</link>()&#32;=&#32;0;
225 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1ae312aea74718dda0411af023c0c78ef6">StartMissingDependentProperties</link>()&#32;=&#32;0;
226 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a2e9e0b2f67467a62642e37e839f689c5">AddMissingDependentProperty</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;targetName)&#32;=&#32;0;
227 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a05af3199b8011a3476dfd238fa958213">EndMissingDependentProperties</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;sourceName)&#32;=&#32;0;
228 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a4b43ba6e6a9c544dfc631297104dc508">AddDependencySchemaError</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a22eda6c4ea9537f1ba00d76af052649a">SValue</link>&amp;&#32;souceName,&#32;<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>*&#32;subvalidator)&#32;=&#32;0;
229 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a817c1e3e9cc62603997a2fcdc564820b">EndDependencyErrors</link>()&#32;=&#32;0;
230 
231 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a67531a59c1dd8db20db72b17f0933d03">DisallowedValue</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;code)&#32;=&#32;0;
232 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a994a8b1526a79737b9d7b7575def4f65">StartDisallowedType</link>()&#32;=&#32;0;
233 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a5e4d9e5d937bd54e481f90e23ec3aea4">AddExpectedType</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">SchemaType::ValueType</link>&amp;&#32;expectedType)&#32;=&#32;0;
234 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1ad8133b3c055b3a91b5072af81304ab87">EndDisallowedType</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">SchemaType::ValueType</link>&amp;&#32;actualType)&#32;=&#32;0;
235 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a3ce77d66a09eb5d91833fc86f8fa5680">NotAllOf</link>(<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;=&#32;0;
236 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a70105117617fc7edbe7f032975888e13">NoneOf</link>(<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;=&#32;0;
237 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a3ca6fd0aebd486de8dd78c952938a83b">NotOneOf</link>(<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matched)&#32;=&#32;0;
238 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler_1a570a6723282e6c0576a47c492ffe5602">Disallowed</link>()&#32;=&#32;0;
239 };
240 
241 
243 <emphasis role="comment">//&#32;Hasher</emphasis>
244 
245 <emphasis role="comment">//&#32;For&#32;comparison&#32;of&#32;compound&#32;value</emphasis>
246 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Encoding,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator&gt;
247 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_hasher">Hasher</link>&#32;{
248 <emphasis role="keyword">public</emphasis>:
249 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;Encoding::Ch&#32;<link linkend="_classinternal_1_1_hasher_1a415970af68a067615c3c95306cff6d43">Ch</link>;
250 
251 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_hasher_1a7b6abfdd3bdc60064a2322cdd20708c1">Hasher</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;stackCapacity&#32;=&#32;kDefaultSize)&#32;:&#32;stack_(allocator,&#32;stackCapacity)&#32;{}
252 
253 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a57c656866aa08cc7c448ce47b7a243c3">Null</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteType(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7aa09befbfb4f2e1409f237817979d8087">kNullType</link>);&#32;}
254 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a11efd784a4e9c4f8a3dc281552df0486">Bool</link>(<emphasis role="keywordtype">bool</emphasis>&#32;b)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteType(b&#32;?&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a209434e5edd66630011ca19d710d7cd6">kTrueType</link>&#32;:&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a062b8296274a258acf0e142868684c54">kFalseType</link>);&#32;}
255 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1aadbadf98ee7c9ab03a636e0f06d38bac">Int</link>(<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;{&#32;Number&#32;n;&#32;n.u.i&#32;=&#32;i;&#32;n.d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i);&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteNumber(n);&#32;}
256 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a4401600c24c817a45cea6c281438e5b4">Uint</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;u)&#32;{&#32;Number&#32;n;&#32;n.u.u&#32;=&#32;u;&#32;n.d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(u);&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteNumber(n);&#32;}
257 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1ae0579cd54b3c545f77452543793b9a97">Int64</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;i)&#32;{&#32;Number&#32;n;&#32;n.u.i&#32;=&#32;i;&#32;n.d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i);&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteNumber(n);&#32;}
258 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a14832ac4ec204f1065b929df2c255457">Uint64</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u)&#32;{&#32;Number&#32;n;&#32;n.u.u&#32;=&#32;u;&#32;n.d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(u);&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteNumber(n);&#32;}
259 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a83abe847e24ed88d5aab092d840e37c1">Double</link>(<emphasis role="keywordtype">double</emphasis>&#32;d)&#32;{&#32;
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Number&#32;n;&#32;
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(d&#32;&lt;&#32;0)&#32;n.u.i&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link><emphasis role="keyword">&gt;</emphasis>(d);
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;&#32;n.u.u&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(d);&#32;
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;n.d&#32;=&#32;d;
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteNumber(n);
265 &#32;&#32;&#32;&#32;}
266 
267 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1ae277289ad2fb3a938a6507e566d3c5e2">RawNumber</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a415970af68a067615c3c95306cff6d43">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;{
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteBuffer(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7afc9f813b7aaf71911bdae20a86b2702d">kNumberType</link>,&#32;str,&#32;len&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_hasher_1a415970af68a067615c3c95306cff6d43">Ch</link>));
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
270 &#32;&#32;&#32;&#32;}
271 
272 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a885f2bf42f2bb64d6f9443129dce3883">String</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a415970af68a067615c3c95306cff6d43">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<emphasis role="keywordtype">bool</emphasis>)&#32;{
273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;WriteBuffer(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a2d823b89b055bc743d05c03183d3f338">kStringType</link>,&#32;str,&#32;len&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_hasher_1a415970af68a067615c3c95306cff6d43">Ch</link>));
274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
275 &#32;&#32;&#32;&#32;}
276 
277 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a1607d6cac3daab9725e442e38d121028">StartObject</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
278 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a1b34d88f85f9c6a739c1f9038f14f078">Key</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a415970af68a067615c3c95306cff6d43">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a885f2bf42f2bb64d6f9443129dce3883">String</link>(str,&#32;len,&#32;copy);&#32;}
279 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a7050f1552d88967944195163a6a0b08e">EndObject</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;memberCount)&#32;{&#32;
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;h&#32;=&#32;Hash(0,&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>);
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>*&#32;kv&#32;=&#32;stack_.template&#32;Pop&lt;uint64_t&gt;(memberCount&#32;*&#32;2);
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;memberCount;&#32;i++)
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h&#32;^=&#32;Hash(kv[i&#32;*&#32;2],&#32;kv[i&#32;*&#32;2&#32;+&#32;1]);&#32;&#32;<emphasis role="comment">//&#32;Use&#32;xor&#32;to&#32;achieve&#32;member&#32;order&#32;insensitive</emphasis>
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stack_.template&#32;Push&lt;uint64_t&gt;()&#32;=&#32;h;
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
286 &#32;&#32;&#32;&#32;}
287 &#32;&#32;&#32;&#32;
288 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1a2ceb3cc00216f6b6ce66907856a16404">StartArray</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
289 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1ad445b2730be23e18b4dec2c4d1033419">EndArray</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;elementCount)&#32;{&#32;
290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;h&#32;=&#32;Hash(0,&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>);
291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>*&#32;e&#32;=&#32;stack_.template&#32;Pop&lt;uint64_t&gt;(elementCount);
292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;elementCount;&#32;i++)
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h&#32;=&#32;Hash(h,&#32;e[i]);&#32;<emphasis role="comment">//&#32;Use&#32;hash&#32;to&#32;achieve&#32;element&#32;order&#32;sensitive</emphasis>
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stack_.template&#32;Push&lt;uint64_t&gt;()&#32;=&#32;h;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
296 &#32;&#32;&#32;&#32;}
297 
298 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_hasher_1ae09fee05c56194031e8af94a1b1be145">IsValid</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;stack_.GetSize()&#32;==&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>);&#32;}
299 
300 &#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_classinternal_1_1_hasher_1ac221aaaa0d643aae553125e76aed7b47">GetHashCode</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(<link linkend="_classinternal_1_1_hasher_1ae09fee05c56194031e8af94a1b1be145">IsValid</link>());
302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*stack_.template&#32;Top&lt;uint64_t&gt;();
303 &#32;&#32;&#32;&#32;}
304 
305 <emphasis role="keyword">private</emphasis>:
306 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kDefaultSize&#32;=&#32;256;
307 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Number&#32;{
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">union&#32;</emphasis><link linkend="_unioninternal_1_1_hasher_1_1_number_1_1_u">U</link>&#32;{
309 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_unioninternal_1_1_hasher_1_1_number_1_1_u_1a6380a48b72a4bb5dd7291d47814e6421">u</link>;
310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;<link linkend="_unioninternal_1_1_hasher_1_1_number_1_1_u_1a19099b91768e67f02ed5a27fc157974b">i</link>;
311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}u;
312 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;d;
313 &#32;&#32;&#32;&#32;};
314 
315 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WriteType(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link>&#32;type)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteBuffer(type,&#32;0,&#32;0);&#32;}
316 &#32;&#32;&#32;&#32;
317 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WriteNumber(<emphasis role="keyword">const</emphasis>&#32;Number&amp;&#32;n)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;WriteBuffer(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7afc9f813b7aaf71911bdae20a86b2702d">kNumberType</link>,&#32;&amp;n,&#32;<emphasis role="keyword">sizeof</emphasis>(n));&#32;}
318 &#32;&#32;&#32;&#32;
319 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;WriteBuffer(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link>&#32;type,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;data,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;len)&#32;{
320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;FNV-1a&#32;from&#32;http://isthe.com/chongo/tech/comp/fnv/</emphasis>
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;h&#32;=&#32;Hash(<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0x84222325,&#32;0xcbf29ce4),&#32;type);
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;d&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*<emphasis role="keyword">&gt;</emphasis>(data);
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;len;&#32;i++)
324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h&#32;=&#32;Hash(h,&#32;d[i]);
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*stack_.template&#32;Push&lt;uint64_t&gt;()&#32;=&#32;h;
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
327 &#32;&#32;&#32;&#32;}
328 
329 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;Hash(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;h,&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;d)&#32;{
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;kPrime&#32;=&#32;<link linkend="_rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f">RAPIDJSON_UINT64_C2</link>(0x00000100,&#32;0x000001b3);
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h&#32;^=&#32;d;
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h&#32;*=&#32;kPrime;
333 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;h;
334 &#32;&#32;&#32;&#32;}
335 
336 &#32;&#32;&#32;&#32;Stack&lt;Allocator&gt;&#32;stack_;
337 };
338 
340 <emphasis role="comment">//&#32;SchemaValidationContext</emphasis>
341 
342 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType&gt;
343 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinternal_1_1_schema_validation_context">SchemaValidationContext</link>&#32;{
344 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_schema">Schema&lt;SchemaDocumentType&gt;</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a79b155ab3711b97b6e33ced450614397">SchemaType</link>;
345 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_state_factory">ISchemaStateFactory&lt;SchemaType&gt;</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a33fa91fd8e880d1adb9b891fe441f110">SchemaValidatorFactoryType</link>;
346 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler">IValidationErrorHandler&lt;SchemaType&gt;</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4d015d68e8957c254b84af5f3550b2f3">ErrorHandlerType</link>;
347 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">SchemaType::ValueType</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1acc134e808d3a4dbe8834eb1a3e98e816">ValueType</link>;
348 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">ValueType::Ch</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1abd905cd1513b117f1db68b58d6c41daf">Ch</link>;
349 
350 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826c">PatternValidatorType</link>&#32;{
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca54cca82af0ef391404c2a930187ce5e9">kPatternValidatorOnly</link>,
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca2514cf806ce8e41993907d57d3732435">kPatternValidatorWithProperty</link>,
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca39a21b8fcd048ddaabe29bc11e08c8f8">kPatternValidatorWithAdditionalProperty</link>
354 &#32;&#32;&#32;&#32;};
355 
356 &#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ad2cb3f3168faf268157f582102979102">SchemaValidationContext</link>(<link linkend="_classinternal_1_1_i_schema_state_factory">SchemaValidatorFactoryType</link>&amp;&#32;f,&#32;<link linkend="_classinternal_1_1_i_validation_error_handler">ErrorHandlerType</link>&amp;&#32;eh,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema">SchemaType</link>*&#32;s)&#32;:
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>(f),
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>(eh),
359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1af44336e8a612b77a0091cc57f8de1734">schema</link>(s),
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>(),
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a9f6a91ee46c70e55f287b1e9b219df21">invalidKeyword</link>(),
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a598b05c1f85d8c071e85ad1ccc761e8e">invalidCode</link>(),
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4b419775e207cf72834f895dc30ac596">hasher</link>(),
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a5b6ec1a5fde2215de14a65fcbb06edde">arrayElementHashCodes</link>(),
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>(),
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a10e5e97640846f3c23eaaba0506bb4f7">validatorCount</link>(),
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>(),
368 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a2b8a521d60d39472a1550b535028a353">patternPropertiesValidatorCount</link>(),
369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>(),
370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>(),
371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1acc1ba6a63e678d0efff8a63d617c4d0d">valuePatternValidatorType</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca54cca82af0ef391404c2a930187ce5e9">kPatternValidatorOnly</link>),
372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>(),
373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1af18fc4ef754e8a52732e152854f06341">inArray</link>(false),
374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a23e93ca88653ed878e3ddf290fc6bd9f">valueUniqueness</link>(false),
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a0864c5e8155fe0064f17e8dcb31d93c7">arrayUniqueness</link>(false)
376 &#32;&#32;&#32;&#32;{
377 &#32;&#32;&#32;&#32;}
378 
379 &#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1abd287930e1134fe74e3e92580e51e97b">~SchemaValidationContext</link>()&#32;{
380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structinternal_1_1_schema_validation_context_1a4b419775e207cf72834f895dc30ac596">hasher</link>)
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1a70b8d88180d2e6993105b17f19101635">DestroryHasher</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a4b419775e207cf72834f895dc30ac596">hasher</link>);
382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>)&#32;{
383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a10e5e97640846f3c23eaaba0506bb4f7">validatorCount</link>;&#32;i++)
384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1a112cbf154077050bc30ffe670032442c">DestroySchemaValidator</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[i]);
385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1a27bd2138940cac3c330dd8399c49b22b">FreeState</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>);
386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>)&#32;{
388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a2b8a521d60d39472a1550b535028a353">patternPropertiesValidatorCount</link>;&#32;i++)
389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1a112cbf154077050bc30ffe670032442c">DestroySchemaValidator</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>[i]);
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1a27bd2138940cac3c330dd8399c49b22b">FreeState</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>);
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>)
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1a27bd2138940cac3c330dd8399c49b22b">FreeState</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>);
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>)
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1a27bd2138940cac3c330dd8399c49b22b">FreeState</link>(<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>);
396 &#32;&#32;&#32;&#32;}
397 
398 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_i_schema_state_factory">SchemaValidatorFactoryType</link>&amp;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>;
399 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_i_validation_error_handler">ErrorHandlerType</link>&amp;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>;
400 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema">SchemaType</link>*&#32;<link linkend="_structinternal_1_1_schema_validation_context_1af44336e8a612b77a0091cc57f8de1734">schema</link>;
401 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema">SchemaType</link>*&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>;
402 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1abd905cd1513b117f1db68b58d6c41daf">Ch</link>*&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a9f6a91ee46c70e55f287b1e9b219df21">invalidKeyword</link>;
403 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a598b05c1f85d8c071e85ad1ccc761e8e">invalidCode</link>;
404 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4b419775e207cf72834f895dc30ac596">hasher</link>;&#32;<emphasis role="comment">//&#32;Only&#32;validator&#32;access</emphasis>
405 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a5b6ec1a5fde2215de14a65fcbb06edde">arrayElementHashCodes</link>;&#32;<emphasis role="comment">//&#32;Only&#32;validator&#32;access&#32;this</emphasis>
406 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>**&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>;
407 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a10e5e97640846f3c23eaaba0506bb4f7">validatorCount</link>;
408 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>**&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>;
409 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a2b8a521d60d39472a1550b535028a353">patternPropertiesValidatorCount</link>;
410 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema">SchemaType</link>**&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>;
411 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>;
412 &#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826c">PatternValidatorType</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1acc1ba6a63e678d0efff8a63d617c4d0d">valuePatternValidatorType</link>;
413 &#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826c">PatternValidatorType</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1add156192946b251ded2e11e24cfa9898">objectPatternValidatorType</link>;
414 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a213dd0b8a746b1548bb28b12a17c2c1e">arrayElementIndex</link>;
415 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>;
416 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1af18fc4ef754e8a52732e152854f06341">inArray</link>;
417 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a23e93ca88653ed878e3ddf290fc6bd9f">valueUniqueness</link>;
418 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a0864c5e8155fe0064f17e8dcb31d93c7">arrayUniqueness</link>;
419 };
420 
422 <emphasis role="comment">//&#32;Schema</emphasis>
423 
424 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType&gt;
425 <emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_schema">Schema</link>&#32;{
426 <emphasis role="keyword">public</emphasis>:
427 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">SchemaDocumentType::ValueType</link>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>;
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::AllocatorType&#32;<link linkend="_classinternal_1_1_schema_1a7af392edd81e610754cd2e6b4f82761c">AllocatorType</link>;
429 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::PointerType&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>;
430 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_encoding">ValueType::EncodingType</link>&#32;<link linkend="_classinternal_1_1_schema_1a9ea269c3ca8099c2a14b6519fe34efb1">EncodingType</link>;
431 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;EncodingType::Ch&#32;<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>;
432 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_structinternal_1_1_schema_validation_context">SchemaValidationContext&lt;SchemaDocumentType&gt;</link>&#32;<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>;
433 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_schema">Schema&lt;SchemaDocumentType&gt;</link>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>;
434 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_value">GenericValue&lt;EncodingType, AllocatorType&gt;</link>&#32;<link linkend="_classinternal_1_1_schema_1ab3a07540a27d4cc2b0e260290c5c5771">SValue</link>;
435 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler">IValidationErrorHandler&lt;Schema&gt;</link>&#32;<link linkend="_classinternal_1_1_schema_1a2f8b106324878cdfc614df855e8bc6cc">ErrorHandler</link>;
436 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri&lt;ValueType, AllocatorType&gt;</link>&#32;<link linkend="_classinternal_1_1_schema_1a3b6cd85c3eeebe870cf8017d9d131d35">UriType</link>;
437 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_schema_document">GenericSchemaDocument</link>&lt;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>,&#32;<link linkend="_classinternal_1_1_schema_1a7af392edd81e610754cd2e6b4f82761c">AllocatorType</link>&gt;;
438 
439 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a7725acd72292490caf8605fbd8e2fa9c">Schema</link>(SchemaDocumentType*&#32;schemaDocument,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&amp;&#32;p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>&amp;&#32;document,&#32;<link linkend="_classinternal_1_1_schema_1a7af392edd81e610754cd2e6b4f82761c">AllocatorType</link>*&#32;allocator,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">UriType</link>&amp;&#32;<emphasis role="keywordtype">id</emphasis>&#32;=&#32;<link linkend="_classinternal_1_1_schema_1a3b6cd85c3eeebe870cf8017d9d131d35">UriType</link>())&#32;:
440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_(allocator),
441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri_(schemaDocument-&gt;<link linkend="_classinternal_1_1_schema_1ace15922d253d6d299159a76f57179803">GetURI</link>(),&#32;*allocator),
442 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;id_(id),
443 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pointer_(p,&#32;allocator),
444 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeless_(schemaDocument-&gt;GetTypeless()),
445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enum_(),
446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enumCount_(),
447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;not_(),
448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_((1&#32;&lt;&lt;&#32;kTotalSchemaType)&#32;-&#32;1),&#32;<emphasis role="comment">//&#32;typeless</emphasis>
449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validatorCount_(),
450 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;notValidatorIndex_(),
451 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_(),
452 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;additionalPropertiesSchema_(),
453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternProperties_(),
454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternPropertyCount_(),
455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;propertyCount_(),
456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minProperties_(),
457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxProperties_(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(~0)),
458 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;additionalProperties_(true),
459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasDependencies_(),
460 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasRequired_(),
461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasSchemaDependencies_(),
462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;additionalItemsSchema_(),
463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itemsList_(),
464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itemsTuple_(),
465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itemsTupleCount_(),
466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minItems_(),
467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxItems_(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(~0)),
468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;additionalItems_(true),
469 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uniqueItems_(false),
470 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern_(),
471 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minLength_(0),
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maxLength_(~<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(0)),
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusiveMinimum_(false),
474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusiveMaximum_(false),
475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;defaultValueLength_(0)
476 &#32;&#32;&#32;&#32;{
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_value">ValueType::ConstValueIterator</link>&#32;ConstValueIterator;
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::ConstMemberIterator</link>&#32;ConstMemberIterator;
479 
480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PR&#32;#1393</emphasis>
481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Early&#32;add&#32;this&#32;Schema&#32;and&#32;its&#32;$ref(s)&#32;in&#32;schemaDocument&apos;s&#32;map&#32;to&#32;avoid&#32;infinite</emphasis>
482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;recursion&#32;(with&#32;recursive&#32;schemas),&#32;since&#32;schemaDocument-&gt;getSchema()&#32;is&#32;always</emphasis>
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;checked&#32;before&#32;creating&#32;a&#32;new&#32;one.&#32;Don&apos;t&#32;cache&#32;typeless_,&#32;though.</emphasis>
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">this</emphasis>&#32;!=&#32;typeless_)&#32;{
485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::SchemaEntry&#32;SchemaEntry;
486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SchemaEntry&#32;*entry&#32;=&#32;schemaDocument-&gt;schemaMap_.template&#32;Push&lt;SchemaEntry&gt;();
487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(entry)&#32;SchemaEntry(pointer_,&#32;<emphasis role="keyword">this</emphasis>,&#32;<emphasis role="keyword">true</emphasis>,&#32;allocator_);
488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;AddSchemaRefs(<emphasis role="keyword">this</emphasis>);
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
490 
491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.IsObject())
492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
493 
494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;we&#32;have&#32;an&#32;id&#32;property,&#32;resolve&#32;it&#32;with&#32;the&#32;in-scope&#32;id</emphasis>
495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetIdString()))&#32;{
496 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsString())&#32;{
497 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_uri">UriType</link>&#32;local(*v,&#32;allocator);
498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;id_&#32;=&#32;local.<link linkend="_class_generic_uri_1a7de4b3a28c8046f2293658bc9c0b44e1">Resolve</link>(id_,&#32;allocator);
499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
501 
502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetTypeString()))&#32;{
503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;type_&#32;=&#32;0;
504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsString())
505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddType(*v);
506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsArray())
507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstValueIterator&#32;itr&#32;=&#32;v-&gt;Begin();&#32;itr&#32;!=&#32;v-&gt;End();&#32;++itr)
508 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddType(*itr);
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
510 
511 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetEnumString()))&#32;{
512 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsArray()&#32;&amp;&amp;&#32;v-&gt;Size()&#32;&gt;&#32;0)&#32;{
513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enum_&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>*<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)&#32;*&#32;v-&gt;Size()));
514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstValueIterator&#32;itr&#32;=&#32;v-&gt;Begin();&#32;itr&#32;!=&#32;v-&gt;End();&#32;++itr)&#32;{
515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_hasher">Hasher&lt;EncodingType, MemoryPoolAllocator&lt;&gt;</link>&#32;&gt;&#32;EnumHasherType;
516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[256u&#32;+&#32;24];
517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator&lt;&gt;</link>&#32;hasherAllocator(buffer,&#32;<emphasis role="keyword">sizeof</emphasis>(buffer));
518 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;EnumHasherType&#32;h(&amp;hasherAllocator,&#32;256);
519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itr-&gt;Accept(h);
520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;enum_[enumCount_++]&#32;=&#32;h.GetHashCode();
521 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
524 
525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schemaDocument)&#32;{
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(allOf_,&#32;*schemaDocument,&#32;p,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetAllOfString(),&#32;document);
527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(anyOf_,&#32;*schemaDocument,&#32;p,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetAnyOfString(),&#32;document);
528 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(oneOf_,&#32;*schemaDocument,&#32;p,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetOneOfString(),&#32;document);
529 
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetNotString()))&#32;{
531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;not_,&#32;p.Append(GetNotString(),&#32;allocator_),&#32;*v,&#32;document,&#32;id_);
532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;notValidatorIndex_&#32;=&#32;validatorCount_;
533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validatorCount_++;
534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
536 
537 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Object</emphasis>
538 
539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;properties&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetPropertiesString());
540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;required&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetRequiredString());
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;dependencies&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetDependenciesString());
542 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
543 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Gather&#32;properties&#32;from&#32;properties/required/dependencies</emphasis>
544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">SValue</link>&#32;allProperties(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>);
545 
546 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(properties&#32;&amp;&amp;&#32;properties-&gt;IsObject())
547 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstMemberIterator&#32;itr&#32;=&#32;properties-&gt;MemberBegin();&#32;itr&#32;!=&#32;properties-&gt;MemberEnd();&#32;++itr)
548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddUniqueElement(allProperties,&#32;itr-&gt;name);
549 
550 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(required&#32;&amp;&amp;&#32;required-&gt;IsArray())
551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstValueIterator&#32;itr&#32;=&#32;required-&gt;Begin();&#32;itr&#32;!=&#32;required-&gt;End();&#32;++itr)
552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr-&gt;IsString())
553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddUniqueElement(allProperties,&#32;*itr);
554 
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dependencies&#32;&amp;&amp;&#32;dependencies-&gt;IsObject())
556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstMemberIterator&#32;itr&#32;=&#32;dependencies-&gt;MemberBegin();&#32;itr&#32;!=&#32;dependencies-&gt;MemberEnd();&#32;++itr)&#32;{
557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddUniqueElement(allProperties,&#32;itr-&gt;name);
558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr-&gt;value.IsArray())
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstValueIterator&#32;i&#32;=&#32;itr-&gt;value.Begin();&#32;i&#32;!=&#32;itr-&gt;value.End();&#32;++i)
560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i-&gt;IsString())
561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddUniqueElement(allProperties,&#32;*i);
562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
563 
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allProperties.Size()&#32;&gt;&#32;0)&#32;{
565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;propertyCount_&#32;=&#32;allProperties.Size();
566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Property*<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(Property)&#32;*&#32;propertyCount_));
567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;propertyCount_;&#32;i++)&#32;{
568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;properties_[i])&#32;Property();
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_[i].name&#32;=&#32;allProperties[i];
570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_[i].schema&#32;=&#32;typeless_;
571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
574 
575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(properties&#32;&amp;&amp;&#32;properties-&gt;IsObject())&#32;{
576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&#32;q&#32;=&#32;p.Append(GetPropertiesString(),&#32;allocator_);
577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstMemberIterator&#32;itr&#32;=&#32;properties-&gt;MemberBegin();&#32;itr&#32;!=&#32;properties-&gt;MemberEnd();&#32;++itr)&#32;{
578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index;
579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FindPropertyIndex(itr-&gt;name,&#32;&amp;index))
580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;properties_[index].schema,&#32;q.Append(itr-&gt;name,&#32;allocator_),&#32;itr-&gt;value,&#32;document,&#32;id_);
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
583 
584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetPatternPropertiesString()))&#32;{
585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&#32;q&#32;=&#32;p.Append(GetPatternPropertiesString(),&#32;allocator_);
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternProperties_&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>PatternProperty*<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(PatternProperty)&#32;*&#32;v-&gt;MemberCount()));
587 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternPropertyCount_&#32;=&#32;0;
588 
589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstMemberIterator&#32;itr&#32;=&#32;v-&gt;MemberBegin();&#32;itr&#32;!=&#32;v-&gt;MemberEnd();&#32;++itr)&#32;{
590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(&amp;patternProperties_[patternPropertyCount_])&#32;PatternProperty();
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternProperties_[patternPropertyCount_].pattern&#32;=&#32;CreatePattern(itr-&gt;name);
592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;patternProperties_[patternPropertyCount_].schema,&#32;q.Append(itr-&gt;name,&#32;allocator_),&#32;itr-&gt;value,&#32;document,&#32;id_);
593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternPropertyCount_++;
594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
596 
597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(required&#32;&amp;&amp;&#32;required-&gt;IsArray())
598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstValueIterator&#32;itr&#32;=&#32;required-&gt;Begin();&#32;itr&#32;!=&#32;required-&gt;End();&#32;++itr)
599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr-&gt;IsString())&#32;{
600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index;
601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FindPropertyIndex(*itr,&#32;&amp;index))&#32;{
602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_[index].required&#32;=&#32;<emphasis role="keyword">true</emphasis>;
603 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasRequired_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
604 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
606 
607 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(dependencies&#32;&amp;&amp;&#32;dependencies-&gt;IsObject())&#32;{
608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&#32;q&#32;=&#32;p.Append(GetDependenciesString(),&#32;allocator_);
609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasDependencies_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstMemberIterator&#32;itr&#32;=&#32;dependencies-&gt;MemberBegin();&#32;itr&#32;!=&#32;dependencies-&gt;MemberEnd();&#32;++itr)&#32;{
611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;sourceIndex;
612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FindPropertyIndex(itr-&gt;name,&#32;&amp;sourceIndex))&#32;{
613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr-&gt;value.IsArray())&#32;{
614 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_[sourceIndex].dependencies&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis>*<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">bool</emphasis>)&#32;*&#32;propertyCount_));
615 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(properties_[sourceIndex].dependencies,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">bool</emphasis>)*&#32;propertyCount_);
616 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstValueIterator&#32;targetItr&#32;=&#32;itr-&gt;value.Begin();&#32;targetItr&#32;!=&#32;itr-&gt;value.End();&#32;++targetItr)&#32;{
617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;targetIndex;
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FindPropertyIndex(*targetItr,&#32;&amp;targetIndex))
619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_[sourceIndex].dependencies[targetIndex]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr-&gt;value.IsObject())&#32;{
623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasSchemaDependencies_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;properties_[sourceIndex].dependenciesSchema,&#32;q.Append(itr-&gt;name,&#32;allocator_),&#32;itr-&gt;value,&#32;document,&#32;id_);
625 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_[sourceIndex].dependenciesValidatorIndex&#32;=&#32;validatorCount_;
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validatorCount_++;
627 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
631 
632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetAdditionalPropertiesString()))&#32;{
633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsBool())
634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;additionalProperties_&#32;=&#32;v-&gt;GetBool();
635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsObject())
636 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;additionalPropertiesSchema_,&#32;p.Append(GetAdditionalPropertiesString(),&#32;allocator_),&#32;*v,&#32;document,&#32;id_);
637 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
638 
639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(minProperties_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMinPropertiesString());
640 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(maxProperties_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMaxPropertiesString());
641 
642 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Array</emphasis>
643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetItemsString()))&#32;{
644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&#32;q&#32;=&#32;p.Append(GetItemsString(),&#32;allocator_);
645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsObject())&#32;<emphasis role="comment">//&#32;List&#32;validation</emphasis>
646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;itemsList_,&#32;q,&#32;*v,&#32;document,&#32;id_);
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsArray())&#32;{&#32;<emphasis role="comment">//&#32;Tuple&#32;validation</emphasis>
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itemsTuple_&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classinternal_1_1_schema">Schema</link>**<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema">Schema</link>*)&#32;*&#32;v-&gt;Size()));
649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index&#32;=&#32;0;
650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ConstValueIterator&#32;itr&#32;=&#32;v-&gt;Begin();&#32;itr&#32;!=&#32;v-&gt;End();&#32;++itr,&#32;index++)
651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;itemsTuple_[itemsTupleCount_++],&#32;q.Append(index,&#32;allocator_),&#32;*itr,&#32;document,&#32;id_);
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
654 
655 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(minItems_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMinItemsString());
656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(maxItems_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMaxItemsString());
657 
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetAdditionalItemsString()))&#32;{
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsBool())
660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;additionalItems_&#32;=&#32;v-&gt;GetBool();
661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsObject())
662 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument-&gt;CreateSchema(&amp;additionalItemsSchema_,&#32;p.Append(GetAdditionalItemsString(),&#32;allocator_),&#32;*v,&#32;document,&#32;id_);
663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
664 
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(uniqueItems_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetUniqueItemsString());
666 
667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;String</emphasis>
668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(minLength_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMinLengthString());
669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(maxLength_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMaxLengthString());
670 
671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetPatternString()))
672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern_&#32;=&#32;CreatePattern(*v);
673 
674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Number</emphasis>
675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMinimumString()))
676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsNumber())
677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;minimum_.CopyFrom(*v,&#32;*allocator_);
678 
679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMaximumString()))
680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsNumber())
681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;maximum_.CopyFrom(*v,&#32;*allocator_);
682 
683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(exclusiveMinimum_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetExclusiveMinimumString());
684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AssignIfExist(exclusiveMaximum_,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetExclusiveMaximumString());
685 
686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetMultipleOfString()))
687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsNumber()&#32;&amp;&amp;&#32;v-&gt;GetDouble()&#32;&gt;&#32;0.0)
688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;multipleOf_.CopyFrom(*v,&#32;*allocator_);
689 
690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Default</emphasis>
691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;GetDefaultValueString()))
692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsString())
693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;defaultValueLength_&#32;=&#32;v-&gt;GetStringLength();
694 
695 &#32;&#32;&#32;&#32;}
696 
697 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a458f60f9fee54d74ac1f607bcf4e4ddc">~Schema</link>()&#32;{
698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(enum_);
699 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(properties_)&#32;{
700 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;propertyCount_;&#32;i++)
701 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;properties_[i].~Property();
702 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(properties_);
703 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(patternProperties_)&#32;{
705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;patternPropertyCount_;&#32;i++)
706 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternProperties_[i].~PatternProperty();
707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(patternProperties_);
708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(itemsTuple_);
710 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_HAS_REGEX</emphasis>
711 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pattern_)&#32;{
712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern_-&gt;~RegexType();
713 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(pattern_);
714 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
715 <emphasis role="preprocessor">#endif</emphasis>
716 &#32;&#32;&#32;&#32;}
717 
718 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">SValue</link>&amp;&#32;<link linkend="_classinternal_1_1_schema_1ace15922d253d6d299159a76f57179803">GetURI</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
719 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;uri_;
720 &#32;&#32;&#32;&#32;}
721 
722 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_uri">UriType</link>&amp;&#32;<link linkend="_classinternal_1_1_schema_1a620036a91f95078dca15bb7aad5ba027">GetId</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
723 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;id_;
724 &#32;&#32;&#32;&#32;}
725 
726 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&amp;&#32;<link linkend="_classinternal_1_1_schema_1a8d5ce15875e498c8c5f3512a5cadb65e">GetPointer</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
727 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;pointer_;
728 &#32;&#32;&#32;&#32;}
729 
730 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ae978defa6c4210365bdb3571643a0d40">BeginValue</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context)<emphasis role="keyword">&#32;const&#32;</emphasis>{
731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1af18fc4ef754e8a52732e152854f06341">inArray</link>)&#32;{
732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(uniqueItems_)
733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a23e93ca88653ed878e3ddf290fc6bd9f">valueUniqueness</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
734 
735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itemsList_)
736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;itemsList_;
737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itemsTuple_)&#32;{
738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a213dd0b8a746b1548bb28b12a17c2c1e">arrayElementIndex</link>&#32;&lt;&#32;itemsTupleCount_)
739 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;itemsTuple_[context.<link linkend="_structinternal_1_1_schema_validation_context_1a213dd0b8a746b1548bb28b12a17c2c1e">arrayElementIndex</link>];
740 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(additionalItemsSchema_)
741 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;additionalItemsSchema_;
742 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(additionalItems_)
743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
745 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a0ac36d4217d9a14205cbe392601f3ee7">DisallowedItem</link>(context.<link linkend="_structinternal_1_1_schema_validation_context_1a213dd0b8a746b1548bb28b12a17c2c1e">arrayElementIndex</link>);
746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;set&#32;valueSchema&#32;for&#32;when&#32;kValidateContinueOnErrorFlag&#32;is&#32;set,&#32;else&#32;reports&#32;spurious&#32;type&#32;error</emphasis>
747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;bump&#32;arrayElementIndex&#32;for&#32;when&#32;kValidateContinueOnErrorFlag&#32;is&#32;set</emphasis>
749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a213dd0b8a746b1548bb28b12a17c2c1e">arrayElementIndex</link>++;
750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa17861cca8a0ab2a0685f3b7804f67303">kValidateErrorAdditionalItems</link>);
751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
755 
756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a213dd0b8a746b1548bb28b12a17c2c1e">arrayElementIndex</link>++;
757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
759 &#32;&#32;&#32;&#32;}
760 
761 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1afced5d191620cfdf0971fdd30b004686">EndValue</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context)<emphasis role="keyword">&#32;const&#32;</emphasis>{
762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;check&#32;pattern&#32;properties&#32;if&#32;we&#32;have&#32;validators</emphasis>
763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a2b8a521d60d39472a1550b535028a353">patternPropertiesValidatorCount</link>&#32;&gt;&#32;0)&#32;{
764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;otherValid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count&#32;=&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a2b8a521d60d39472a1550b535028a353">patternPropertiesValidatorCount</link>;
766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1add156192946b251ded2e11e24cfa9898">objectPatternValidatorType</link>&#32;!=&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca54cca82af0ef391404c2a930187ce5e9">Context::kPatternValidatorOnly</link>)
767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;otherValid&#32;=&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>[--count]-&gt;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>();
768 
769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;patternValid&#32;=&#32;<emphasis role="keyword">true</emphasis>;
770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)
771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!context.<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>[i]-&gt;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>())&#32;{
772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;patternValid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
775 
776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1add156192946b251ded2e11e24cfa9898">objectPatternValidatorType</link>&#32;==&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca54cca82af0ef391404c2a930187ce5e9">Context::kPatternValidatorOnly</link>)&#32;{
777 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!patternValid)&#32;{
778 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1abd92773fa046eeb6fd8416468e62e5b1">PropertyViolations</link>(context.<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>,&#32;count);
779 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaecdd1b884cbacca0213b36def4e1feaf">kValidateErrorPatternProperties</link>);
780 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
781 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1add156192946b251ded2e11e24cfa9898">objectPatternValidatorType</link>&#32;==&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca2514cf806ce8e41993907d57d3732435">Context::kPatternValidatorWithProperty</link>)&#32;{
783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!patternValid&#32;||&#32;!otherValid)&#32;{
784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1abd92773fa046eeb6fd8416468e62e5b1">PropertyViolations</link>(context.<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>,&#32;count&#32;+&#32;1);
785 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaecdd1b884cbacca0213b36def4e1feaf">kValidateErrorPatternProperties</link>);
786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
788 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!patternValid&#32;&amp;&amp;&#32;!otherValid)&#32;{&#32;<emphasis role="comment">//&#32;kPatternValidatorWithAdditionalProperty)</emphasis>
789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1abd92773fa046eeb6fd8416468e62e5b1">PropertyViolations</link>(context.<link linkend="_structinternal_1_1_schema_validation_context_1a758565f674e8fb2066ff0f89ee67a174">patternPropertiesValidators</link>,&#32;count&#32;+&#32;1);
790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaecdd1b884cbacca0213b36def4e1feaf">kValidateErrorPatternProperties</link>);
791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
793 
794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;For&#32;enums&#32;only&#32;check&#32;if&#32;we&#32;have&#32;a&#32;hasher</emphasis>
795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enum_&#32;&amp;&amp;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a4b419775e207cf72834f895dc30ac596">hasher</link>)&#32;{
796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;h&#32;=&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1addfcf00963cc777edf642b204f07c8d6">GetHashCode</link>(context.<link linkend="_structinternal_1_1_schema_validation_context_1a4b419775e207cf72834f895dc30ac596">hasher</link>);
797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;enumCount_;&#32;i++)
798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enum_[i]&#32;==&#32;h)
799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;foundEnum;
800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a67531a59c1dd8db20db72b17f0933d03">DisallowedValue</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3c12e9cbc8a479b77776ceccbda4c289">kValidateErrorEnum</link>);
801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3c12e9cbc8a479b77776ceccbda4c289">kValidateErrorEnum</link>);
802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundEnum:;
803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
804 
805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;check&#32;allOf&#32;etc&#32;if&#32;we&#32;have&#32;validators</emphasis>
806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a10e5e97640846f3c23eaaba0506bb4f7">validatorCount</link>&#32;&gt;&#32;0)&#32;{
807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allOf_.schemas)
808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;allOf_.begin;&#32;i&#32;&lt;&#32;allOf_.begin&#32;+&#32;allOf_.count;&#32;i++)
809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[i]-&gt;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>())&#32;{
810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a3ce77d66a09eb5d91833fc86f8fa5680">NotAllOf</link>(&amp;context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[allOf_.begin],&#32;allOf_.count);
811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaef48f9db2382e3308b823f078c73bce4">kValidateErrorAllOf</link>);
812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
813 
814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(anyOf_.schemas)&#32;{
815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;anyOf_.begin;&#32;i&#32;&lt;&#32;anyOf_.begin&#32;+&#32;anyOf_.count;&#32;i++)
816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[i]-&gt;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>())
817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">goto</emphasis>&#32;foundAny;
818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a70105117617fc7edbe7f032975888e13">NoneOf</link>(&amp;context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[anyOf_.begin],&#32;anyOf_.count);
819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa7b821605f3eb4ec77e2c42204b3957cf">kValidateErrorAnyOf</link>);
820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;foundAny:;
821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
822 
823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oneOf_.schemas)&#32;{
824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;oneValid&#32;=&#32;<emphasis role="keyword">false</emphasis>;
825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;oneOf_.begin;&#32;i&#32;&lt;&#32;oneOf_.begin&#32;+&#32;oneOf_.count;&#32;i++)
826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[i]-&gt;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>())&#32;{
827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oneValid)&#32;{
828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a3ca6fd0aebd486de8dd78c952938a83b">NotOneOf</link>(&amp;context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[oneOf_.begin],&#32;oneOf_.count,&#32;<emphasis role="keyword">true</emphasis>);
829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1bbc2293748b2e80415c77c7a6a069f9">kValidateErrorOneOfMatch</link>);
830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>
831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;oneValid&#32;=&#32;<emphasis role="keyword">true</emphasis>;
832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!oneValid)&#32;{
834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a3ca6fd0aebd486de8dd78c952938a83b">NotOneOf</link>(&amp;context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[oneOf_.begin],&#32;oneOf_.count,&#32;<emphasis role="keyword">false</emphasis>);
835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa56466697ca410e5ddc2c7fabe11f3132">kValidateErrorOneOf</link>);
836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
838 
839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(not_&#32;&amp;&amp;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[notValidatorIndex_]-&gt;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>())&#32;{
840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a570a6723282e6c0576a47c492ffe5602">Disallowed</link>();
841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aadd079998cffcae99da28675a5742327d">kValidateErrorNot</link>);
842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
844 
845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
846 &#32;&#32;&#32;&#32;}
847 
848 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1acd4fa9c33c9ef22a26ba160fdc1d78da">Null</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context)<emphasis role="keyword">&#32;const&#32;</emphasis>{
849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kNullSchemaType)))&#32;{
850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetNullString());
851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
854 &#32;&#32;&#32;&#32;}
855 
856 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ab3d266cf235cf2f165952c0b8891a962">Bool</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<emphasis role="keywordtype">bool</emphasis>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kBooleanSchemaType)))&#32;{
858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetBooleanString());
859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
862 &#32;&#32;&#32;&#32;}
863 
864 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a1e3a87b01db90408be438dd4f5b8ee28">Int</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<emphasis role="keywordtype">int</emphasis>&#32;i)<emphasis role="keyword">&#32;const&#32;</emphasis>{
865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckInt(context,&#32;i))
866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
868 &#32;&#32;&#32;&#32;}
869 
870 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1abd42af9c38c9a02cda760567751fb00f">Uint</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;u)<emphasis role="keyword">&#32;const&#32;</emphasis>{
871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckUint(context,&#32;u))
872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
874 &#32;&#32;&#32;&#32;}
875 
876 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a0190028fee83533e2b93f19ff5a99902">Int64</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;i)<emphasis role="keyword">&#32;const&#32;</emphasis>{
877 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckInt(context,&#32;i))
878 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
879 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
880 &#32;&#32;&#32;&#32;}
881 
882 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a1f80b1a9502b71530a98694e7b54987d">Uint64</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u)<emphasis role="keyword">&#32;const&#32;</emphasis>{
883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckUint(context,&#32;u))
884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
886 &#32;&#32;&#32;&#32;}
887 
888 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8336bcea8d0e802c4b070da18e04f1dd">Double</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<emphasis role="keywordtype">double</emphasis>&#32;d)<emphasis role="keyword">&#32;const&#32;</emphasis>{
889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kNumberSchemaType)))&#32;{
890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetNumberString());
891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
893 
894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!minimum_.IsNull()&#32;&amp;&amp;&#32;!CheckDoubleMinimum(context,&#32;d))
895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
896 
897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!maximum_.IsNull()&#32;&amp;&amp;&#32;!CheckDoubleMaximum(context,&#32;d))
898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
899 
900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!multipleOf_.IsNull()&#32;&amp;&amp;&#32;!CheckDoubleMultipleOf(context,&#32;d))
901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
902 
903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
904 &#32;&#32;&#32;&#32;}
905 
906 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8e652cbc67fa34181c3fd813c38d5280">String</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<emphasis role="keywordtype">bool</emphasis>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kStringSchemaType)))&#32;{
908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetStringString());
909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
911 
912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minLength_&#32;!=&#32;0&#32;||&#32;maxLength_&#32;!=&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(~0))&#32;{
913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count;
914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(internal::CountStringCodePoint&lt;EncodingType&gt;(str,&#32;length,&#32;&amp;count))&#32;{
915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;&lt;&#32;minLength_)&#32;{
916 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a57f0cd2c2c9781af0e4c447700537f23">TooShort</link>(str,&#32;length,&#32;minLength_);
917 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa58e6e01eef18ea0af4763abd84128790">kValidateErrorMinLength</link>);
918 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
919 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;&gt;&#32;maxLength_)&#32;{
920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1ae000553bd9312a5090eed393541243af">TooLong</link>(str,&#32;length,&#32;maxLength_);
921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa6825de2427572de01bd121c9fffcee76">kValidateErrorMaxLength</link>);
922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
925 
926 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pattern_&#32;&amp;&amp;&#32;!IsPatternMatch(pattern_,&#32;str,&#32;length))&#32;{
927 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a9551391add918d6679f9a2a85dffc19c">DoesNotMatch</link>(str,&#32;length);
928 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa86bde2af1a18d73a533ba8e2f5971879">kValidateErrorPattern</link>);
929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
930 
931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
932 &#32;&#32;&#32;&#32;}
933 
934 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a124c90c0b46d8a06ae5c0314467b6363">StartObject</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context)<emphasis role="keyword">&#32;const&#32;</emphasis>{
935 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kObjectSchemaType)))&#32;{
936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetObjectString());
937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
939 
940 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasDependencies_&#32;||&#32;hasRequired_)&#32;{
941 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">bool</emphasis>*<emphasis role="keyword">&gt;</emphasis>(context.<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1abf29f19ba86e08f62b84b74a879b8922">MallocState</link>(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">bool</emphasis>)&#32;*&#32;propertyCount_));
942 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(context.<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">bool</emphasis>)&#32;*&#32;propertyCount_);
943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
944 
945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(patternProperties_)&#32;{&#32;<emphasis role="comment">//&#32;pre-allocate&#32;schema&#32;array</emphasis>
946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count&#32;=&#32;patternPropertyCount_&#32;+&#32;1;&#32;<emphasis role="comment">//&#32;extra&#32;for&#32;valuePatternValidatorType</emphasis>
947 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_classinternal_1_1_schema">SchemaType</link>**<emphasis role="keyword">&gt;</emphasis>(context.<link linkend="_structinternal_1_1_schema_validation_context_1ae2661ad92602b4f12fbffadb3dab502e">factory</link>.<link linkend="_classinternal_1_1_i_schema_state_factory_1abf29f19ba86e08f62b84b74a879b8922">MallocState</link>(<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema">SchemaType</link>*)&#32;*&#32;count));
948 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>&#32;=&#32;0;
949 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memset(context.<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_schema">SchemaType</link>*)&#32;*&#32;count);
950 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
951 
952 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
953 &#32;&#32;&#32;&#32;}
954 
955 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1abdd4db48f1b6deb7881777ddc539709a">Key</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<emphasis role="keywordtype">bool</emphasis>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
956 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(patternProperties_)&#32;{
957 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>&#32;=&#32;0;
958 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;patternPropertyCount_;&#32;i++)
959 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(patternProperties_[i].pattern&#32;&amp;&amp;&#32;IsPatternMatch(patternProperties_[i].pattern,&#32;str,&#32;len))&#32;{
960 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>[context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>++]&#32;=&#32;patternProperties_[i].schema;
961 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
962 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
963 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
964 
965 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index&#32;&#32;=&#32;0;
966 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(FindPropertyIndex(<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>(str,&#32;len).Move(),&#32;&amp;index))&#32;{
967 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>&#32;&gt;&#32;0)&#32;{
968 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>[context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>++]&#32;=&#32;properties_[index].schema;
969 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
970 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1acc1ba6a63e678d0efff8a63d617c4d0d">valuePatternValidatorType</link>&#32;=&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca2514cf806ce8e41993907d57d3732435">Context::kPatternValidatorWithProperty</link>;
971 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
972 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
973 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;properties_[index].schema;
974 
975 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>)
976 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>[index]&#32;=&#32;<emphasis role="keyword">true</emphasis>;
977 
978 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
979 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
980 
981 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(additionalPropertiesSchema_)&#32;{
982 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>&#32;&gt;&#32;0)&#32;{
983 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a12c48f172fbaae2e883f9eb2614d860e">patternPropertiesSchemas</link>[context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>++]&#32;=&#32;additionalPropertiesSchema_;
984 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
985 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1acc1ba6a63e678d0efff8a63d617c4d0d">valuePatternValidatorType</link>&#32;=&#32;<link linkend="_structinternal_1_1_schema_validation_context_1a4fb1b8fe7ecb9d4608e6b0ac0716826ca39a21b8fcd048ddaabe29bc11e08c8f8">Context::kPatternValidatorWithAdditionalProperty</link>;
986 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
987 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
988 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;additionalPropertiesSchema_;
989 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
990 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
991 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(additionalProperties_)&#32;{
992 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
993 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
994 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
995 
996 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a77d48b63f006479ab8c77f8192558441">patternPropertiesSchemaCount</link>&#32;==&#32;0)&#32;{&#32;<emphasis role="comment">//&#32;patternProperties&#32;are&#32;not&#32;additional&#32;properties</emphasis>
997 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Must&#32;set&#32;valueSchema&#32;for&#32;when&#32;kValidateContinueOnErrorFlag&#32;is&#32;set,&#32;else&#32;reports&#32;spurious&#32;type&#32;error</emphasis>
998 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a34865d65fb3cbb01bc497d0efade0458">valueSchema</link>&#32;=&#32;typeless_;
999 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a689b8acc4cbe3e8683c1a29950438ac8">DisallowedProperty</link>(str,&#32;len);
1000 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aae02b299a3f5db48400e7c1987201d2ca">kValidateErrorAdditionalProperties</link>);
1001 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1002 
1003 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1004 &#32;&#32;&#32;&#32;}
1005 
1006 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a5f74464dae5d41d5cbf626c8d6729d8a">EndObject</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;memberCount)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1007 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasRequired_)&#32;{
1008 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1ac0073bef86b572b4517876b304aada0f">StartMissingProperties</link>();
1009 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;propertyCount_;&#32;index++)
1010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(properties_[index].required&#32;&amp;&amp;&#32;!context.<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>[index])
1011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(properties_[index].schema-&gt;defaultValueLength_&#32;==&#32;0&#32;)
1012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a3a2165f53ab565e052bcd35b6d19e473">AddMissingProperty</link>(properties_[index].name);
1013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a3a01eec1a969cfb600340a2bad157c9c">EndMissingProperties</link>())
1014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2dc93a549f16b70911e6399c61a1aec4">kValidateErrorRequired</link>);
1015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1016 
1017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memberCount&#32;&lt;&#32;minProperties_)&#32;{
1018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1adf515d2fad2e55bc0735a6fb16eec9e6">TooFewProperties</link>(memberCount,&#32;minProperties_);
1019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa017c1ccb7febfaff42115fc256753fb6">kValidateErrorMinProperties</link>);
1020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1021 
1022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(memberCount&#32;&gt;&#32;maxProperties_)&#32;{
1023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a3494e9d2bff94979649e186aba71b32e">TooManyProperties</link>(memberCount,&#32;maxProperties_);
1024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa179693cbb5ea15f0242e37588e99edf6">kValidateErrorMaxProperties</link>);
1025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1026 
1027 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasDependencies_)&#32;{
1028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1ab3cf4b9fe450ff76f52d70a2888f0342">StartDependencyErrors</link>();
1029 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;sourceIndex&#32;=&#32;0;&#32;sourceIndex&#32;&lt;&#32;propertyCount_;&#32;sourceIndex++)&#32;{
1030 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Property&amp;&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>&#32;=&#32;properties_[sourceIndex];
1031 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>[sourceIndex])&#32;{
1032 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.dependencies)&#32;{
1033 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1ae312aea74718dda0411af023c0c78ef6">StartMissingDependentProperties</link>();
1034 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;targetIndex&#32;=&#32;0;&#32;targetIndex&#32;&lt;&#32;propertyCount_;&#32;targetIndex++)
1035 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.dependencies[targetIndex]&#32;&amp;&amp;&#32;!context.<link linkend="_structinternal_1_1_schema_validation_context_1a3e58787498af48ecceb97c47fb592d47">propertyExist</link>[targetIndex])
1036 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a2e9e0b2f67467a62642e37e839f689c5">AddMissingDependentProperty</link>(properties_[targetIndex].name);
1037 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a05af3199b8011a3476dfd238fa958213">EndMissingDependentProperties</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.name);
1038 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1039 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.dependenciesSchema)&#32;{
1040 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_i_schema_validator">ISchemaValidator</link>*&#32;dependenciesValidator&#32;=&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a1d215b80511f602ebece5c83b875cdd9">validators</link>[<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.dependenciesValidatorIndex];
1041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!dependenciesValidator-&gt;<link linkend="_classinternal_1_1_i_schema_validator_1a94f61f24b1447497279ef12ee0127285">IsValid</link>())
1042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a4b43ba6e6a9c544dfc631297104dc508">AddDependencySchemaError</link>(<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>.name,&#32;dependenciesValidator);
1043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a817c1e3e9cc62603997a2fcdc564820b">EndDependencyErrors</link>())
1047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2f81ab754a29330709c24110a2e895c8">kValidateErrorDependencies</link>);
1048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1049 
1050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1051 &#32;&#32;&#32;&#32;}
1052 
1053 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a094fbac3c04493aae304ef3011866f34">StartArray</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1a213dd0b8a746b1548bb28b12a17c2c1e">arrayElementIndex</link>&#32;=&#32;0;
1055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1af18fc4ef754e8a52732e152854f06341">inArray</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;&#32;<emphasis role="comment">//&#32;Ensure&#32;we&#32;note&#32;that&#32;we&#32;are&#32;in&#32;an&#32;array</emphasis>
1056 
1057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kArraySchemaType)))&#32;{
1058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetArrayString());
1059 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
1060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1061 
1062 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;CreateParallelValidator(context);
1063 &#32;&#32;&#32;&#32;}
1064 
1065 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a7cae24caa7c2de31e7c5c07d23c737b3">EndArray</link>(<link linkend="_structinternal_1_1_schema_validation_context">Context</link>&amp;&#32;context,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;elementCount)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1066 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1af18fc4ef754e8a52732e152854f06341">inArray</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;
1067 
1068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elementCount&#32;&lt;&#32;minItems_)&#32;{
1069 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1afc144690ba0e24636a72f541efd32c3b">TooFewItems</link>(elementCount,&#32;minItems_);
1070 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aad31b3292fb68a14016514736b076200c">kValidateErrorMinItems</link>);
1071 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1072 
1073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(elementCount&#32;&gt;&#32;maxItems_)&#32;{
1074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.<link linkend="_structinternal_1_1_schema_validation_context_1ad85d300184c10bf45b0852b6b26d118d">error_handler</link>.<link linkend="_classinternal_1_1_i_validation_error_handler_1a9371ca15622897a429971f69c07c47ef">TooManyItems</link>(elementCount,&#32;maxItems_);
1075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa9acbcf73fe6a65bd23108a2dbc945cff">kValidateErrorMaxItems</link>);
1076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1077 
1078 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1079 &#32;&#32;&#32;&#32;}
1080 
1081 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a8976b6d7e2a885483d0b51d941019340">ValueType</link>&amp;&#32;<link linkend="_classinternal_1_1_schema_1abfd6b8cdee14e45a45ae4c557357071b">GetValidateErrorKeyword</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;validateErrorCode)&#32;{
1082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">switch</emphasis>&#32;(validateErrorCode)&#32;{
1083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aab8cf6f0be86047d0bf345f25dac31f4c">kValidateErrorMultipleOf</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMultipleOfString();
1084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMaximumString();
1085 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMaximumString();&#32;<emphasis role="comment">//&#32;Same</emphasis>
1086 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMinimumString();
1087 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMinimumString();&#32;<emphasis role="comment">//&#32;Same</emphasis>
1088 
1089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa6825de2427572de01bd121c9fffcee76">kValidateErrorMaxLength</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMaxLengthString();
1090 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa58e6e01eef18ea0af4763abd84128790">kValidateErrorMinLength</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMinLengthString();
1091 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa86bde2af1a18d73a533ba8e2f5971879">kValidateErrorPattern</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetPatternString();
1092 
1093 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa9acbcf73fe6a65bd23108a2dbc945cff">kValidateErrorMaxItems</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMaxItemsString();
1094 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aad31b3292fb68a14016514736b076200c">kValidateErrorMinItems</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMinItemsString();
1095 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa35159c760856953cbd62258140d8d498">kValidateErrorUniqueItems</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetUniqueItemsString();
1096 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa17861cca8a0ab2a0685f3b7804f67303">kValidateErrorAdditionalItems</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetAdditionalItemsString();
1097 
1098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa179693cbb5ea15f0242e37588e99edf6">kValidateErrorMaxProperties</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMaxPropertiesString();
1099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa017c1ccb7febfaff42115fc256753fb6">kValidateErrorMinProperties</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetMinPropertiesString();
1100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2dc93a549f16b70911e6399c61a1aec4">kValidateErrorRequired</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetRequiredString();
1101 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aae02b299a3f5db48400e7c1987201d2ca">kValidateErrorAdditionalProperties</link>:&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetAdditionalPropertiesString();
1102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaecdd1b884cbacca0213b36def4e1feaf">kValidateErrorPatternProperties</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetPatternPropertiesString();
1103 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2f81ab754a29330709c24110a2e895c8">kValidateErrorDependencies</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetDependenciesString();
1104 
1105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3c12e9cbc8a479b77776ceccbda4c289">kValidateErrorEnum</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetEnumString();
1106 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetTypeString();
1107 
1108 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa56466697ca410e5ddc2c7fabe11f3132">kValidateErrorOneOf</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetOneOfString();
1109 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1bbc2293748b2e80415c77c7a6a069f9">kValidateErrorOneOfMatch</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetOneOfString();&#32;<emphasis role="comment">//&#32;Same</emphasis>
1110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaef48f9db2382e3308b823f078c73bce4">kValidateErrorAllOf</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetAllOfString();
1111 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa7b821605f3eb4ec77e2c42204b3957cf">kValidateErrorAnyOf</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetAnyOfString();
1112 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">case</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aadd079998cffcae99da28675a5742327d">kValidateErrorNot</link>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetNotString();
1113 
1114 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">default</emphasis>:&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetNullString();
1115 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1116 &#32;&#32;&#32;&#32;}
1117 
1118 
1119 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;functions&#32;for&#32;string&#32;literal&#32;according&#32;to&#32;Ch</emphasis>
1120 <emphasis role="preprocessor">#define&#32;RAPIDJSON_STRING_(name,&#32;...)&#32;\</emphasis>
1121 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;const&#32;ValueType&amp;&#32;Get##name##String()&#32;{\</emphasis>
1122 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;const&#32;Ch&#32;s[]&#32;=&#32;{&#32;__VA_ARGS__,&#32;&apos;\0&apos;&#32;};\</emphasis>
1123 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;const&#32;ValueType&#32;v(s,&#32;static_cast&lt;SizeType&gt;(sizeof(s)&#32;/&#32;sizeof(Ch)&#32;-&#32;1));\</emphasis>
1124 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;v;\</emphasis>
1125 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
1126 
1127 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(<link linkend="_classinternal_1_1_schema_1acd4fa9c33c9ef22a26ba160fdc1d78da">Null</link>,&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;u&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;l&apos;</emphasis>)
1128 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Boolean,&#32;&apos;b&apos;,&#32;&apos;o&apos;,&#32;&apos;o&apos;,&#32;&apos;l&apos;,&#32;&apos;e&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;n&apos;)
1129 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Object,&#32;&apos;o&apos;,&#32;&apos;b&apos;,&#32;&apos;j&apos;,&#32;&apos;e&apos;,&#32;&apos;c&apos;,&#32;&apos;t&apos;)
1130 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Array,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;r&apos;,&#32;&apos;r&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;y&apos;)
1131 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(<link linkend="_classinternal_1_1_schema_1a8e652cbc67fa34181c3fd813c38d5280">String</link>,&#32;&apos;s&apos;,&#32;&apos;t&apos;,&#32;&apos;r&apos;,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;g&apos;)
1132 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Number,&#32;&apos;n&apos;,&#32;&apos;u&apos;,&#32;&apos;m&apos;,&#32;&apos;b&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;)
1133 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Integer,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;g&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;)
1134 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link>,&#32;&apos;t&apos;,&#32;&apos;y&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;)
1135 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Enum,&#32;&apos;e&apos;,&#32;&apos;n&apos;,&#32;&apos;u&apos;,&#32;&apos;m&apos;)
1136 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(AllOf,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;l&apos;,&#32;&apos;l&apos;,&#32;&apos;O&apos;,&#32;&apos;f&apos;)
1137 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(AnyOf,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;n&apos;,&#32;&apos;y&apos;,&#32;&apos;O&apos;,&#32;&apos;f&apos;)
1138 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(OneOf,&#32;&apos;o&apos;,&#32;&apos;n&apos;,&#32;&apos;e&apos;,&#32;&apos;O&apos;,&#32;&apos;f&apos;)
1139 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Not,&#32;&apos;n&apos;,&#32;&apos;o&apos;,&#32;&apos;t&apos;)
1140 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Properties,&#32;&apos;p&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;)
1141 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Required,&#32;&apos;r&apos;,&#32;&apos;e&apos;,&#32;&apos;q&apos;,&#32;&apos;u&apos;,&#32;&apos;i&apos;,&#32;&apos;r&apos;,&#32;&apos;e&apos;,&#32;&apos;d&apos;)
1142 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Dependencies,&#32;&apos;d&apos;,&#32;&apos;e&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;,&#32;&apos;n&apos;,&#32;&apos;d&apos;,&#32;&apos;e&apos;,&#32;&apos;n&apos;,&#32;&apos;c&apos;,&#32;&apos;i&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;)
1143 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(PatternProperties,&#32;&apos;p&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;t&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;n&apos;,&#32;&apos;P&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;)
1144 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(AdditionalProperties,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;d&apos;,&#32;&apos;d&apos;,&#32;&apos;i&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;o&apos;,&#32;&apos;n&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;l&apos;,&#32;&apos;P&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;)
1145 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(MinProperties,&#32;&apos;m&apos;,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;P&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;)
1146 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(MaxProperties,&#32;&apos;m&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;x&apos;,&#32;&apos;P&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;)
1147 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Items,&#32;&apos;i&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;m&apos;,&#32;&apos;s&apos;)
1148 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(MinItems,&#32;&apos;m&apos;,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;I&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;m&apos;,&#32;&apos;s&apos;)
1149 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(MaxItems,&#32;&apos;m&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;x&apos;,&#32;&apos;I&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;m&apos;,&#32;&apos;s&apos;)
1150 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(AdditionalItems,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;d&apos;,&#32;&apos;d&apos;,&#32;&apos;i&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;o&apos;,&#32;&apos;n&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;l&apos;,&#32;&apos;I&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;m&apos;,&#32;&apos;s&apos;)
1151 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(UniqueItems,&#32;&apos;u&apos;,&#32;&apos;n&apos;,&#32;&apos;i&apos;,&#32;&apos;q&apos;,&#32;&apos;u&apos;,&#32;&apos;e&apos;,&#32;&apos;I&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;m&apos;,&#32;&apos;s&apos;)
1152 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(MinLength,&#32;&apos;m&apos;,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;L&apos;,&#32;&apos;e&apos;,&#32;&apos;n&apos;,&#32;&apos;g&apos;,&#32;&apos;t&apos;,&#32;&apos;h&apos;)
1153 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(MaxLength,&#32;&apos;m&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;x&apos;,&#32;&apos;L&apos;,&#32;&apos;e&apos;,&#32;&apos;n&apos;,&#32;&apos;g&apos;,&#32;&apos;t&apos;,&#32;&apos;h&apos;)
1154 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Pattern,&#32;&apos;p&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;t&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;n&apos;)
1155 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Minimum,&#32;&apos;m&apos;,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;i&apos;,&#32;&apos;m&apos;,&#32;&apos;u&apos;,&#32;&apos;m&apos;)
1156 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Maximum,&#32;&apos;m&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;x&apos;,&#32;&apos;i&apos;,&#32;&apos;m&apos;,&#32;&apos;u&apos;,&#32;&apos;m&apos;)
1157 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(ExclusiveMinimum,&#32;&apos;e&apos;,&#32;&apos;x&apos;,&#32;&apos;c&apos;,&#32;&apos;l&apos;,&#32;&apos;u&apos;,&#32;&apos;s&apos;,&#32;&apos;i&apos;,&#32;&apos;v&apos;,&#32;&apos;e&apos;,&#32;&apos;M&apos;,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;i&apos;,&#32;&apos;m&apos;,&#32;&apos;u&apos;,&#32;&apos;m&apos;)
1158 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(ExclusiveMaximum,&#32;&apos;e&apos;,&#32;&apos;x&apos;,&#32;&apos;c&apos;,&#32;&apos;l&apos;,&#32;&apos;u&apos;,&#32;&apos;s&apos;,&#32;&apos;i&apos;,&#32;&apos;v&apos;,&#32;&apos;e&apos;,&#32;&apos;M&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;x&apos;,&#32;&apos;i&apos;,&#32;&apos;m&apos;,&#32;&apos;u&apos;,&#32;&apos;m&apos;)
1159 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(MultipleOf,&#32;&apos;m&apos;,&#32;&apos;u&apos;,&#32;&apos;l&apos;,&#32;&apos;t&apos;,&#32;&apos;i&apos;,&#32;&apos;p&apos;,&#32;&apos;l&apos;,&#32;&apos;e&apos;,&#32;&apos;O&apos;,&#32;&apos;f&apos;)
1160 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(DefaultValue,&#32;&apos;d&apos;,&#32;&apos;e&apos;,&#32;&apos;f&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;u&apos;,&#32;&apos;l&apos;,&#32;&apos;t&apos;)
1161 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Ref,&#32;&apos;$&apos;,&#32;&apos;r&apos;,&#32;&apos;e&apos;,&#32;&apos;f&apos;)
1162 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Id,&#32;&apos;i&apos;,&#32;&apos;d&apos;)
1163 
1164 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(SchemeEnd,&#32;&apos;:&apos;)
1165 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(AuthStart,&#32;&apos;/&apos;,&#32;&apos;/&apos;)
1166 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(QueryStart,&#32;&apos;?&apos;)
1167 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(FragStart,&#32;&apos;<emphasis role="preprocessor">#&apos;)</emphasis>
1168 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Slash,&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)
1169 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Dot,&#32;&apos;.&apos;)
1170 
1171 <emphasis role="preprocessor">#undef&#32;RAPIDJSON_STRING_</emphasis>
1172 
1173 <emphasis role="keyword">private</emphasis>:
1174 &#32;&#32;&#32;&#32;<emphasis role="keyword">enum</emphasis>&#32;SchemaValueType&#32;{
1175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kNullSchemaType,
1176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kBooleanSchemaType,
1177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kObjectSchemaType,
1178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kArraySchemaType,
1179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kStringSchemaType,
1180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kNumberSchemaType,
1181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kIntegerSchemaType,
1182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;kTotalSchemaType
1183 &#32;&#32;&#32;&#32;};
1184 
1185 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_USE_INTERNALREGEX</emphasis>
1186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_generic_regex">internal::GenericRegex&lt;EncodingType, AllocatorType&gt;</link>&#32;RegexType;
1187 <emphasis role="preprocessor">#elif&#32;RAPIDJSON_SCHEMA_USE_STDREGEX</emphasis>
1188 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::basic_regex&lt;Ch&gt;&#32;RegexType;
1189 <emphasis role="preprocessor">#else</emphasis>
1190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;RegexType;
1191 <emphasis role="preprocessor">#endif</emphasis>
1192 
1193 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SchemaArray&#32;{
1194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SchemaArray()&#32;:&#32;schemas(),&#32;count()&#32;{}
1195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~SchemaArray()&#32;{&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(schemas);&#32;}
1196 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>**&#32;schemas;
1197 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;begin;&#32;<emphasis role="comment">//&#32;begin&#32;index&#32;of&#32;context.validators</emphasis>
1198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count;
1199 &#32;&#32;&#32;&#32;};
1200 
1201 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;V1,&#32;<emphasis role="keyword">typename</emphasis>&#32;V2&gt;
1202 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddUniqueElement(V1&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;V2&amp;&#32;v)&#32;{
1203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;V1::ConstValueIterator&#32;itr&#32;=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>.Begin();&#32;itr&#32;!=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>.End();&#32;++itr)
1204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(*itr&#32;==&#32;v)
1205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
1206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;V1&#32;c(v,&#32;*allocator_);
1207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>.PushBack(c,&#32;*allocator_);
1208 &#32;&#32;&#32;&#32;}
1209 
1210 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;GetMember(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;name)&#32;{
1211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::ConstMemberIterator</link>&#32;itr&#32;=&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.FindMember(name);
1212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;itr&#32;!=&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.MemberEnd()&#32;?&#32;&amp;(itr-&gt;value)&#32;:&#32;0;
1213 &#32;&#32;&#32;&#32;}
1214 
1215 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AssignIfExist(<emphasis role="keywordtype">bool</emphasis>&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;name)&#32;{
1216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;name))
1217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsBool())
1218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;v-&gt;GetBool();
1219 &#32;&#32;&#32;&#32;}
1220 
1221 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;AssignIfExist(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&amp;&#32;out,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;name)&#32;{
1222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;name))
1223 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsUint64()&#32;&amp;&amp;&#32;v-&gt;GetUint64()&#32;&lt;=&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(~0))
1224 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(v-&gt;GetUint64());
1225 &#32;&#32;&#32;&#32;}
1226 
1227 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AssignIfExist(SchemaArray&amp;&#32;out,&#32;SchemaDocumentType&amp;&#32;schemaDocument,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&amp;&#32;p,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;name,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;document)&#32;{
1228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;v&#32;=&#32;GetMember(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>,&#32;name))&#32;{
1229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;IsArray()&#32;&amp;&amp;&#32;v-&gt;Size()&#32;&gt;&#32;0)&#32;{
1230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&#32;q&#32;=&#32;p.Append(name,&#32;allocator_);
1231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out.count&#32;=&#32;v-&gt;Size();
1232 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out.schemas&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keyword">const&#32;</emphasis><link linkend="_class_schema">Schema</link>**<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(out.count&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_schema">Schema</link>*)));
1233 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memset(out.schemas,&#32;0,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_schema">Schema</link>*)*&#32;out.count);
1234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;out.count;&#32;i++)
1235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument.CreateSchema(&amp;out.schemas[i],&#32;q.Append(i,&#32;allocator_),&#32;(*v)[i],&#32;document,&#32;id_);
1236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;out.begin&#32;=&#32;validatorCount_;
1237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;validatorCount_&#32;+=&#32;out.count;
1238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1240 &#32;&#32;&#32;&#32;}
1241 
1242 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_USE_INTERNALREGEX</emphasis>
1243 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType&gt;
1244 &#32;&#32;&#32;&#32;RegexType*&#32;CreatePattern(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.IsString())&#32;{
1246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegexType*&#32;r&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(RegexType)))&#32;RegexType(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.GetString(),&#32;allocator_);
1247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!r-&gt;IsValid())&#32;{
1248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r-&gt;~RegexType();
1249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(r);
1250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;r&#32;=&#32;0;
1251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1252 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r;
1253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1255 &#32;&#32;&#32;&#32;}
1256 
1257 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsPatternMatch(<emphasis role="keyword">const</emphasis>&#32;RegexType*&#32;pattern,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>&#32;*str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)&#32;{
1258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GenericRegexSearch&lt;RegexType&gt;&#32;rs(*pattern);
1259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;rs.Search(str);
1260 &#32;&#32;&#32;&#32;}
1261 <emphasis role="preprocessor">#elif&#32;RAPIDJSON_SCHEMA_USE_STDREGEX</emphasis>
1262 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType&gt;
1263 &#32;&#32;&#32;&#32;RegexType*&#32;CreatePattern(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)&#32;{
1264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.IsString())&#32;{
1265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegexType&#32;*r&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>RegexType*<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(RegexType)));
1266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">try</emphasis>&#32;{
1267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;(r)&#32;RegexType(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.GetString(),&#32;std::size_t(<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>.GetStringLength()),&#32;std::regex_constants::ECMAScript);
1268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">catch</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;std::regex_error&amp;)&#32;{
1270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(r);
1271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1274 &#32;&#32;&#32;&#32;}
1275 
1276 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsPatternMatch(<emphasis role="keyword">const</emphasis>&#32;RegexType*&#32;pattern,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>&#32;*str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length)&#32;{
1277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::match_results&lt;const&#32;Ch*&gt;&#32;r;
1278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::regex_search(str,&#32;str&#32;+&#32;length,&#32;r,&#32;*pattern);
1279 &#32;&#32;&#32;&#32;}
1280 <emphasis role="preprocessor">#else</emphasis>
1281 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueType&gt;
1282 &#32;&#32;&#32;&#32;RegexType*&#32;CreatePattern(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;&#32;}
1283 
1284 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsPatternMatch(<emphasis role="keyword">const</emphasis>&#32;RegexType*,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>&#32;*,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;&#32;}
1285 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_SCHEMA_USE_STDREGEX</emphasis>
1286 
1287 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddType(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;type)&#32;{
1288 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;&#32;&#32;&#32;&#32;&#32;(type&#32;==&#32;GetNullString()&#32;&#32;&#32;)&#32;type_&#32;|=&#32;1&#32;&lt;&lt;&#32;kNullSchemaType;
1289 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;==&#32;GetBooleanString())&#32;type_&#32;|=&#32;1&#32;&lt;&lt;&#32;kBooleanSchemaType;
1290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;==&#32;GetObjectString()&#32;)&#32;type_&#32;|=&#32;1&#32;&lt;&lt;&#32;kObjectSchemaType;
1291 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;==&#32;GetArrayString()&#32;&#32;)&#32;type_&#32;|=&#32;1&#32;&lt;&lt;&#32;kArraySchemaType;
1292 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;==&#32;GetStringString()&#32;)&#32;type_&#32;|=&#32;1&#32;&lt;&lt;&#32;kStringSchemaType;
1293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;==&#32;GetIntegerString())&#32;type_&#32;|=&#32;1&#32;&lt;&lt;&#32;kIntegerSchemaType;
1294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type&#32;==&#32;GetNumberString()&#32;)&#32;type_&#32;|=&#32;(1&#32;&lt;&lt;&#32;kNumberSchemaType)&#32;|&#32;(1&#32;&lt;&lt;&#32;kIntegerSchemaType);
1295 &#32;&#32;&#32;&#32;}
1296 
1297 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CreateParallelValidator(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1298 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(enum_&#32;||&#32;context.arrayUniqueness)
1299 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.hasher&#32;=&#32;context.factory.CreateHasher();
1300 
1301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(validatorCount_)&#32;{
1302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(context.validators&#32;==&#32;0);
1303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.validators&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ISchemaValidator**<emphasis role="keyword">&gt;</emphasis>(context.factory.MallocState(<emphasis role="keyword">sizeof</emphasis>(ISchemaValidator*)&#32;*&#32;validatorCount_));
1304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.validatorCount&#32;=&#32;validatorCount_;
1305 
1306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Always&#32;return&#32;after&#32;first&#32;failure&#32;for&#32;these&#32;sub-validators</emphasis>
1307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(allOf_.schemas)
1308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchemaValidators(context,&#32;allOf_,&#32;<emphasis role="keyword">false</emphasis>);
1309 
1310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(anyOf_.schemas)
1311 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchemaValidators(context,&#32;anyOf_,&#32;<emphasis role="keyword">false</emphasis>);
1312 
1313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(oneOf_.schemas)
1314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchemaValidators(context,&#32;oneOf_,&#32;<emphasis role="keyword">false</emphasis>);
1315 
1316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(not_)
1317 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.validators[notValidatorIndex_]&#32;=&#32;context.factory.CreateSchemaValidator(*not_,&#32;<emphasis role="keyword">false</emphasis>);
1318 
1319 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasSchemaDependencies_)&#32;{
1320 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;propertyCount_;&#32;i++)
1321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(properties_[i].dependenciesSchema)
1322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.validators[properties_[i].dependenciesValidatorIndex]&#32;=&#32;context.factory.CreateSchemaValidator(*properties_[i].dependenciesSchema,&#32;<emphasis role="keyword">false</emphasis>);
1323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1324 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1325 
1326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1327 &#32;&#32;&#32;&#32;}
1328 
1329 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CreateSchemaValidators(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context,&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaArray&amp;&#32;schemas,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inheritContinueOnErrors)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;schemas.count;&#32;i++)
1331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.validators[schemas.begin&#32;+&#32;i]&#32;=&#32;context.factory.CreateSchemaValidator(*schemas.schemas[i],&#32;inheritContinueOnErrors);
1332 &#32;&#32;&#32;&#32;}
1333 
1334 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;O(n)</emphasis>
1335 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;FindPropertyIndex(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;name,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>*&#32;outIndex)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1336 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len&#32;=&#32;name.GetStringLength();
1337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>*&#32;str&#32;=&#32;name.GetString();
1338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index&#32;=&#32;0;&#32;index&#32;&lt;&#32;propertyCount_;&#32;index++)
1339 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(properties_[index].name.GetStringLength()&#32;==&#32;len&#32;&amp;&amp;
1340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(std::memcmp(properties_[index].name.GetString(),&#32;str,&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_schema_1a98043fca39adbf8b42e7472e3d80d6fa">Ch</link>)&#32;*&#32;len)&#32;==&#32;0))
1341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{
1342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*outIndex&#32;=&#32;index;
1343 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1346 &#32;&#32;&#32;&#32;}
1347 
1348 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckInt(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context,&#32;<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;i)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;kIntegerSchemaType)&#32;|&#32;(1&#32;&lt;&lt;&#32;kNumberSchemaType))))&#32;{
1350 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetIntegerString());
1351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
1352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1353 
1354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!minimum_.IsNull())&#32;{
1355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minimum_.IsInt64())&#32;{
1356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exclusiveMinimum_&#32;?&#32;i&#32;&lt;=&#32;minimum_.GetInt64()&#32;:&#32;i&#32;&lt;&#32;minimum_.GetInt64())&#32;{
1357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.BelowMinimum(i,&#32;minimum_,&#32;exclusiveMinimum_);
1358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMinimum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>);
1359 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minimum_.IsUint64())&#32;{
1362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.BelowMinimum(i,&#32;minimum_,&#32;exclusiveMinimum_);
1363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMinimum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>);&#32;<emphasis role="comment">//&#32;i&#32;&lt;=&#32;max(int64_t)&#32;&lt;&#32;minimum.GetUint64()</emphasis>
1364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckDoubleMinimum(context,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i)))
1366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1368 
1369 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!maximum_.IsNull())&#32;{
1370 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(maximum_.IsInt64())&#32;{
1371 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exclusiveMaximum_&#32;?&#32;i&#32;&gt;=&#32;maximum_.GetInt64()&#32;:&#32;i&#32;&gt;&#32;maximum_.GetInt64())&#32;{
1372 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.AboveMaximum(i,&#32;maximum_,&#32;exclusiveMaximum_);
1373 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMaximum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>);
1374 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(maximum_.IsUint64())&#32;{&#32;}
1377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;do&#32;nothing&#32;*/</emphasis>&#32;<emphasis role="comment">//&#32;i&#32;&lt;=&#32;max(int64_t)&#32;&lt;&#32;maximum_.GetUint64()</emphasis>
1378 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckDoubleMaximum(context,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i)))
1379 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1380 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1381 
1382 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!multipleOf_.IsNull())&#32;{
1383 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multipleOf_.IsUint64())&#32;{
1384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(i&#32;&gt;=&#32;0&#32;?&#32;i&#32;:&#32;-i)&#32;%&#32;multipleOf_.GetUint64()&#32;!=&#32;0)&#32;{
1385 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.NotMultipleOf(i,&#32;multipleOf_);
1386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aab8cf6f0be86047d0bf345f25dac31f4c">kValidateErrorMultipleOf</link>);
1387 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1388 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckDoubleMultipleOf(context,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i)))
1390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1392 
1393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1394 &#32;&#32;&#32;&#32;}
1395 
1396 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckUint(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context,&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;i)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!(type_&#32;&amp;&#32;((1&#32;&lt;&lt;&#32;kIntegerSchemaType)&#32;|&#32;(1&#32;&lt;&lt;&#32;kNumberSchemaType))))&#32;{
1398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;DisallowedType(context,&#32;GetIntegerString());
1399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
1400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1401 
1402 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!minimum_.IsNull())&#32;{
1403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minimum_.IsUint64())&#32;{
1404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exclusiveMinimum_&#32;?&#32;i&#32;&lt;=&#32;minimum_.GetUint64()&#32;:&#32;i&#32;&lt;&#32;minimum_.GetUint64())&#32;{
1405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.BelowMinimum(i,&#32;minimum_,&#32;exclusiveMinimum_);
1406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMinimum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>);
1407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(minimum_.IsInt64())
1410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;do&#32;nothing&#32;*/</emphasis>;&#32;<emphasis role="comment">//&#32;i&#32;&gt;=&#32;0&#32;&gt;&#32;minimum.Getint64()</emphasis>
1411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckDoubleMinimum(context,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i)))
1412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1414 
1415 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!maximum_.IsNull())&#32;{
1416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(maximum_.IsUint64())&#32;{
1417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exclusiveMaximum_&#32;?&#32;i&#32;&gt;=&#32;maximum_.GetUint64()&#32;:&#32;i&#32;&gt;&#32;maximum_.GetUint64())&#32;{
1418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.AboveMaximum(i,&#32;maximum_,&#32;exclusiveMaximum_);
1419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMaximum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>);
1420 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1421 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1422 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(maximum_.IsInt64())&#32;{
1423 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.AboveMaximum(i,&#32;maximum_,&#32;exclusiveMaximum_);
1424 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMaximum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>);&#32;<emphasis role="comment">//&#32;i&#32;&gt;=&#32;0&#32;&gt;&#32;maximum_</emphasis>
1425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1426 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckDoubleMaximum(context,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i)))
1427 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1428 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1429 
1430 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!multipleOf_.IsNull())&#32;{
1431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(multipleOf_.IsUint64())&#32;{
1432 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(i&#32;%&#32;multipleOf_.GetUint64()&#32;!=&#32;0)&#32;{
1433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.NotMultipleOf(i,&#32;multipleOf_);
1434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aab8cf6f0be86047d0bf345f25dac31f4c">kValidateErrorMultipleOf</link>);
1435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1436 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1437 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CheckDoubleMultipleOf(context,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">double</emphasis><emphasis role="keyword">&gt;</emphasis>(i)))
1438 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1440 
1441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1442 &#32;&#32;&#32;&#32;}
1443 
1444 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckDoubleMinimum(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context,&#32;<emphasis role="keywordtype">double</emphasis>&#32;d)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exclusiveMinimum_&#32;?&#32;d&#32;&lt;=&#32;minimum_.GetDouble()&#32;:&#32;d&#32;&lt;&#32;minimum_.GetDouble())&#32;{
1446 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.BelowMinimum(d,&#32;minimum_,&#32;exclusiveMinimum_);
1447 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMinimum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>);
1448 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1450 &#32;&#32;&#32;&#32;}
1451 
1452 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckDoubleMaximum(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context,&#32;<emphasis role="keywordtype">double</emphasis>&#32;d)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exclusiveMaximum_&#32;?&#32;d&#32;&gt;=&#32;maximum_.GetDouble()&#32;:&#32;d&#32;&gt;&#32;maximum_.GetDouble())&#32;{
1454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.AboveMaximum(d,&#32;maximum_,&#32;exclusiveMaximum_);
1455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(exclusiveMaximum_&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>);
1456 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1457 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1458 &#32;&#32;&#32;&#32;}
1459 
1460 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;CheckDoubleMultipleOf(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context,&#32;<emphasis role="keywordtype">double</emphasis>&#32;d)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1461 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;=&#32;std::abs(d),&#32;b&#32;=&#32;std::abs(multipleOf_.GetDouble());
1462 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;q&#32;=&#32;std::floor(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;/&#32;b);
1463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">double</emphasis>&#32;r&#32;=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;-&#32;q&#32;*&#32;b;
1464 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(r&#32;&gt;&#32;0.0)&#32;{
1465 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;context.error_handler.NotMultipleOf(d,&#32;multipleOf_);
1466 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aab8cf6f0be86047d0bf345f25dac31f4c">kValidateErrorMultipleOf</link>);
1467 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1468 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1469 &#32;&#32;&#32;&#32;}
1470 
1471 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;DisallowedType(<link linkend="_classinternal_1_1_schema_1ac3f54abfefe300c5610c1205869cfd66">Context</link>&amp;&#32;context,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;actualType)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a2f8b106324878cdfc614df855e8bc6cc">ErrorHandler</link>&amp;&#32;eh&#32;=&#32;context.error_handler;
1473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eh.StartDisallowedType();
1474 
1475 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kNullSchemaType))&#32;eh.AddExpectedType(GetNullString());
1476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kBooleanSchemaType))&#32;eh.AddExpectedType(GetBooleanString());
1477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kObjectSchemaType))&#32;eh.AddExpectedType(GetObjectString());
1478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kArraySchemaType))&#32;eh.AddExpectedType(GetArrayString());
1479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kStringSchemaType))&#32;eh.AddExpectedType(GetStringString());
1480 
1481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kNumberSchemaType))&#32;eh.AddExpectedType(GetNumberString());
1482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(type_&#32;&amp;&#32;(1&#32;&lt;&lt;&#32;kIntegerSchemaType))&#32;eh.AddExpectedType(GetIntegerString());
1483 
1484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;eh.EndDisallowedType(actualType);
1485 &#32;&#32;&#32;&#32;}
1486 
1487 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>Property&#32;{
1488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Property()&#32;:&#32;schema(),&#32;dependenciesSchema(),&#32;dependenciesValidatorIndex(),&#32;dependencies(),&#32;required(false)&#32;{}
1489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~Property()&#32;{&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(dependencies);&#32;}
1490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1ab3a07540a27d4cc2b0e260290c5c5771">SValue</link>&#32;name;
1491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;schema;
1492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;dependenciesSchema;
1493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;dependenciesValidatorIndex;
1494 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>*&#32;dependencies;
1495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;required;
1496 &#32;&#32;&#32;&#32;};
1497 
1498 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>PatternProperty&#32;{
1499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PatternProperty()&#32;:&#32;schema(),&#32;pattern()&#32;{}
1500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~PatternProperty()&#32;{
1501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(pattern)&#32;{
1502 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;pattern-&gt;~RegexType();
1503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">AllocatorType::Free</link>(pattern);
1504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1506 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;schema;
1507 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RegexType*&#32;pattern;
1508 &#32;&#32;&#32;&#32;};
1509 
1510 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a7af392edd81e610754cd2e6b4f82761c">AllocatorType</link>*&#32;allocator_;
1511 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1ab3a07540a27d4cc2b0e260290c5c5771">SValue</link>&#32;uri_;
1512 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a3b6cd85c3eeebe870cf8017d9d131d35">UriType</link>&#32;id_;
1513 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1a13d7dbba6e4a77b10862546777c5aae8">PointerType</link>&#32;pointer_;
1514 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;typeless_;
1515 &#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>*&#32;enum_;
1516 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;enumCount_;
1517 &#32;&#32;&#32;&#32;SchemaArray&#32;allOf_;
1518 &#32;&#32;&#32;&#32;SchemaArray&#32;anyOf_;
1519 &#32;&#32;&#32;&#32;SchemaArray&#32;oneOf_;
1520 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;not_;
1521 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;type_;&#32;<emphasis role="comment">//&#32;bitmask&#32;of&#32;kSchemaType</emphasis>
1522 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;validatorCount_;
1523 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;notValidatorIndex_;
1524 
1525 &#32;&#32;&#32;&#32;Property*&#32;properties_;
1526 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;additionalPropertiesSchema_;
1527 &#32;&#32;&#32;&#32;PatternProperty*&#32;patternProperties_;
1528 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;patternPropertyCount_;
1529 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;propertyCount_;
1530 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;minProperties_;
1531 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;maxProperties_;
1532 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;additionalProperties_;
1533 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasDependencies_;
1534 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasRequired_;
1535 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;hasSchemaDependencies_;
1536 
1537 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;additionalItemsSchema_;
1538 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>*&#32;itemsList_;
1539 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema_1ac2556ebf7a7db971e1c1c0f76eb5786e">SchemaType</link>**&#32;itemsTuple_;
1540 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;itemsTupleCount_;
1541 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;minItems_;
1542 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;maxItems_;
1543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;additionalItems_;
1544 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;uniqueItems_;
1545 
1546 &#32;&#32;&#32;&#32;RegexType*&#32;pattern_;
1547 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;minLength_;
1548 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;maxLength_;
1549 
1550 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1ab3a07540a27d4cc2b0e260290c5c5771">SValue</link>&#32;minimum_;
1551 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1ab3a07540a27d4cc2b0e260290c5c5771">SValue</link>&#32;maximum_;
1552 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_schema_1ab3a07540a27d4cc2b0e260290c5c5771">SValue</link>&#32;multipleOf_;
1553 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusiveMinimum_;
1554 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusiveMaximum_;
1555 
1556 &#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;defaultValueLength_;
1557 };
1558 
1559 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;Stack,&#32;<emphasis role="keyword">typename</emphasis>&#32;Ch&gt;
1560 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinternal_1_1_token_helper">TokenHelper</link>&#32;{
1561 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structinternal_1_1_token_helper_1a7b1864bfe6d4014ba7a5114acb26b3ae">AppendIndexToken</link>(<link linkend="_classinternal_1_1_stack">Stack</link>&amp;&#32;documentStack,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index)&#32;{
1562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack.template&#32;Push&lt;Ch&gt;()&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
1563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;buffer[21];
1564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;length&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>((<emphasis role="keyword">sizeof</emphasis>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)&#32;==&#32;4&#32;?&#32;<link linkend="_namespaceinternal_1a90e3cb218b557548f361e99dc718b4b1">u32toa</link>(index,&#32;buffer)&#32;:&#32;<link linkend="_namespaceinternal_1a489150922c0320e4290b455bf3c6e36c">u64toa</link>(index,&#32;buffer))&#32;-&#32;buffer);
1565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keywordtype">size_t</emphasis>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;length;&#32;i++)
1566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack.template&#32;Push&lt;Ch&gt;()&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>Ch<emphasis role="keyword">&gt;</emphasis>(buffer[i]);
1567 &#32;&#32;&#32;&#32;}
1568 };
1569 
1570 <emphasis role="comment">//&#32;Partial&#32;specialized&#32;version&#32;for&#32;char&#32;to&#32;prevent&#32;buffer&#32;copying.</emphasis>
1571 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Stack&gt;
1572 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinternal_1_1_token_helper">TokenHelper</link>&lt;<link linkend="_classinternal_1_1_stack">Stack</link>,&#32;char&gt;&#32;{
1573 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_structinternal_1_1_token_helper_3_01_stack_00_01char_01_4_1a5d635eb7590e098c3340c9e5dcc72ae3">AppendIndexToken</link>(<link linkend="_classinternal_1_1_stack">Stack</link>&amp;&#32;documentStack,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index)&#32;{
1574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)&#32;==&#32;4)&#32;{
1575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer&#32;=&#32;documentStack.template&#32;Push&lt;char&gt;(1&#32;+&#32;10);&#32;<emphasis role="comment">//&#32;&apos;/&apos;&#32;+&#32;uint</emphasis>
1576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*buffer++&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
1577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;end&#32;=&#32;<link linkend="_namespaceinternal_1a90e3cb218b557548f361e99dc718b4b1">internal::u32toa</link>(index,&#32;buffer);
1578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack.template&#32;Pop&lt;char&gt;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(10&#32;-&#32;(end&#32;-&#32;buffer)));
1579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1580 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">char</emphasis>&#32;*buffer&#32;=&#32;documentStack.template&#32;Push&lt;char&gt;(1&#32;+&#32;20);&#32;<emphasis role="comment">//&#32;&apos;/&apos;&#32;+&#32;uint64</emphasis>
1582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*buffer++&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
1583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;end&#32;=&#32;<link linkend="_namespaceinternal_1a489150922c0320e4290b455bf3c6e36c">internal::u64toa</link>(index,&#32;buffer);
1584 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack.template&#32;Pop&lt;char&gt;(<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(20&#32;-&#32;(end&#32;-&#32;buffer)));
1585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1586 &#32;&#32;&#32;&#32;}
1587 };
1588 
1589 }&#32;<emphasis role="comment">//&#32;namespace&#32;internal</emphasis>
1590 
1592 <emphasis role="comment">//&#32;IGenericRemoteSchemaDocumentProvider</emphasis>
1593 
1594 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType&gt;
1595 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_i_generic_remote_schema_document_provider">IGenericRemoteSchemaDocumentProvider</link>&#32;{
1596 <emphasis role="keyword">public</emphasis>:
1597 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::Ch&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1acfcd5492c3df8ff56cd2d84d36cc0ceb">Ch</link>;
1598 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">SchemaDocumentType::ValueType</link>&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1aefaefd0d3fc938b6a81634edf1646205">ValueType</link>;
1599 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::AllocatorType&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1a79476f0e0f4d51ca7244685698dadbd0">AllocatorType</link>;
1600 
1601 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1a8465954888b127a2ef966ed01c3692bb">~IGenericRemoteSchemaDocumentProvider</link>()&#32;{}
1602 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType*&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1af348980f793d9777abb9b7b6afcbfd93">GetRemoteDocument</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1acfcd5492c3df8ff56cd2d84d36cc0ceb">Ch</link>*&#32;uri,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length)&#32;=&#32;0;
1603 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType*&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1aca9690363ebaa9e6dd3a0629b0cb31b2">GetRemoteDocument</link>(<link linkend="_class_generic_uri">GenericUri&lt;ValueType, AllocatorType&gt;</link>&#32;uri)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_i_generic_remote_schema_document_provider_1aca9690363ebaa9e6dd3a0629b0cb31b2">GetRemoteDocument</link>(uri.<link linkend="_class_generic_uri_1aa01f0e6bc010e7f41e91f11351b7a1a4">GetBaseString</link>(),&#32;uri.<link linkend="_class_generic_uri_1a87075603b398cc925d04180343443aca">GetBaseStringLength</link>());&#32;}
1604 };
1605 
1607 <emphasis role="comment">//&#32;GenericSchemaDocument</emphasis>
1608 
1610 
1618 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;ValueT,&#32;<emphasis role="keyword">typename</emphasis>&#32;Allocator&#32;=&#32;CrtAllocator&gt;
1619 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_schema_document">GenericSchemaDocument</link>&#32;{
1620 <emphasis role="keyword">public</emphasis>:
1621 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;ValueT&#32;<link linkend="_class_generic_schema_document_1ae246f1b6573a5a8a2c0d73d4eb64d53a">ValueType</link>;
1622 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_i_generic_remote_schema_document_provider">IGenericRemoteSchemaDocumentProvider&lt;GenericSchemaDocument&gt;</link>&#32;<link linkend="_class_generic_schema_document_1aa53ca323efce50f88aea6fa0d03e9785">IRemoteSchemaDocumentProviderType</link>;
1623 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&#32;<link linkend="_class_generic_schema_document_1ac0d88adf8c86917d8bc9563ffdab6a6d">AllocatorType</link>;
1624 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_classrapidjson_1_1_encoding">ValueType::EncodingType</link>&#32;<link linkend="_class_generic_schema_document_1ad0293c28c9ffe80ab1f8ec86efee35c8">EncodingType</link>;
1625 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;EncodingType::Ch&#32;<link linkend="_class_generic_schema_document_1ab1dec56a78b29649eb8e4b85b101ec7c">Ch</link>;
1626 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_schema">internal::Schema&lt;GenericSchemaDocument&gt;</link>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>;
1627 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_pointer">GenericPointer&lt;ValueType, Allocator&gt;</link>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>;
1628 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_value">GenericValue&lt;EncodingType, AllocatorType&gt;</link>&#32;<link linkend="_class_generic_schema_document_1af017bc68811efaabb9925b6db03fa3d5">SValue</link>;
1629 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_uri">GenericUri&lt;ValueType, Allocator&gt;</link>&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>;
1630 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_classinternal_1_1_schema">internal::Schema</link>&lt;<link linkend="_class_generic_schema_document">GenericSchemaDocument</link>&gt;;
1631 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
1632 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>;
1633 
1635 
1645 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>&#32;<link linkend="_class_generic_schema_document_1a302a3c608c137d5542105c8298bfba1f">GenericSchemaDocument</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1ae246f1b6573a5a8a2c0d73d4eb64d53a">ValueType</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1ab1dec56a78b29649eb8e4b85b101ec7c">Ch</link>*&#32;uri&#32;=&#32;0,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;uriLength&#32;=&#32;0,
1646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_i_generic_remote_schema_document_provider">IRemoteSchemaDocumentProviderType</link>*&#32;remoteProvider&#32;=&#32;0,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0,
1647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_pointer">PointerType</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>&#32;=&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>())&#32;:&#32;&#32;<emphasis role="comment">//&#32;PR&#32;#1393</emphasis>
1648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remoteProvider_(remoteProvider),
1649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_(allocator),
1650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownAllocator_(),
1651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root_(),
1652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeless_(),
1653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaMap_(allocator,&#32;kInitialSchemaMapSize),
1654 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaRef_(allocator,&#32;kInitialSchemaRefSize)
1655 &#32;&#32;&#32;&#32;{
1656 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!allocator_)
1657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownAllocator_&#32;=&#32;allocator_&#32;=&#32;<link linkend="_rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b">RAPIDJSON_NEW</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>)();
1658 
1659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1ab1dec56a78b29649eb8e4b85b101ec7c">Ch</link>&#32;noUri[1]&#32;=&#32;{0};
1660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri_.SetString(uri&#32;?&#32;uri&#32;:&#32;noUri,&#32;uriLength,&#32;*allocator_);
1661 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;docId_&#32;=&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(uri_,&#32;allocator_);
1662 
1663 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeless_&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classinternal_1_1_schema">SchemaType</link>*<emphasis role="keyword">&gt;</emphasis>(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_schema">SchemaType</link>)));
1664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(typeless_)&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>(<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>(),&#32;<link linkend="_class_generic_schema_document_1ae246f1b6573a5a8a2c0d73d4eb64d53a">ValueType</link>(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>).Move(),&#32;<link linkend="_class_generic_schema_document_1ae246f1b6573a5a8a2c0d73d4eb64d53a">ValueType</link>(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>).Move(),&#32;allocator_,&#32;docId_);
1665 
1666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Generate&#32;root&#32;schema,&#32;it&#32;will&#32;call&#32;CreateSchema()&#32;to&#32;create&#32;sub-schemas,</emphasis>
1667 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;And&#32;call&#32;HandleRefSchema()&#32;if&#32;there&#32;are&#32;$ref.</emphasis>
1668 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;PR&#32;#1393&#32;use&#32;input&#32;pointer&#32;if&#32;supplied</emphasis>
1669 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root_&#32;=&#32;typeless_;
1670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetTokenCount()&#32;==&#32;0)&#32;{
1671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchemaRecursive(&amp;root_,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;document,&#32;document,&#32;docId_);
1672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1ae246f1b6573a5a8a2c0d73d4eb64d53a">ValueType</link>*&#32;v&#32;=&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Get(document))&#32;{
1674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchema(&amp;root_,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;*v,&#32;document,&#32;docId_);
1675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1676 
1677 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(root_&#32;!=&#32;0);
1678 
1679 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaRef_.ShrinkToFit();&#32;<emphasis role="comment">//&#32;Deallocate&#32;all&#32;memory&#32;for&#32;ref</emphasis>
1680 &#32;&#32;&#32;&#32;}
1681 
1682 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11_RVALUE_REFS</emphasis>
1684 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1a302a3c608c137d5542105c8298bfba1f">GenericSchemaDocument</link>(<link linkend="_class_generic_schema_document">GenericSchemaDocument</link>&amp;&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
1685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;remoteProvider_(rhs.remoteProvider_),
1686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_(rhs.allocator_),
1687 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownAllocator_(rhs.ownAllocator_),
1688 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root_(rhs.root_),
1689 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeless_(rhs.typeless_),
1690 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaMap_(std::move(rhs.schemaMap_)),
1691 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaRef_(std::move(rhs.schemaRef_)),
1692 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;uri_(std::move(rhs.uri_)),
1693 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;docId_(rhs.docId_)
1694 &#32;&#32;&#32;&#32;{
1695 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.remoteProvider_&#32;=&#32;0;
1696 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.allocator_&#32;=&#32;0;
1697 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.ownAllocator_&#32;=&#32;0;
1698 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.typeless_&#32;=&#32;0;
1699 &#32;&#32;&#32;&#32;}
1700 <emphasis role="preprocessor">#endif</emphasis>
1701 
1703 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1a6a54dfd1aec0f560f7e47e08f3fcb8f1">~GenericSchemaDocument</link>()&#32;{
1704 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!schemaMap_.Empty())
1705 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaMap_.template&#32;Pop&lt;SchemaEntry&gt;(1)-&gt;~SchemaEntry();
1706 
1707 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(typeless_)&#32;{
1708 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;typeless_-&gt;~SchemaType();
1709 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Allocator::Free</link>(typeless_);
1710 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1711 
1712 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a">RAPIDJSON_DELETE</link>(ownAllocator_);
1713 &#32;&#32;&#32;&#32;}
1714 
1715 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">SValue</link>&amp;&#32;<link linkend="_class_generic_schema_document_1aab0203c06e65d944a8a03517d84de3cd">GetURI</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;uri_;&#32;}
1716 
1718 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_classinternal_1_1_schema">SchemaType</link>&amp;&#32;<link linkend="_class_generic_schema_document_1a6a0b2b360df728077bb5d3779f97e73d">GetRoot</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*root_;&#32;}
1719 
1720 <emphasis role="keyword">private</emphasis>:
1722 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1a302a3c608c137d5542105c8298bfba1f">GenericSchemaDocument</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document">GenericSchemaDocument</link>&amp;);
1724 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document">GenericSchemaDocument</link>&amp;&#32;operator=(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document">GenericSchemaDocument</link>&amp;);
1725 
1726 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>*&#32;SchemaRefPtr;&#32;<emphasis role="comment">//&#32;PR&#32;#1393</emphasis>
1727 
1728 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SchemaEntry&#32;{
1729 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SchemaEntry(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;p,&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;s,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;o,&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator)&#32;:&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>(p,&#32;allocator),&#32;schema(s),&#32;owned(o)&#32;{}
1730 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;~SchemaEntry()&#32;{
1731 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(owned)&#32;{
1732 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schema-&gt;~SchemaType();
1733 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Allocator::Free</link>(schema);
1734 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1735 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1736 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>;
1737 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;schema;
1738 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;owned;
1739 &#32;&#32;&#32;&#32;};
1740 
1741 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Changed&#32;by&#32;PR&#32;#1393</emphasis>
1742 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;CreateSchemaRecursive(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>**&#32;schema,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;v,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&amp;&#32;<emphasis role="keywordtype">id</emphasis>)&#32;{
1743 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v.GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>)&#32;{
1744 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&#32;newid&#32;=&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(CreateSchema(schema,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;v,&#32;document,&#32;<emphasis role="keywordtype">id</emphasis>),&#32;allocator_);
1745 
1746 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::ConstMemberIterator</link>&#32;itr&#32;=&#32;v.MemberBegin();&#32;itr&#32;!=&#32;v.MemberEnd();&#32;++itr)
1747 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchemaRecursive(0,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Append(itr-&gt;name,&#32;allocator_),&#32;itr-&gt;value,&#32;document,&#32;newid);
1748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v.GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>)
1750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;v.Size();&#32;i++)
1751 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchemaRecursive(0,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Append(i,&#32;allocator_),&#32;v[i],&#32;document,&#32;<emphasis role="keywordtype">id</emphasis>);
1752 &#32;&#32;&#32;&#32;}
1753 
1754 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Changed&#32;by&#32;PR&#32;#1393</emphasis>
1755 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&amp;&#32;CreateSchema(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>**&#32;schema,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;v,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&amp;&#32;<emphasis role="keywordtype">id</emphasis>)&#32;{
1756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.IsValid());
1757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v.IsObject())&#32;{
1758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;sc&#32;=&#32;GetSchema(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>))&#32;{
1759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schema)
1760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*schema&#32;=&#32;sc;
1761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddSchemaRefs(<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*<emphasis role="keyword">&gt;</emphasis>(sc));
1762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!HandleRefSchema(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;schema,&#32;v,&#32;document,&#32;<emphasis role="keywordtype">id</emphasis>))&#32;{
1764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;The&#32;new&#32;schema&#32;constructor&#32;adds&#32;itself&#32;and&#32;its&#32;$ref(s)&#32;to&#32;schemaMap_</emphasis>
1765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;s&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(allocator_-&gt;Malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>)))&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>(<emphasis role="keyword">this</emphasis>,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;v,&#32;document,&#32;allocator_,&#32;<emphasis role="keywordtype">id</emphasis>);
1766 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schema)
1767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*schema&#32;=&#32;s;
1768 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;s-&gt;GetId();
1769 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1770 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1771 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1772 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schema)
1773 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*schema&#32;=&#32;typeless_;
1774 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddSchemaRefs(typeless_);
1775 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1776 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;id;
1777 &#32;&#32;&#32;&#32;}
1778 
1779 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Changed&#32;by&#32;PR&#32;#1393</emphasis>
1780 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;should&#32;this&#32;return&#32;a&#32;UriType&amp;&#32;?</emphasis>
1781 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;HandleRefSchema(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>**&#32;schema,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;v,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;document,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&amp;&#32;<emphasis role="keywordtype">id</emphasis>)&#32;{
1782 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::ConstMemberIterator</link>&#32;itr&#32;=&#32;v.FindMember(SchemaType::GetRefString());
1783 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr&#32;==&#32;v.MemberEnd())
1784 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1785 
1786 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Resolve&#32;the&#32;source&#32;pointer&#32;to&#32;the&#32;$ref&apos;ed&#32;schema&#32;(finally)</emphasis>
1787 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(schemaRef_.template&#32;Push&lt;SchemaRefPtr&gt;())&#32;SchemaRefPtr(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>);
1788 
1789 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr-&gt;value.IsString())&#32;{
1790 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len&#32;=&#32;itr-&gt;value.GetStringLength();
1791 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(len&#32;&gt;&#32;0)&#32;{
1792 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;First&#32;resolve&#32;$ref&#32;against&#32;the&#32;in-scope&#32;id</emphasis>
1793 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&#32;scopeId&#32;=&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(<emphasis role="keywordtype">id</emphasis>,&#32;allocator_);
1794 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&#32;ref&#32;=&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(itr-&gt;value,&#32;allocator_).Resolve(scopeId,&#32;allocator_);
1795 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;if&#32;the&#32;resolved&#32;$ref&#32;minus&#32;the&#32;fragment&#32;matches&#32;a&#32;resolved&#32;id&#32;in&#32;this&#32;document</emphasis>
1796 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Search&#32;from&#32;the&#32;root.&#32;Returns&#32;the&#32;subschema&#32;in&#32;the&#32;document&#32;and&#32;its&#32;absolute&#32;JSON&#32;pointer.</emphasis>
1797 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&#32;basePointer&#32;=&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>();
1798 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&#32;*base&#32;=&#32;FindId(document,&#32;ref,&#32;basePointer,&#32;docId_,&#32;<emphasis role="keyword">false</emphasis>);
1799 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!base)&#32;{
1800 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remote&#32;reference&#32;-&#32;call&#32;the&#32;remote&#32;document&#32;provider</emphasis>
1801 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(remoteProvider_)&#32;{
1802 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document">GenericSchemaDocument</link>*&#32;remoteDocument&#32;=&#32;remoteProvider_-&gt;<link linkend="_class_i_generic_remote_schema_document_provider_1af348980f793d9777abb9b7b6afcbfd93">GetRemoteDocument</link>(ref))&#32;{
1803 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1ab1dec56a78b29649eb8e4b85b101ec7c">Ch</link>*&#32;s&#32;=&#32;ref.GetFragString();
1804 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;len&#32;=&#32;ref.GetFragStringLength();
1805 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(len&#32;&lt;=&#32;1&#32;||&#32;s[1]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
1806 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;pointer&#32;fragment,&#32;absolute&#32;in&#32;the&#32;remote&#32;schema</emphasis>
1807 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>(s,&#32;len,&#32;allocator_);
1808 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.IsValid())&#32;{
1809 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;subschema</emphasis>
1810 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>&#32;*sc&#32;=&#32;remoteDocument-&gt;GetSchema(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>))&#32;{
1811 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schema)
1812 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*schema&#32;=&#32;sc;
1813 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddSchemaRefs(<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(sc));
1814 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1815 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1816 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1817 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1818 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Plain&#32;name&#32;fragment,&#32;not&#32;allowed</emphasis>
1819 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1820 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1821 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1822 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1823 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{&#32;<emphasis role="comment">//&#32;Local&#32;reference</emphasis>
1824 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1ab1dec56a78b29649eb8e4b85b101ec7c">Ch</link>*&#32;s&#32;=&#32;ref.GetFragString();
1825 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;len&#32;=&#32;ref.GetFragStringLength();
1826 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(len&#32;&lt;=&#32;1&#32;||&#32;s[1]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
1827 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;JSON&#32;pointer&#32;fragment,&#32;relative&#32;to&#32;the&#32;resolved&#32;URI</emphasis>
1828 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&#32;relPointer(s,&#32;len,&#32;allocator_);
1829 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(relPointer.IsValid())&#32;{
1830 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Get&#32;the&#32;subschema</emphasis>
1831 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&#32;*pv&#32;=&#32;relPointer.Get(*base))&#32;{
1832 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Now&#32;get&#32;the&#32;absolute&#32;JSON&#32;pointer&#32;by&#32;adding&#32;relative&#32;to&#32;base</emphasis>
1833 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>(basePointer);
1834 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;relPointer.GetTokenCount();&#32;i++)
1835 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>&#32;=&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Append(relPointer.GetTokens()[i],&#32;allocator_);
1836 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//GenericStringBuffer&lt;EncodingType&gt;&#32;sb;</emphasis>
1837 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//pointer.StringifyUriFragment(sb);</emphasis>
1838 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.IsValid()&#32;&amp;&amp;&#32;!IsCyclicRef(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>))&#32;{
1839 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;CreateSchema&#32;recursively,&#32;but&#32;first&#32;compute&#32;the&#32;in-scope&#32;id&#32;for&#32;the&#32;$ref&#32;target&#32;as&#32;we&#32;have&#32;jumped&#32;there</emphasis>
1840 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;cache&#32;pointer&#32;&lt;-&gt;&#32;id&#32;mapping</emphasis>
1841 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;unresolvedTokenIndex;
1842 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scopeId&#32;=&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetUri(document,&#32;docId_,&#32;&amp;unresolvedTokenIndex,&#32;allocator_);
1843 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchema(schema,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;*pv,&#32;document,&#32;scopeId);
1844 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1845 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1846 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1847 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1848 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
1849 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Plain&#32;name&#32;fragment,&#32;relative&#32;to&#32;the&#32;resolved&#32;URI</emphasis>
1850 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;if&#32;the&#32;fragment&#32;matches&#32;an&#32;id&#32;in&#32;this&#32;document.</emphasis>
1851 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Search&#32;from&#32;the&#32;base&#32;we&#32;just&#32;established.&#32;Returns&#32;the&#32;subschema&#32;in&#32;the&#32;document&#32;and&#32;its&#32;absolute&#32;JSON&#32;pointer.</emphasis>
1852 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>&#32;=&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>();
1853 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&#32;*pv&#32;=&#32;FindId(*base,&#32;ref,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(ref.GetBaseString(),&#32;ref.GetBaseStringLength(),&#32;allocator_),&#32;<emphasis role="keyword">true</emphasis>,&#32;basePointer))&#32;{
1854 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!IsCyclicRef(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>))&#32;{
1855 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//GenericStringBuffer&lt;EncodingType&gt;&#32;sb;</emphasis>
1856 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//pointer.StringifyUriFragment(sb);</emphasis>
1857 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Call&#32;CreateSchema&#32;recursively,&#32;but&#32;first&#32;compute&#32;the&#32;in-scope&#32;id&#32;for&#32;the&#32;$ref&#32;target&#32;as&#32;we&#32;have&#32;jumped&#32;there</emphasis>
1858 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO:&#32;cache&#32;pointer&#32;&lt;-&gt;&#32;id&#32;mapping</emphasis>
1859 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;unresolvedTokenIndex;
1860 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;scopeId&#32;=&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetUri(document,&#32;docId_,&#32;&amp;unresolvedTokenIndex,&#32;allocator_);
1861 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CreateSchema(schema,&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>,&#32;*pv,&#32;document,&#32;scopeId);
1862 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1863 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1864 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1865 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1866 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1867 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1868 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1869 
1870 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Invalid/Unknown&#32;$ref</emphasis>
1871 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schema)
1872 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*schema&#32;=&#32;typeless_;
1873 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddSchemaRefs(typeless_);
1874 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1875 &#32;&#32;&#32;&#32;}
1876 
1878 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;full&#32;specified&#32;use&#32;all&#32;URI&#32;else&#32;ignore&#32;fragment.</emphasis>
1879 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;If&#32;found,&#32;return&#32;a&#32;pointer&#32;to&#32;the&#32;subschema&#32;and&#32;its&#32;JSON&#32;pointer.</emphasis>
1880 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;TODO&#32;cache&#32;pointer&#32;&lt;-&gt;&#32;id&#32;mapping</emphasis>
1881 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;FindId(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;doc,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&amp;&#32;finduri,&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;resptr,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&amp;&#32;baseuri,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;full,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;here&#32;=&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>())<emphasis role="keyword">&#32;const&#32;</emphasis>{
1882 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;
1883 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>*&#32;resval&#32;=&#32;0;
1884 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&#32;tempuri&#32;=&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(finduri,&#32;allocator_);
1885 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&#32;localuri&#32;=&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(baseuri,&#32;allocator_);
1886 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(doc.GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>)&#32;{
1887 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Establish&#32;the&#32;base&#32;URI&#32;of&#32;this&#32;object</emphasis>
1888 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::ConstMemberIterator</link>&#32;m&#32;=&#32;doc.FindMember(SchemaType::GetIdString());
1889 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m&#32;!=&#32;doc.MemberEnd()&#32;&amp;&amp;&#32;m-&gt;value.GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a2d823b89b055bc743d05c03183d3f338">kStringType</link>)&#32;{
1890 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;localuri&#32;=&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>(m-&gt;value,&#32;allocator_).Resolve(baseuri,&#32;allocator_);
1891 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1892 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;See&#32;if&#32;it&#32;matches</emphasis>
1893 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(localuri.Match(finduri,&#32;full))&#32;{
1894 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resval&#32;=&#32;<emphasis role="keyword">const_cast&lt;</emphasis><link linkend="_class_generic_value">ValueType</link>&#32;*<emphasis role="keyword">&gt;</emphasis>(&amp;doc);
1895 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resptr&#32;=&#32;here;
1896 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resval;
1897 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1898 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;No&#32;match,&#32;continue&#32;looking</emphasis>
1899 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(m&#32;=&#32;doc.MemberBegin();&#32;m&#32;!=&#32;doc.MemberEnd();&#32;++m)&#32;{
1900 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(m-&gt;value.GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>&#32;||&#32;m-&gt;value.GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>)&#32;{
1901 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resval&#32;=&#32;FindId(m-&gt;value,&#32;finduri,&#32;resptr,&#32;localuri,&#32;full,&#32;here.Append(m-&gt;name.GetString(),&#32;m-&gt;name.GetStringLength(),&#32;allocator_));
1902 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1903 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(resval)&#32;<emphasis role="keywordflow">break</emphasis>;
1904 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1905 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(doc.GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>)&#32;{
1906 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Continue&#32;looking</emphasis>
1907 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_value">ValueType::ConstValueIterator</link>&#32;v&#32;=&#32;doc.Begin();&#32;v&#32;!=&#32;doc.End();&#32;++v)&#32;{
1908 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(v-&gt;GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>&#32;||&#32;v-&gt;GetType()&#32;==&#32;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>)&#32;{
1909 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;resval&#32;=&#32;FindId(*v,&#32;finduri,&#32;resptr,&#32;localuri,&#32;full,&#32;here.Append(i,&#32;allocator_));
1910 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1911 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(resval)&#32;<emphasis role="keywordflow">break</emphasis>;
1912 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;i++;
1913 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1914 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1915 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;resval;
1916 &#32;&#32;&#32;&#32;}
1917 
1918 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Added&#32;by&#32;PR&#32;#1393</emphasis>
1919 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddSchemaRefs(<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;schema)&#32;{
1920 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!schemaRef_.Empty())&#32;{
1921 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SchemaRefPtr&#32;*ref&#32;=&#32;schemaRef_.template&#32;Pop&lt;SchemaRefPtr&gt;(1);
1922 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;SchemaEntry&#32;*entry&#32;=&#32;schemaMap_.template&#32;Push&lt;SchemaEntry&gt;();
1923 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">new</emphasis>&#32;(entry)&#32;SchemaEntry(**ref,&#32;schema,&#32;<emphasis role="keyword">false</emphasis>,&#32;allocator_);
1924 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
1925 &#32;&#32;&#32;&#32;}
1926 
1927 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Added&#32;by&#32;PR&#32;#1393</emphasis>
1928 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;IsCyclicRef(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1929 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;SchemaRefPtr*&#32;ref&#32;=&#32;schemaRef_.template&#32;Bottom&lt;SchemaRefPtr&gt;();&#32;ref&#32;!=&#32;schemaRef_.template&#32;End&lt;SchemaRefPtr&gt;();&#32;++ref)
1930 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>&#32;==&#32;**ref)
1931 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
1932 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
1933 &#32;&#32;&#32;&#32;}
1934 
1935 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;GetSchema(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&amp;&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1936 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;SchemaEntry*&#32;target&#32;=&#32;schemaMap_.template&#32;Bottom&lt;SchemaEntry&gt;();&#32;target&#32;!=&#32;schemaMap_.template&#32;End&lt;SchemaEntry&gt;();&#32;++target)
1937 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>&#32;==&#32;target-&gt;pointer)
1938 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;target-&gt;schema;
1939 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
1940 &#32;&#32;&#32;&#32;}
1941 
1942 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>&#32;GetPointer(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;schema)<emphasis role="keyword">&#32;const&#32;</emphasis>{
1943 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;SchemaEntry*&#32;target&#32;=&#32;schemaMap_.template&#32;Bottom&lt;SchemaEntry&gt;();&#32;target&#32;!=&#32;schemaMap_.template&#32;End&lt;SchemaEntry&gt;();&#32;++target)
1944 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schema&#32;==&#32;target-&gt;schema)
1945 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;target-&gt;pointer;
1946 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_schema_document_1aeb62f562d4dc024402b00f97cbcef747">PointerType</link>();
1947 &#32;&#32;&#32;&#32;}
1948 
1949 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;GetTypeless()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;typeless_;&#32;}
1950 
1951 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kInitialSchemaMapSize&#32;=&#32;64;
1952 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kInitialSchemaRefSize&#32;=&#32;64;
1953 
1954 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1aa53ca323efce50f88aea6fa0d03e9785">IRemoteSchemaDocumentProviderType</link>*&#32;remoteProvider_;
1955 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&#32;*allocator_;
1956 &#32;&#32;&#32;&#32;<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&#32;*ownAllocator_;
1957 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;root_;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
1958 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1acaf115202b159a2eb72c97c3dc6c3895">SchemaType</link>*&#32;typeless_;
1959 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stack">internal::Stack&lt;Allocator&gt;</link>&#32;schemaMap_;&#32;&#32;<emphasis role="comment">//&#32;Stores&#32;created&#32;Pointer&#32;-&gt;&#32;Schemas</emphasis>
1960 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stack">internal::Stack&lt;Allocator&gt;</link>&#32;schemaRef_;&#32;&#32;<emphasis role="comment">//&#32;Stores&#32;Pointer(s)&#32;from&#32;$ref(s)&#32;until&#32;resolved</emphasis>
1961 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1af017bc68811efaabb9925b6db03fa3d5">SValue</link>&#32;uri_;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Schema&#32;document&#32;URI</emphasis>
1962 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_document_1afcfefaab7eecec6849d478557392e23c">UriType</link>&#32;docId_;
1963 };
1964 
1966 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_schema_document">GenericSchemaDocument&lt;Value&gt;</link>&#32;<link linkend="_schema_8h_1a49355f280272b969cfd756ef556935c4">SchemaDocument</link>;
1968 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_i_generic_remote_schema_document_provider">IGenericRemoteSchemaDocumentProvider&lt;SchemaDocument&gt;</link>&#32;<link linkend="_schema_8h_1afec32b8c8d16360397849fd8bcd28441">IRemoteSchemaDocumentProvider</link>;
1969 
1971 <emphasis role="comment">//&#32;GenericSchemaValidator</emphasis>
1972 
1974 
1985 <emphasis role="keyword">template</emphasis>&#32;&lt;
1986 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType,
1987 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;OutputHandler&#32;=&#32;<link linkend="_struct_base_reader_handler">BaseReaderHandler&lt;typename SchemaDocumentType::SchemaType::EncodingType&gt;</link>,
1988 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;StateAllocator&#32;=&#32;<link linkend="_class_crt_allocator">CrtAllocator</link>&gt;
1989 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>&#32;:
1990 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_state_factory">internal::ISchemaStateFactory</link>&lt;typename&#32;SchemaDocumentType::SchemaType&gt;,&#32;
1991 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classinternal_1_1_i_schema_validator">internal::ISchemaValidator</link>,
1992 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;<link linkend="_classinternal_1_1_i_validation_error_handler">internal::IValidationErrorHandler</link>&lt;typename&#32;SchemaDocumentType::SchemaType&gt;&#32;{
1993 <emphasis role="keyword">public</emphasis>:
1994 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::SchemaType&#32;<link linkend="_class_generic_schema_validator_1ac79628f00f6720bbabb70b44f0d076a0">SchemaType</link>;
1995 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::PointerType&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>;
1996 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaType::EncodingType&#32;<link linkend="_class_generic_schema_validator_1acf1c5361bb96da87d23167d8720b1ea5">EncodingType</link>;
1997 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaType::SValue&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>;
1998 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;EncodingType::Ch&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>;
1999 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct_generic_string_ref">GenericStringRef&lt;Ch&gt;</link>&#32;<link linkend="_class_generic_schema_validator_1a604160fcd6af7582e0deccc205309dcf">StringRefType</link>;
2000 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_value">GenericValue&lt;EncodingType, StateAllocator&gt;</link>&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>;
2001 
2003 
2009 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a202ee6fdbe5ae9eab3e77a81ecdfeb6d">GenericSchemaValidator</link>(
2010 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType&amp;&#32;schemaDocument,
2011 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StateAllocator*&#32;allocator&#32;=&#32;0,&#32;
2012 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;schemaStackCapacity&#32;=&#32;kDefaultSchemaStackCapacity,
2013 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;documentStackCapacity&#32;=&#32;kDefaultDocumentStackCapacity)
2014 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
2015 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument_(&amp;schemaDocument),
2016 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root_(schemaDocument.GetRoot()),
2017 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stateAllocator_(allocator),
2018 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownStateAllocator_(0),
2019 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaStack_(allocator,&#32;schemaStackCapacity),
2020 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack_(allocator,&#32;documentStackCapacity),
2021 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputHandler_(0),
2022 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>),
2023 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_(),
2024 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;missingDependents_(),
2025 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_(true),
2026 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_(<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942a70564fe50c13963b485000be542c52c9">kValidateDefaultFlags</link>)
2027 #if&#32;<link linkend="_schema_8h_1a40c690b6fd0b7ae8d8484b613255cc72">RAPIDJSON_SCHEMA_VERBOSE</link>
2028 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;depth_(0)
2029 #endif
2030 &#32;&#32;&#32;&#32;{
2031 &#32;&#32;&#32;&#32;}
2032 
2034 
2040 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1ac2027be8ca55b01cd6f38b45f4e233b4">GenericSchemaValidator</link>(
2041 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType&amp;&#32;schemaDocument,
2042 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;OutputHandler&amp;&#32;outputHandler,
2043 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StateAllocator*&#32;allocator&#32;=&#32;0,&#32;
2044 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;schemaStackCapacity&#32;=&#32;kDefaultSchemaStackCapacity,
2045 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;documentStackCapacity&#32;=&#32;kDefaultDocumentStackCapacity)
2046 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
2047 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument_(&amp;schemaDocument),
2048 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root_(schemaDocument.GetRoot()),
2049 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stateAllocator_(allocator),
2050 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownStateAllocator_(0),
2051 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaStack_(allocator,&#32;schemaStackCapacity),
2052 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack_(allocator,&#32;documentStackCapacity),
2053 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputHandler_(&amp;outputHandler),
2054 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>),
2055 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_(),
2056 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;missingDependents_(),
2057 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_(true),
2058 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_(<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942a70564fe50c13963b485000be542c52c9">kValidateDefaultFlags</link>)
2059 #if&#32;<link linkend="_schema_8h_1a40c690b6fd0b7ae8d8484b613255cc72">RAPIDJSON_SCHEMA_VERBOSE</link>
2060 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;depth_(0)
2061 #endif
2062 &#32;&#32;&#32;&#32;{
2063 &#32;&#32;&#32;&#32;}
2064 
2066 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a3eab83d483a50efb0c0390adf3291963">~GenericSchemaValidator</link>()&#32;{
2067 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a49efbbe098cb77728be3d48cafed17e4">Reset</link>();
2068 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a">RAPIDJSON_DELETE</link>(ownStateAllocator_);
2069 &#32;&#32;&#32;&#32;}
2070 
2072 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a49efbbe098cb77728be3d48cafed17e4">Reset</link>()&#32;{
2073 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!schemaStack_.Empty())
2074 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PopSchema();
2075 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack_.Clear();
2076 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a8374dd359e572f653c49293545ad3ef4">ResetError</link>();
2077 &#32;&#32;&#32;&#32;}
2078 
2080 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8374dd359e572f653c49293545ad3ef4">ResetError</link>()&#32;{
2081 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_.SetObject();
2082 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetNull();
2083 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;missingDependents_.SetNull();
2084 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_&#32;=&#32;<emphasis role="keyword">true</emphasis>;
2085 &#32;&#32;&#32;&#32;}
2086 
2088 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1af4840dac2410bcfe73912c30eb95b875">SetValidateFlags</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;flags)&#32;{
2089 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_&#32;=&#32;flags;
2090 &#32;&#32;&#32;&#32;}
2091 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a318bf1cf98d2f18074edd336b1bc684d">GetValidateFlags</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2092 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags_;
2093 &#32;&#32;&#32;&#32;}
2094 
2096 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;of&#32;ISchemaValidator</emphasis>
2097 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8ebda4da3d8b1fc41e57f15dd62e8f19">IsValid</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2098 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!valid_)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2099 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GetContinueOnErrors()&#32;&amp;&amp;&#32;!error_.ObjectEmpty())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2100 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2101 &#32;&#32;&#32;&#32;}
2102 
2104 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_class_generic_schema_validator_1a21c0ad159e91398d222bab4d91d4c5dd">GetError</link>()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_;&#32;}
2105 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_class_generic_schema_validator_1ad7b8d71bd651c3da614a877816de7573">GetError</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_;&#32;}
2106 
2108 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;If&#32;reporting&#32;all&#32;errors,&#32;the&#32;stack&#32;will&#32;be&#32;empty.</emphasis>
2109 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>&#32;<link linkend="_class_generic_schema_validator_1a5b8f2d5c466b2a362e2e4c3bcfbfc5a8">GetInvalidSchemaPointer</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2110 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;schemaStack_.Empty()&#32;?&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>()&#32;:&#32;CurrentSchema().GetPointer();
2111 &#32;&#32;&#32;&#32;}
2112 
2114 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;If&#32;reporting&#32;all&#32;errors,&#32;the&#32;stack&#32;will&#32;be&#32;empty,&#32;so&#32;return&#32;&quot;errors&quot;.</emphasis>
2115 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;<link linkend="_class_generic_schema_validator_1ab5980d72c786b81ab907526fdf4172f3">GetInvalidSchemaKeyword</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2116 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!schemaStack_.Empty())&#32;<emphasis role="keywordflow">return</emphasis>&#32;CurrentContext().invalidKeyword;
2117 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GetContinueOnErrors()&#32;&amp;&amp;&#32;!error_.ObjectEmpty())&#32;<emphasis role="keywordflow">return</emphasis>&#32;(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*)GetErrorsString();
2118 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;0;
2119 &#32;&#32;&#32;&#32;}
2120 
2122 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;If&#32;reporting&#32;all&#32;errors,&#32;the&#32;stack&#32;will&#32;be&#32;empty,&#32;so&#32;return&#32;kValidateErrors.</emphasis>
2123 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;<link linkend="_class_generic_schema_validator_1aeba2093eb93f77b239e9b4c27219c982">GetInvalidSchemaCode</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2124 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!schemaStack_.Empty())&#32;<emphasis role="keywordflow">return</emphasis>&#32;CurrentContext().invalidCode;
2125 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GetContinueOnErrors()&#32;&amp;&amp;&#32;!error_.ObjectEmpty())&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa626466aeef9cacbac149e4ae57d5fda2">kValidateErrors</link>;
2126 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aac15ca121db8911126960c0672dfe2a2e">kValidateErrorNone</link>;
2127 &#32;&#32;&#32;&#32;}
2128 
2130 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;If&#32;reporting&#32;all&#32;errors,&#32;the&#32;stack&#32;will&#32;be&#32;empty.</emphasis>
2131 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>&#32;<link linkend="_class_generic_schema_validator_1ac10a88c4dc138bbdbe2afd041658a3b0">GetInvalidDocumentPointer</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2132 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(documentStack_.Empty())&#32;{
2133 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>();
2134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>(documentStack_.template&#32;Bottom&lt;Ch&gt;(),&#32;documentStack_.GetSize()&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>));
2137 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2138 &#32;&#32;&#32;&#32;}
2139 
2140 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ab2f08413a2b23d73d4bbd09c8ca1f547">NotMultipleOf</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected)&#32;{
2141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aab8cf6f0be86047d0bf345f25dac31f4c">kValidateErrorMultipleOf</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected);
2142 &#32;&#32;&#32;&#32;}
2143 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a5c59d25dc44d85404cc587ebfa7455cd">NotMultipleOf</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected)&#32;{
2144 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aab8cf6f0be86047d0bf345f25dac31f4c">kValidateErrorMultipleOf</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected);
2145 &#32;&#32;&#32;&#32;}
2146 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ae5fc8a4545fed53955ec6c57b79ca949">NotMultipleOf</link>(<emphasis role="keywordtype">double</emphasis>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected)&#32;{
2147 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aab8cf6f0be86047d0bf345f25dac31f4c">kValidateErrorMultipleOf</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected);
2148 &#32;&#32;&#32;&#32;}
2149 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a4c9c7db8a3488f84a5a86681ad1d8194">AboveMaximum</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;{
2150 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(exclusive&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected,
2151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusive&#32;?&#32;&amp;SchemaType::GetExclusiveMaximumString&#32;:&#32;0);
2152 &#32;&#32;&#32;&#32;}
2153 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a9262c73768789eb7cf8dc271cfec7f96">AboveMaximum</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;{
2154 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(exclusive&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected,
2155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusive&#32;?&#32;&amp;SchemaType::GetExclusiveMaximumString&#32;:&#32;0);
2156 &#32;&#32;&#32;&#32;}
2157 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1abcf1f5b46bdae8ca20a80858d603483d">AboveMaximum</link>(<emphasis role="keywordtype">double</emphasis>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;{
2158 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(exclusive&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3fca29f33702d8d98135b849c5f05f00">kValidateErrorExclusiveMaximum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa933fe947a713d741c3dcdcd7cae96b35">kValidateErrorMaximum</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected,
2159 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusive&#32;?&#32;&amp;SchemaType::GetExclusiveMaximumString&#32;:&#32;0);
2160 &#32;&#32;&#32;&#32;}
2161 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a15a12306bc14f16357b4f2edea8396b7">BelowMinimum</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;{
2162 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(exclusive&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected,
2163 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusive&#32;?&#32;&amp;SchemaType::GetExclusiveMinimumString&#32;:&#32;0);
2164 &#32;&#32;&#32;&#32;}
2165 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ad3db1f3852a1b2e6fada43fbcad401ea">BelowMinimum</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;{
2166 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(exclusive&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected,
2167 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusive&#32;?&#32;&amp;SchemaType::GetExclusiveMinimumString&#32;:&#32;0);
2168 &#32;&#32;&#32;&#32;}
2169 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1afdd4a9787239a6fc3eeb56d34fd531f4">BelowMinimum</link>(<emphasis role="keywordtype">double</emphasis>&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;exclusive)&#32;{
2170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(exclusive&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1722fc952e01a7a858d954c08e382d65">kValidateErrorExclusiveMinimum</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaa5f0cf3faa2e08c359cfcd6d151d76e9">kValidateErrorMinimum</link>,&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actual).Move(),&#32;expected,
2171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;exclusive&#32;?&#32;&amp;SchemaType::GetExclusiveMinimumString&#32;:&#32;0);
2172 &#32;&#32;&#32;&#32;}
2173 
2174 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a227dce44e0684a73accbfb062200eb26">TooLong</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expected)&#32;{
2175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa6825de2427572de01bd121c9fffcee76">kValidateErrorMaxLength</link>,
2176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(str,&#32;length,&#32;GetStateAllocator()).Move(),&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>(expected).Move());
2177 &#32;&#32;&#32;&#32;}
2178 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a7711071f95ead18c0dd99f69c09a4c11">TooShort</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expected)&#32;{
2179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa58e6e01eef18ea0af4763abd84128790">kValidateErrorMinLength</link>,
2180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(str,&#32;length,&#32;GetStateAllocator()).Move(),&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>(expected).Move());
2181 &#32;&#32;&#32;&#32;}
2182 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1af1be05889e634936c223f24c6e5f6ec5">DoesNotMatch</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length)&#32;{
2183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(GetActualString(),&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(str,&#32;length,&#32;GetStateAllocator()).Move(),&#32;GetStateAllocator());
2185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa86bde2af1a18d73a533ba8e2f5971879">kValidateErrorPattern</link>);
2186 &#32;&#32;&#32;&#32;}
2187 
2188 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a2d47a88a3d9fb82466b5bda480b6e70f">DisallowedItem</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index)&#32;{
2189 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2190 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(GetDisallowedString(),&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(index).Move(),&#32;GetStateAllocator());
2191 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa17861cca8a0ab2a0685f3b7804f67303">kValidateErrorAdditionalItems</link>,&#32;<emphasis role="keyword">true</emphasis>);
2192 &#32;&#32;&#32;&#32;}
2193 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1af39007d9bf43126dab231961a1c5064f">TooFewItems</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;{
2194 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aad31b3292fb68a14016514736b076200c">kValidateErrorMinItems</link>,
2195 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actualCount).Move(),&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>(expectedCount).Move());
2196 &#32;&#32;&#32;&#32;}
2197 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a78e85eeae0e2bdef827815672a7fbbc9">TooManyItems</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;{
2198 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa9acbcf73fe6a65bd23108a2dbc945cff">kValidateErrorMaxItems</link>,
2199 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actualCount).Move(),&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>(expectedCount).Move());
2200 &#32;&#32;&#32;&#32;}
2201 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a82aa865146069e3ba5010d25346a71f2">DuplicateItems</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index1,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;index2)&#32;{
2202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;duplicates(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>);
2203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duplicates.PushBack(index1,&#32;GetStateAllocator());
2204 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;duplicates.PushBack(index2,&#32;GetStateAllocator());
2205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(GetDuplicatesString(),&#32;duplicates,&#32;GetStateAllocator());
2207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa35159c760856953cbd62258140d8d498">kValidateErrorUniqueItems</link>,&#32;<emphasis role="keyword">true</emphasis>);
2208 &#32;&#32;&#32;&#32;}
2209 
2210 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ad7ca0a327420c110e9ee6e70b2cdbc87">TooManyProperties</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;{
2211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa179693cbb5ea15f0242e37588e99edf6">kValidateErrorMaxProperties</link>,
2212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actualCount).Move(),&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>(expectedCount).Move());
2213 &#32;&#32;&#32;&#32;}
2214 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1aaebaf28aa289826a3c39dc953b0ca466">TooFewProperties</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;actualCount,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;expectedCount)&#32;{
2215 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddNumberError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa017c1ccb7febfaff42115fc256753fb6">kValidateErrorMinProperties</link>,
2216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actualCount).Move(),&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>(expectedCount).Move());
2217 &#32;&#32;&#32;&#32;}
2218 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a41c4d67e349561f13948a5045bfc50c9">StartMissingProperties</link>()&#32;{
2219 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetArray();
2220 &#32;&#32;&#32;&#32;}
2221 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8d355eeb25364e414d9a2f8121aa0eaa">AddMissingProperty</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;name)&#32;{
2222 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.PushBack(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(name,&#32;GetStateAllocator()).Move(),&#32;GetStateAllocator());
2223 &#32;&#32;&#32;&#32;}
2224 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a557b7aa531ff94a6355fed8f8575fed5">EndMissingProperties</link>()&#32;{
2225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentError_.Empty())
2226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;error(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>);
2228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error.AddMember(GetMissingString(),&#32;currentError_,&#32;GetStateAllocator());
2229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_&#32;=&#32;error;
2230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2dc93a549f16b70911e6399c61a1aec4">kValidateErrorRequired</link>);
2231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2232 &#32;&#32;&#32;&#32;}
2233 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a29fa7c6f787450b2df1f9d440436aeab">PropertyViolations</link>(ISchemaValidator**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;{
2234 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;++i)
2235 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;MergeError(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>*<emphasis role="keyword">&gt;</emphasis>(subvalidators[i])-&gt;<link linkend="_class_generic_schema_validator_1a21c0ad159e91398d222bab4d91d4c5dd">GetError</link>());
2236 &#32;&#32;&#32;&#32;}
2237 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a44f06b99edfb650c6088f17e8af5b5a8">DisallowedProperty</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;name,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length)&#32;{
2238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2239 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(GetDisallowedString(),&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(name,&#32;length,&#32;GetStateAllocator()).Move(),&#32;GetStateAllocator());
2240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aae02b299a3f5db48400e7c1987201d2ca">kValidateErrorAdditionalProperties</link>,&#32;<emphasis role="keyword">true</emphasis>);
2241 &#32;&#32;&#32;&#32;}
2242 
2243 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a767f115cc90e0f2f5bdd1c9fbdbf75df">StartDependencyErrors</link>()&#32;{
2244 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2245 &#32;&#32;&#32;&#32;}
2246 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac4faa073bc4671f42e98a59a9e9cb01a">StartMissingDependentProperties</link>()&#32;{
2247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;missingDependents_.SetArray();
2248 &#32;&#32;&#32;&#32;}
2249 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a85f2be483f0ddfc402a97665aff6eca9">AddMissingDependentProperty</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;targetName)&#32;{
2250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;missingDependents_.PushBack(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(targetName,&#32;GetStateAllocator()).Move(),&#32;GetStateAllocator());
2251 &#32;&#32;&#32;&#32;}
2252 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1afdcd2ff7b5f7e24f4f3d6976fa5b803e">EndMissingDependentProperties</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;sourceName)&#32;{
2253 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!missingDependents_.Empty())&#32;{
2254 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Create&#32;equivalent&#32;&apos;required&apos;&#32;error</emphasis>
2255 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;error(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>);
2256 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;code&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2dc93a549f16b70911e6399c61a1aec4">kValidateErrorRequired</link>;
2257 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error.AddMember(GetMissingString(),&#32;missingDependents_.Move(),&#32;GetStateAllocator());
2258 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorCode(error,&#32;code);
2259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorInstanceLocation(error,&#32;<emphasis role="keyword">false</emphasis>);
2260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;When&#32;appending&#32;to&#32;a&#32;pointer&#32;ensure&#32;its&#32;allocator&#32;is&#32;used</emphasis>
2261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>&#32;schemaRef&#32;=&#32;<link linkend="_class_generic_schema_validator_1a5b8f2d5c466b2a362e2e4c3bcfbfc5a8">GetInvalidSchemaPointer</link>().Append(SchemaType::GetValidateErrorKeyword(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2f81ab754a29330709c24110a2e895c8">kValidateErrorDependencies</link>),&#32;&amp;<link linkend="_class_generic_schema_validator_1a5b8f2d5c466b2a362e2e4c3bcfbfc5a8">GetInvalidSchemaPointer</link>().GetAllocator());
2262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorSchemaLocation(error,&#32;schemaRef.Append(sourceName.GetString(),&#32;sourceName.GetStringLength(),&#32;&amp;<link linkend="_class_generic_schema_validator_1a5b8f2d5c466b2a362e2e4c3bcfbfc5a8">GetInvalidSchemaPointer</link>().GetAllocator()));
2263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;wrapper(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>);
2264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;wrapper.AddMember(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(SchemaType::GetValidateErrorKeyword(code),&#32;GetStateAllocator()).Move(),&#32;error,&#32;GetStateAllocator());
2265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(sourceName,&#32;GetStateAllocator()).Move(),&#32;wrapper,&#32;GetStateAllocator());
2266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2267 &#32;&#32;&#32;&#32;}
2268 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a27542a75617cdc28f6846b594fe01229">AddDependencySchemaError</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;sourceName,&#32;ISchemaValidator*&#32;subvalidator)&#32;{
2269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(sourceName,&#32;GetStateAllocator()).Move(),
2270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>*<emphasis role="keyword">&gt;</emphasis>(subvalidator)-&gt;<link linkend="_class_generic_schema_validator_1a21c0ad159e91398d222bab4d91d4c5dd">GetError</link>(),&#32;GetStateAllocator());
2271 &#32;&#32;&#32;&#32;}
2272 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ab6d1c964faaa0f86f9da51a0f66dc1e4">EndDependencyErrors</link>()&#32;{
2273 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(currentError_.ObjectEmpty())
2274 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2275 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;error(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>);
2276 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error.AddMember(GetErrorsString(),&#32;currentError_,&#32;GetStateAllocator());
2277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_&#32;=&#32;error;
2278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa2f81ab754a29330709c24110a2e895c8">kValidateErrorDependencies</link>);
2279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2280 &#32;&#32;&#32;&#32;}
2281 
2282 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1afc9082d5e9733762e64df3faa88e0160">DisallowedValue</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;code&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa3c12e9cbc8a479b77776ceccbda4c289">kValidateErrorEnum</link>)&#32;{
2283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(code);
2285 &#32;&#32;&#32;&#32;}
2286 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a9904719420fd91200f80772e92fe225f">StartDisallowedType</link>()&#32;{
2287 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetArray();
2288 &#32;&#32;&#32;&#32;}
2289 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a68e5308e5ca9726ee66139a212b63bcc">AddExpectedType</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">SchemaType::ValueType</link>&amp;&#32;expectedType)&#32;{
2290 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.PushBack(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(expectedType,&#32;GetStateAllocator()).Move(),&#32;GetStateAllocator());
2291 &#32;&#32;&#32;&#32;}
2292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ae0f99bfee3e2021c05322fd5d6de2f6e">EndDisallowedType</link>(<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">SchemaType::ValueType</link>&amp;&#32;actualType)&#32;{
2293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;error(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>);
2294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error.AddMember(GetExpectedString(),&#32;currentError_,&#32;GetStateAllocator());
2295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error.AddMember(GetActualString(),&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(actualType,&#32;GetStateAllocator()).Move(),&#32;GetStateAllocator());
2296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_&#32;=&#32;error;
2297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa5504bec97bd2ef15efac9ff5b0a6e8fa">kValidateErrorType</link>);
2298 &#32;&#32;&#32;&#32;}
2299 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a4275b02cdd86bfe11b42afe94817eae5">NotAllOf</link>(ISchemaValidator**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;{
2300 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Treat&#32;allOf&#32;like&#32;oneOf&#32;and&#32;anyOf&#32;to&#32;match&#32;https://rapidjson.org/md_doc_schema.html#allOf-anyOf-oneOf</emphasis>
2301 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorArray(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aaef48f9db2382e3308b823f078c73bce4">kValidateErrorAllOf</link>,&#32;subvalidators,&#32;count);
2302 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//for&#32;(SizeType&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;++i)&#32;{</emphasis>
2303 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;&#32;&#32;&#32;MergeError(static_cast&lt;GenericSchemaValidator*&gt;(subvalidators[i])-&gt;GetError());</emphasis>
2304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//}</emphasis>
2305 &#32;&#32;&#32;&#32;}
2306 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1aae9c45082721c650b91f8418cecc7293">NoneOf</link>(ISchemaValidator**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;{
2307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorArray(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa7b821605f3eb4ec77e2c42204b3957cf">kValidateErrorAnyOf</link>,&#32;subvalidators,&#32;count);
2308 &#32;&#32;&#32;&#32;}
2309 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1accdba5555deae396fa728d8e20ce7ed5">NotOneOf</link>(ISchemaValidator**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;matched&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;{
2310 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorArray(matched&#32;?&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa1bbc2293748b2e80415c77c7a6a069f9">kValidateErrorOneOfMatch</link>&#32;:&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa56466697ca410e5ddc2c7fabe11f3132">kValidateErrorOneOf</link>,&#32;subvalidators,&#32;count);
2311 &#32;&#32;&#32;&#32;}
2312 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1acc65a322086c792d6534e306c7a091cf">Disallowed</link>()&#32;{
2313 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2314 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aadd079998cffcae99da28675a5742327d">kValidateErrorNot</link>);
2315 &#32;&#32;&#32;&#32;}
2316 
2317 <emphasis role="preprocessor">#define&#32;RAPIDJSON_STRING_(name,&#32;...)&#32;\</emphasis>
2318 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;static&#32;const&#32;StringRefType&amp;&#32;Get##name##String()&#32;{\</emphasis>
2319 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;const&#32;Ch&#32;s[]&#32;=&#32;{&#32;__VA_ARGS__,&#32;&apos;\0&apos;&#32;};\</emphasis>
2320 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static&#32;const&#32;StringRefType&#32;v(s,&#32;static_cast&lt;SizeType&gt;(sizeof(s)&#32;/&#32;sizeof(Ch)&#32;-&#32;1));&#32;\</emphasis>
2321 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;v;\</emphasis>
2322 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
2323 
2324 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(InstanceRef,&#32;<emphasis role="charliteral">&apos;i&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;s&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;t&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;a&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;n&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;c&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;R&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;e&apos;</emphasis>,&#32;<emphasis role="charliteral">&apos;f&apos;</emphasis>)
2325 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(SchemaRef,&#32;&apos;s&apos;,&#32;&apos;c&apos;,&#32;&apos;h&apos;,&#32;&apos;e&apos;,&#32;&apos;m&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;R&apos;,&#32;&apos;e&apos;,&#32;&apos;f&apos;)
2326 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Expected,&#32;&apos;e&apos;,&#32;&apos;x&apos;,&#32;&apos;p&apos;,&#32;&apos;e&apos;,&#32;&apos;c&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;d&apos;)
2327 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Actual,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;c&apos;,&#32;&apos;t&apos;,&#32;&apos;u&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;l&apos;)
2328 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(<link linkend="_class_generic_schema_validator_1acc65a322086c792d6534e306c7a091cf">Disallowed</link>,&#32;&apos;d&apos;,&#32;&apos;i&apos;,&#32;&apos;s&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;l&apos;,&#32;&apos;l&apos;,&#32;&apos;o&apos;,&#32;&apos;w&apos;,&#32;&apos;e&apos;,&#32;&apos;d&apos;)
2329 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Missing,&#32;&apos;m&apos;,&#32;&apos;i&apos;,&#32;&apos;s&apos;,&#32;&apos;s&apos;,&#32;&apos;i&apos;,&#32;&apos;n&apos;,&#32;&apos;g&apos;)
2330 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Errors,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;r&apos;,&#32;&apos;s&apos;)
2331 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(ErrorCode,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;r&apos;,&#32;&apos;C&apos;,&#32;&apos;o&apos;,&#32;&apos;d&apos;,&#32;&apos;e&apos;)
2332 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(ErrorMessage,&#32;&apos;e&apos;,&#32;&apos;r&apos;,&#32;&apos;r&apos;,&#32;&apos;o&apos;,&#32;&apos;r&apos;,&#32;&apos;M&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;,&#32;&apos;s&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;g&apos;,&#32;&apos;e&apos;)
2333 &#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab63115d6dc8a0c74d5fb0d66f217cabb">RAPIDJSON_STRING_</link>(Duplicates,&#32;&apos;d&apos;,&#32;&apos;u&apos;,&#32;&apos;p&apos;,&#32;&apos;l&apos;,&#32;&apos;i&apos;,&#32;&apos;c&apos;,&#32;&apos;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&apos;,&#32;&apos;t&apos;,&#32;&apos;e&apos;,&#32;&apos;s&apos;)
2334 
2335 <emphasis role="preprocessor">#undef&#32;RAPIDJSON_STRING_</emphasis>
2336 
2337 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
2338 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_()&#32;\</emphasis>
2339 <emphasis role="preprocessor">RAPIDJSON_MULTILINEMACRO_BEGIN\</emphasis>
2340 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;*documentStack_.template&#32;Push&lt;Ch&gt;()&#32;=&#32;&apos;\0&apos;;\</emphasis>
2341 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;documentStack_.template&#32;Pop&lt;Ch&gt;(1);\</emphasis>
2342 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;internal::PrintInvalidDocument(documentStack_.template&#32;Bottom&lt;Ch&gt;());\</emphasis>
2343 <emphasis role="preprocessor">RAPIDJSON_MULTILINEMACRO_END</emphasis>
2344 <emphasis role="preprocessor">#else</emphasis>
2345 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_()</emphasis>
2346 <emphasis role="preprocessor">#endif</emphasis>
2347 
2348 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HANDLE_BEGIN_(method,&#32;arg1)\</emphasis>
2349 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;(!valid_)&#32;return&#32;false;&#32;\</emphasis>
2350 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;if&#32;((!BeginValue()&#32;&amp;&amp;&#32;!GetContinueOnErrors())&#32;||&#32;(!CurrentSchema().method&#32;arg1&#32;&amp;&amp;&#32;!GetContinueOnErrors()))&#32;{\</emphasis>
2351 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_();\</emphasis>
2352 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;return&#32;valid_&#32;=&#32;false;\</emphasis>
2353 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
2354 
2355 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(method,&#32;arg2)\</emphasis>
2356 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;for&#32;(Context*&#32;context&#32;=&#32;schemaStack_.template&#32;Bottom&lt;Context&gt;();&#32;context&#32;!=&#32;schemaStack_.template&#32;End&lt;Context&gt;();&#32;context++)&#32;{\</emphasis>
2357 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(context-&gt;hasher)\</emphasis>
2358 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;HasherType*&gt;(context-&gt;hasher)-&gt;method&#32;arg2;\</emphasis>
2359 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(context-&gt;validators)\</emphasis>
2360 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(SizeType&#32;i_&#32;=&#32;0;&#32;i_&#32;&lt;&#32;context-&gt;validatorCount;&#32;i_++)\</emphasis>
2361 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;GenericSchemaValidator*&gt;(context-&gt;validators[i_])-&gt;method&#32;arg2;\</emphasis>
2362 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;if&#32;(context-&gt;patternPropertiesValidators)\</emphasis>
2363 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;for&#32;(SizeType&#32;i_&#32;=&#32;0;&#32;i_&#32;&lt;&#32;context-&gt;patternPropertiesValidatorCount;&#32;i_++)\</emphasis>
2364 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;static_cast&lt;GenericSchemaValidator*&gt;(context-&gt;patternPropertiesValidators[i_])-&gt;method&#32;arg2;\</emphasis>
2365 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;}</emphasis>
2366 
2367 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HANDLE_END_(method,&#32;arg2)\</emphasis>
2368 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;valid_&#32;=&#32;(EndValue()&#32;||&#32;GetContinueOnErrors())&#32;&amp;&amp;&#32;(!outputHandler_&#32;||&#32;outputHandler_-&gt;method&#32;arg2);\</emphasis>
2369 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;return&#32;valid_;</emphasis>
2370 
2371 <emphasis role="preprocessor">#define&#32;RAPIDJSON_SCHEMA_HANDLE_VALUE_(method,&#32;arg1,&#32;arg2)&#32;\</emphasis>
2372 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_SCHEMA_HANDLE_BEGIN_&#32;&#32;&#32;(method,&#32;arg1);\</emphasis>
2373 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_SCHEMA_HANDLE_PARALLEL_(method,&#32;arg2);\</emphasis>
2374 <emphasis role="preprocessor">&#32;&#32;&#32;&#32;RAPIDJSON_SCHEMA_HANDLE_END_&#32;&#32;&#32;&#32;&#32;(method,&#32;arg2)</emphasis>
2375 
2376 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a7137af73e934f50c66cbb8a9aa802ea6">Null</link>()&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1a7137af73e934f50c66cbb8a9aa802ea6">Null</link>,&#32;&#32;&#32;(CurrentContext()),&#32;(&#32;));&#32;}
2377 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1aa25fa7456f2f308a105e400f01a4afde">Bool</link>(<emphasis role="keywordtype">bool</emphasis>&#32;b)&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1aa25fa7456f2f308a105e400f01a4afde">Bool</link>,&#32;&#32;&#32;(CurrentContext(),&#32;b),&#32;(b));&#32;}
2378 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ad823c29990225661a4df69d34647b659">Int</link>(<emphasis role="keywordtype">int</emphasis>&#32;i)&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1ad823c29990225661a4df69d34647b659">Int</link>,&#32;&#32;&#32;&#32;(CurrentContext(),&#32;i),&#32;(i));&#32;}
2379 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1aa688665c5274f93543c84a4b6cabe8da">Uint</link>(<emphasis role="keywordtype">unsigned</emphasis>&#32;u)&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1aa688665c5274f93543c84a4b6cabe8da">Uint</link>,&#32;&#32;&#32;(CurrentContext(),&#32;u),&#32;(u));&#32;}
2380 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac5a9e416e18129a7b787f251019a828f">Int64</link>(<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>&#32;i)&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1ac5a9e416e18129a7b787f251019a828f">Int64</link>,&#32;&#32;(CurrentContext(),&#32;i),&#32;(i));&#32;}
2381 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1abfc56c58cf0b65318e376fc5f2879292">Uint64</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;u)&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1abfc56c58cf0b65318e376fc5f2879292">Uint64</link>,&#32;(CurrentContext(),&#32;u),&#32;(u));&#32;}
2382 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1aed0532dbda3ac6f3ca7196af06066b86">Double</link>(<emphasis role="keywordtype">double</emphasis>&#32;d)&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1aed0532dbda3ac6f3ca7196af06066b86">Double</link>,&#32;(CurrentContext(),&#32;d),&#32;(d));&#32;}
2383 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ae4f024145421d2c1dde08a9de528722a">RawNumber</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy)
2384 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1a33cf3f83307a8fea38c3238ef75c3d58">String</link>,&#32;(CurrentContext(),&#32;str,&#32;length,&#32;copy),&#32;(str,&#32;length,&#32;copy));&#32;}
2385 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a33cf3f83307a8fea38c3238ef75c3d58">String</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;length,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy)
2386 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;{&#32;<link linkend="_schema_8h_1a8c347782f5ba7abab760e5dbc5795c41">RAPIDJSON_SCHEMA_HANDLE_VALUE_</link>(<link linkend="_class_generic_schema_validator_1a33cf3f83307a8fea38c3238ef75c3d58">String</link>,&#32;(CurrentContext(),&#32;str,&#32;length,&#32;copy),&#32;(str,&#32;length,&#32;copy));&#32;}
2387 
2388 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a59972d612c3d37aae9a30222e428d216">StartObject</link>()&#32;{
2389 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1a25701b28a823cc7621f1e01ae7031007">RAPIDJSON_SCHEMA_HANDLE_BEGIN_</link>(<link linkend="_class_generic_schema_validator_1a59972d612c3d37aae9a30222e428d216">StartObject</link>,&#32;(CurrentContext()));
2390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1af17aaed9cdb88ac6faa2b7ca7029da63">RAPIDJSON_SCHEMA_HANDLE_PARALLEL_</link>(<link linkend="_class_generic_schema_validator_1a59972d612c3d37aae9a30222e428d216">StartObject</link>,&#32;());
2391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;valid_&#32;=&#32;!outputHandler_&#32;||&#32;outputHandler_-&gt;StartObject();
2392 &#32;&#32;&#32;&#32;}
2393 &#32;&#32;&#32;&#32;
2394 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a6d08b458216ec4a09eed9d94800d05c1">Key</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;copy)&#32;{
2395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!valid_)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AppendToken(str,&#32;len);
2397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CurrentSchema().<link linkend="_class_generic_schema_validator_1a6d08b458216ec4a09eed9d94800d05c1">Key</link>(CurrentContext(),&#32;str,&#32;len,&#32;copy)&#32;&amp;&amp;&#32;!GetContinueOnErrors())&#32;<emphasis role="keywordflow">return</emphasis>&#32;valid_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1af17aaed9cdb88ac6faa2b7ca7029da63">RAPIDJSON_SCHEMA_HANDLE_PARALLEL_</link>(<link linkend="_class_generic_schema_validator_1a6d08b458216ec4a09eed9d94800d05c1">Key</link>,&#32;(str,&#32;len,&#32;copy));
2399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;valid_&#32;=&#32;!outputHandler_&#32;||&#32;outputHandler_-&gt;Key(str,&#32;len,&#32;copy);
2400 &#32;&#32;&#32;&#32;}
2401 &#32;&#32;&#32;&#32;
2402 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1aa89e14f0f731f6acdec22a0f7e003037">EndObject</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;memberCount)&#32;{
2403 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!valid_)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2404 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1af17aaed9cdb88ac6faa2b7ca7029da63">RAPIDJSON_SCHEMA_HANDLE_PARALLEL_</link>(<link linkend="_class_generic_schema_validator_1aa89e14f0f731f6acdec22a0f7e003037">EndObject</link>,&#32;(memberCount));
2405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CurrentSchema().<link linkend="_class_generic_schema_validator_1aa89e14f0f731f6acdec22a0f7e003037">EndObject</link>(CurrentContext(),&#32;memberCount)&#32;&amp;&amp;&#32;!GetContinueOnErrors())&#32;<emphasis role="keywordflow">return</emphasis>&#32;valid_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab1cb400ef08159e3e417f03c8adefaff">RAPIDJSON_SCHEMA_HANDLE_END_</link>(<link linkend="_class_generic_schema_validator_1aa89e14f0f731f6acdec22a0f7e003037">EndObject</link>,&#32;(memberCount));
2407 &#32;&#32;&#32;&#32;}
2408 
2409 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1aba13751f802531ed8cbd850778ea993c">StartArray</link>()&#32;{
2410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1a25701b28a823cc7621f1e01ae7031007">RAPIDJSON_SCHEMA_HANDLE_BEGIN_</link>(<link linkend="_class_generic_schema_validator_1aba13751f802531ed8cbd850778ea993c">StartArray</link>,&#32;(CurrentContext()));
2411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1af17aaed9cdb88ac6faa2b7ca7029da63">RAPIDJSON_SCHEMA_HANDLE_PARALLEL_</link>(<link linkend="_class_generic_schema_validator_1aba13751f802531ed8cbd850778ea993c">StartArray</link>,&#32;());
2412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;valid_&#32;=&#32;!outputHandler_&#32;||&#32;outputHandler_-&gt;StartArray();
2413 &#32;&#32;&#32;&#32;}
2414 &#32;&#32;&#32;&#32;
2415 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a67b501f0f65d40e0086ca8216882b34f">EndArray</link>(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;elementCount)&#32;{
2416 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!valid_)&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2417 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1af17aaed9cdb88ac6faa2b7ca7029da63">RAPIDJSON_SCHEMA_HANDLE_PARALLEL_</link>(<link linkend="_class_generic_schema_validator_1a67b501f0f65d40e0086ca8216882b34f">EndArray</link>,&#32;(elementCount));
2418 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CurrentSchema().<link linkend="_class_generic_schema_validator_1a67b501f0f65d40e0086ca8216882b34f">EndArray</link>(CurrentContext(),&#32;elementCount)&#32;&amp;&amp;&#32;!GetContinueOnErrors())&#32;<emphasis role="keywordflow">return</emphasis>&#32;valid_&#32;=&#32;<emphasis role="keyword">false</emphasis>;
2419 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ab1cb400ef08159e3e417f03c8adefaff">RAPIDJSON_SCHEMA_HANDLE_END_</link>(<link linkend="_class_generic_schema_validator_1a67b501f0f65d40e0086ca8216882b34f">EndArray</link>,&#32;(elementCount));
2420 &#32;&#32;&#32;&#32;}
2421 
2422 <emphasis role="preprocessor">#undef&#32;RAPIDJSON_SCHEMA_HANDLE_BEGIN_VERBOSE_</emphasis>
2423 <emphasis role="preprocessor">#undef&#32;RAPIDJSON_SCHEMA_HANDLE_BEGIN_</emphasis>
2424 <emphasis role="preprocessor">#undef&#32;RAPIDJSON_SCHEMA_HANDLE_PARALLEL_</emphasis>
2425 <emphasis role="preprocessor">#undef&#32;RAPIDJSON_SCHEMA_HANDLE_VALUE_</emphasis>
2426 
2427 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Implementation&#32;of&#32;ISchemaStateFactory&lt;SchemaType&gt;</emphasis>
2428 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;ISchemaValidator*&#32;<link linkend="_class_generic_schema_validator_1ad4afd8cdb09a6f47a23406894f77ee8a">CreateSchemaValidator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac79628f00f6720bbabb70b44f0d076a0">SchemaType</link>&amp;&#32;root,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;inheritContinueOnErrors)&#32;{
2429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ISchemaValidator*&#32;sv&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(GetStateAllocator().Malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>)))&#32;<link linkend="_class_generic_schema_validator_1a202ee6fdbe5ae9eab3e77a81ecdfeb6d">GenericSchemaValidator</link>(*schemaDocument_,&#32;root,&#32;documentStack_.template&#32;Bottom&lt;char&gt;(),&#32;documentStack_.GetSize(),
2430 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
2431 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;depth_&#32;+&#32;1,
2432 <emphasis role="preprocessor">#endif</emphasis>
2433 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&amp;GetStateAllocator());
2434 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;sv-&gt;SetValidateFlags(inheritContinueOnErrors&#32;?&#32;<link linkend="_class_generic_schema_validator_1a318bf1cf98d2f18074edd336b1bc684d">GetValidateFlags</link>()&#32;:&#32;<link linkend="_class_generic_schema_validator_1a318bf1cf98d2f18074edd336b1bc684d">GetValidateFlags</link>()&#32;&amp;&#32;~(unsigned)<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942ab0d30a1c30a84eb96f5dda97abbde002">kValidateContinueOnErrorFlag</link>);
2435 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;sv;
2436 &#32;&#32;&#32;&#32;}
2437 
2438 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ae24fa298e328f1fd7dda2ef6267156d2">DestroySchemaValidator</link>(ISchemaValidator*&#32;validator)&#32;{
2439 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>*&#32;v&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>*<emphasis role="keyword">&gt;</emphasis>(validator);
2440 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;v-&gt;<link linkend="_class_generic_schema_validator_1a3eab83d483a50efb0c0390adf3291963">~GenericSchemaValidator</link>();
2441 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">StateAllocator::Free</link>(v);
2442 &#32;&#32;&#32;&#32;}
2443 
2444 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_generic_schema_validator_1a48ecc252813e60a0efdb4eb44b193bd5">CreateHasher</link>()&#32;{
2445 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">new</emphasis>&#32;(GetStateAllocator().Malloc(<emphasis role="keyword">sizeof</emphasis>(<link linkend="_classinternal_1_1_hasher">HasherType</link>)))&#32;<link linkend="_classinternal_1_1_hasher">HasherType</link>(&amp;GetStateAllocator());
2446 &#32;&#32;&#32;&#32;}
2447 
2448 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;<link linkend="_class_generic_schema_validator_1ac01c45982a1f512e1ca06fe5544b0c0f">GetHashCode</link>(<emphasis role="keywordtype">void</emphasis>*&#32;hasher)&#32;{
2449 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classinternal_1_1_hasher">HasherType</link>*<emphasis role="keyword">&gt;</emphasis>(hasher)-&gt;<link linkend="_class_generic_schema_validator_1ac01c45982a1f512e1ca06fe5544b0c0f">GetHashCode</link>();
2450 &#32;&#32;&#32;&#32;}
2451 
2452 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a007eef58be575dc562543d069ddd2710">DestroryHasher</link>(<emphasis role="keywordtype">void</emphasis>*&#32;hasher)&#32;{
2453 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_hasher">HasherType</link>*&#32;h&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_classinternal_1_1_hasher">HasherType</link>*<emphasis role="keyword">&gt;</emphasis>(hasher);
2454 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;h-&gt;~HasherType();
2455 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">StateAllocator::Free</link>(h);
2456 &#32;&#32;&#32;&#32;}
2457 
2458 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_generic_schema_validator_1a9f983043d6bd1a12d9e2dac756dabbae">MallocState</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
2459 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;GetStateAllocator().Malloc(size);
2460 &#32;&#32;&#32;&#32;}
2461 
2462 &#32;&#32;&#32;&#32;<emphasis role="keyword">virtual</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a4e250737a411af2969a9e585a7da4187">FreeState</link>(<emphasis role="keywordtype">void</emphasis>*&#32;p)&#32;{
2463 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">StateAllocator::Free</link>(p);
2464 &#32;&#32;&#32;&#32;}
2465 
2466 <emphasis role="keyword">private</emphasis>:
2467 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaType::Context&#32;Context;
2468 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_value">GenericValue&lt;UTF8&lt;&gt;</link>,&#32;StateAllocator&gt;&#32;HashCodeArray;
2469 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_classinternal_1_1_hasher">internal::Hasher&lt;EncodingType, StateAllocator&gt;</link>&#32;HasherType;
2470 
2471 &#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a202ee6fdbe5ae9eab3e77a81ecdfeb6d">GenericSchemaValidator</link>(&#32;
2472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType&amp;&#32;schemaDocument,
2473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac79628f00f6720bbabb70b44f0d076a0">SchemaType</link>&amp;&#32;root,
2474 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>*&#32;basePath,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;basePathSize,
2475 #<emphasis role="keywordflow">if</emphasis>&#32;<link linkend="_schema_8h_1a40c690b6fd0b7ae8d8484b613255cc72">RAPIDJSON_SCHEMA_VERBOSE</link>
2476 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;depth,
2477 #endif
2478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;StateAllocator*&#32;allocator&#32;=&#32;0,
2479 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;schemaStackCapacity&#32;=&#32;kDefaultSchemaStackCapacity,
2480 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;documentStackCapacity&#32;=&#32;kDefaultDocumentStackCapacity)
2481 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:
2482 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument_(&amp;schemaDocument),
2483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;root_(root),
2484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stateAllocator_(allocator),
2485 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ownStateAllocator_(0),
2486 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaStack_(allocator,&#32;schemaStackCapacity),
2487 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack_(allocator,&#32;documentStackCapacity),
2488 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;outputHandler_(0),
2489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>),
2490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_(),
2491 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;missingDependents_(),
2492 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;valid_(true),
2493 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;flags_(<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942a70564fe50c13963b485000be542c52c9">kValidateDefaultFlags</link>)
2494 #if&#32;<link linkend="_schema_8h_1a40c690b6fd0b7ae8d8484b613255cc72">RAPIDJSON_SCHEMA_VERBOSE</link>
2495 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;,&#32;depth_(depth)
2496 #endif
2497 &#32;&#32;&#32;&#32;{
2498 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(basePath&#32;&amp;&amp;&#32;basePathSize)
2499 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;memcpy(documentStack_.template&#32;Push&lt;char&gt;(basePathSize),&#32;basePath,&#32;basePathSize);
2500 &#32;&#32;&#32;&#32;}
2501 
2502 &#32;&#32;&#32;&#32;StateAllocator&amp;&#32;GetStateAllocator()&#32;{
2503 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!stateAllocator_)
2504 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;stateAllocator_&#32;=&#32;ownStateAllocator_&#32;=&#32;<link linkend="_rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b">RAPIDJSON_NEW</link>(StateAllocator)();
2505 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*stateAllocator_;
2506 &#32;&#32;&#32;&#32;}
2507 
2508 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;GetContinueOnErrors()<emphasis role="keyword">&#32;const&#32;</emphasis>{
2509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;flags_&#32;&amp;&#32;<link linkend="_schema_8h_1a380a56f9b589025b27a565de4c4a2942ab0d30a1c30a84eb96f5dda97abbde002">kValidateContinueOnErrorFlag</link>;
2510 &#32;&#32;&#32;&#32;}
2511 
2512 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;BeginValue()&#32;{
2513 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schemaStack_.Empty())
2514 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PushSchema(root_);
2515 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2516 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(CurrentContext().inArray)
2517 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_structinternal_1_1_token_helper">internal::TokenHelper&lt;internal::Stack&lt;StateAllocator&gt;</link>,&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>&gt;::AppendIndexToken(documentStack_,&#32;CurrentContext().arrayElementIndex);
2518 
2519 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CurrentSchema().BeginValue(CurrentContext())&#32;&amp;&amp;&#32;!GetContinueOnErrors())
2520 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2521 
2522 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count&#32;=&#32;CurrentContext().patternPropertiesSchemaCount;
2523 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac79628f00f6720bbabb70b44f0d076a0">SchemaType</link>**&#32;sa&#32;=&#32;CurrentContext().patternPropertiesSchemas;
2524 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;Context::PatternValidatorType&#32;patternValidatorType&#32;=&#32;CurrentContext().valuePatternValidatorType;
2525 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;valueUniqueness&#32;=&#32;CurrentContext().valueUniqueness;
2526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(CurrentContext().valueSchema);
2527 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PushSchema(*CurrentContext().valueSchema);
2528 
2529 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(count&#32;&gt;&#32;0)&#32;{
2530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CurrentContext().objectPatternValidatorType&#32;=&#32;patternValidatorType;
2531 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ISchemaValidator**&amp;&#32;va&#32;=&#32;CurrentContext().patternPropertiesValidators;
2532 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&amp;&#32;validatorCount&#32;=&#32;CurrentContext().patternPropertiesValidatorCount;
2533 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ISchemaValidator**<emphasis role="keyword">&gt;</emphasis>(<link linkend="_class_generic_schema_validator_1a9f983043d6bd1a12d9e2dac756dabbae">MallocState</link>(<emphasis role="keyword">sizeof</emphasis>(ISchemaValidator*)&#32;*&#32;count));
2534 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;i++)
2535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;va[validatorCount++]&#32;=&#32;<link linkend="_class_generic_schema_validator_1ad4afd8cdb09a6f47a23406894f77ee8a">CreateSchemaValidator</link>(*sa[i],&#32;<emphasis role="keyword">true</emphasis>);&#32;&#32;<emphasis role="comment">//&#32;Inherit&#32;continueOnError</emphasis>
2536 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2537 
2538 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CurrentContext().arrayUniqueness&#32;=&#32;valueUniqueness;
2539 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2540 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2541 &#32;&#32;&#32;&#32;}
2542 
2543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;EndValue()&#32;{
2544 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!CurrentSchema().EndValue(CurrentContext())&#32;&amp;&amp;&#32;!GetContinueOnErrors())
2545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
2546 
2547 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
2548 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_string_buffer">GenericStringBuffer&lt;EncodingType&gt;</link>&#32;sb;
2549 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;schemaDocument_-&gt;GetPointer(&amp;CurrentSchema()).Stringify(sb);
2550 
2551 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack_.template&#32;Push&lt;Ch&gt;()&#32;=&#32;<emphasis role="charliteral">&apos;\0&apos;</emphasis>;
2552 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack_.template&#32;Pop&lt;Ch&gt;(1);
2553 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;internal::PrintValidatorPointers(depth_,&#32;sb.<link linkend="_class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719">GetString</link>(),&#32;documentStack_.template&#32;Bottom&lt;Ch&gt;());
2554 <emphasis role="preprocessor">#endif</emphasis>
2555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;hasher&#32;=&#32;CurrentContext().hasher;
2556 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;h&#32;=&#32;hasher&#32;&amp;&amp;&#32;CurrentContext().arrayUniqueness&#32;?&#32;<emphasis role="keyword">static_cast&lt;</emphasis>HasherType*<emphasis role="keyword">&gt;</emphasis>(hasher)-&gt;<link linkend="_class_generic_schema_validator_1ac01c45982a1f512e1ca06fe5544b0c0f">GetHashCode</link>()&#32;:&#32;0;
2557 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
2558 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;PopSchema();
2559 
2560 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!schemaStack_.Empty())&#32;{
2561 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Context&amp;&#32;context&#32;=&#32;CurrentContext();
2562 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Only&#32;check&#32;uniqueness&#32;if&#32;there&#32;is&#32;a&#32;hasher</emphasis>
2563 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(hasher&#32;&amp;&amp;&#32;context.valueUniqueness)&#32;{
2564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;HashCodeArray*&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>HashCodeArray*<emphasis role="keyword">&gt;</emphasis>(context.arrayElementHashCodes);
2565 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)
2566 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;CurrentContext().arrayElementHashCodes&#32;=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;=&#32;<emphasis role="keyword">new</emphasis>&#32;(GetStateAllocator().Malloc(<emphasis role="keyword">sizeof</emphasis>(HashCodeArray)))&#32;HashCodeArray(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>);
2567 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_value_1a49010c6d6886f96ff0b0c51bccc7f6ea">HashCodeArray::ConstValueIterator</link>&#32;itr&#32;=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;Begin();&#32;itr&#32;!=&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;End();&#32;++itr)
2568 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(itr-&gt;GetUint64()&#32;==&#32;h)&#32;{
2569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1a82aa865146069e3ba5010d25346a71f2">DuplicateItems</link>(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(itr&#32;-&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;Begin()),&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;Size());
2570 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Cleanup&#32;before&#32;returning&#32;if&#32;continuing</emphasis>
2571 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(GetContinueOnErrors())&#32;{
2572 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;PushBack(h,&#32;GetStateAllocator());
2573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!documentStack_.Empty()&#32;&amp;&amp;&#32;*documentStack_.template&#32;Pop&lt;Ch&gt;(1)&#32;!=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>);
2574 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2575 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_schema_8h_1ad55d09b65c641aa4aeaa1190912f20a4">RAPIDJSON_INVALID_KEYWORD_RETURN</link>(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aa35159c760856953cbd62258140d8d498">kValidateErrorUniqueItems</link>);
2576 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2577 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;PushBack(h,&#32;GetStateAllocator());
2578 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2579 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2580 
2581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Remove&#32;the&#32;last&#32;token&#32;of&#32;document&#32;pointer</emphasis>
2582 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!documentStack_.Empty()&#32;&amp;&amp;&#32;*documentStack_.template&#32;Pop&lt;Ch&gt;(1)&#32;!=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)
2583 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;;
2584 
2585 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
2586 &#32;&#32;&#32;&#32;}
2587 
2588 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AppendToken(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>*&#32;str,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len)&#32;{
2589 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;documentStack_.template&#32;Reserve&lt;Ch&gt;(1&#32;+&#32;len&#32;*&#32;2);&#32;<emphasis role="comment">//&#32;worst&#32;case&#32;all&#32;characters&#32;are&#32;escaped&#32;as&#32;two&#32;characters</emphasis>
2590 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack_.template&#32;PushUnsafe&lt;Ch&gt;()&#32;=&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>;
2591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;len;&#32;i++)&#32;{
2592 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str[i]&#32;==&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>)&#32;{
2593 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack_.template&#32;PushUnsafe&lt;Ch&gt;()&#32;=&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>;
2594 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack_.template&#32;PushUnsafe&lt;Ch&gt;()&#32;=&#32;<emphasis role="charliteral">&apos;0&apos;</emphasis>;
2595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2596 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<emphasis role="keywordflow">if</emphasis>&#32;(str[i]&#32;==&#32;<emphasis role="charliteral">&apos;/&apos;</emphasis>)&#32;{
2597 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack_.template&#32;PushUnsafe&lt;Ch&gt;()&#32;=&#32;<emphasis role="charliteral">&apos;~&apos;</emphasis>;
2598 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack_.template&#32;PushUnsafe&lt;Ch&gt;()&#32;=&#32;<emphasis role="charliteral">&apos;1&apos;</emphasis>;
2599 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2600 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
2601 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;*documentStack_.template&#32;PushUnsafe&lt;Ch&gt;()&#32;=&#32;str[i];
2602 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2603 &#32;&#32;&#32;&#32;}
2604 
2605 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;PushSchema(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac79628f00f6720bbabb70b44f0d076a0">SchemaType</link>&amp;&#32;schema)&#32;{&#32;<emphasis role="keyword">new</emphasis>&#32;(schemaStack_.template&#32;Push&lt;Context&gt;())&#32;Context(*<emphasis role="keyword">this</emphasis>,&#32;*<emphasis role="keyword">this</emphasis>,&#32;&amp;schema);&#32;}
2606 &#32;&#32;&#32;&#32;
2607 &#32;&#32;&#32;&#32;RAPIDJSON_FORCEINLINE&#32;<emphasis role="keywordtype">void</emphasis>&#32;PopSchema()&#32;{
2608 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Context*&#32;c&#32;=&#32;schemaStack_.template&#32;Pop&lt;Context&gt;(1);
2609 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(HashCodeArray*&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>HashCodeArray*<emphasis role="keyword">&gt;</emphasis>(c-&gt;arrayElementHashCodes))&#32;{
2610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>-&gt;~HashCodeArray();
2611 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">StateAllocator::Free</link>(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
2612 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2613 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;c-&gt;~Context();
2614 &#32;&#32;&#32;&#32;}
2615 
2616 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddErrorInstanceLocation(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;result,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parent)&#32;{
2617 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_string_buffer">GenericStringBuffer&lt;EncodingType&gt;</link>&#32;sb;
2618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>&#32;instancePointer&#32;=&#32;<link linkend="_class_generic_schema_validator_1ac10a88c4dc138bbdbe2afd041658a3b0">GetInvalidDocumentPointer</link>();
2619 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;((parent&#32;&amp;&amp;&#32;instancePointer.GetTokenCount()&#32;&gt;&#32;0)
2620 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;?&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>(instancePointer.GetTokens(),&#32;instancePointer.GetTokenCount()&#32;-&#32;1)
2621 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;:&#32;instancePointer).StringifyUriFragment(sb);
2622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;instanceRef(sb.<link linkend="_class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719">GetString</link>(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(sb.<link linkend="_class_generic_string_buffer_1a725e862b9a78375f5363b0b61ad789f3">GetSize</link>()&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>)),
2623 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetStateAllocator());
2624 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddMember(GetInstanceRefString(),&#32;instanceRef,&#32;GetStateAllocator());
2625 &#32;&#32;&#32;&#32;}
2626 
2627 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddErrorSchemaLocation(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;result,&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>&#32;schema&#32;=&#32;<link linkend="_class_generic_schema_validator_1ae0c6c9a9c0ff6bae80e75c6705f2668b">PointerType</link>())&#32;{
2628 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_string_buffer">GenericStringBuffer&lt;EncodingType&gt;</link>&#32;sb;
2629 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;len&#32;=&#32;CurrentSchema().GetURI().GetStringLength();
2630 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(len)&#32;memcpy(sb.<link linkend="_class_generic_string_buffer_1a80af78c43da93126a940a40d1889278a">Push</link>(len),&#32;CurrentSchema().GetURI().GetString(),&#32;len&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>));
2631 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(schema.GetTokenCount())&#32;schema.StringifyUriFragment(sb);
2632 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a5b8f2d5c466b2a362e2e4c3bcfbfc5a8">GetInvalidSchemaPointer</link>().StringifyUriFragment(sb);
2633 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;schemaRef(sb.<link linkend="_class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719">GetString</link>(),&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link><emphasis role="keyword">&gt;</emphasis>(sb.<link linkend="_class_generic_string_buffer_1a725e862b9a78375f5363b0b61ad789f3">GetSize</link>()&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_class_generic_schema_validator_1a8b7dab5a0cda9cc0adaefb4401d260c1">Ch</link>)),
2634 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;GetStateAllocator());
2635 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddMember(GetSchemaRefString(),&#32;schemaRef,&#32;GetStateAllocator());
2636 &#32;&#32;&#32;&#32;}
2637 
2638 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddErrorCode(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;result,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;code)&#32;{
2639 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;result.AddMember(GetErrorCodeString(),&#32;code,&#32;GetStateAllocator());
2640 &#32;&#32;&#32;&#32;}
2641 
2642 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddError(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;keyword,&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;error)&#32;{
2643 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::MemberIterator</link>&#32;member&#32;=&#32;error_.FindMember(keyword);
2644 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(member&#32;==&#32;error_.MemberEnd())
2645 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_.AddMember(keyword,&#32;error,&#32;GetStateAllocator());
2646 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(member-&gt;value.IsObject())&#32;{
2648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;errors(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>);
2649 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errors.PushBack(member-&gt;value,&#32;GetStateAllocator());
2650 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;member-&gt;value&#32;=&#32;errors;
2651 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;member-&gt;value.PushBack(error,&#32;GetStateAllocator());
2653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2654 &#32;&#32;&#32;&#32;}
2655 
2656 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddCurrentError(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;code,&#32;<emphasis role="keywordtype">bool</emphasis>&#32;parent&#32;=&#32;<emphasis role="keyword">false</emphasis>)&#32;{
2657 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorCode(currentError_,&#32;code);
2658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorInstanceLocation(currentError_,&#32;parent);
2659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddErrorSchemaLocation(currentError_);
2660 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddError(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(SchemaType::GetValidateErrorKeyword(code),&#32;GetStateAllocator(),&#32;<emphasis role="keyword">false</emphasis>).Move(),&#32;currentError_);
2661 &#32;&#32;&#32;&#32;}
2662 
2663 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;MergeError(<link linkend="_class_generic_value">ValueType</link>&amp;&#32;other)&#32;{
2664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_class_generic_member_iterator">ValueType::MemberIterator</link>&#32;it&#32;=&#32;other.MemberBegin(),&#32;end&#32;=&#32;other.MemberEnd();&#32;it&#32;!=&#32;end;&#32;++it)&#32;{
2665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddError(it-&gt;name,&#32;it-&gt;value);
2666 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2667 &#32;&#32;&#32;&#32;}
2668 
2669 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddNumberError(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;code,&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;actual,&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1a3c004e35c7eb9fa5a28c0ccfb8ac62dc">SValue</link>&amp;&#32;expected,
2670 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">SchemaType::ValueType</link>&amp;&#32;(*exclusive)()&#32;=&#32;0)&#32;{
2671 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2672 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(GetActualString(),&#32;actual,&#32;GetStateAllocator());
2673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(GetExpectedString(),&#32;<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(expected,&#32;GetStateAllocator()).Move(),&#32;GetStateAllocator());
2674 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(exclusive)
2675 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(<link linkend="_class_generic_schema_validator_1a435890a2dddeecb896d4ac76de03ca68">ValueType</link>(exclusive(),&#32;GetStateAllocator()).Move(),&#32;<emphasis role="keyword">true</emphasis>,&#32;GetStateAllocator());
2676 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(code);
2677 &#32;&#32;&#32;&#32;}
2678 
2679 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;AddErrorArray(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;code,
2680 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ISchemaValidator**&#32;subvalidators,&#32;<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;count)&#32;{
2681 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;errors(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8">kArrayType</link>);
2682 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;count;&#32;++i)
2683 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;errors.PushBack(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_class_generic_schema_validator">GenericSchemaValidator</link>*<emphasis role="keyword">&gt;</emphasis>(subvalidators[i])-&gt;<link linkend="_class_generic_schema_validator_1a21c0ad159e91398d222bab4d91d4c5dd">GetError</link>(),&#32;GetStateAllocator());
2684 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.SetObject();
2685 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;currentError_.AddMember(GetErrorsString(),&#32;errors,&#32;GetStateAllocator());
2686 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;AddCurrentError(code);
2687 &#32;&#32;&#32;&#32;}
2688 
2689 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac79628f00f6720bbabb70b44f0d076a0">SchemaType</link>&amp;&#32;CurrentSchema()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*schemaStack_.template&#32;Top&lt;Context&gt;()-&gt;schema;&#32;}
2690 &#32;&#32;&#32;&#32;Context&amp;&#32;CurrentContext()&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*schemaStack_.template&#32;Top&lt;Context&gt;();&#32;}
2691 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;Context&amp;&#32;CurrentContext()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;*schemaStack_.template&#32;Top&lt;Context&gt;();&#32;}
2692 
2693 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kDefaultSchemaStackCapacity&#32;=&#32;1024;
2694 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kDefaultDocumentStackCapacity&#32;=&#32;256;
2695 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType*&#32;schemaDocument_;
2696 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_schema_validator_1ac79628f00f6720bbabb70b44f0d076a0">SchemaType</link>&amp;&#32;root_;
2697 &#32;&#32;&#32;&#32;StateAllocator*&#32;stateAllocator_;
2698 &#32;&#32;&#32;&#32;StateAllocator*&#32;ownStateAllocator_;
2699 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stack">internal::Stack&lt;StateAllocator&gt;</link>&#32;schemaStack_;&#32;&#32;&#32;&#32;
2700 &#32;&#32;&#32;&#32;<link linkend="_classinternal_1_1_stack">internal::Stack&lt;StateAllocator&gt;</link>&#32;documentStack_;&#32;&#32;
2701 &#32;&#32;&#32;&#32;OutputHandler*&#32;outputHandler_;
2702 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;error_;
2703 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;currentError_;
2704 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;missingDependents_;
2705 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;valid_;
2706 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;flags_;
2707 <emphasis role="preprocessor">#if&#32;RAPIDJSON_SCHEMA_VERBOSE</emphasis>
2708 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;depth_;
2709 <emphasis role="preprocessor">#endif</emphasis>
2710 };
2711 
2712 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_schema_validator">GenericSchemaValidator&lt;SchemaDocument&gt;</link>&#32;<link linkend="_schema_8h_1a09740efe5c13e9c508a4f067d85aa8c0">SchemaValidator</link>;
2713 
2715 <emphasis role="comment">//&#32;SchemaValidatingReader</emphasis>
2716 
2718 
2727 <emphasis role="keyword">template</emphasis>&#32;&lt;
2728 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;parseFlags,
2729 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream,
2730 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;SourceEncoding,
2731 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType&#32;=&#32;<link linkend="_schema_8h_1a49355f280272b969cfd756ef556935c4">SchemaDocument</link>,
2732 &#32;&#32;&#32;&#32;<emphasis role="keyword">typename</emphasis>&#32;StackAllocator&#32;=&#32;<link linkend="_class_crt_allocator">CrtAllocator</link>&gt;
2733 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_schema_validating_reader">SchemaValidatingReader</link>&#32;{
2734 <emphasis role="keyword">public</emphasis>:
2735 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;SchemaDocumentType::PointerType&#32;<link linkend="_class_schema_validating_reader_1a30ecf1b20ca5a1b79e0d5f4ceb3bf198">PointerType</link>;
2736 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;InputStream::Ch&#32;<link linkend="_class_schema_validating_reader_1a6eb6f887a49dbb400800ab4fc01f02c7">Ch</link>;
2737 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_generic_value">GenericValue&lt;SourceEncoding, StackAllocator&gt;</link>&#32;<link linkend="_class_schema_validating_reader_1af08b51fcef602c68d95769c35ae606be">ValueType</link>;
2738 
2740 
2744 &#32;&#32;&#32;&#32;<link linkend="_class_schema_validating_reader_1ae7945b71687ad3dd13b9c3d096892eac">SchemaValidatingReader</link>(InputStream&amp;&#32;is,&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType&amp;&#32;sd)&#32;:&#32;is_(is),&#32;sd_(sd),&#32;invalidSchemaKeyword_(),&#32;invalidSchemaCode_(<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gga2e1f88f94a5d9a6817a5de0ed2f0105aac15ca121db8911126960c0672dfe2a2e">kValidateErrorNone</link>),&#32;error_(<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f">kObjectType</link>),&#32;isValid_(true)&#32;{}
2745 
2746 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Handler&gt;
2747 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_schema_validating_reader_1a7135d8d53aacd850fbce2901cca4a4c3">operator()</link>(<link linkend="_classrapidjson_1_1_handler">Handler</link>&amp;&#32;handler)&#32;{
2748 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_reader">GenericReader&lt;SourceEncoding, typename SchemaDocumentType::EncodingType, StackAllocator&gt;</link>&#32;reader;
2749 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_generic_schema_validator">GenericSchemaValidator&lt;SchemaDocumentType, Handler&gt;</link>&#32;validator(sd_,&#32;handler);
2750 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;parseResult_&#32;=&#32;reader.template&#32;Parse&lt;parseFlags&gt;(is_,&#32;validator);
2751 
2752 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;isValid_&#32;=&#32;validator.<link linkend="_class_generic_schema_validator_1a8ebda4da3d8b1fc41e57f15dd62e8f19">IsValid</link>();
2753 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(isValid_)&#32;{
2754 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalidSchemaPointer_&#32;=&#32;<link linkend="_class_schema_validating_reader_1a30ecf1b20ca5a1b79e0d5f4ceb3bf198">PointerType</link>();
2755 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalidSchemaKeyword_&#32;=&#32;0;
2756 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalidDocumentPointer_&#32;=&#32;<link linkend="_class_schema_validating_reader_1a30ecf1b20ca5a1b79e0d5f4ceb3bf198">PointerType</link>();
2757 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_.SetObject();
2758 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2759 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
2760 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalidSchemaPointer_&#32;=&#32;validator.<link linkend="_class_generic_schema_validator_1a5b8f2d5c466b2a362e2e4c3bcfbfc5a8">GetInvalidSchemaPointer</link>();
2761 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalidSchemaKeyword_&#32;=&#32;validator.<link linkend="_class_generic_schema_validator_1ab5980d72c786b81ab907526fdf4172f3">GetInvalidSchemaKeyword</link>();
2762 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalidSchemaCode_&#32;=&#32;validator.<link linkend="_class_generic_schema_validator_1aeba2093eb93f77b239e9b4c27219c982">GetInvalidSchemaCode</link>();
2763 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;invalidDocumentPointer_&#32;=&#32;validator.<link linkend="_class_generic_schema_validator_1ac10a88c4dc138bbdbe2afd041658a3b0">GetInvalidDocumentPointer</link>();
2764 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;error_.CopyFrom(validator.<link linkend="_class_generic_schema_validator_1a21c0ad159e91398d222bab4d91d4c5dd">GetError</link>(),&#32;allocator_);
2765 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
2766 
2767 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseResult_;
2768 &#32;&#32;&#32;&#32;}
2769 
2770 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_parse_result">ParseResult</link>&amp;&#32;<link linkend="_class_schema_validating_reader_1acc40a173eed09563cb0abad84833e9b3">GetParseResult</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;parseResult_;&#32;}
2771 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_schema_validating_reader_1a3c04fa90a430a67a993a2b8876e89ff4">IsValid</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;isValid_;&#32;}
2772 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_schema_validating_reader_1a30ecf1b20ca5a1b79e0d5f4ceb3bf198">PointerType</link>&amp;&#32;<link linkend="_class_schema_validating_reader_1a5bdb2a12bfff9952f7b89069cae6905c">GetInvalidSchemaPointer</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;invalidSchemaPointer_;&#32;}
2773 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_schema_validating_reader_1a6eb6f887a49dbb400800ab4fc01f02c7">Ch</link>*&#32;<link linkend="_class_schema_validating_reader_1aa1dbb9886be16ee82c91a7293f9614e5">GetInvalidSchemaKeyword</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;invalidSchemaKeyword_;&#32;}
2774 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_schema_validating_reader_1a30ecf1b20ca5a1b79e0d5f4ceb3bf198">PointerType</link>&amp;&#32;<link linkend="_class_schema_validating_reader_1a219ab1f4aa1623e0a8d67ff5d6cb54b9">GetInvalidDocumentPointer</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;invalidDocumentPointer_;&#32;}
2775 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_generic_value">ValueType</link>&amp;&#32;<link linkend="_class_schema_validating_reader_1ae9f1dde3317af2cf65ae165f060498b4">GetError</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;error_;&#32;}
2776 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;<link linkend="_class_schema_validating_reader_1a625f4a209960ad79485d3c8e9bc23fbb">GetInvalidSchemaCode</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;invalidSchemaCode_;&#32;}
2777 
2778 <emphasis role="keyword">private</emphasis>:
2779 &#32;&#32;&#32;&#32;InputStream&amp;&#32;is_;
2780 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;SchemaDocumentType&amp;&#32;sd_;
2781 
2782 &#32;&#32;&#32;&#32;<link linkend="_struct_parse_result">ParseResult</link>&#32;parseResult_;
2783 &#32;&#32;&#32;&#32;<link linkend="_class_schema_validating_reader_1a30ecf1b20ca5a1b79e0d5f4ceb3bf198">PointerType</link>&#32;invalidSchemaPointer_;
2784 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_schema_validating_reader_1a6eb6f887a49dbb400800ab4fc01f02c7">Ch</link>*&#32;invalidSchemaKeyword_;
2785 &#32;&#32;&#32;&#32;<link linkend="_class_schema_validating_reader_1a30ecf1b20ca5a1b79e0d5f4ceb3bf198">PointerType</link>&#32;invalidDocumentPointer_;
2786 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga2e1f88f94a5d9a6817a5de0ed2f0105a">ValidateErrorCode</link>&#32;invalidSchemaCode_;
2787 &#32;&#32;&#32;&#32;StackAllocator&#32;allocator_;
2788 &#32;&#32;&#32;&#32;<link linkend="_class_generic_value">ValueType</link>&#32;error_;
2789 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;isValid_;
2790 };
2791 
2792 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
2793 RAPIDJSON_DIAG_POP
2794 
2795 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_SCHEMA_H_</emphasis>
</programlisting></section>
