<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_generic_value" xml:lang="en-US">
<title>GenericValue&lt; Encoding, Allocator &gt; Class Template Reference</title>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary></indexterm>
<para>

<para>Represents a JSON value. Use Value for <link linkend="_struct_u_t_f8">UTF8</link> encoding and default allocator. </para>
 
</para>
<para>
<computeroutput>#include &lt;document.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_array_data">ArrayData</link></para>
</listitem>
            <listitem><para>union <link linkend="_union_generic_value_1_1_data">Data</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_flag">Flag</link></para>
</listitem>
            <listitem><para>union <link linkend="_union_generic_value_1_1_number">Number</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_object_data">ObjectData</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_short_string">ShortString</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_value_1_1_string">String</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_class_generic_member">GenericMember</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; <link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link></para>

<para>Name-value pair in an object. </para>
</listitem>
            <listitem><para>typedef <link linkend="_classrapidjson_1_1_encoding">Encoding</link> <link linkend="_class_generic_value_1a28c2cb8d04d12566c1af37597a46d209">EncodingType</link></para>

<para>Encoding type from template parameter. </para>
</listitem>
            <listitem><para>typedef <link linkend="_classrapidjson_1_1_allocator">Allocator</link> <link linkend="_class_generic_value_1a7beb83860c1b8d2a0e2a7da9796b2fa1">AllocatorType</link></para>

<para>Allocator type from template parameter. </para>
</listitem>
            <listitem><para>typedef Encoding::Ch <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link></para>

<para>Character type derived from Encoding. </para>
</listitem>
            <listitem><para>typedef <link linkend="_struct_generic_string_ref">GenericStringRef</link>&lt; <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> &gt; <link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link></para>

<para>Reference to a constant string. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; false, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Iterator <link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link></para>

<para>Member iterator for iterating in object. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt; true, <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Iterator <link linkend="_class_generic_value_1aac08c3e660a9036d3dcb8b10ff6c61f4">ConstMemberIterator</link></para>

<para>Constant member iterator for iterating in object. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_value">GenericValue</link> * <link linkend="_class_generic_value_1aee30721a49688ba0f865f5d581eb6be9">ValueIterator</link></para>

<para>Value iterator for iterating in array. </para>
</listitem>
            <listitem><para>typedef const <link linkend="_class_generic_value">GenericValue</link> * <link linkend="_class_generic_value_1a49010c6d6886f96ff0b0c51bccc7f6ea">ConstValueIterator</link></para>

<para>Constant value iterator for iterating in array. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link></para>

<para>Value type of itself. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_array">GenericArray</link>&lt; false, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link> &gt; <link linkend="_class_generic_value_1a149e12992b8f6064c865a4cf55981b89">Array</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_array">GenericArray</link>&lt; true, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link> &gt; <link linkend="_class_generic_value_1a8f1d2728de56600b5f3df596e2a8a181">ConstArray</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_object">GenericObject</link>&lt; false, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link> &gt; <link linkend="_class_generic_value_1aee3606d69d411ce0d98f29639585989b">Object</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_object">GenericObject</link>&lt; true, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link> &gt; <link linkend="_class_generic_value_1a55ad310f5434e0e4a93df616b326ba7e">ConstObject</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Assignment operators    </title>
        <itemizedlist>
            <listitem><para>enum { 
<link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cac48966386b231124da7c3fb870e237ee">kBoolFlag</link> = 0x0008
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caa4776df2584fe4f341b183cdf3e00a79">kNumberFlag</link> = 0x0010
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cae3fb211193e0067efaddeb5a067120fb">kIntFlag</link> = 0x0020
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca7eba561e6cc6dcd704f907c5a005f3ce">kUintFlag</link> = 0x0040
, 
<link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca87c567a71dfa5a63363d82d32346884a">kInt64Flag</link> = 0x0080
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cac9200c78f749b6efaae640167a370c94">kUint64Flag</link> = 0x0100
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca70c741e7c488835892aa857f50090d7c">kDoubleFlag</link> = 0x0200
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caf3bf3661275a38c86addba900c52dccb">kStringFlag</link> = 0x0400
, 
<link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca10ef921aef1773bc1f88796bf1828f92">kCopyFlag</link> = 0x0800
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cae58a76d504c6a67566aebfa4a6bd2e55">kInlineStrFlag</link> = 0x1000
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca8c5507cf143edac6e50abec2d89cc40d">kNullFlag</link> = kNullType
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca75dbcdbacc82f9379c602f0b6c41cf07">kTrueFlag</link> = static_cast&lt;int&gt;(kTrueType) | static_cast&lt;int&gt;(kBoolFlag)
, 
<link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca66d3877b074bb1a0455a6f6d3f7f91a3">kFalseFlag</link> = static_cast&lt;int&gt;(kFalseType) | static_cast&lt;int&gt;(kBoolFlag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cacfe8b720220d0a2e378683367386cbaf">kNumberIntFlag</link> = static_cast&lt;int&gt;(kNumberType) | static_cast&lt;int&gt;(kNumberFlag | kIntFlag | kInt64Flag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cae8c6c6286edf9c309e77af0ea0cf039c">kNumberUintFlag</link> = static_cast&lt;int&gt;(kNumberType) | static_cast&lt;int&gt;(kNumberFlag | kUintFlag | kUint64Flag | kInt64Flag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cad117eb41bb8015a76aadf6149bbd8ce5">kNumberInt64Flag</link> = static_cast&lt;int&gt;(kNumberType) | static_cast&lt;int&gt;(kNumberFlag | kInt64Flag)
, 
<link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caaa1ee6a546d4db67f4bdef41d1f54f02">kNumberUint64Flag</link> = static_cast&lt;int&gt;(kNumberType) | static_cast&lt;int&gt;(kNumberFlag | kUint64Flag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca29bc91c155577923abd8f19aa050058b">kNumberDoubleFlag</link> = static_cast&lt;int&gt;(kNumberType) | static_cast&lt;int&gt;(kNumberFlag | kDoubleFlag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cab7805b1908fd181afc8d70fe07b17e18">kNumberAnyFlag</link> = static_cast&lt;int&gt;(kNumberType) | static_cast&lt;int&gt;(kNumberFlag | kIntFlag | kInt64Flag | kUintFlag | kUint64Flag | kDoubleFlag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca5d26a84f26833eafd0028c0102a388a9">kConstStringFlag</link> = static_cast&lt;int&gt;(kStringType) | static_cast&lt;int&gt;(kStringFlag)
, 
<link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca10c83f7f191dce81bb0273adc0d838de">kCopyStringFlag</link> = static_cast&lt;int&gt;(kStringType) | static_cast&lt;int&gt;(kStringFlag | kCopyFlag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caca24fa09485fa10b17071509a985ff01">kShortStringFlag</link> = static_cast&lt;int&gt;(kStringType) | static_cast&lt;int&gt;(kStringFlag | kCopyFlag | kInlineStrFlag)
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caba5811d4baeb56dc793a6510fe28748c">kObjectFlag</link> = kObjectType
, <link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caf7d99965ba807c718b482a9a7fb28b47">kArrayFlag</link> = kArrayType
, 
<link linkend="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca793e0bc40e0abe1ed8bcb3e6fbba65c2">kTypeMask</link> = 0x07
 }</para>
</listitem>
            <listitem><para>template&lt;typename , typename , typename &gt; </para><para>class <link linkend="_class_generic_value_1ab05bc9e52e201a2867ea5bac141ee1ae">GenericDocument</link></para>
</listitem>
            <listitem><para>static const <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_value_1a188f57bdb1923c1fefe74baa995871a3">kDefaultArrayCapacity</link> = <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga10ba0ee06d0ac2803d0f2290d46b19f7">RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY</link></para>
</listitem>
            <listitem><para>static const <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_value_1a284d018914629aed9a4bd97fe2dc5899">kDefaultObjectCapacity</link> = <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5c88aa612939b592d15d3fc4bdf54272">RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY</link></para>
</listitem>
            <listitem><para><link linkend="_union_generic_value_1_1_data">Data</link> <link linkend="_class_generic_value_1aaf80f2c91d26fdde60b9edeeecd3509f">data_</link></para>
</listitem>
            <listitem><para><link linkend="_class_generic_value">GenericValue</link> &amp; <link linkend="_class_generic_value_1ad7502bbfcd0c14f7ece07243d56e2b90">operator=</link> (<link linkend="_class_generic_value">GenericValue</link> &amp;rhs) RAPIDJSON_NOEXCEPT</para>

<para>Assignment with move semantics. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value">GenericValue</link> &amp; <link linkend="_class_generic_value_1a2b7837d3adb6c0ad184269826ea78e97">operator=</link> (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> str) RAPIDJSON_NOEXCEPT</para>

<para>Assignment of constant string reference (no copy) </para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_class_generic_value_1a4a4418a93777942e1fb7ea71f8aaf680">RAPIDJSON_DISABLEIF_RETURN</link> ((internal::IsPointer&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt;),(<link linkend="_class_generic_value">GenericValue</link> &amp;)) operator</para>

<para>Assignment with primitive types. </para>
</listitem>
            <listitem><para>RAPIDJSON_FORCEINLINE const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * <link linkend="_class_generic_value_1af182f2ccbcd962d2a28f92407622e9a9">GetStringPointer</link> () const</para>
</listitem>
            <listitem><para>RAPIDJSON_FORCEINLINE const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * <link linkend="_class_generic_value_1ab3e8833927fb1454585e8692200dbb93">SetStringPointer</link> (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> *str)</para>
</listitem>
            <listitem><para>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value">GenericValue</link> * <link linkend="_class_generic_value_1a40f567bae6fabbb07822ebac5fe00bfc">GetElementsPointer</link> () const</para>
</listitem>
            <listitem><para>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value">GenericValue</link> * <link linkend="_class_generic_value_1a1ccc6e15fa49f0c30eab8e8f7f9418f2">SetElementsPointer</link> (<link linkend="_class_generic_value">GenericValue</link> *elements)</para>
</listitem>
            <listitem><para>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * <link linkend="_class_generic_value_1a8c39af1a639eae1b59db66e2cbb537c9">GetMembersPointer</link> () const</para>
</listitem>
            <listitem><para>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * <link linkend="_class_generic_value_1a634a87972649943604153708ca9aefb7">SetMembersPointer</link> (<link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> *members)</para>
</listitem>
            <listitem><para>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * <link linkend="_class_generic_value_1ae0d58cf0ac7a4d1aca47f8a18ba8cdfd">DoAllocMembers</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> capacity, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1a37e400c98968dec21293861983db9b06">DoReserveMembers</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> newCapacity, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>
</listitem>
            <listitem><para>template&lt;typename SourceAllocator &gt; </para><para><link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> <link linkend="_class_generic_value_1a62e070232ca1bab936de08b8dbf41a5d">DoFindMember</link> (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp;name)</para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1a4e2fbcde9054e87b591f79e6202a80d6">DoClearMembers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1aab3a51f8207a44ad87a1f8b0bbf53fe9">DoFreeMembers</link> ()</para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1a741c527ec9552ec0a7dce92f7b22d1c6">DoAddMember</link> (<link linkend="_class_generic_value">GenericValue</link> &amp;name, <link linkend="_class_generic_value">GenericValue</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> <link linkend="_class_generic_value_1a6db9c0ed0d2417d00b135195e3546f50">DoRemoveMember</link> (<link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> m)</para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> <link linkend="_class_generic_value_1a786fc0f1116ef209216884b13f814158">DoEraseMembers</link> (<link linkend="_class_generic_value_1aac08c3e660a9036d3dcb8b10ff6c61f4">ConstMemberIterator</link> first, <link linkend="_class_generic_value_1aac08c3e660a9036d3dcb8b10ff6c61f4">ConstMemberIterator</link> last)</para>
</listitem>
            <listitem><para>template&lt;typename SourceAllocator &gt; </para><para>void <link linkend="_class_generic_value_1a17e90627a90a4e97e8425e0ca4a22cbb">DoCopyMembers</link> (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp;rhs, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator, bool copyConstStrings)</para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1a8f5f309065479de40a16cf28a340da65">SetArrayRaw</link> (<link linkend="_class_generic_value">GenericValue</link> *values, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> count, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1a26c8ec7d68858df1038506df7fcff22d">SetObjectRaw</link> (<link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> *members, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> count, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>

<para>Initialize this value as object with initial data, without calling destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1a1451603922dcdf34976f125dc60f70ee">SetStringRaw</link> (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> s) RAPIDJSON_NOEXCEPT</para>

<para>Initialize this value as constant string, without calling destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1ad3d91db36dfdbfc1af40a79aae07723c">SetStringRaw</link> (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> s, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>

<para>Initialize this value as copy string with initial data, without calling destructor. </para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_value_1abb8ea2dfbe74ff4ee7dac6be31317f81">RawAssign</link> (<link linkend="_class_generic_value">GenericValue</link> &amp;rhs) RAPIDJSON_NOEXCEPT</para>

<para>Assignment without calling destructor. </para>
</listitem>
            <listitem><para>template&lt;typename SourceAllocator &gt; </para><para>bool <link linkend="_class_generic_value_1ad4d088dc601d99fea9d16300a7ec7ee1">StringEqual</link> (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp;rhs) const</para>
</listitem>
            <listitem><para>static RAPIDJSON_FORCEINLINE const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * <link linkend="_class_generic_value_1a28f6eb49f5d6d5a56d0bea696b89961d">DataString</link> (const <link linkend="_union_generic_value_1_1_data">Data</link> &amp;data)</para>
</listitem>
            <listitem><para>static RAPIDJSON_FORCEINLINE <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_value_1a1373c36e6bdffc6ed79143f47c1024ee">DataStringLength</link> (const <link linkend="_union_generic_value_1_1_data">Data</link> &amp;data)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Constructors and destructor.    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_generic_value_1ab0205d57176d83814ea4e4598c596fe8">GenericValue</link> () RAPIDJSON_NOEXCEPT</para>

<para>Default constructor creates a null value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a83c8f84b8e61f2f40414b703b75aea61">GenericValue</link> (<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type) RAPIDJSON_NOEXCEPT</para>

<para>Constructor with JSON value type. </para>
</listitem>
            <listitem><para>template&lt;typename SourceAllocator &gt; </para><para><link linkend="_class_generic_value_1a76c68b72723a06045776dbd425f9e8b6">GenericValue</link> (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp;rhs, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator, bool copyConstStrings=false)</para>

<para>Explicit copy constructor (with allocator) </para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_class_generic_value_1a0f6a0394bfffaedde88e433b2265194c">GenericValue</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> b, RAPIDJSON_ENABLEIF((internal::IsSame&lt; bool, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt;))) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for boolean value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1aafc754ade38421c179f5c8933ecbaf45">GenericValue</link> (int i) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for int value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a972bff6c56ac3d04622ff7fad8d98331">GenericValue</link> (unsigned u) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for unsigned value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a964b69f1d2596f75ded5421b6db01a14">GenericValue</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for int64_t value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1ad04805a57f5050c8e04be469ba64d6f3">GenericValue</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u64) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for uint64_t value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a267d05b7e98c3507908eaf085fe41155">GenericValue</link> (double d) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for double value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1acad11ab781251634a3c079aa64a6d283">GenericValue</link> (float f) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for float value. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a4d9af98141360cd801daab4ed1ca2c91">GenericValue</link> (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> *s, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for constant string (i.e. do not make a copy of string) </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1abb2887958974fef1b2b5c8e32cc72ddb">GenericValue</link> (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> s) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for constant string (i.e. do not make a copy of string) </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a9ec2c7cda8c8845acfa3565c6b1b4e10">GenericValue</link> (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> *s, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>

<para>Constructor for copy-string (i.e. do make a copy of string) </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a9b72b2e3347d4cd77b16c3b45e8decf1">GenericValue</link> (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> *s, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp;allocator)</para>

<para>Constructor for copy-string (i.e. do make a copy of string) </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a953052ef91e54aabe9bdb9f9eaebf6cc">GenericValue</link> (<link linkend="_class_generic_value_1a149e12992b8f6064c865a4cf55981b89">Array</link> <link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for Array. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a9c294e56f4ab940f845f7c171b183483">GenericValue</link> (<link linkend="_class_generic_value_1aee3606d69d411ce0d98f29639585989b">Object</link> o) RAPIDJSON_NOEXCEPT</para>

<para>Constructor for Object. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1a213ba89ef5ef961a5e655bd8c78ac9f4">~GenericValue</link> ()</para>

<para>Destructor. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_value_1ac5bfd54b6bdea215716df69c501d5cf3">GenericValue</link> (const <link linkend="_class_generic_value">GenericValue</link> &amp;rhs)</para>

<para>Copy constructor is not permitted. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> = RAPIDJSON_DEFAULT_ALLOCATOR&gt;
class GenericValue&lt; Encoding, Allocator &gt;</title></simplesect>

<para>Represents a JSON value. Use Value for <link linkend="_struct_u_t_f8">UTF8</link> encoding and default allocator. </para>



<para>A JSON value can be one of 7 types. This class is a variant type supporting these types.</para>

<para>Use the Value if <link linkend="_struct_u_t_f8">UTF8</link> and default allocator</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Encoding</entry><entry>
<para>Encoding of the value. (Even non-string values need to have the same encoding in a document) </para>
</entry>
                            </row>
                            <row>
<entry>Allocator</entry><entry>
<para>Allocator type for allocating memory of object, array and string. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_generic_value_1a7beb83860c1b8d2a0e2a7da9796b2fa1"/><section>
    <title>AllocatorType</title>
<indexterm><primary>AllocatorType</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>AllocatorType</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_classrapidjson_1_1_allocator">Allocator</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::AllocatorType</computeroutput></para><para>

<para>Allocator type from template parameter. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a149e12992b8f6064c865a4cf55981b89"/><section>
    <title>Array</title>
<indexterm><primary>Array</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>Array</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_array">GenericArray</link>&lt;false, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link>&gt; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Array</computeroutput></para></section>
<anchor xml:id="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb"/><section>
    <title>Ch</title>
<indexterm><primary>Ch</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>Ch</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef Encoding::Ch <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Ch</computeroutput></para><para>

<para>Character type derived from Encoding. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a8f1d2728de56600b5f3df596e2a8a181"/><section>
    <title>ConstArray</title>
<indexterm><primary>ConstArray</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>ConstArray</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_array">GenericArray</link>&lt;true, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link>&gt; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ConstArray</computeroutput></para></section>
<anchor xml:id="_class_generic_value_1aac08c3e660a9036d3dcb8b10ff6c61f4"/><section>
    <title>ConstMemberIterator</title>
<indexterm><primary>ConstMemberIterator</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>ConstMemberIterator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt;true,<link linkend="_classrapidjson_1_1_encoding">Encoding</link>,<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt;::Iterator <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ConstMemberIterator</computeroutput></para><para>

<para>Constant member iterator for iterating in object. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a55ad310f5434e0e4a93df616b326ba7e"/><section>
    <title>ConstObject</title>
<indexterm><primary>ConstObject</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>ConstObject</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_object">GenericObject</link>&lt;true, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link>&gt; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ConstObject</computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a49010c6d6886f96ff0b0c51bccc7f6ea"/><section>
    <title>ConstValueIterator</title>
<indexterm><primary>ConstValueIterator</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>ConstValueIterator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef const <link linkend="_class_generic_value">GenericValue</link>* <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ConstValueIterator</computeroutput></para><para>

<para>Constant value iterator for iterating in array. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a28c2cb8d04d12566c1af37597a46d209"/><section>
    <title>EncodingType</title>
<indexterm><primary>EncodingType</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>EncodingType</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_classrapidjson_1_1_encoding">Encoding</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::EncodingType</computeroutput></para><para>

<para>Encoding type from template parameter. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886"/><section>
    <title>Member</title>
<indexterm><primary>Member</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>Member</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member">GenericMember</link>&lt;<link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Member</computeroutput></para><para>

<para>Name-value pair in an object. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a349b8faae61edc42b4289726820be439"/><section>
    <title>MemberIterator</title>
<indexterm><primary>MemberIterator</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>MemberIterator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_member_iterator">GenericMemberIterator</link>&lt;false,<link linkend="_classrapidjson_1_1_encoding">Encoding</link>,<link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt;::Iterator <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::MemberIterator</computeroutput></para><para>

<para>Member iterator for iterating in object. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1aee3606d69d411ce0d98f29639585989b"/><section>
    <title>Object</title>
<indexterm><primary>Object</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>Object</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_object">GenericObject</link>&lt;false, <link linkend="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce">ValueType</link>&gt; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::Object</computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f"/><section>
    <title>StringRefType</title>
<indexterm><primary>StringRefType</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>StringRefType</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct_generic_string_ref">GenericStringRef</link>&lt;<link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link>&gt; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::StringRefType</computeroutput></para><para>

<para>Reference to a constant string. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1aee30721a49688ba0f865f5d581eb6be9"/><section>
    <title>ValueIterator</title>
<indexterm><primary>ValueIterator</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>ValueIterator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_value">GenericValue</link>* <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::ValueIterator</computeroutput></para><para>

<para>Value iterator for iterating in array. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a43a39bb4fca9b9d3de3da6ac353d25ce"/><section>
    <title>ValueType</title>
<indexterm><primary>ValueType</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>ValueType</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_value">GenericValue</link>&lt;<link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">::ValueType</link></computeroutput></para><para>

<para>Value type of itself. </para>
</para>
</section>
</section>
<section>
<title>Member Enumeration Documentation</title>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3c"/><section>
    <title>anonymous enum</title>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>anonymous enum</computeroutput></para><informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>kBoolFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kBoolFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cac48966386b231124da7c3fb870e237ee"/>kBoolFlag</entry><entry></entry></row><row><entry><indexterm><primary>kNumberFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNumberFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caa4776df2584fe4f341b183cdf3e00a79"/>kNumberFlag</entry><entry></entry></row><row><entry><indexterm><primary>kIntFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kIntFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cae3fb211193e0067efaddeb5a067120fb"/>kIntFlag</entry><entry></entry></row><row><entry><indexterm><primary>kUintFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kUintFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca7eba561e6cc6dcd704f907c5a005f3ce"/>kUintFlag</entry><entry></entry></row><row><entry><indexterm><primary>kInt64Flag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kInt64Flag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca87c567a71dfa5a63363d82d32346884a"/>kInt64Flag</entry><entry></entry></row><row><entry><indexterm><primary>kUint64Flag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kUint64Flag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cac9200c78f749b6efaae640167a370c94"/>kUint64Flag</entry><entry></entry></row><row><entry><indexterm><primary>kDoubleFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kDoubleFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca70c741e7c488835892aa857f50090d7c"/>kDoubleFlag</entry><entry></entry></row><row><entry><indexterm><primary>kStringFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kStringFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caf3bf3661275a38c86addba900c52dccb"/>kStringFlag</entry><entry></entry></row><row><entry><indexterm><primary>kCopyFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kCopyFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca10ef921aef1773bc1f88796bf1828f92"/>kCopyFlag</entry><entry></entry></row><row><entry><indexterm><primary>kInlineStrFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kInlineStrFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cae58a76d504c6a67566aebfa4a6bd2e55"/>kInlineStrFlag</entry><entry></entry></row><row><entry><indexterm><primary>kNullFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNullFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca8c5507cf143edac6e50abec2d89cc40d"/>kNullFlag</entry><entry></entry></row><row><entry><indexterm><primary>kTrueFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kTrueFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca75dbcdbacc82f9379c602f0b6c41cf07"/>kTrueFlag</entry><entry></entry></row><row><entry><indexterm><primary>kFalseFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kFalseFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca66d3877b074bb1a0455a6f6d3f7f91a3"/>kFalseFlag</entry><entry></entry></row><row><entry><indexterm><primary>kNumberIntFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNumberIntFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cacfe8b720220d0a2e378683367386cbaf"/>kNumberIntFlag</entry><entry></entry></row><row><entry><indexterm><primary>kNumberUintFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNumberUintFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cae8c6c6286edf9c309e77af0ea0cf039c"/>kNumberUintFlag</entry><entry></entry></row><row><entry><indexterm><primary>kNumberInt64Flag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNumberInt64Flag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cad117eb41bb8015a76aadf6149bbd8ce5"/>kNumberInt64Flag</entry><entry></entry></row><row><entry><indexterm><primary>kNumberUint64Flag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNumberUint64Flag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caaa1ee6a546d4db67f4bdef41d1f54f02"/>kNumberUint64Flag</entry><entry></entry></row><row><entry><indexterm><primary>kNumberDoubleFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNumberDoubleFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca29bc91c155577923abd8f19aa050058b"/>kNumberDoubleFlag</entry><entry></entry></row><row><entry><indexterm><primary>kNumberAnyFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kNumberAnyFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3cab7805b1908fd181afc8d70fe07b17e18"/>kNumberAnyFlag</entry><entry></entry></row><row><entry><indexterm><primary>kConstStringFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kConstStringFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca5d26a84f26833eafd0028c0102a388a9"/>kConstStringFlag</entry><entry></entry></row><row><entry><indexterm><primary>kCopyStringFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kCopyStringFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca10c83f7f191dce81bb0273adc0d838de"/>kCopyStringFlag</entry><entry></entry></row><row><entry><indexterm><primary>kShortStringFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kShortStringFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caca24fa09485fa10b17071509a985ff01"/>kShortStringFlag</entry><entry></entry></row><row><entry><indexterm><primary>kObjectFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kObjectFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caba5811d4baeb56dc793a6510fe28748c"/>kObjectFlag</entry><entry></entry></row><row><entry><indexterm><primary>kArrayFlag</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kArrayFlag</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3caf7d99965ba807c718b482a9a7fb28b47"/>kArrayFlag</entry><entry></entry></row><row><entry><indexterm><primary>kTypeMask</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kTypeMask</secondary></indexterm>
<anchor xml:id="_class_generic_value_1aacdfd9d0f85a6161380a134e6d0c9d3ca793e0bc40e0abe1ed8bcb3e6fbba65c2"/>kTypeMask</entry><entry></entry></row>    </tbody>
    </tgroup>
</informaltable>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_generic_value_1ab0205d57176d83814ea4e4598c596fe8"/><section>
    <title>GenericValue()<computeroutput>[1/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Default constructor creates a null value. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1ac5bfd54b6bdea215716df69c501d5cf3"/><section>
    <title>GenericValue()<computeroutput>[2/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; rhs)<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Copy constructor is not permitted. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a83c8f84b8e61f2f40414b703b75aea61"/><section>
    <title>GenericValue()<computeroutput>[3/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor with JSON value type. </para>
</para>

<para>This creates a Value of specified type with default content. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>Type of the value. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>Default content for number is zero. </para>
</note>
</para>
</section>
<anchor xml:id="_class_generic_value_1a76c68b72723a06045776dbd425f9e8b6"/><section>
    <title>GenericValue()<computeroutput>[4/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename SourceAllocator &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp; rhs, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator, bool copyConstStrings = <computeroutput>false</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Explicit copy constructor (with allocator) </para>
</para>

<para>Creates a copy of a Value by using the given Allocator 
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>SourceAllocator</entry><entry>
<para>allocator of <computeroutput>rhs</computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rhs</entry><entry>
<para>Value to copy from (read-only) </para>
</entry>
                            </row>
                            <row>
<entry>allocator</entry><entry>
<para>Allocator for allocating copied elements and buffers. Commonly use <link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GenericDocument::GetAllocator()</link>. </para>
</entry>
                            </row>
                            <row>
<entry>copyConstStrings</entry><entry>
<para>Force copying of constant strings (e.g. referencing an in-situ buffer) </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>See also</title>

<para>CopyFrom() </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_value_1a0f6a0394bfffaedde88e433b2265194c"/><section>
    <title>GenericValue()<computeroutput>[5/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> b, RAPIDJSON_ENABLEIF((internal::IsSame&lt; bool, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt;)) )<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for boolean value. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>b</entry><entry>
<para>Boolean value </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>This constructor is limited to <emphasis>real</emphasis> boolean values and rejects implicitly converted types like arbitrary pointers. Use an explicit cast to <computeroutput>bool</computeroutput>, if you want to construct a boolean JSON value in such cases. </para>
</note>
</para>
</section>
<anchor xml:id="_class_generic_value_1aafc754ade38421c179f5c8933ecbaf45"/><section>
    <title>GenericValue()<computeroutput>[6/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (int i)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for int value. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a972bff6c56ac3d04622ff7fad8d98331"/><section>
    <title>GenericValue()<computeroutput>[7/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (unsigned u)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for unsigned value. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a964b69f1d2596f75ded5421b6db01a14"/><section>
    <title>GenericValue()<computeroutput>[8/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i64)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for int64_t value. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1ad04805a57f5050c8e04be469ba64d6f3"/><section>
    <title>GenericValue()<computeroutput>[9/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> u64)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for uint64_t value. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a267d05b7e98c3507908eaf085fe41155"/><section>
    <title>GenericValue()<computeroutput>[10/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (double d)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for double value. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1acad11ab781251634a3c079aa64a6d283"/><section>
    <title>GenericValue()<computeroutput>[11/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (float f)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for float value. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a4d9af98141360cd801daab4ed1ca2c91"/><section>
    <title>GenericValue()<computeroutput>[12/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * s, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor for constant string (i.e. do not make a copy of string) </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1abb2887958974fef1b2b5c8e32cc72ddb"/><section>
    <title>GenericValue()<computeroutput>[13/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> s)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor for constant string (i.e. do not make a copy of string) </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a9ec2c7cda8c8845acfa3565c6b1b4e10"/><section>
    <title>GenericValue()<computeroutput>[14/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * s, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor for copy-string (i.e. do make a copy of string) </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a9b72b2e3347d4cd77b16c3b45e8decf1"/><section>
    <title>GenericValue()<computeroutput>[15/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * s, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor for copy-string (i.e. do make a copy of string) </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a953052ef91e54aabe9bdb9f9eaebf6cc"/><section>
    <title>GenericValue()<computeroutput>[16/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (<link linkend="_class_generic_value_1a149e12992b8f6064c865a4cf55981b89">Array</link> a)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor for Array. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>a</entry><entry>
<para>An array obtained by <computeroutput>GetArray()</computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para><computeroutput>Array</computeroutput> is always pass-by-value. </para>

<para>the source array is moved into this value and the sourec array becomes empty. </para>
</note>
</para>
</section>
<anchor xml:id="_class_generic_value_1a9c294e56f4ab940f845f7c171b183483"/><section>
    <title>GenericValue()<computeroutput>[17/17]</computeroutput></title>
<indexterm><primary>GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;<link linkend="_class_generic_value">::GenericValue</link> (<link linkend="_class_generic_value_1aee3606d69d411ce0d98f29639585989b">Object</link> o)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor for Object. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>o</entry><entry>
<para>An object obtained by <computeroutput>GetObject()</computeroutput>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para><computeroutput>Object</computeroutput> is always pass-by-value. </para>

<para>the source object is moved into this value and the sourec object becomes empty. </para>
</note>
</para>
</section>
<anchor xml:id="_class_generic_value_1a213ba89ef5ef961a5e655bd8c78ac9f4"/><section>
    <title>~GenericValue()</title>
<indexterm><primary>~GenericValue</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>~GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::~<link linkend="_class_generic_value">GenericValue</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Destructor. </para>
</para>

<para>Need to destruct elements of array, members of object, or copy-string. </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_generic_value_1a28f6eb49f5d6d5a56d0bea696b89961d"/><section>
    <title>DataString()</title>
<indexterm><primary>DataString</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DataString</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>static RAPIDJSON_FORCEINLINE const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DataString (const <link linkend="_union_generic_value_1_1_data">Data</link> &amp; data)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a1373c36e6bdffc6ed79143f47c1024ee"/><section>
    <title>DataStringLength()</title>
<indexterm><primary>DataStringLength</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DataStringLength</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>static RAPIDJSON_FORCEINLINE <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DataStringLength (const <link linkend="_union_generic_value_1_1_data">Data</link> &amp; data)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a741c527ec9552ec0a7dce92f7b22d1c6"/><section>
    <title>DoAddMember()</title>
<indexterm><primary>DoAddMember</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoAddMember</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoAddMember (<link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; name, <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; value, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1ae0d58cf0ac7a4d1aca47f8a18ba8cdfd"/><section>
    <title>DoAllocMembers()</title>
<indexterm><primary>DoAllocMembers</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoAllocMembers</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoAllocMembers (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> capacity, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a4e2fbcde9054e87b591f79e6202a80d6"/><section>
    <title>DoClearMembers()</title>
<indexterm><primary>DoClearMembers</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoClearMembers</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoClearMembers ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a17e90627a90a4e97e8425e0ca4a22cbb"/><section>
    <title>DoCopyMembers()</title>
<indexterm><primary>DoCopyMembers</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoCopyMembers</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename SourceAllocator &gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoCopyMembers (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp; rhs, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator, bool copyConstStrings)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a786fc0f1116ef209216884b13f814158"/><section>
    <title>DoEraseMembers()</title>
<indexterm><primary>DoEraseMembers</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoEraseMembers</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoEraseMembers (<link linkend="_class_generic_value_1aac08c3e660a9036d3dcb8b10ff6c61f4">ConstMemberIterator</link> first, <link linkend="_class_generic_value_1aac08c3e660a9036d3dcb8b10ff6c61f4">ConstMemberIterator</link> last)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a62e070232ca1bab936de08b8dbf41a5d"/><section>
    <title>DoFindMember()</title>
<indexterm><primary>DoFindMember</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoFindMember</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename SourceAllocator &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoFindMember (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp; name)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1aab3a51f8207a44ad87a1f8b0bbf53fe9"/><section>
    <title>DoFreeMembers()</title>
<indexterm><primary>DoFreeMembers</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoFreeMembers</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoFreeMembers ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a6db9c0ed0d2417d00b135195e3546f50"/><section>
    <title>DoRemoveMember()</title>
<indexterm><primary>DoRemoveMember</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoRemoveMember</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoRemoveMember (<link linkend="_class_generic_value_1a349b8faae61edc42b4289726820be439">MemberIterator</link> m)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a37e400c98968dec21293861983db9b06"/><section>
    <title>DoReserveMembers()</title>
<indexterm><primary>DoReserveMembers</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>DoReserveMembers</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::DoReserveMembers (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> newCapacity, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a40f567bae6fabbb07822ebac5fe00bfc"/><section>
    <title>GetElementsPointer()</title>
<indexterm><primary>GetElementsPointer</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GetElementsPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value">GenericValue</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GetElementsPointer ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a8c39af1a639eae1b59db66e2cbb537c9"/><section>
    <title>GetMembersPointer()</title>
<indexterm><primary>GetMembersPointer</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GetMembersPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GetMembersPointer ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1af182f2ccbcd962d2a28f92407622e9a9"/><section>
    <title>GetStringPointer()</title>
<indexterm><primary>GetStringPointer</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GetStringPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::GetStringPointer ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1ad7502bbfcd0c14f7ece07243d56e2b90"/><section>
    <title>operator=()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link> &amp; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator= (<link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Assignment with move semantics. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rhs</entry><entry>
<para>Source of the assignment. It will become a null value after assignment. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_generic_value_1a2b7837d3adb6c0ad184269826ea78e97"/><section>
    <title>operator=()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator=</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link> &amp; <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::operator= (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Assignment of constant string reference (no copy) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Constant string reference to be assigned </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>This overload is needed to avoid clashes with the generic primitive type assignment overload below. </para>
</note>
<formalpara><title>See also</title>

<para><link linkend="_struct_generic_string_ref">GenericStringRef</link>, operator=(T) </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_value_1a4a4418a93777942e1fb7ea71f8aaf680"/><section>
    <title>RAPIDJSON_DISABLEIF_RETURN()</title>
<indexterm><primary>RAPIDJSON_DISABLEIF_RETURN</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>RAPIDJSON_DISABLEIF_RETURN</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::RAPIDJSON_DISABLEIF_RETURN ((internal::IsPointer&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt;) , (<link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp;) )</computeroutput></para><para>

<para>Assignment with primitive types. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>T</entry><entry>
<para>Either <link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link>, <computeroutput>int</computeroutput>, <computeroutput>unsigned</computeroutput>, <computeroutput>int64_t</computeroutput>, <computeroutput>uint64_t</computeroutput> </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>The value to be assigned.</para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>The source type <computeroutput>T</computeroutput> explicitly disallows all pointer types, especially (<computeroutput>const</computeroutput>) <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link>*. This helps avoiding implicitly referencing character strings with insufficient lifetime, use SetString(const Ch*, Allocator&amp;) (for copying) or <link linkend="_document_8h_1aa6b9fd9f6aa49405a574c362ba9af6b5">StringRef()</link> (to explicitly mark the pointer as constant) instead. All other pointer types would implicitly convert to <computeroutput>bool</computeroutput>, use SetBool() instead. Set boolean value </para>
</note>
</para>
</section>
<anchor xml:id="_class_generic_value_1abb8ea2dfbe74ff4ee7dac6be31317f81"/><section>
    <title>RawAssign()</title>
<indexterm><primary>RawAssign</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>RawAssign</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::RawAssign (<link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Assignment without calling destructor. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1a8f5f309065479de40a16cf28a340da65"/><section>
    <title>SetArrayRaw()</title>
<indexterm><primary>SetArrayRaw</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>SetArrayRaw</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SetArrayRaw (<link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; * values, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> count, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a1ccc6e15fa49f0c30eab8e8f7f9418f2"/><section>
    <title>SetElementsPointer()</title>
<indexterm><primary>SetElementsPointer</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>SetElementsPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value">GenericValue</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SetElementsPointer (<link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; * elements)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a634a87972649943604153708ca9aefb7"/><section>
    <title>SetMembersPointer()</title>
<indexterm><primary>SetMembersPointer</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>SetMembersPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE <link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SetMembersPointer (<link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * members)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a26c8ec7d68858df1038506df7fcff22d"/><section>
    <title>SetObjectRaw()</title>
<indexterm><primary>SetObjectRaw</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>SetObjectRaw</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SetObjectRaw (<link linkend="_class_generic_value_1a7ccf27c44058b4c11c3efc6473afb886">Member</link> * members, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> count, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Initialize this value as object with initial data, without calling destructor. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1ab3e8833927fb1454585e8692200dbb93"/><section>
    <title>SetStringPointer()</title>
<indexterm><primary>SetStringPointer</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>SetStringPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>RAPIDJSON_FORCEINLINE const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SetStringPointer (const <link linkend="_class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb">Ch</link> * str)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a1451603922dcdf34976f125dc60f70ee"/><section>
    <title>SetStringRaw()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>SetStringRaw</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>SetStringRaw</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SetStringRaw (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> s)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Initialize this value as constant string, without calling destructor. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1ad3d91db36dfdbfc1af40a79aae07723c"/><section>
    <title>SetStringRaw()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>SetStringRaw</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>SetStringRaw</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>void <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::SetStringRaw (<link linkend="_class_generic_value_1a32e0f30ee278072374c8168b14d3317f">StringRefType</link> s, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Initialize this value as copy string with initial data, without calling destructor. </para>
</para>
</section>
<anchor xml:id="_class_generic_value_1ad4d088dc601d99fea9d16300a7ec7ee1"/><section>
    <title>StringEqual()</title>
<indexterm><primary>StringEqual</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>StringEqual</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename SourceAllocator &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::StringEqual (const <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, SourceAllocator &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_class_generic_value_1ab05bc9e52e201a2867ea5bac141ee1ae"/><section>
    <title>GenericDocument</title>
<indexterm><primary>GenericDocument</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>GenericDocument</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename , typename , typename &gt; </computeroutput><para><computeroutput>friend class <link linkend="_class_generic_document">GenericDocument</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_generic_value_1aaf80f2c91d26fdde60b9edeeecd3509f"/><section>
    <title>data_</title>
<indexterm><primary>data_</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>data_</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_union_generic_value_1_1_data">Data</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::data_</computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a188f57bdb1923c1fefe74baa995871a3"/><section>
    <title>kDefaultArrayCapacity</title>
<indexterm><primary>kDefaultArrayCapacity</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kDefaultArrayCapacity</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>const <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::kDefaultArrayCapacity = <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga10ba0ee06d0ac2803d0f2290d46b19f7">RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY</link><computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_value_1a284d018914629aed9a4bd97fe2dc5899"/><section>
    <title>kDefaultObjectCapacity</title>
<indexterm><primary>kDefaultObjectCapacity</primary><secondary>GenericValue&lt; Encoding, Allocator &gt;</secondary></indexterm>
<indexterm><primary>GenericValue&lt; Encoding, Allocator &gt;</primary><secondary>kDefaultObjectCapacity</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR&gt; </computeroutput><para><computeroutput>const <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt;::kDefaultObjectCapacity = <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga5c88aa612939b592d15d3fc4bdf54272">RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY</link><computeroutput>[static]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/<link linkend="_document_8h">document.h</link></section>
</section>
