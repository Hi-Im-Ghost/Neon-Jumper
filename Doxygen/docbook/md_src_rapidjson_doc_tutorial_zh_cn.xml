<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_src_rapidjson_doc_tutorial_zh_cn" xml:lang="en-US">

<para>本教程简介文件对象模型（Document Object Model, DOM）API。</para>

<para>如 <link xlink:href="../readme.zh-cn.md#用法一览">用法一览</link> 中所示，可以解析一个 JSON 至 DOM，然后就可以轻松查询及修改 DOM，并最终转换回 JSON。</para>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1ValueDocument">
<title>Value &amp; Document</title>

<para>每个 JSON 值都储存为 <computeroutput>Value</computeroutput> 类，而 <computeroutput>Document</computeroutput> 类则表示整个 DOM，它存储了一个 DOM 树的根 <computeroutput>Value</computeroutput>。RapidJSON 的所有公开类型及函数都在 <computeroutput>rapidjson</computeroutput> 命名空间中。</para>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1QueryValue">
<title>Query Value</title>

<para>在本节中，我们会使用到 <computeroutput><link linkend="_tutorial_8cpp">example/tutorial/tutorial.cpp</link></computeroutput> 中的代码片段。</para>

<para>假设我们用 C 语言的字符串储存一个 JSON（<computeroutput>const char* json</computeroutput>）： <literallayout><computeroutput>{
&#32;&#32;&#32;&#32;&quot;hello&quot;:&#32;&quot;world&quot;,
&#32;&#32;&#32;&#32;&quot;t&quot;:&#32;true&#32;,
&#32;&#32;&#32;&#32;&quot;f&quot;:&#32;false,
&#32;&#32;&#32;&#32;&quot;n&quot;:&#32;null,
&#32;&#32;&#32;&#32;&quot;i&quot;:&#32;123,
&#32;&#32;&#32;&#32;&quot;pi&quot;:&#32;3.1416,
&#32;&#32;&#32;&#32;&quot;a&quot;:&#32;[1,&#32;2,&#32;3,&#32;4]
}
</computeroutput></literallayout></para>

<para>把它解析至一个 <computeroutput>Document</computeroutput>： <literallayout><computeroutput>#include&#32;&quot;rapidjson/document.h&quot;

using&#32;namespace&#32;rapidjson;

//&#32;...
Document&#32;document;
document.Parse(json);
</computeroutput></literallayout></para>

<para>那么现在该 JSON 就会被解析至 <computeroutput>document</computeroutput> 中，成为一棵 *DOM 树 *:</para>

<para></para>

<para>自从 RFC 7159 作出更新，合法 JSON 文件的根可以是任何类型的 JSON 值。而在较早的 RFC 4627 中，根值只允许是 Object 或 Array。而在上述例子中，根是一个 Object。 <literallayout><computeroutput>assert(document.IsObject());
</computeroutput></literallayout></para>

<para>让我们查询一下根 Object 中有没有 <computeroutput>&quot;hello&quot;</computeroutput> 成员。由于一个 <computeroutput>Value</computeroutput> 可包含不同类型的值，我们可能需要验证它的类型，并使用合适的 API 去获取其值。在此例中，<computeroutput>&quot;hello&quot;</computeroutput> 成员关联到一个 JSON String。 <literallayout><computeroutput>assert(document.HasMember(&quot;hello&quot;));
assert(document[&quot;hello&quot;].IsString());
printf(&quot;hello&#32;=&#32;%s\n&quot;,&#32;document[&quot;hello&quot;].GetString());
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>world
</computeroutput></literallayout></para>

<para>JSON True/False 值是以 <computeroutput>bool</computeroutput> 表示的。 <literallayout><computeroutput>assert(document[&quot;t&quot;].IsBool());
printf(&quot;t&#32;=&#32;%s\n&quot;,&#32;document[&quot;t&quot;].GetBool()&#32;?&#32;&quot;true&quot;&#32;:&#32;&quot;false&quot;);
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>true
</computeroutput></literallayout></para>

<para>JSON Null 值可用 <computeroutput>IsNull()</computeroutput> 查询。 <literallayout><computeroutput>printf(&quot;n&#32;=&#32;%s\n&quot;,&#32;document[&quot;n&quot;].IsNull()&#32;?&#32;&quot;null&quot;&#32;:&#32;&quot;?&quot;);
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>null
</computeroutput></literallayout></para>

<para>JSON Number 类型表示所有数值。然而，C++ 需要使用更专门的类型。</para>

<para><literallayout><computeroutput>assert(document[&quot;i&quot;].IsNumber());

//&#32;在此情况下，IsUint()/IsInt64()/IsUint64()&#32;也会返回&#32;true
assert(document[&quot;i&quot;].IsInt());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
printf(&quot;i&#32;=&#32;%d\n&quot;,&#32;document[&quot;i&quot;].GetInt());
//&#32;另一种用法：&#32;(int)document[&quot;i&quot;]

assert(document[&quot;pi&quot;].IsNumber());
assert(document[&quot;pi&quot;].IsDouble());
printf(&quot;pi&#32;=&#32;%g\n&quot;,&#32;document[&quot;pi&quot;].GetDouble());
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>i&#32;=&#32;123
pi&#32;=&#32;3.1416
</computeroutput></literallayout></para>

<para>JSON Array 包含一些元素。 <literallayout><computeroutput>//&#32;使用引用来连续访问，方便之余还更高效。
const&#32;Value&amp;&#32;a&#32;=&#32;document[&quot;a&quot;];
assert(a.IsArray());
for&#32;(SizeType&#32;i&#32;=&#32;0;&#32;i&#32;&lt;&#32;a.Size();&#32;i++)&#32;//&#32;使用&#32;SizeType&#32;而不是&#32;size_t
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;printf(&quot;a[%d]&#32;=&#32;%d\n&quot;,&#32;i,&#32;a[i].GetInt());
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>a[0]&#32;=&#32;1
a[1]&#32;=&#32;2
a[2]&#32;=&#32;3
a[3]&#32;=&#32;4
</computeroutput></literallayout></para>

<para>注意，RapidJSON 并不自动转换各种 JSON 类型。例如，对一个 String 的 Value 调用 <computeroutput>GetInt()</computeroutput> 是非法的。在调试模式下，它会被断言失败。在发布模式下，其行为是未定义的。</para>

<para>以下将会讨论有关查询各类型的细节。</para>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1QueryArray">
<title>Query Array</title>

<para>缺省情况下，<computeroutput>SizeType</computeroutput> 是 <computeroutput>unsigned</computeroutput> 的 typedef。在多数系统中，Array 最多能存储 2^32-1 个元素。</para>

<para>你可以用整数字面量访问元素，如 <computeroutput>a[0]</computeroutput>、<computeroutput>a[1]</computeroutput>、<computeroutput>a[2]</computeroutput>。</para>

<para>Array 与 <computeroutput>std::vector</computeroutput> 相似，除了使用索引，也可使用迭代器来访问所有元素。 <literallayout><computeroutput>for&#32;(Value::ConstValueIterator&#32;itr&#32;=&#32;a.Begin();&#32;itr&#32;!=&#32;a.End();&#32;++itr)
&#32;&#32;&#32;&#32;printf(&quot;%d&#32;&quot;,&#32;itr-&gt;GetInt());
</computeroutput></literallayout></para>

<para>还有一些熟悉的查询函数：<itemizedlist>
<listitem>
<para><computeroutput>SizeType Capacity() const</computeroutput></para>
</listitem><listitem>
<para><computeroutput>bool Empty() const</computeroutput></para>
</listitem></itemizedlist>
</para>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1autotoc_md125">
<title>范围 for 循环 (v1.1.0 中的新功能)</title>

<para>当使用 C++11 功能时，你可使用范围 for 循环去访问 Array 内的所有元素。</para>

<para><literallayout><computeroutput>for&#32;(auto&amp;&#32;v&#32;:&#32;a.GetArray())
&#32;&#32;&#32;&#32;printf(&quot;%d&#32;&quot;,&#32;v.GetInt());
</computeroutput></literallayout></para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1QueryObject">
<title>Query Object</title>

<para>和 Array 相似，我们可以用迭代器去访问所有 Object 成员：</para>

<para><literallayout><computeroutput>static&#32;const&#32;char*&#32;kTypeNames[]&#32;=&#32;
&#32;&#32;&#32;&#32;{&#32;&quot;Null&quot;,&#32;&quot;False&quot;,&#32;&quot;True&quot;,&#32;&quot;Object&quot;,&#32;&quot;Array&quot;,&#32;&quot;String&quot;,&#32;&quot;Number&quot;&#32;};

for&#32;(Value::ConstMemberIterator&#32;itr&#32;=&#32;document.MemberBegin();
&#32;&#32;&#32;&#32;itr&#32;!=&#32;document.MemberEnd();&#32;++itr)
{
&#32;&#32;&#32;&#32;printf(&quot;Type&#32;of&#32;member&#32;%s&#32;is&#32;%s\n&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;itr-&gt;name.GetString(),&#32;kTypeNames[itr-&gt;value.GetType()]);
}
</computeroutput></literallayout></para>

<para><literallayout><computeroutput>Type&#32;of&#32;member&#32;hello&#32;is&#32;String
Type&#32;of&#32;member&#32;t&#32;is&#32;True
Type&#32;of&#32;member&#32;f&#32;is&#32;False
Type&#32;of&#32;member&#32;n&#32;is&#32;Null
Type&#32;of&#32;member&#32;i&#32;is&#32;Number
Type&#32;of&#32;member&#32;pi&#32;is&#32;Number
Type&#32;of&#32;member&#32;a&#32;is&#32;Array
</computeroutput></literallayout></para>

<para>注意，当 <computeroutput>operator[](const char*)</computeroutput> 找不到成员，它会断言失败。</para>

<para>若我们不确定一个成员是否存在，便需要在调用 <computeroutput>operator[](const char*)</computeroutput> 前先调用 <computeroutput>HasMember()</computeroutput>。然而，这会导致两次查找。更好的做法是调用 <computeroutput>FindMember()</computeroutput>，它能同时检查成员是否存在并返回它的 Value：</para>

<para><literallayout><computeroutput>Value::ConstMemberIterator&#32;itr&#32;=&#32;document.FindMember(&quot;hello&quot;);
if&#32;(itr&#32;!=&#32;document.MemberEnd())
&#32;&#32;&#32;&#32;printf(&quot;%s\n&quot;,&#32;itr-&gt;value.GetString());
</computeroutput></literallayout></para>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1autotoc_md126">
<title>范围 for 循环 (v1.1.0 中的新功能)</title>

<para>当使用 C++11 功能时，你可使用范围 for 循环去访问 Object 内的所有成员。</para>

<para><literallayout><computeroutput>for&#32;(auto&amp;&#32;m&#32;:&#32;document.GetObject())
&#32;&#32;&#32;&#32;printf(&quot;Type&#32;of&#32;member&#32;%s&#32;is&#32;%s\n&quot;,
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;m.name.GetString(),&#32;kTypeNames[m.value.GetType()]);
</computeroutput></literallayout></para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1QueryNumber">
<title>Querying Number</title>

<para>JSON 只提供一种数值类型──Number。数字可以是整数或实数。RFC 4627 规定数字的范围由解析器指定。</para>

<para>由于 C++ 提供多种整数及浮点数类型，DOM 尝试尽量提供最广的范围及良好性能。</para>

<para>当解析一个 Number 时, 它会被存储在 DOM 之中，成为下列其中一个类型：</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row  class='markdownTableHead'>
<entry>
<para>类型   </para>
</entry><entry>
<para>描述    </para>
</entry></row>
</thead><tbody>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>unsigned</computeroutput>   </para>
</entry><entry>
<para>32 位无号整数    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>int</computeroutput>   </para>
</entry><entry>
<para>32 位有号整数    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>uint64_t</computeroutput>   </para>
</entry><entry>
<para>64 位无号整数    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>int64_t</computeroutput>   </para>
</entry><entry>
<para>64 位有号整数    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>double</computeroutput>   </para>
</entry><entry>
<para>64 位双精度浮点数   </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>当查询一个 Number 时, 你可以检查该数字是否能以目标类型来提取：</para>

<para><informaltable frame="all">
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<thead>
      <row  class='markdownTableHead'>
<entry>
<para>查检   </para>
</entry><entry>
<para>提取    </para>
</entry></row>
</thead><tbody>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>bool IsNumber()</computeroutput>   </para>
</entry><entry>
<para>不适用    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>bool IsUint()</computeroutput>   </para>
</entry><entry>
<para><computeroutput>unsigned GetUint()</computeroutput>    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>bool IsInt()</computeroutput>   </para>
</entry><entry>
<para><computeroutput>int GetInt()</computeroutput>    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>bool IsUint64()</computeroutput>   </para>
</entry><entry>
<para><computeroutput>uint64_t GetUint64()</computeroutput>    </para>
</entry></row>
      <row  class='markdownTableRowOdd'>
<entry>
<para><computeroutput>bool IsInt64()</computeroutput>   </para>
</entry><entry>
<para><computeroutput>int64_t GetInt64()</computeroutput>    </para>
</entry></row>
      <row  class='markdownTableRowEven'>
<entry>
<para><computeroutput>bool IsDouble()</computeroutput>   </para>
</entry><entry>
<para><computeroutput>double GetDouble()</computeroutput>   </para>
</entry></row>
    </tbody>
    </tgroup>
</informaltable>
</para>

<para>注意，一个整数可能用几种类型来提取，而无需转换。例如，一个名为 <computeroutput>x</computeroutput> 的 Value 包含 123，那么 <computeroutput>x.IsInt() == x.IsUint() == x.IsInt64() == x.IsUint64() == true</computeroutput>。但如果一个名为 <computeroutput>y</computeroutput> 的 Value 包含 -3000000000，那么仅会令 <computeroutput>x.IsInt64() == true</computeroutput>。</para>

<para>当要提取 Number 类型，<computeroutput>GetDouble()</computeroutput> 是会把内部整数的表示转换成 <computeroutput>double</computeroutput>。注意 <computeroutput>int</computeroutput> 和 <computeroutput>unsigned</computeroutput> 可以安全地转换至 <computeroutput>double</computeroutput>，但 <computeroutput>int64_t</computeroutput> 及 <computeroutput>uint64_t</computeroutput> 可能会丧失精度（因为 <computeroutput>double</computeroutput> 的尾数只有 52 位）。</para>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1QueryString">
<title>Query String</title>

<para>除了 <computeroutput>GetString()</computeroutput>，<computeroutput>Value</computeroutput> 类也有一个 <computeroutput>GetStringLength()</computeroutput>。这里会解释个中原因。</para>

<para>根据 RFC 4627，JSON String 可包含 Unicode 字符 <computeroutput>U+0000</computeroutput>，在 JSON 中会表示为 <computeroutput>&quot;\u0000&quot;</computeroutput>。问题是，C/C++ 通常使用空字符结尾字符串（null-terminated string），这种字符串把 `&#8216;\0&#8217;` 作为结束符号。</para>

<para>为了符合 RFC 4627，RapidJSON 支持包含 <computeroutput>U+0000</computeroutput> 的 String。若你需要处理这些 String，便可使用 <computeroutput>GetStringLength()</computeroutput> 去获得正确的字符串长度。</para>

<para>例如，当解析以下的 JSON 至 <computeroutput>Document d</computeroutput> 之后：</para>

<para><literallayout><computeroutput>{&#32;&quot;s&quot;&#32;:&#32;&#32;&quot;a\u0000b&quot;&#32;}
</computeroutput></literallayout> <computeroutput>&quot;a\u0000b&quot;</computeroutput> 值的正确长度应该是 3。但 <computeroutput>strlen()</computeroutput> 会返回 1。</para>

<para><computeroutput>GetStringLength()</computeroutput> 也可以提高性能，因为用户可能需要调用 <computeroutput>strlen()</computeroutput> 去分配缓冲。</para>

<para>此外，<computeroutput>std::string</computeroutput> 也支持这个构造函数：</para>

<para><literallayout><computeroutput>string(const&#32;char*&#32;s,&#32;size_t&#32;count);
</computeroutput></literallayout></para>

<para>此构造函数接受字符串长度作为参数。它支持在字符串中存储空字符，也应该会有更好的性能。</para>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1autotoc_md127">
<title>比较两个 Value</title>

<para>你可使用 <computeroutput>==</computeroutput> 及 <computeroutput>!=</computeroutput> 去比较两个 Value。当且仅当两个 Value 的类型及内容相同，它们才当作相等。你也可以比较 Value 和它的原生类型值。以下是一个例子。</para>

<para><literallayout><computeroutput>if&#32;(document[&quot;hello&quot;]&#32;==&#32;document[&quot;n&quot;])&#32;/*...*/;&#32;&#32;&#32;&#32;//&#32;比较两个值
if&#32;(document[&quot;hello&quot;]&#32;==&#32;&quot;world&quot;)&#32;/*...*/;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;与字符串字面量作比较
if&#32;(document[&quot;i&quot;]&#32;!=&#32;123)&#32;/*...*/;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;与整数作比较
if&#32;(document[&quot;pi&quot;]&#32;!=&#32;3.14)&#32;/*...*/;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;与&#32;double&#32;作比较
</computeroutput></literallayout></para>

<para>Array／Object 顺序以它们的元素／成员作比较。当且仅当它们的整个子树相等，它们才当作相等。</para>

<para>注意，现时若一个 Object 含有重复命名的成员，它与任何 Object 作比较都总会返回 <computeroutput>false</computeroutput>。</para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1CreateModifyValues">
<title>Create/Modify Values</title>

<para>有多种方法去创建值。 当一个 DOM 树被创建或修改后，可使用 <computeroutput><link linkend="_class_writer">Writer</link></computeroutput> 再次存储为 JSON。</para>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1ChangeValueType">
<title>Change Value Type</title>

<para>当使用默认构造函数创建一个 Value 或 Document，它的类型便会是 Null。要改变其类型，需调用 <computeroutput>SetXXX()</computeroutput> 或赋值操作，例如：</para>

<para><literallayout><computeroutput>Document&#32;d;&#32;//&#32;Null
d.SetObject();

Value&#32;v;&#32;&#32;&#32;&#32;//&#32;Null
v.SetInt(10);
v&#32;=&#32;10;&#32;&#32;&#32;&#32;&#32;//&#32;简写，和上面的相同
</computeroutput></literallayout></para>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1autotoc_md128">
<title>构造函数的各个重载</title>

<para>几个类型也有重载构造函数：</para>

<para><literallayout><computeroutput>Value&#32;b(true);&#32;&#32;&#32;&#32;//&#32;调用&#32;Value(bool)
Value&#32;i(-123);&#32;&#32;&#32;&#32;//&#32;调用&#32;Value(int)
Value&#32;u(123u);&#32;&#32;&#32;&#32;//&#32;调用&#32;Value(unsigned)
Value&#32;d(1.5);&#32;&#32;&#32;&#32;&#32;//&#32;调用&#32;Value(double)
</computeroutput></literallayout></para>

<para>要重建空 Object 或 Array，可在默认构造函数后使用 <computeroutput>SetObject()</computeroutput>/<computeroutput>SetArray()</computeroutput>，或一次性使用 <computeroutput>Value(Type)</computeroutput>：</para>

<para><literallayout><computeroutput>Value&#32;o(kObjectType);
Value&#32;a(kArrayType);
</computeroutput></literallayout></para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1MoveSemantics">
<title>Move Semantics</title>

<para>在设计 RapidJSON 时有一个非常特别的决定，就是 Value 赋值并不是把来源 Value 复制至目的 Value，而是把来源 Value 转移（move）至目的 Value。例如：</para>

<para><literallayout><computeroutput>Value&#32;a(123);
Value&#32;b(456);
b&#32;=&#32;a;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;a&#32;变成&#32;Null，b&#32;变成数字&#32;123。
</computeroutput></literallayout></para>

<para></para>

<para>为什么？此语义有何优点？</para>

<para>最简单的答案就是性能。对于固定大小的 JSON 类型（Number、True、False、Null），复制它们是简单快捷。然而，对于可变大小的 JSON 类型（String、Array、Object），复制它们会产生大量开销，而且这些开销常常不被察觉。尤其是当我们需要创建临时 Object，把它复制至另一变量，然后再析构它。</para>

<para>例如，若使用正常 * 复制 * 语义：</para>

<para><literallayout><computeroutput>Value&#32;o(kObjectType);
{
&#32;&#32;&#32;&#32;Value&#32;contacts(kArrayType);
&#32;&#32;&#32;&#32;//&#32;把元素加进&#32;contacts&#32;数组。
&#32;&#32;&#32;&#32;//&#32;...
&#32;&#32;&#32;&#32;o.AddMember(&quot;contacts&quot;,&#32;contacts,&#32;d.GetAllocator());&#32;&#32;//&#32;深度复制&#32;contacts&#32;（可能有大量内存分配）
&#32;&#32;&#32;&#32;//&#32;析构&#32;contacts。
}
</computeroutput></literallayout></para>

<para></para>

<para>那个 <computeroutput>o</computeroutput> Object 需要分配一个和 contacts 相同大小的缓冲区，对 conacts 做深度复制，并最终要析构 contacts。这样会产生大量无必要的内存分配／释放，以及内存复制。</para>

<para>有一些方案可避免实质地复制这些数据，例如引用计数（reference counting）、垃圾回收（garbage collection, GC）。</para>

<para>为了使 RapidJSON 简单及快速，我们选择了对赋值采用 * 转移 * 语义。这方法与 <computeroutput>std::auto_ptr</computeroutput> 相似，都是在赋值时转移拥有权。转移快得多简单得多，只需要析构原来的 Value，把来源 <computeroutput>memcpy()</computeroutput> 至目标，最后把来源设置为 Null 类型。</para>

<para>因此，使用转移语义后，上面的例子变成：</para>

<para><literallayout><computeroutput>Value&#32;o(kObjectType);
{
&#32;&#32;&#32;&#32;Value&#32;contacts(kArrayType);
&#32;&#32;&#32;&#32;//&#32;adding&#32;elements&#32;to&#32;contacts&#32;array.
&#32;&#32;&#32;&#32;o.AddMember(&quot;contacts&quot;,&#32;contacts,&#32;d.GetAllocator());&#32;&#32;//&#32;只需&#32;memcpy()&#32;contacts&#32;本身至新成员的&#32;Value（16&#32;字节）
&#32;&#32;&#32;&#32;//&#32;contacts&#32;在这里变成&#32;Null。它的析构是平凡的。
}
</computeroutput></literallayout></para>

<para></para>

<para>在 C++11 中这称为转移赋值操作（move assignment operator）。由于 RapidJSON 支持 C++03，它在赋值操作采用转移语义，其它修改型函数如 <computeroutput>AddMember()</computeroutput>, <computeroutput>PushBack()</computeroutput> 也采用转移语义。</para>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1TemporaryValues">
<title>Move semantics and temporary values</title>

<para>有时候，我们想直接构造一个 Value 并传递给一个“转移”函数（如 <computeroutput>PushBack()</computeroutput>、<computeroutput>AddMember()</computeroutput>）。由于临时对象是不能转换为正常的 Value 引用，我们加入了一个方便的 <computeroutput>Move()</computeroutput> 函数：</para>

<para><literallayout><computeroutput>Value&#32;a(kArrayType);
Document::AllocatorType&amp;&#32;allocator&#32;=&#32;document.GetAllocator();
//&#32;a.PushBack(Value(42),&#32;allocator);&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;不能通过编译
a.PushBack(Value().SetInt(42),&#32;allocator);&#32;//&#32;fluent&#32;API
a.PushBack(Value(42).Move(),&#32;allocator);&#32;&#32;&#32;//&#32;和上一行相同
</computeroutput></literallayout></para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1CreateString">
<title>Create String</title>

<para>RapidJSON 提供两个 String 的存储策略。</para>

<para><orderedlist>
<listitem>
<para>copy-string: 分配缓冲区，然后把来源数据复制至它。</para>
</listitem><listitem>
<para>const-string: 简单地储存字符串的指针。</para>
</listitem></orderedlist>
</para>

<para>Copy-string 总是安全的，因为它拥有数据的克隆。Const-string 可用于存储字符串字面量，以及用于在 DOM 一节中将会提到的 in-situ 解析中。</para>

<para>为了让用户自定义内存分配方式，当一个操作可能需要内存分配时，RapidJSON 要求用户传递一个 allocator 实例作为 API 参数。此设计避免了在每个 Value 存储 allocator（或 document）的指针。</para>

<para>因此，当我们把一个 copy-string 赋值时, 调用含有 allocator 的 <computeroutput>SetString()</computeroutput> 重载函数：</para>

<para><literallayout><computeroutput>Document&#32;document;
Value&#32;author;
char&#32;buffer[10];
int&#32;len&#32;=&#32;sprintf(buffer,&#32;&quot;%s&#32;%s&quot;,&#32;&quot;Milo&quot;,&#32;&quot;Yip&quot;);&#32;//&#32;动态创建的字符串。
author.SetString(buffer,&#32;len,&#32;document.GetAllocator());
memset(buffer,&#32;0,&#32;sizeof(buffer));
//&#32;清空&#32;buffer&#32;后&#32;author.GetString()&#32;仍然包含&#32;&quot;Milo&#32;Yip&quot;
</computeroutput></literallayout></para>

<para>在此例子中，我们使用 <computeroutput>Document</computeroutput> 实例的 allocator。这是使用 RapidJSON 时常用的惯用法。但你也可以用其他 allocator 实例。</para>

<para>另外，上面的 <computeroutput>SetString()</computeroutput> 需要长度参数。这个 API 能处理含有空字符的字符串。另一个 <computeroutput>SetString()</computeroutput> 重载函数没有长度参数，它假设输入是空字符结尾的，并会调用类似 <computeroutput>strlen()</computeroutput> 的函数去获取长度。</para>

<para>最后，对于字符串字面量或有安全生命周期的字符串，可以使用 const-string 版本的 <computeroutput>SetString()</computeroutput>，它没有 allocator 参数。对于字符串字面量（或字符数组常量），只需简单地传递字面量，又安全又高效：</para>

<para><literallayout><computeroutput>Value&#32;s;
s.SetString(&quot;rapidjson&quot;);&#32;&#32;&#32;&#32;//&#32;可包含空字符，长度在编译期推导
s&#32;=&#32;&quot;rapidjson&quot;;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;上行的缩写
</computeroutput></literallayout></para>

<para>对于字符指针，RapidJSON 需要作一个标记，代表它不复制也是安全的。可以使用 <computeroutput>StringRef</computeroutput> 函数：</para>

<para><literallayout><computeroutput>const&#32;char&#32;*&#32;cstr&#32;=&#32;getenv(&quot;USER&quot;);
size_t&#32;cstr_len&#32;=&#32;...;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;如果有长度
Value&#32;s;
//&#32;s.SetString(cstr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;这不能通过编译
s.SetString(StringRef(cstr));&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;可以，假设它的生命周期安全，并且是以空字符结尾的
s&#32;=&#32;StringRef(cstr);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;上行的缩写
s.SetString(StringRef(cstr,&#32;cstr_len));//&#32;更快，可处理空字符
s&#32;=&#32;StringRef(cstr,&#32;cstr_len);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;上行的缩写
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1ModifyArray">
<title>Modify Array</title>

<para>Array 类型的 Value 提供与 <computeroutput>std::vector</computeroutput> 相似的 API。</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>Clear()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>Reserve(SizeType, Allocator&amp;)</computeroutput></para>
</listitem><listitem>
<para><computeroutput>Value&amp; PushBack(Value&amp;, Allocator&amp;)</computeroutput></para>
</listitem><listitem>
<para><computeroutput>template &lt;typename T&gt; <link linkend="_class_generic_value">GenericValue</link>&amp; PushBack(T, Allocator&amp;)</computeroutput></para>
</listitem><listitem>
<para><computeroutput>Value&amp; PopBack()</computeroutput></para>
</listitem><listitem>
<para><computeroutput>ValueIterator Erase(ConstValueIterator pos)</computeroutput></para>
</listitem><listitem>
<para><computeroutput>ValueIterator Erase(ConstValueIterator first, ConstValueIterator last)</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>注意，<computeroutput>Reserve(...)</computeroutput> 及 <computeroutput>PushBack(...)</computeroutput> 可能会为数组元素分配内存，所以需要一个 allocator。</para>

<para>以下是 <computeroutput>PushBack()</computeroutput> 的例子：</para>

<para><literallayout><computeroutput>Value&#32;a(kArrayType);
Document::AllocatorType&amp;&#32;allocator&#32;=&#32;document.GetAllocator();

for&#32;(int&#32;i&#32;=&#32;5;&#32;i&#32;&lt;=&#32;10;&#32;i++)
&#32;&#32;&#32;&#32;a.PushBack(i,&#32;allocator);&#32;&#32;&#32;//&#32;可能需要调用&#32;realloc()&#32;所以需要&#32;allocator

//&#32;流畅接口（Fluent&#32;interface）
a.PushBack(&quot;Lua&quot;,&#32;allocator).PushBack(&quot;Mio&quot;,&#32;allocator);
</computeroutput></literallayout></para>

<para>与 STL 不一样的是，<computeroutput>PushBack()</computeroutput>/<computeroutput>PopBack()</computeroutput> 返回 Array 本身的引用。这称为流畅接口（_fluent interface_）。</para>

<para>如果你想在 Array 中加入一个非常量字符串，或是一个没有足够生命周期的字符串（见 <link linkend="_md_src_rapidjson_doc_tutorial_zh_cn_1CreateString">Create String</link>），你需要使用 copy-string API 去创建一个 String。为了避免加入中间变量，可以就地使用一个 <link linkend="_md_src_rapidjson_doc_tutorial_zh_cn_1TemporaryValues">临时值</link>：</para>

<para><literallayout><computeroutput>//&#32;就地&#32;Value&#32;参数
contact.PushBack(Value(&quot;copy&quot;,&#32;document.GetAllocator()).Move(),&#32;//&#32;copy&#32;string
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.GetAllocator());

//&#32;显式&#32;Value&#32;参数
Value&#32;val(&quot;key&quot;,&#32;document.GetAllocator());&#32;//&#32;copy&#32;string
contact.PushBack(val,&#32;document.GetAllocator());
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1ModifyObject">
<title>Modify Object</title>

<para>Object 是键值对的集合。每个键必须为 String。要修改 Object，方法是增加或移除成员。以下的 API 用来增加成员：</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>Value&amp; AddMember(Value&amp;, Value&amp;, Allocator&amp; allocator)</computeroutput></para>
</listitem><listitem>
<para><computeroutput>Value&amp; AddMember(StringRefType, Value&amp;, Allocator&amp;)</computeroutput></para>
</listitem><listitem>
<para><computeroutput>template &lt;typename T&gt; Value&amp; AddMember(StringRefType, T value, Allocator&amp;)</computeroutput></para>
</listitem></itemizedlist>
</para>

<para>以下是一个例子。</para>

<para><literallayout><computeroutput>Value&#32;contact(kObject);
contact.AddMember(&quot;name&quot;,&#32;&quot;Milo&quot;,&#32;document.GetAllocator());
contact.AddMember(&quot;married&quot;,&#32;true,&#32;document.GetAllocator());
</computeroutput></literallayout></para>

<para>使用 <computeroutput>StringRefType</computeroutput> 作为 name 参数的重载版本与字符串的 <computeroutput>SetString</computeroutput> 的接口相似。 这些重载是为了避免复制 <computeroutput>name</computeroutput> 字符串，因为 JSON object 中经常会使用常数键名。</para>

<para>如果你需要从非常数字符串或生命周期不足的字符串创建键名（见 <link linkend="_md_src_rapidjson_doc_tutorial_zh_cn_1CreateString">创建 String</link>），你需要使用 copy-string API。为了避免中间变量，可以就地使用 <link linkend="_md_src_rapidjson_doc_tutorial_zh_cn_1TemporaryValues">临时值</link>：</para>

<para><literallayout><computeroutput>//&#32;就地&#32;Value&#32;参数
contact.AddMember(Value(&quot;copy&quot;,&#32;document.GetAllocator()).Move(),&#32;//&#32;copy&#32;string
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;Value().Move(),&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;null&#32;value
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;document.GetAllocator());

//&#32;显式参数
Value&#32;key(&quot;key&quot;,&#32;document.GetAllocator());&#32;//&#32;copy&#32;string&#32;name
Value&#32;val(42);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;某&#32;Value
contact.AddMember(key,&#32;val,&#32;document.GetAllocator());
</computeroutput></literallayout></para>

<para>移除成员有几个选择：</para>

<para><itemizedlist>
<listitem>
<para><computeroutput>bool RemoveMember(const Ch* name)</computeroutput>：使用键名来移除成员（线性时间复杂度）。</para>
</listitem><listitem>
<para><computeroutput>bool RemoveMember(const Value&amp; name)</computeroutput>：除了 <computeroutput>name</computeroutput> 是一个 Value，和上一行相同。</para>
</listitem><listitem>
<para><computeroutput>MemberIterator RemoveMember(MemberIterator)</computeroutput>：使用迭代器移除成员（_ 常数 _ 时间复杂度）。</para>
</listitem><listitem>
<para><computeroutput>MemberIterator EraseMember(MemberIterator)</computeroutput>：和上行相似但维持成员次序（线性时间复杂度）。</para>
</listitem><listitem>
<para><computeroutput>MemberIterator EraseMember(MemberIterator first, MemberIterator last)</computeroutput>：移除一个范围内的成员，维持次序（线性时间复杂度）。</para>
</listitem></itemizedlist>
</para>

<para><computeroutput>MemberIterator RemoveMember(MemberIterator)</computeroutput> 使用了“转移最后”手法来达成常数时间复杂度。基本上就是析构迭代器位置的成员，然后把最后的成员转移至迭代器位置。因此，成员的次序会被改变。</para>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1DeepCopyValue">
<title>Deep Copy Value</title>

<para>若我们真的要复制一个 DOM 树，我们可使用两个 APIs 作深复制：含 allocator 的构造函数及 <computeroutput>CopyFrom()</computeroutput>。</para>

<para><literallayout><computeroutput>Document&#32;d;
Document::AllocatorType&amp;&#32;a&#32;=&#32;d.GetAllocator();
Value&#32;v1(&quot;foo&quot;);
//&#32;Value&#32;v2(v1);&#32;//&#32;不容许

Value&#32;v2(v1,&#32;a);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;制造一个克隆
assert(v1.IsString());&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;v1&#32;不变
d.SetArray().PushBack(v1,&#32;a).PushBack(v2,&#32;a);
assert(v1.IsNull()&#32;&amp;&amp;&#32;v2.IsNull());&#32;&#32;&#32;//&#32;两个都转移动&#32;d

v2.CopyFrom(d,&#32;a);&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;//&#32;把整个&#32;document&#32;复制至&#32;v2
assert(d.IsArray()&#32;&amp;&amp;&#32;d.Size()&#32;==&#32;2);&#32;//&#32;d&#32;不变
v1.SetObject().AddMember(&quot;array&quot;,&#32;v2,&#32;a);
d.PushBack(v1,&#32;a);
</computeroutput></literallayout></para>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1SwapValues">
<title>Swap Values</title>

<para>RapidJSON 也提供 <computeroutput><link linkend="_namespaceinternal_1a72b2c71d36273b9691487f58c671ce04">Swap()</link></computeroutput>。</para>

<para><literallayout><computeroutput>Value&#32;a(123);
Value&#32;b(&quot;Hello&quot;);
a.Swap(b);
assert(a.IsString());
assert(b.IsInt());
</computeroutput></literallayout></para>

<para>无论两棵 DOM 树有多复杂，交换是很快的（常数时间）。</para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_tutorial_zh_cn_1WhatsNext">
<title>What&apos;s next</title>

<para>本教程展示了如何询查及修改 DOM 树。RapidJSON 还有一个重要概念：</para>

<para><orderedlist>
<listitem>
<para><link linkend="_stream_8zh-cn_8md">流</link> 是读写 JSON 的通道。流可以是内存字符串、文件流等。用户也可以自定义流。</para>
</listitem><listitem>
<para><link linkend="_encoding_8zh-cn_8md">编码</link> 定义在流或内存中使用的字符编码。RapidJSON 也在内部提供 Unicode 转换及校验功能。</para>
</listitem><listitem>
<para><link linkend="_dom_8zh-cn_8md">DOM</link> 的基本功能已在本教程里介绍。还有更高级的功能，如原位（*in situ*）解析、其他解析选项及高级用法。</para>
</listitem><listitem>
<para><link linkend="_sax_8zh-cn_8md">SAX</link> 是 RapidJSON 解析／生成功能的基础。学习使用 <computeroutput>Reader</computeroutput>/<computeroutput><link linkend="_class_writer">Writer</link></computeroutput> 去实现更高性能的应用程序。也可以使用 <computeroutput><link linkend="_class_pretty_writer">PrettyWriter</link></computeroutput> 去格式化 JSON。</para>
</listitem><listitem>
<para><link linkend="_performance_8zh-cn_8md">性能</link> 展示一些我们做的及第三方的性能测试。</para>
</listitem><listitem>
<para><link linkend="_internals_8md">技术内幕</link> 讲述一些 RapidJSON 内部的设计及技术。</para>
</listitem></orderedlist>
</para>

<para>你也可以参考 <link linkend="_faq_8zh-cn_8md">常见问题</link>、API 文档、例子及单元测试。 </para>
</section>
</section>
