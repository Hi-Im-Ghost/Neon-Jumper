<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_allocators_8h_source" xml:lang="en-US">
<title>allocators.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/allocators.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available.</emphasis>
2 <emphasis role="comment">//&#32;</emphasis>
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015&#32;THL&#32;A29&#32;Limited,&#32;a&#32;Tencent&#32;company,&#32;and&#32;Milo&#32;Yip.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License.&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource.org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed&#32;</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.&#32;See&#32;the&#32;License&#32;for&#32;the&#32;</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_ALLOCATORS_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_ALLOCATORS_H_</emphasis>
17 
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_rapidjson_8h">rapidjson.h</link>&quot;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_meta_8h">internal/meta.h</link>&quot;</emphasis>
20 
21 <emphasis role="preprocessor">#include&#32;&lt;memory&gt;</emphasis>
22 
23 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11</emphasis>
24 <emphasis role="preprocessor">#include&#32;&lt;type_traits&gt;</emphasis>
25 <emphasis role="preprocessor">#endif</emphasis>
26 
27 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
28 
30 <emphasis role="comment">//&#32;Allocator</emphasis>
31 
70 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</emphasis>
71 <emphasis role="preprocessor">#define&#32;RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY&#32;(64&#32;*&#32;1024)</emphasis>
72 <emphasis role="preprocessor">#endif</emphasis>
73 
74 
76 <emphasis role="comment">//&#32;CrtAllocator</emphasis>
77 
79 
82 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_crt_allocator">CrtAllocator</link>&#32;{
83 <emphasis role="keyword">public</emphasis>:
84 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_crt_allocator_1ac7df8398c529290f0cd5950d9492f524">kNeedFree</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;
85 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_crt_allocator_1ae9b348831bee2b1b52b736c2d3921bad">Malloc</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{&#32;
86 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(size)&#32;<emphasis role="comment">//&#32;&#32;behavior&#32;of&#32;malloc(0)&#32;is&#32;implementation&#32;defined.</emphasis>
87 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_rapidjson_8h_1a047ad77d620d1ae97c1bc70a9f316f27">RAPIDJSON_MALLOC</link>(size);
88 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
89 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;&#32;<emphasis role="comment">//&#32;standardize&#32;to&#32;returning&#32;NULL.</emphasis>
90 &#32;&#32;&#32;&#32;}
91 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_crt_allocator_1a54b9a20354ba249613d332a7b445575d">Realloc</link>(<emphasis role="keywordtype">void</emphasis>*&#32;originalPtr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;originalSize,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;newSize)&#32;{
92 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;(void)originalSize;
93 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newSize&#32;==&#32;0)&#32;{
94 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1aa6d5138eed2c5b311d9862d191393a5f">RAPIDJSON_FREE</link>(originalPtr);
95 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
96 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
97 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_rapidjson_8h_1aa2c0f2121d7803191a43609ea5d8dd67">RAPIDJSON_REALLOC</link>(originalPtr,&#32;newSize);
98 &#32;&#32;&#32;&#32;}
99 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_crt_allocator_1aa09ed06f0decbedcaaa2c2a417820a79">Free</link>(<emphasis role="keywordtype">void</emphasis>&#32;*ptr)&#32;RAPIDJSON_NOEXCEPT&#32;{&#32;<link linkend="_rapidjson_8h_1aa6d5138eed2c5b311d9862d191393a5f">RAPIDJSON_FREE</link>(ptr);&#32;}
100 
101 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_crt_allocator_1ae65fb1b4e1272d05e003be57feac68a6">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_crt_allocator">CrtAllocator</link>&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT&#32;{
102 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
103 &#32;&#32;&#32;&#32;}
104 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_crt_allocator_1a1fb8ca99a43c939595e5c0b548d7532c">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_crt_allocator">CrtAllocator</link>&amp;)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT&#32;{
105 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
106 &#32;&#32;&#32;&#32;}
107 };
108 
110 <emphasis role="comment">//&#32;MemoryPoolAllocator</emphasis>
111 
113 
128 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;BaseAllocator&#32;=&#32;CrtAllocator&gt;
129 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&#32;{
131 
133 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>ChunkHeader&#32;{
134 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;capacity;&#32;&#32;&#32;&#32;
135 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
136 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ChunkHeader&#32;*next;&#32;&#32;
137 &#32;&#32;&#32;&#32;};
138 
139 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>SharedData&#32;{
140 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ChunkHeader&#32;*chunkHead;&#32;&#32;
141 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BaseAllocator*&#32;ownBaseAllocator;&#32;
142 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;refcount;
143 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;ownBuffer;
144 &#32;&#32;&#32;&#32;};
145 
146 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;SIZEOF_SHARED_DATA&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242">RAPIDJSON_ALIGN</link>(<emphasis role="keyword">sizeof</emphasis>(SharedData));
147 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;SIZEOF_CHUNK_HEADER&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242">RAPIDJSON_ALIGN</link>(<emphasis role="keyword">sizeof</emphasis>(ChunkHeader));
148 
149 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;ChunkHeader&#32;*GetChunkHead(SharedData&#32;*shared)
150 &#32;&#32;&#32;&#32;{
151 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis>ChunkHeader*<emphasis role="keyword">&gt;</emphasis>(<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>*<emphasis role="keyword">&gt;</emphasis>(shared)&#32;+&#32;SIZEOF_SHARED_DATA);
152 &#32;&#32;&#32;&#32;}
153 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>&#32;*GetChunkBuffer(SharedData&#32;*shared)
154 &#32;&#32;&#32;&#32;{
155 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5">uint8_t</link>*<emphasis role="keyword">&gt;</emphasis>(shared-&gt;chunkHead)&#32;+&#32;SIZEOF_CHUNK_HEADER;
156 &#32;&#32;&#32;&#32;}
157 
158 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;kDefaultChunkCapacity&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga860570d04d489be08b9835d2ec58bac5">RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</link>;&#32;
159 
160 <emphasis role="keyword">public</emphasis>:
161 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1ab4c7c5c631e451689bc9da392a65194f">kNeedFree</link>&#32;=&#32;<emphasis role="keyword">false</emphasis>;&#32;&#32;&#32;&#32;
162 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1a3a18920d6afd9e9c9e62d8fd8f73e095">kRefCounted</link>&#32;=&#32;<emphasis role="keyword">true</emphasis>;&#32;&#32;&#32;
163 
165 
168 &#32;&#32;&#32;&#32;<emphasis role="keyword">explicit</emphasis>
169 &#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator_1aeec85ac657f242ac5620115141be5209">MemoryPoolAllocator</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;chunkSize&#32;=&#32;kDefaultChunkCapacity,&#32;BaseAllocator*&#32;baseAllocator&#32;=&#32;0)&#32;:&#32;
170 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk_capacity_(chunkSize),
171 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(baseAllocator&#32;?&#32;baseAllocator&#32;:&#32;<link linkend="_rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b">RAPIDJSON_NEW</link>(BaseAllocator)()),
172 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_(static_cast&lt;SharedData*&gt;(baseAllocator_&#32;?&#32;baseAllocator_-&gt;<link linkend="_class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48">Malloc</link>(SIZEOF_SHARED_DATA&#32;+&#32;SIZEOF_CHUNK_HEADER)&#32;:&#32;0))
173 &#32;&#32;&#32;&#32;{
174 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(baseAllocator_&#32;!=&#32;0);
175 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(shared_&#32;!=&#32;0);
176 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(baseAllocator)&#32;{
177 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;ownBaseAllocator&#32;=&#32;0;
178 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
179 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>&#32;{
180 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;ownBaseAllocator&#32;=&#32;baseAllocator_;
181 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
182 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead&#32;=&#32;GetChunkHead(shared_);
183 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;capacity&#32;=&#32;0;
184 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;size&#32;=&#32;0;
185 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;next&#32;=&#32;0;
186 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;ownBuffer&#32;=&#32;<emphasis role="keyword">true</emphasis>;
187 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;refcount&#32;=&#32;1;
188 &#32;&#32;&#32;&#32;}
189 
191 
200 &#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator_1a1f0d865093fdb955d956b7a445a8ddbf">MemoryPoolAllocator</link>(<emphasis role="keywordtype">void</emphasis>&#32;*buffer,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;chunkSize&#32;=&#32;kDefaultChunkCapacity,&#32;BaseAllocator*&#32;baseAllocator&#32;=&#32;0)&#32;:
201 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk_capacity_(chunkSize),
202 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(baseAllocator),
203 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_(static_cast&lt;SharedData*&gt;(AlignBuffer(buffer,&#32;size)))
204 &#32;&#32;&#32;&#32;{
205 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(size&#32;&gt;=&#32;SIZEOF_SHARED_DATA&#32;+&#32;SIZEOF_CHUNK_HEADER);
206 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead&#32;=&#32;GetChunkHead(shared_);
207 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;capacity&#32;=&#32;size&#32;-&#32;SIZEOF_SHARED_DATA&#32;-&#32;SIZEOF_CHUNK_HEADER;
208 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;size&#32;=&#32;0;
209 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;next&#32;=&#32;0;
210 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;ownBaseAllocator&#32;=&#32;0;
211 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;ownBuffer&#32;=&#32;<emphasis role="keyword">false</emphasis>;
212 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;refcount&#32;=&#32;1;
213 &#32;&#32;&#32;&#32;}
214 
215 &#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator_1afa7a6555d8a6e151148c8876c60a36c5">MemoryPoolAllocator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
216 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk_capacity_(rhs.chunk_capacity_),
217 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(rhs.baseAllocator_),
218 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_(rhs.shared_)
219 &#32;&#32;&#32;&#32;{
220 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
221 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++shared_-&gt;refcount;
222 &#32;&#32;&#32;&#32;}
223 &#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&#32;<link linkend="_class_memory_pool_allocator_1a32812539a2d21759082f325ee78565c7">operator=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT
224 &#32;&#32;&#32;&#32;{
225 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(rhs.shared_-&gt;refcount&#32;&gt;&#32;0);
226 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++rhs.shared_-&gt;refcount;
227 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_class_memory_pool_allocator_1aff48c4c1fa43bdd3a2b406231f0eb00e">~MemoryPoolAllocator</link>();
228 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_&#32;=&#32;rhs.baseAllocator_;
229 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk_capacity_&#32;=&#32;rhs.chunk_capacity_;
230 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_&#32;=&#32;rhs.shared_;
231 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
232 &#32;&#32;&#32;&#32;}
233 
234 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11_RVALUE_REFS</emphasis>
235 &#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator_1aeec85ac657f242ac5620115141be5209">MemoryPoolAllocator</link>(<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
236 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk_capacity_(rhs.chunk_capacity_),
237 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(rhs.baseAllocator_),
238 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_(rhs.shared_)
239 &#32;&#32;&#32;&#32;{
240 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(rhs.shared_-&gt;refcount&#32;&gt;&#32;0);
241 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.shared_&#32;=&#32;0;
242 &#32;&#32;&#32;&#32;}
243 &#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&#32;<link linkend="_class_memory_pool_allocator_1a32812539a2d21759082f325ee78565c7">operator=</link>(<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT
244 &#32;&#32;&#32;&#32;{
245 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(rhs.shared_-&gt;refcount&#32;&gt;&#32;0);
246 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;this-&gt;<link linkend="_class_memory_pool_allocator_1aff48c4c1fa43bdd3a2b406231f0eb00e">~MemoryPoolAllocator</link>();
247 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_&#32;=&#32;rhs.baseAllocator_;
248 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk_capacity_&#32;=&#32;rhs.chunk_capacity_;
249 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_&#32;=&#32;rhs.shared_;
250 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;rhs.shared_&#32;=&#32;0;
251 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;*<emphasis role="keyword">this</emphasis>;
252 &#32;&#32;&#32;&#32;}
253 <emphasis role="preprocessor">#endif</emphasis>
254 
256 
258 &#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator_1aff48c4c1fa43bdd3a2b406231f0eb00e">~MemoryPoolAllocator</link>()&#32;RAPIDJSON_NOEXCEPT&#32;{
259 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!shared_)&#32;{
260 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;do&#32;nothing&#32;if&#32;moved</emphasis>
261 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
262 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
263 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shared_-&gt;refcount&#32;&gt;&#32;1)&#32;{
264 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;--shared_-&gt;refcount;
265 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>;
266 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
267 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_memory_pool_allocator_1a6f6dce308aa10a28c898348db3bc75c1">Clear</link>();
268 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;BaseAllocator&#32;*<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>&#32;=&#32;shared_-&gt;ownBaseAllocator;
269 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shared_-&gt;ownBuffer)&#32;{
270 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_-&gt;Free(shared_);
271 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
272 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a">RAPIDJSON_DELETE</link>(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>);
273 &#32;&#32;&#32;&#32;}
274 
276 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1a6f6dce308aa10a28c898348db3bc75c1">Clear</link>()&#32;RAPIDJSON_NOEXCEPT&#32;{
277 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
278 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(;;)&#32;{
279 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;ChunkHeader*&#32;c&#32;=&#32;shared_-&gt;chunkHead;
280 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!c-&gt;next)&#32;{
281 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">break</emphasis>;
282 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
283 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead&#32;=&#32;c-&gt;next;
284 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_-&gt;Free(c);
285 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
286 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;size&#32;=&#32;0;
287 &#32;&#32;&#32;&#32;}
288 
290 
292 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1a60526f0a1e6bb225c49f10537635e30f">Capacity</link>()&#32;const&#32;RAPIDJSON_NOEXCEPT&#32;{
293 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
294 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;capacity&#32;=&#32;0;
295 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ChunkHeader*&#32;c&#32;=&#32;shared_-&gt;chunkHead;&#32;c&#32;!=&#32;0;&#32;c&#32;=&#32;c-&gt;next)
296 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;capacity&#32;+=&#32;c-&gt;capacity;
297 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;capacity;
298 &#32;&#32;&#32;&#32;}
299 
301 
303 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1a53abb6188aea4a687ca9f6d778fd1d2d">Size</link>()&#32;const&#32;RAPIDJSON_NOEXCEPT&#32;{
304 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
305 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;size&#32;=&#32;0;
306 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">for</emphasis>&#32;(ChunkHeader*&#32;c&#32;=&#32;shared_-&gt;chunkHead;&#32;c&#32;!=&#32;0;&#32;c&#32;=&#32;c-&gt;next)
307 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;+=&#32;c-&gt;size;
308 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;size;
309 &#32;&#32;&#32;&#32;}
310 
312 
314 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1aee5e0b6d09dfbbc9bbbc59399a14cc53">Shared</link>()&#32;const&#32;RAPIDJSON_NOEXCEPT&#32;{
315 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
316 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_-&gt;refcount&#32;&gt;&#32;1;
317 &#32;&#32;&#32;&#32;}
318 
320 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48">Malloc</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)&#32;{
321 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
322 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!size)
323 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
324 
325 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242">RAPIDJSON_ALIGN</link>(size);
326 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(shared_-&gt;chunkHead-&gt;size&#32;+&#32;size&#32;&gt;&#32;shared_-&gt;chunkHead-&gt;capacity))
327 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!AddChunk(chunk_capacity_&#32;&gt;&#32;size&#32;?&#32;chunk_capacity_&#32;:&#32;size))
328 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
329 
330 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;*buffer&#32;=&#32;GetChunkBuffer(shared_)&#32;+&#32;shared_-&gt;chunkHead-&gt;size;
331 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;size&#32;+=&#32;size;
332 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buffer;
333 &#32;&#32;&#32;&#32;}
334 
336 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_memory_pool_allocator_1a7c273279d361b207ff622d4bdfc63074">Realloc</link>(<emphasis role="keywordtype">void</emphasis>*&#32;originalPtr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;originalSize,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;newSize)&#32;{
337 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(originalPtr&#32;==&#32;0)
338 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48">Malloc</link>(newSize);
339 
340 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
341 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(newSize&#32;==&#32;0)
342 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
343 
344 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;originalSize&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242">RAPIDJSON_ALIGN</link>(originalSize);
345 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;newSize&#32;=&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242">RAPIDJSON_ALIGN</link>(newSize);
346 
347 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Do&#32;not&#32;shrink&#32;if&#32;new&#32;size&#32;is&#32;smaller&#32;than&#32;original</emphasis>
348 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(originalSize&#32;&gt;=&#32;newSize)
349 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;originalPtr;
350 
351 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Simply&#32;expand&#32;it&#32;if&#32;it&#32;is&#32;the&#32;last&#32;allocation&#32;and&#32;there&#32;is&#32;sufficient&#32;space</emphasis>
352 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(originalPtr&#32;==&#32;GetChunkBuffer(shared_)&#32;+&#32;shared_-&gt;chunkHead-&gt;size&#32;-&#32;originalSize)&#32;{
353 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;increment&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">size_t</emphasis><emphasis role="keyword">&gt;</emphasis>(newSize&#32;-&#32;originalSize);
354 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(shared_-&gt;chunkHead-&gt;size&#32;+&#32;increment&#32;&lt;=&#32;shared_-&gt;chunkHead-&gt;capacity)&#32;{
355 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead-&gt;size&#32;+=&#32;increment;
356 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;originalPtr;
357 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
358 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
359 
360 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Realloc&#32;process:&#32;allocate&#32;and&#32;copy&#32;memory,&#32;do&#32;not&#32;free&#32;original&#32;buffer.</emphasis>
361 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<emphasis role="keywordtype">void</emphasis>*&#32;newBuffer&#32;=&#32;<link linkend="_class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48">Malloc</link>(newSize))&#32;{
362 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(originalSize)
363 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;std::memcpy(newBuffer,&#32;originalPtr,&#32;originalSize);
364 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;newBuffer;
365 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
366 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
367 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;NULL;
368 &#32;&#32;&#32;&#32;}
369 
371 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1ab2ba66e50d09ab315fbfb37f2a231f33">Free</link>(<emphasis role="keywordtype">void</emphasis>&#32;*ptr)&#32;RAPIDJSON_NOEXCEPT&#32;{&#32;(void)ptr;&#32;}&#32;<emphasis role="comment">//&#32;Do&#32;nothing</emphasis>
372 
374 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1ab2b847d46e865b541c38fb68dfc7d408">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT&#32;{
375 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(shared_-&gt;refcount&#32;&gt;&#32;0);
376 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(rhs.shared_-&gt;refcount&#32;&gt;&#32;0);
377 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;shared_&#32;==&#32;rhs.shared_;
378 &#32;&#32;&#32;&#32;}
380 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_memory_pool_allocator_1ab81d11c88aef06b905cece2e5a4e7b4d">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_memory_pool_allocator">MemoryPoolAllocator</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT&#32;{
381 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_class_memory_pool_allocator_1ab2b847d46e865b541c38fb68dfc7d408">operator==</link>(rhs);
382 &#32;&#32;&#32;&#32;}
383 
384 <emphasis role="keyword">private</emphasis>:
386 
389 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;AddChunk(<emphasis role="keywordtype">size_t</emphasis>&#32;capacity)&#32;{
390 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(!baseAllocator_)
391 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;ownBaseAllocator&#32;=&#32;baseAllocator_&#32;=&#32;<link linkend="_rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b">RAPIDJSON_NEW</link>(BaseAllocator)();
392 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(ChunkHeader*&#32;chunk&#32;=&#32;<emphasis role="keyword">static_cast&lt;</emphasis>ChunkHeader*<emphasis role="keyword">&gt;</emphasis>(baseAllocator_-&gt;Malloc(SIZEOF_CHUNK_HEADER&#32;+&#32;capacity)))&#32;{
393 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk-&gt;capacity&#32;=&#32;capacity;
394 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk-&gt;size&#32;=&#32;0;
395 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;chunk-&gt;next&#32;=&#32;shared_-&gt;chunkHead;
396 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;shared_-&gt;chunkHead&#32;=&#32;chunk;
397 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">true</emphasis>;
398 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
399 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">else</emphasis>
400 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">false</emphasis>;
401 &#32;&#32;&#32;&#32;}
402 
403 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;AlignBuffer(<emphasis role="keywordtype">void</emphasis>*&#32;buf,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;&amp;size)
404 &#32;&#32;&#32;&#32;{
405 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(buf&#32;!=&#32;0);
406 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&#32;mask&#32;=&#32;<emphasis role="keyword">sizeof</emphasis>(<emphasis role="keywordtype">void</emphasis>*)&#32;-&#32;1;
407 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&#32;ubuf&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><link linkend="_stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link><emphasis role="keyword">&gt;</emphasis>(buf);
408 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5">RAPIDJSON_UNLIKELY</link>(ubuf&#32;&amp;&#32;mask))&#32;{
409 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_stdint_8h_1a31b85deecb45924320becd11d3ee16ce">uintptr_t</link>&#32;abuf&#32;=&#32;(ubuf&#32;+&#32;mask)&#32;&amp;&#32;~mask;
410 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(size&#32;&gt;=&#32;abuf&#32;-&#32;ubuf);
411 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;buf&#32;=&#32;<emphasis role="keyword">reinterpret_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis>*<emphasis role="keyword">&gt;</emphasis>(abuf);
412 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;size&#32;-=&#32;abuf&#32;-&#32;ubuf;
413 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;}
414 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;buf;
415 &#32;&#32;&#32;&#32;}
416 
417 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;chunk_capacity_;&#32;&#32;&#32;&#32;&#32;
418 &#32;&#32;&#32;&#32;BaseAllocator*&#32;baseAllocator_;&#32;&#32;
419 &#32;&#32;&#32;&#32;SharedData&#32;*shared_;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;
420 };
421 
422 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceinternal">internal</link>&#32;{
423 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&#32;=&#32;<emphasis role="keywordtype">void</emphasis>&gt;
424 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinternal_1_1_is_ref_counted">IsRefCounted</link>&#32;:
425 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;FalseType
426 &#32;&#32;&#32;&#32;{&#32;};
427 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T&gt;
428 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_structinternal_1_1_is_ref_counted">IsRefCounted</link>&lt;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>,&#32;typename&#32;<link linkend="_namespaceinternal">internal</link>::EnableIfCond&lt;T::kRefCounted&gt;<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">::Type</link>&gt;&#32;:
429 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;TrueType
430 &#32;&#32;&#32;&#32;{&#32;};
431 }
432 
433 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;A&gt;
434 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>*&#32;<link linkend="_allocators_8h_1a8e4137cbc097868e8c3d785f6cca1223">Realloc</link>(A&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>*&#32;old_p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;old_n,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;new_n)
435 {
436 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952">RAPIDJSON_NOEXCEPT_ASSERT</link>(old_n&#32;&lt;=&#32;<link linkend="_stdint_8h_1a3c75bb398badb69c7577b21486f9963f">SIZE_MAX</link>&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>)&#32;&amp;&amp;&#32;new_n&#32;&lt;=&#32;<link linkend="_stdint_8h_1a3c75bb398badb69c7577b21486f9963f">SIZE_MAX</link>&#32;/&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>));
437 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>*<emphasis role="keyword">&gt;</emphasis>(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>.Realloc(old_p,&#32;old_n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>),&#32;new_n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>)));
438 }
439 
440 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;A&gt;
441 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&#32;*<link linkend="_allocators_8h_1a7e0ace0214f18427d9ee8e76a5b3dcdf">Malloc</link>(A&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;n&#32;=&#32;1)
442 {
443 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;Realloc&lt;T,&#32;A&gt;(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;NULL,&#32;0,&#32;n);
444 }
445 
446 <emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;A&gt;
447 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Free</link>(A&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;<link linkend="_prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf">T</link>&#32;*p,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;n&#32;=&#32;1)
448 {
449 &#32;&#32;&#32;&#32;<emphasis role="keyword">static_cast&lt;</emphasis><emphasis role="keywordtype">void</emphasis><emphasis role="keyword">&gt;</emphasis>(Realloc&lt;T,&#32;A&gt;(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;p,&#32;n,&#32;0));
450 }
451 
452 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
453 RAPIDJSON_DIAG_PUSH
454 RAPIDJSON_DIAG_OFF(effc++)&#32;<emphasis role="comment">//&#32;std::allocator&#32;can&#32;safely&#32;be&#32;inherited</emphasis>
455 <emphasis role="preprocessor">#endif</emphasis>
456 
457 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;T,&#32;<emphasis role="keyword">typename</emphasis>&#32;BaseAllocator&#32;=&#32;CrtAllocator&gt;
458 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_std_allocator">StdAllocator</link>&#32;:
459 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;std::allocator&lt;T&gt;
460 {
461 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::allocator&lt;T&gt;&#32;allocator_type;
462 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11</emphasis>
463 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::allocator_traits&lt;allocator_type&gt;&#32;traits_type;
464 <emphasis role="preprocessor">#else</emphasis>
465 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;allocator_type&#32;traits_type;
466 <emphasis role="preprocessor">#endif</emphasis>
467 
468 <emphasis role="keyword">public</emphasis>:
469 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;BaseAllocator&#32;<link linkend="_class_std_allocator_1a09e7299a6c14e2d234bd469f1162bb21">BaseAllocatorType</link>;
470 
471 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1afdef530c5dbd0c4e86922ab263c8ca83">StdAllocator</link>()&#32;RAPIDJSON_NOEXCEPT&#32;:
472 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(),
473 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_()
474 &#32;&#32;&#32;&#32;{&#32;}
475 
476 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1abfb16c76a06015f0ec1abe704375ace8">StdAllocator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator</link>&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
477 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(rhs),
478 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(rhs.baseAllocator_)
479 &#32;&#32;&#32;&#32;{&#32;}
480 
481 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
482 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1ab41a5cbaf54473e1e10468258629bd1b">StdAllocator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator&lt;U, BaseAllocator&gt;</link>&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
483 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(rhs),
484 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(rhs.baseAllocator_)
485 &#32;&#32;&#32;&#32;{&#32;}
486 
487 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11_RVALUE_REFS</emphasis>
488 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1afb3a6a655f835f6b9ec21fab41291287">StdAllocator</link>(<link linkend="_class_std_allocator">StdAllocator</link>&amp;&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
489 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(std::move(rhs)),
490 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(std::move(rhs.baseAllocator_))
491 &#32;&#32;&#32;&#32;{&#32;}
492 <emphasis role="preprocessor">#endif</emphasis>
493 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11</emphasis>
494 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;propagate_on_container_move_assignment&#32;=&#32;std::true_type;
495 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;propagate_on_container_swap&#32;=&#32;std::true_type;
496 <emphasis role="preprocessor">#endif</emphasis>
497 
498 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>
499 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1a40ffe84a544bd5fe938581d09595bd1f">StdAllocator</link>(<emphasis role="keyword">const</emphasis>&#32;BaseAllocator&amp;&#32;allocator)&#32;RAPIDJSON_NOEXCEPT&#32;:
500 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(),
501 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(allocator)
502 &#32;&#32;&#32;&#32;{&#32;}
503 
504 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1a3d1703f93d5929c71a35e0c9baf9ceb1">~StdAllocator</link>()&#32;RAPIDJSON_NOEXCEPT
505 &#32;&#32;&#32;&#32;{&#32;}
506 
507 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
508 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_std_allocator_1_1rebind">rebind</link>&#32;{
509 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator&lt;U, BaseAllocator&gt;</link>&#32;<link linkend="_struct_std_allocator_1_1rebind_1ad1492f350e2dec2087141aa68b390792">other</link>;
510 &#32;&#32;&#32;&#32;};
511 
512 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::size_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link>;
513 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::difference_type&#32;&#32;&#32;<link linkend="_class_std_allocator_1a4f3adbac47a8c20e47dbfb5c1f421ccd">difference_type</link>;
514 
515 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::value_type&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1aa9b7be996e5529bd6f1cbacadfa090c7">value_type</link>;
516 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">traits_type::pointer</link>&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>;
517 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;traits_type::const_pointer&#32;&#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296">const_pointer</link>;
518 
519 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11</emphasis>
520 
521 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::add_lvalue_reference&lt;value_type&gt;::type&#32;&amp;<link linkend="_class_std_allocator_1a108581b842584639473a6d3fdd135598">reference</link>;
522 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;std::add_lvalue_reference&lt;typename&#32;std::add_const&lt;value_type&gt;::type&gt;::type&#32;&amp;<link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link>;
523 
524 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;<link linkend="_class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6">address</link>(<link linkend="_class_std_allocator_1a108581b842584639473a6d3fdd135598">reference</link>&#32;r)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT
525 &#32;&#32;&#32;&#32;{
526 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::addressof(r);
527 &#32;&#32;&#32;&#32;}
528 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296">const_pointer</link>&#32;<link linkend="_class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6">address</link>(<link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link>&#32;r)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT
529 &#32;&#32;&#32;&#32;{
530 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;std::addressof(r);
531 &#32;&#32;&#32;&#32;}
532 
533 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link>&#32;<link linkend="_class_std_allocator_1a158b8ba5e88fbcd7a851541090654930">max_size</link>()&#32;const&#32;RAPIDJSON_NOEXCEPT
534 &#32;&#32;&#32;&#32;{
535 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;traits_type::max_size(*<emphasis role="keyword">this</emphasis>);
536 &#32;&#32;&#32;&#32;}
537 
538 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;...Args&gt;
539 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_std_allocator_1a279cb8367857b1263c4ab014b74f842a">construct</link>(<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;p,&#32;Args&amp;&amp;...&#32;args)
540 &#32;&#32;&#32;&#32;{
541 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::construct(*<emphasis role="keyword">this</emphasis>,&#32;p,&#32;std::forward&lt;Args&gt;(args)...);
542 &#32;&#32;&#32;&#32;}
543 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_std_allocator_1a2aebac89efaaac9707d380b95c902567">destroy</link>(<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;p)
544 &#32;&#32;&#32;&#32;{
545 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;traits_type::destroy(*<emphasis role="keyword">this</emphasis>,&#32;p);
546 &#32;&#32;&#32;&#32;}
547 
548 <emphasis role="preprocessor">#else&#32;</emphasis><emphasis role="comment">//&#32;!RAPIDJSON_HAS_CXX11</emphasis>
549 
550 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_type::reference&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1a108581b842584639473a6d3fdd135598">reference</link>;
551 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_type::const_reference&#32;<link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link>;
552 
553 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;<link linkend="_class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6">address</link>(<link linkend="_class_std_allocator_1a108581b842584639473a6d3fdd135598">reference</link>&#32;r)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT
554 &#32;&#32;&#32;&#32;{
555 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type::address(r);
556 &#32;&#32;&#32;&#32;}
557 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296">const_pointer</link>&#32;<link linkend="_class_std_allocator_1a56c3bab4003eccf5b7a9d18175ef4dc2">address</link>(<link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link>&#32;r)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT
558 &#32;&#32;&#32;&#32;{
559 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type::address(r);
560 &#32;&#32;&#32;&#32;}
561 
562 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link>&#32;<link linkend="_class_std_allocator_1a158b8ba5e88fbcd7a851541090654930">max_size</link>()&#32;const&#32;RAPIDJSON_NOEXCEPT
563 &#32;&#32;&#32;&#32;{
564 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocator_type::max_size();
565 &#32;&#32;&#32;&#32;}
566 
567 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_std_allocator_1a279cb8367857b1263c4ab014b74f842a">construct</link>(<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;p,&#32;<link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link>&#32;r)
568 &#32;&#32;&#32;&#32;{
569 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type::construct(p,&#32;r);
570 &#32;&#32;&#32;&#32;}
571 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_std_allocator_1a2aebac89efaaac9707d380b95c902567">destroy</link>(<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;p)
572 &#32;&#32;&#32;&#32;{
573 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type::destroy(p);
574 &#32;&#32;&#32;&#32;}
575 
576 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;!RAPIDJSON_HAS_CXX11</emphasis>
577 
578 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
579 &#32;&#32;&#32;&#32;U*&#32;<link linkend="_class_std_allocator_1a8c60bc907eb5ecb9bc174de469394e7b">allocate</link>(<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link>&#32;n&#32;=&#32;1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;=&#32;0)
580 &#32;&#32;&#32;&#32;{
581 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;RAPIDJSON_NAMESPACE::Malloc&lt;U&gt;(baseAllocator_,&#32;n);
582 &#32;&#32;&#32;&#32;}
583 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
584 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_std_allocator_1a92371ba62f651185c0d3eef856080cfa">deallocate</link>(U*&#32;p,&#32;<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link>&#32;n&#32;=&#32;1)
585 &#32;&#32;&#32;&#32;{
586 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;RAPIDJSON_NAMESPACE::Free&lt;U&gt;(baseAllocator_,&#32;p,&#32;n);
587 &#32;&#32;&#32;&#32;}
588 
589 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;<link linkend="_class_std_allocator_1aa301f003f6722d438834b377c314247e">allocate</link>(<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link>&#32;n&#32;=&#32;1,&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>*&#32;=&#32;0)
590 &#32;&#32;&#32;&#32;{
591 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;allocate&lt;value_type&gt;(n);
592 &#32;&#32;&#32;&#32;}
593 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_std_allocator_1a96a27b5bc9919d08013e727f5217db7a">deallocate</link>(<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link>&#32;p,&#32;<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link>&#32;n&#32;=&#32;1)
594 &#32;&#32;&#32;&#32;{
595 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;deallocate&lt;value_type&gt;(p,&#32;n);
596 &#32;&#32;&#32;&#32;}
597 
598 <emphasis role="preprocessor">#if&#32;RAPIDJSON_HAS_CXX11</emphasis>
599 &#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;is_always_equal&#32;=&#32;std::is_empty&lt;BaseAllocator&gt;;
600 <emphasis role="preprocessor">#endif</emphasis>
601 
602 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
603 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31">operator==</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator&lt;U, BaseAllocator&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT
604 &#32;&#32;&#32;&#32;{
605 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;baseAllocator_&#32;==&#32;rhs.baseAllocator_;
606 &#32;&#32;&#32;&#32;}
607 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
608 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_std_allocator_1a6d1d3ae1297ec63f6043f06d26b99df7">operator!=</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator&lt;U, BaseAllocator&gt;</link>&amp;&#32;rhs)&#32;<emphasis role="keyword">const</emphasis>&#32;RAPIDJSON_NOEXCEPT
609 &#32;&#32;&#32;&#32;{
610 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;!<link linkend="_class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31">operator==</link>(rhs);
611 &#32;&#32;&#32;&#32;}
612 
614 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_std_allocator_1a75b2c8e2995e564037dd7d5408217a6b">kNeedFree</link>&#32;=&#32;BaseAllocator::kNeedFree;
615 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">bool</emphasis>&#32;<link linkend="_class_std_allocator_1afd2564e7c3121474d93c805839fa5f83">kRefCounted</link>&#32;=&#32;<link linkend="_structinternal_1_1_is_ref_counted">internal::IsRefCounted&lt;BaseAllocator&gt;::Value</link>;
616 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_std_allocator_1a0499a9aa57a19d5ae174bedf8c80da87">Malloc</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;size)
617 &#32;&#32;&#32;&#32;{
618 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;baseAllocator_.Malloc(size);
619 &#32;&#32;&#32;&#32;}
620 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>*&#32;<link linkend="_class_std_allocator_1a97fb4098726bc00def3a205698517b8b">Realloc</link>(<emphasis role="keywordtype">void</emphasis>*&#32;originalPtr,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;originalSize,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;newSize)
621 &#32;&#32;&#32;&#32;{
622 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;baseAllocator_.Realloc(originalPtr,&#32;originalSize,&#32;newSize);
623 &#32;&#32;&#32;&#32;}
624 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_std_allocator_1ae3b6918eee229eeb89e9535d65296d6d">Free</link>(<emphasis role="keywordtype">void</emphasis>&#32;*ptr)&#32;RAPIDJSON_NOEXCEPT
625 &#32;&#32;&#32;&#32;{
626 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">BaseAllocator::Free</link>(ptr);
627 &#32;&#32;&#32;&#32;}
628 
629 <emphasis role="keyword">private</emphasis>:
630 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
631 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_std_allocator">StdAllocator</link>;&#32;<emphasis role="comment">//&#32;access&#32;to&#32;StdAllocator&lt;!T&gt;.*</emphasis>
632 
633 &#32;&#32;&#32;&#32;BaseAllocator&#32;baseAllocator_;
634 };
635 
636 <emphasis role="preprocessor">#if&#32;!RAPIDJSON_HAS_CXX17&#32;</emphasis><emphasis role="comment">//&#32;std::allocator&lt;void&gt;&#32;deprecated&#32;in&#32;C++17</emphasis>
637 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;BaseAllocator&gt;
638 <emphasis role="keyword">class&#32;</emphasis><link linkend="_class_std_allocator">StdAllocator</link>&lt;void,&#32;BaseAllocator&gt;&#32;:
639 &#32;&#32;&#32;&#32;<emphasis role="keyword">public</emphasis>&#32;std::allocator&lt;void&gt;
640 {
641 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;std::allocator&lt;void&gt;&#32;allocator_type;
642 
643 <emphasis role="keyword">public</emphasis>:
644 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;BaseAllocator&#32;<link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a72dfb6c478f475a31ef99be2fbe9332f">BaseAllocatorType</link>;
645 
646 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ae04f7a523d5d80dde6ce700e2807ff27">StdAllocator</link>()&#32;RAPIDJSON_NOEXCEPT&#32;:
647 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(),
648 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_()
649 &#32;&#32;&#32;&#32;{&#32;}
650 
651 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1ab7d8af9c46aaee8e3e2c60b95b1d595d">StdAllocator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator</link>&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
652 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(rhs),
653 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(rhs.baseAllocator_)
654 &#32;&#32;&#32;&#32;{&#32;}
655 
656 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
657 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a47cf6d8a7f37c6f1c03c158948d88553">StdAllocator</link>(<emphasis role="keyword">const</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator&lt;U, BaseAllocator&gt;</link>&amp;&#32;rhs)&#32;RAPIDJSON_NOEXCEPT&#32;:
658 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(rhs),
659 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(rhs.baseAllocator_)
660 &#32;&#32;&#32;&#32;{&#32;}
661 
662 &#32;&#32;&#32;&#32;<emphasis role="comment">/*&#32;implicit&#32;*/</emphasis>
663 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a8ee693f821d2a7209947faab4a77e304">StdAllocator</link>(<emphasis role="keyword">const</emphasis>&#32;BaseAllocator&amp;&#32;baseAllocator)&#32;RAPIDJSON_NOEXCEPT&#32;:
664 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;allocator_type(),
665 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;baseAllocator_(baseAllocator)
666 &#32;&#32;&#32;&#32;{&#32;}
667 
668 &#32;&#32;&#32;&#32;<link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a223afcc6a4765478ca3c89f1164913d4">~StdAllocator</link>()&#32;RAPIDJSON_NOEXCEPT
669 &#32;&#32;&#32;&#32;{&#32;}
670 
671 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&lt;<emphasis role="keyword">typename</emphasis>&#32;U&gt;
672 &#32;&#32;&#32;&#32;<emphasis role="keyword">struct&#32;</emphasis>rebind&#32;{
673 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_class_std_allocator">StdAllocator&lt;U, BaseAllocator&gt;</link>&#32;<link linkend="_struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind_1a05d001c4a784dd30027c19392de10f8e">other</link>;
674 &#32;&#32;&#32;&#32;};
675 
676 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keyword">typename</emphasis>&#32;allocator_type::value_type&#32;<link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4_1a1df4e2d5cfdec13a30e19fa73507c542">value_type</link>;
677 
678 <emphasis role="keyword">private</emphasis>:
679 &#32;&#32;&#32;&#32;<emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>,&#32;<emphasis role="keyword">typename</emphasis>&gt;
680 &#32;&#32;&#32;&#32;<emphasis role="keyword">friend</emphasis>&#32;<emphasis role="keyword">class&#32;</emphasis><link linkend="_class_std_allocator">StdAllocator</link>;&#32;<emphasis role="comment">//&#32;access&#32;to&#32;StdAllocator&lt;!T&gt;.*</emphasis>
681 
682 &#32;&#32;&#32;&#32;BaseAllocator&#32;baseAllocator_;
683 };
684 <emphasis role="preprocessor">#endif</emphasis>
685 
686 <emphasis role="preprocessor">#ifdef&#32;__GNUC__</emphasis>
687 RAPIDJSON_DIAG_POP
688 <emphasis role="preprocessor">#endif</emphasis>
689 
690 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
691 
692 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_ENCODINGS_H_</emphasis>
</programlisting></section>
