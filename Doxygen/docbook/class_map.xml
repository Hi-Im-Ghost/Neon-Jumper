<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_map" xml:lang="en-US">
<title>Map Class Reference</title>
<indexterm><primary>Map</primary></indexterm>
<para>
<computeroutput>#include &lt;Map.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_map_1ac63a69baabe2c549b51ef0507c6a7a8b">Map</link> (std::string mapa)</para>
</listitem>
            <listitem><para><link linkend="_class_map_1aa403fbe09394ccf39747588f5168e3b2">~Map</link> ()</para>

<para>Destruktor. </para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1a2b09c8875af2efb711fc3a022e70427d">getHeight</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_map_1a6e7241617514fc7b227d8cb96d30c81a">isInfinite</link> ()</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_layer">Layer</link> &gt; <link linkend="_class_map_1a3ff0c79b25f70af9cee6f555a53bfd4d">getLayers</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1a6b1292daca7ef375968f073718c402ca">getNextLayerId</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1aacb2f9d02095076e61774bf8df62a970">getNextObjectId</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1a7ae44d1c43fc376de7355ffae6550ae7">getOrientation</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1ab0768cad264812a3db223c893fa69ba5">getRenderOrder</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1ad90c3028202a393e68cb1ae07f23960a">getTiledVersion</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1afd173f72cb063592a0daa853a3be9d9e">getTileHeight</link> ()</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_tile_set_map">TileSetMap</link> &gt; <link linkend="_class_map_1a1e601f4ffaf9104214971e12b3b4de17">getTileSetMap</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1ab9209a0b619dbd3721335bd414968b6c">getTileWidth</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1a4b04d446d3c661a985874ace350853b9">getType</link> ()</para>
</listitem>
            <listitem><para>float <link linkend="_class_map_1ad8563d64d89efd1be0694edc54abb2ab">getVersion</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1afd34d12227676b3cebeed9f5fae2508f">getWidth</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_class_map_1a0546fef98caebe38385bb2e0c7a15da1">height</link></para>

<para>Zmienna do wysokości. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_map_1aa3e42d577840a0069c94ecae4467562d">infinite</link></para>

<para>Zmienna określjąca czy jest nieskończoność </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_layer">Layer</link> &gt; <link linkend="_class_map_1a5cd95ff260dce65601bb62c3292a3bfd">layers</link></para>

<para>Zmienna przechowująca warstwy. </para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1a02e2d0dbcc15af66e896365ed40fdc01">nextlayerid</link></para>

<para>Zmienna przechowująca id następnej warstwy. </para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1af62ec82d7f35991aa77c52da4d2e2290">nextobjectid</link></para>

<para>Zmienna przechowująca id nastepnego obiektu. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1a71ce7d3f9b38d813ccdee6238c928331">orientation</link></para>

<para>Zmienna przechowująca informacje o orientacji na mapie. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1a465b7f45392e5d283a58cb8deed34866">renderorder</link></para>

<para>Zmienna przechowująca informacje o renderowaniu. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1ab2ee86c9d4bf09110ca91ae8971ebb87">tiledversion</link></para>

<para>Zmienna przechowująca informacje o wersji. </para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1aaf62b7a95219df701f793bbdb7ad7219">tileheight</link></para>

<para>Zmienna przechowująca informacje o wysokości kafelka. </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_tile_set_map">TileSetMap</link> &gt; <link linkend="_class_map_1a8ecfbf296ba00680bd6b63956102e8e6">tilesets</link></para>

<para>Zmienna przechowują kafleki. </para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1adf0b26f23f7de86d44fff24daedf3e6f">tilewidth</link></para>

<para>Zmienna przechowujaca informacje o szerokości kafelka. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_map_1aa6e7a427f467c84f33079371231b69c0">type</link></para>

<para>Zmienna przechowująca informacje o typie. </para>
</listitem>
            <listitem><para>float <link linkend="_class_map_1a02cbc0172c2867bef1a7caef9752cf1d">version</link></para>

<para>Zmienna przechowujaca informacje o wersji zapisu. </para>
</listitem>
            <listitem><para>int <link linkend="_class_map_1a9ecfe932ad2d2bc22492416033bdacfd">width</link></para>

<para>Zmienna przechowujaca informacje o szerokosci. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Detailed Description</title>

<para>służy do pobrania informacji o mapie z pliku json </para>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_map_1ac63a69baabe2c549b51ef0507c6a7a8b"/><section>
    <title>Map()</title>
<indexterm><primary>Map</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>Map</secondary></indexterm>
<para><computeroutput>Map::Map (std::string mapa)</computeroutput></para>
<para>Konstruktor który parsuje przekazana w parametrze mape 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>mapa</entry><entry>
<para>- tekst, który reprezentuje nazwe pliku w którym przechowywana jest mapa </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_map_1aa403fbe09394ccf39747588f5168e3b2"/><section>
    <title>~Map()</title>
<indexterm><primary>~Map</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>~Map</secondary></indexterm>
<para><computeroutput>Map::~Map ( )<computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>Destruktor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_map_1a2b09c8875af2efb711fc3a022e70427d"/><section>
    <title>getHeight()</title>
<indexterm><primary>getHeight</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getHeight</secondary></indexterm>
<para><computeroutput>int Map::getHeight ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca wysokość <formalpara><title>Returns</title>

<para>zwraca liczbę, która reprezentuje wysokość mapy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1a3ff0c79b25f70af9cee6f555a53bfd4d"/><section>
    <title>getLayers()</title>
<indexterm><primary>getLayers</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getLayers</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_class_layer">Layer</link> &gt; Map::getLayers ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca poszczególne warstwy <formalpara><title>Returns</title>

<para>zwraca kolekcje vector, która przechowuje warstwy mapy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1a6b1292daca7ef375968f073718c402ca"/><section>
    <title>getNextLayerId()</title>
<indexterm><primary>getNextLayerId</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getNextLayerId</secondary></indexterm>
<para><computeroutput>int Map::getNextLayerId ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwaraca nastepne id warstwy <formalpara><title>Returns</title>

<para>zwraca liczbe reprezentujacą id kolejnej warstwy mapy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1aacb2f9d02095076e61774bf8df62a970"/><section>
    <title>getNextObjectId()</title>
<indexterm><primary>getNextObjectId</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getNextObjectId</secondary></indexterm>
<para><computeroutput>int Map::getNextObjectId ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca nastepny id obiektu <formalpara><title>Returns</title>

<para>zwraca liczbę, która reprezentuje id kolejnego obiektu mapy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1a7ae44d1c43fc376de7355ffae6550ae7"/><section>
    <title>getOrientation()</title>
<indexterm><primary>getOrientation</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getOrientation</secondary></indexterm>
<para><computeroutput>std::string Map::getOrientation ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o orientacji mapy <formalpara><title>Returns</title>

<para>zwraca tekst, który reprezentuje orientacje </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1ab0768cad264812a3db223c893fa69ba5"/><section>
    <title>getRenderOrder()</title>
<indexterm><primary>getRenderOrder</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getRenderOrder</secondary></indexterm>
<para><computeroutput>std::string Map::getRenderOrder ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o renderowaniu <formalpara><title>Returns</title>

<para>zwraca tekst, który informuje o kolejności renderowania obiektów na mapie </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1ad90c3028202a393e68cb1ae07f23960a"/><section>
    <title>getTiledVersion()</title>
<indexterm><primary>getTiledVersion</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getTiledVersion</secondary></indexterm>
<para><computeroutput>std::string Map::getTiledVersion ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o wersji programu użytego do tworzenia mapy <formalpara><title>Returns</title>

<para>zwraca tekst, który reprezentuje wersje programu </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1afd173f72cb063592a0daa853a3be9d9e"/><section>
    <title>getTileHeight()</title>
<indexterm><primary>getTileHeight</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getTileHeight</secondary></indexterm>
<para><computeroutput>int Map::getTileHeight ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o wysokosci kafelka <formalpara><title>Returns</title>

<para>zwraca liczbę, która reprezentuje wysokość kafelka </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1a1e601f4ffaf9104214971e12b3b4de17"/><section>
    <title>getTileSetMap()</title>
<indexterm><primary>getTileSetMap</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getTileSetMap</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_class_tile_set_map">TileSetMap</link> &gt; Map::getTileSetMap ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca kafelki mapy <formalpara><title>Returns</title>

<para>zwraca kolekcje vector, która przechowuje kafelki użyte na mapie </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1ab9209a0b619dbd3721335bd414968b6c"/><section>
    <title>getTileWidth()</title>
<indexterm><primary>getTileWidth</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getTileWidth</secondary></indexterm>
<para><computeroutput>int Map::getTileWidth ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca szerokosc kafelka <formalpara><title>Returns</title>

<para>zwraca liczbę, która reprezentuje szerokość kafelka </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1a4b04d446d3c661a985874ace350853b9"/><section>
    <title>getType()</title>
<indexterm><primary>getType</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getType</secondary></indexterm>
<para><computeroutput>std::string Map::getType ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o typie <formalpara><title>Returns</title>

<para>zwraca tekst, który reprezentuje informacje o typie </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1ad8563d64d89efd1be0694edc54abb2ab"/><section>
    <title>getVersion()</title>
<indexterm><primary>getVersion</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getVersion</secondary></indexterm>
<para><computeroutput>float Map::getVersion ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o uzytej wersji zapisu <formalpara><title>Returns</title>

<para>zwraca liczbę zmiennoprzecinkową, która reprezentuje wersję użytą do zapisu do pliku json </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1afd34d12227676b3cebeed9f5fae2508f"/><section>
    <title>getWidth()</title>
<indexterm><primary>getWidth</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>getWidth</secondary></indexterm>
<para><computeroutput>int Map::getWidth ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca szerokość <formalpara><title>Returns</title>

<para>zwraca liczbę, która reprezentuje szerokość mapy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_map_1a6e7241617514fc7b227d8cb96d30c81a"/><section>
    <title>isInfinite()</title>
<indexterm><primary>isInfinite</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>isInfinite</secondary></indexterm>
<para><computeroutput>bool Map::isInfinite ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Sprawdza czy wystepuje niesokonczoność <formalpara><title>Returns</title>

<para>zwraca true jeśli mapa jest nieskończona lub false jeśli nie jest </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_map_1a0546fef98caebe38385bb2e0c7a15da1"/><section>
    <title>height</title>
<indexterm><primary>height</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>height</secondary></indexterm>
<para><computeroutput>int Map::height<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna do wysokości. </para>
</para>
</section>
<anchor xml:id="_class_map_1aa3e42d577840a0069c94ecae4467562d"/><section>
    <title>infinite</title>
<indexterm><primary>infinite</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>infinite</secondary></indexterm>
<para><computeroutput>bool Map::infinite<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna określjąca czy jest nieskończoność </para>
</para>
</section>
<anchor xml:id="_class_map_1a5cd95ff260dce65601bb62c3292a3bfd"/><section>
    <title>layers</title>
<indexterm><primary>layers</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>layers</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="_class_layer">Layer</link>&gt; Map::layers<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca warstwy. </para>
</para>
</section>
<anchor xml:id="_class_map_1a02e2d0dbcc15af66e896365ed40fdc01"/><section>
    <title>nextlayerid</title>
<indexterm><primary>nextlayerid</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>nextlayerid</secondary></indexterm>
<para><computeroutput>int Map::nextlayerid<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca id następnej warstwy. </para>
</para>
</section>
<anchor xml:id="_class_map_1af62ec82d7f35991aa77c52da4d2e2290"/><section>
    <title>nextobjectid</title>
<indexterm><primary>nextobjectid</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>nextobjectid</secondary></indexterm>
<para><computeroutput>int Map::nextobjectid<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca id nastepnego obiektu. </para>
</para>
</section>
<anchor xml:id="_class_map_1a71ce7d3f9b38d813ccdee6238c928331"/><section>
    <title>orientation</title>
<indexterm><primary>orientation</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>orientation</secondary></indexterm>
<para><computeroutput>std::string Map::orientation<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informacje o orientacji na mapie. </para>
</para>
</section>
<anchor xml:id="_class_map_1a465b7f45392e5d283a58cb8deed34866"/><section>
    <title>renderorder</title>
<indexterm><primary>renderorder</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>renderorder</secondary></indexterm>
<para><computeroutput>std::string Map::renderorder<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informacje o renderowaniu. </para>
</para>
</section>
<anchor xml:id="_class_map_1ab2ee86c9d4bf09110ca91ae8971ebb87"/><section>
    <title>tiledversion</title>
<indexterm><primary>tiledversion</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>tiledversion</secondary></indexterm>
<para><computeroutput>std::string Map::tiledversion<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informacje o wersji. </para>
</para>
</section>
<anchor xml:id="_class_map_1aaf62b7a95219df701f793bbdb7ad7219"/><section>
    <title>tileheight</title>
<indexterm><primary>tileheight</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>tileheight</secondary></indexterm>
<para><computeroutput>int Map::tileheight<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informacje o wysokości kafelka. </para>
</para>
</section>
<anchor xml:id="_class_map_1a8ecfbf296ba00680bd6b63956102e8e6"/><section>
    <title>tilesets</title>
<indexterm><primary>tilesets</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>tilesets</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="_class_tile_set_map">TileSetMap</link>&gt; Map::tilesets<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowują kafleki. </para>
</para>
</section>
<anchor xml:id="_class_map_1adf0b26f23f7de86d44fff24daedf3e6f"/><section>
    <title>tilewidth</title>
<indexterm><primary>tilewidth</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>tilewidth</secondary></indexterm>
<para><computeroutput>int Map::tilewidth<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowujaca informacje o szerokości kafelka. </para>
</para>
</section>
<anchor xml:id="_class_map_1aa6e7a427f467c84f33079371231b69c0"/><section>
    <title>type</title>
<indexterm><primary>type</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>type</secondary></indexterm>
<para><computeroutput>std::string Map::type<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informacje o typie. </para>
</para>
</section>
<anchor xml:id="_class_map_1a02cbc0172c2867bef1a7caef9752cf1d"/><section>
    <title>version</title>
<indexterm><primary>version</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>version</secondary></indexterm>
<para><computeroutput>float Map::version<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowujaca informacje o wersji zapisu. </para>
</para>
</section>
<anchor xml:id="_class_map_1a9ecfe932ad2d2bc22492416033bdacfd"/><section>
    <title>width</title>
<indexterm><primary>width</primary><secondary>Map</secondary></indexterm>
<indexterm><primary>Map</primary><secondary>width</secondary></indexterm>
<para><computeroutput>int Map::width<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowujaca informacje o szerokosci. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/<link linkend="__map_8h">Map.h</link>src/<link linkend="__map_8cpp">Map.cpp</link></section>
</section>
