<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_layer" xml:lang="en-US">
<title>Layer Class Reference</title>
<indexterm><primary>Layer</primary></indexterm>
<para>
<computeroutput>#include &lt;Layer.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_layer_1a8f623c7c4737dc29ecc86978d243ac6f">Layer</link> ()</para>

<para>Konstruktor pusty. </para>
</listitem>
            <listitem><para><link linkend="_class_layer_1a582167f70d2ae94bc90c5986661475a6">Layer</link> (<link linkend="_fwd_8h_1a887ce50b3fe61c5e9cfd9b9506548dd9">rapidjson::Value</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para><link linkend="_class_layer_1a1b1ba4804451dfe6cc357194e42762ae">~Layer</link> ()</para>

<para>Destruktor. </para>
</listitem>
            <listitem><para>std::vector&lt; int &gt; <link linkend="_class_layer_1abd8ad603c5223d39187225e1fce2ac72">getData</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a974c0866509db4c131f8f38d281fbcd1">getHeight</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a818d3ab6d8176de677ca5a476ec72e88">getId</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_layer_1a03296398e674b6ed9e4e893653f0434b">getImage</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_layer_1a1f981903fa03cd45b44aa68042ac809a">getName</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1ab49da526ffa214b3d1efe59531843979">getOpacity</link> ()</para>
</listitem>
            <listitem><para>std::string <link linkend="_class_layer_1afbdf075a35996b080e67a5bb8129adb6">getType</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_layer_1a79e172a9898791194b47d581e7d7f7ca">isVisible</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a39e3b346235715e15d99a0a8ac95e0a7">getWidth</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1aede3ba05e099573525f65420168664cd">getX</link> ()</para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a72ca6f6610005d666795a64599f37d0d">getY</link> ()</para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_layer_object">LayerObject</link> &gt; <link linkend="_class_layer_1ab48a21d96242142516cecfca51fd37d3">getObjects</link> ()</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para>std::vector&lt; int &gt; <link linkend="_class_layer_1a5de0967a414a49f20a027a55d0adeb49">data</link></para>

<para>Wektor który przechowuje informacje o występieniach na mapie danej warstwy. </para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a6a0bc24033339368a0ca9747485f0053">height</link></para>

<para>Zmienna przechowująca wysokość </para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1ad8c4d484a5efce0cbbd0cf81b3958d17">id</link></para>

<para>Zmienna przechowująca id. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_layer_1a318dcce8317fa52680c9693d65ec64bb">image</link></para>

<para>Zmienna przechowująca ściezke do obrazka. </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_layer_1a2071349b5667273725ae7f05a42db7a6">name</link></para>

<para>Zmienna przechowująca nazwe. </para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a335b0615d255a1163f1728a9809423e2">opacity</link></para>

<para>Zmienna przechowująca przezroczystość </para>
</listitem>
            <listitem><para>std::string <link linkend="_class_layer_1aa31ddf3517c458664780ba5fd3d427cb">type</link></para>

<para>Zmienna przechowująca informacje o typie. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_layer_1af6cf29dc19f963e16c516a3b2d5c30f9">visible</link></para>

<para>Zmienna przechowująca informacje o widoczności. </para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a724d3020ddbe5f9280caa325541e70a3">width</link></para>

<para>Zmienna przechowująca szerokość </para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1a17b2eeefeefd903159b8a847fee1c7dd">x</link></para>

<para>Zmienna przechowujaca współrzędną x. </para>
</listitem>
            <listitem><para>int <link linkend="_class_layer_1ab687faee2a5f65aecc77f26b25b29a5c">y</link></para>

<para>Zmienna przechowująca współrzędną y. </para>
</listitem>
            <listitem><para>std::vector&lt; <link linkend="_class_layer_object">LayerObject</link> &gt; <link linkend="_class_layer_1a8c6e8887425ca40694692169f300de3c">objects</link></para>

<para>Wektor który przechowuje obiekty warstwy. </para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_layer_1a8f623c7c4737dc29ecc86978d243ac6f"/><section>
    <title>Layer()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>Layer</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>Layer</secondary></indexterm>
<para><computeroutput>Layer::Layer ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Konstruktor pusty. </para>
</para>
</section>
<anchor xml:id="_class_layer_1a582167f70d2ae94bc90c5986661475a6"/><section>
    <title>Layer()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>Layer</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>Layer</secondary></indexterm>
<para><computeroutput>Layer::Layer (<link linkend="_fwd_8h_1a887ce50b3fe61c5e9cfd9b9506548dd9">rapidjson::Value</link> &amp; value)</computeroutput></para>
<para>Konstruktor który przyjmuje sparsowane wartości z json&apos;a 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>value</entry><entry>
<para>- sparsowane wartości json </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_layer_1a1b1ba4804451dfe6cc357194e42762ae"/><section>
    <title>~Layer()</title>
<indexterm><primary>~Layer</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>~Layer</secondary></indexterm>
<para><computeroutput>Layer::~Layer ( )<computeroutput>[default]</computeroutput></computeroutput></para><para>

<para>Destruktor. </para>
</para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_layer_1abd8ad603c5223d39187225e1fce2ac72"/><section>
    <title>getData()</title>
<indexterm><primary>getData</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getData</secondary></indexterm>
<para><computeroutput>std::vector&lt; int &gt; Layer::getData ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Służy do zwracania informacji o miejscach wystąpienia na mapie danej warstwy <formalpara><title>Returns</title>

<para>zwraca date, ktora zawiera informacje o wystapieniach na mapie danej warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1a974c0866509db4c131f8f38d281fbcd1"/><section>
    <title>getHeight()</title>
<indexterm><primary>getHeight</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getHeight</secondary></indexterm>
<para><computeroutput>int Layer::getHeight ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca wysokość warstwy <formalpara><title>Returns</title>

<para>zwraca liczbę oznaczająca wysokość </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1a818d3ab6d8176de677ca5a476ec72e88"/><section>
    <title>getId()</title>
<indexterm><primary>getId</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getId</secondary></indexterm>
<para><computeroutput>int Layer::getId ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca id warstwy <formalpara><title>Returns</title>

<para>zwraca liczbę która reprezentuje id dla warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1a03296398e674b6ed9e4e893653f0434b"/><section>
    <title>getImage()</title>
<indexterm><primary>getImage</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getImage</secondary></indexterm>
<para><computeroutput>std::string Layer::getImage ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca sciezke do obrazka <formalpara><title>Returns</title>

<para>zwraca tekst, który reprezentuje ścieżke do obrazka </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1a1f981903fa03cd45b44aa68042ac809a"/><section>
    <title>getName()</title>
<indexterm><primary>getName</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getName</secondary></indexterm>
<para><computeroutput>std::string Layer::getName ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca nazwe <formalpara><title>Returns</title>

<para>zwraca tekst, który reprezentuje nazwe warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1ab48a21d96242142516cecfca51fd37d3"/><section>
    <title>getObjects()</title>
<indexterm><primary>getObjects</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getObjects</secondary></indexterm>
<para><computeroutput>std::vector&lt; <link linkend="_class_layer_object">LayerObject</link> &gt; Layer::getObjects ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca obiekty występujące w warstwie <formalpara><title>Returns</title>

<para>zwraca obiekty, które występują w warstwie </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1ab49da526ffa214b3d1efe59531843979"/><section>
    <title>getOpacity()</title>
<indexterm><primary>getOpacity</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getOpacity</secondary></indexterm>
<para><computeroutput>int Layer::getOpacity ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o przezroczystości <formalpara><title>Returns</title>

<para>zwraca liczbe, która reprezentuje przezroczystość dla warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1afbdf075a35996b080e67a5bb8129adb6"/><section>
    <title>getType()</title>
<indexterm><primary>getType</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getType</secondary></indexterm>
<para><computeroutput>std::string Layer::getType ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o typie <formalpara><title>Returns</title>

<para>zwraca tekst, który reprezentuje typ dla warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1a39e3b346235715e15d99a0a8ac95e0a7"/><section>
    <title>getWidth()</title>
<indexterm><primary>getWidth</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getWidth</secondary></indexterm>
<para><computeroutput>int Layer::getWidth ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca szerokość warstwy <formalpara><title>Returns</title>

<para>zwraca liczbę która reprezentuje szerokość warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1aede3ba05e099573525f65420168664cd"/><section>
    <title>getX()</title>
<indexterm><primary>getX</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getX</secondary></indexterm>
<para><computeroutput>int Layer::getX ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca współrzędną x <formalpara><title>Returns</title>

<para>zwraca liczbę, która reprezentuje współrzedną x dla warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1a72ca6f6610005d666795a64599f37d0d"/><section>
    <title>getY()</title>
<indexterm><primary>getY</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>getY</secondary></indexterm>
<para><computeroutput>int Layer::getY ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca współrzędną y <formalpara><title>Returns</title>

<para>zwraca liczbę, która reprezentuje współrzedną y dla warstwy </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_layer_1a79e172a9898791194b47d581e7d7f7ca"/><section>
    <title>isVisible()</title>
<indexterm><primary>isVisible</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>isVisible</secondary></indexterm>
<para><computeroutput>bool Layer::isVisible ( )<computeroutput>[inline]</computeroutput></computeroutput></para>
<para>Zwraca informacje o widoczności <formalpara><title>Returns</title>

<para>zwraca true jeśli warstwa jest widoczna lub false jeśli nie widoczna </para>
</formalpara>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_layer_1a5de0967a414a49f20a027a55d0adeb49"/><section>
    <title>data</title>
<indexterm><primary>data</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>data</secondary></indexterm>
<para><computeroutput>std::vector&lt;int&gt; Layer::data<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Wektor który przechowuje informacje o występieniach na mapie danej warstwy. </para>
</para>
</section>
<anchor xml:id="_class_layer_1a6a0bc24033339368a0ca9747485f0053"/><section>
    <title>height</title>
<indexterm><primary>height</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>height</secondary></indexterm>
<para><computeroutput>int Layer::height<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca wysokość </para>
</para>
</section>
<anchor xml:id="_class_layer_1ad8c4d484a5efce0cbbd0cf81b3958d17"/><section>
    <title>id</title>
<indexterm><primary>id</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>id</secondary></indexterm>
<para><computeroutput>int Layer::id<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca id. </para>
</para>
</section>
<anchor xml:id="_class_layer_1a318dcce8317fa52680c9693d65ec64bb"/><section>
    <title>image</title>
<indexterm><primary>image</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>image</secondary></indexterm>
<para><computeroutput>std::string Layer::image<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca ściezke do obrazka. </para>
</para>
</section>
<anchor xml:id="_class_layer_1a2071349b5667273725ae7f05a42db7a6"/><section>
    <title>name</title>
<indexterm><primary>name</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>name</secondary></indexterm>
<para><computeroutput>std::string Layer::name<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca nazwe. </para>
</para>
</section>
<anchor xml:id="_class_layer_1a8c6e8887425ca40694692169f300de3c"/><section>
    <title>objects</title>
<indexterm><primary>objects</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>objects</secondary></indexterm>
<para><computeroutput>std::vector&lt;<link linkend="_class_layer_object">LayerObject</link>&gt; Layer::objects<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Wektor który przechowuje obiekty warstwy. </para>
</para>
</section>
<anchor xml:id="_class_layer_1a335b0615d255a1163f1728a9809423e2"/><section>
    <title>opacity</title>
<indexterm><primary>opacity</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>opacity</secondary></indexterm>
<para><computeroutput>int Layer::opacity<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca przezroczystość </para>
</para>
</section>
<anchor xml:id="_class_layer_1aa31ddf3517c458664780ba5fd3d427cb"/><section>
    <title>type</title>
<indexterm><primary>type</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>type</secondary></indexterm>
<para><computeroutput>std::string Layer::type<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informacje o typie. </para>
</para>
</section>
<anchor xml:id="_class_layer_1af6cf29dc19f963e16c516a3b2d5c30f9"/><section>
    <title>visible</title>
<indexterm><primary>visible</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>visible</secondary></indexterm>
<para><computeroutput>bool Layer::visible<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca informacje o widoczności. </para>
</para>
</section>
<anchor xml:id="_class_layer_1a724d3020ddbe5f9280caa325541e70a3"/><section>
    <title>width</title>
<indexterm><primary>width</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>width</secondary></indexterm>
<para><computeroutput>int Layer::width<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca szerokość </para>
</para>
</section>
<anchor xml:id="_class_layer_1a17b2eeefeefd903159b8a847fee1c7dd"/><section>
    <title>x</title>
<indexterm><primary>x</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>x</secondary></indexterm>
<para><computeroutput>int Layer::x<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowujaca współrzędną x. </para>
</para>
</section>
<anchor xml:id="_class_layer_1ab687faee2a5f65aecc77f26b25b29a5c"/><section>
    <title>y</title>
<indexterm><primary>y</primary><secondary>Layer</secondary></indexterm>
<indexterm><primary>Layer</primary><secondary>y</secondary></indexterm>
<para><computeroutput>int Layer::y<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna przechowująca współrzędną y. </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/<link linkend="__layer_8h">Layer.h</link>src/<link linkend="__layer_8cpp">Layer.cpp</link></section>
</section>
