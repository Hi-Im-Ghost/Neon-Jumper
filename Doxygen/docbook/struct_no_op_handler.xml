<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_no_op_handler" xml:lang="en-US">
<title>NoOpHandler Struct Reference</title>
<indexterm><primary>NoOpHandler</primary></indexterm>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a4add8ca2d72537403f497bc3a84d42d5">Null</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a563101a92a1f2a15e6a200a618adc1a6">Bool</link> (bool)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1aa1acd69bf7981367227aad2f568e2d30">Int</link> (int)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a56d69a61b750b893adefee2ea30a1264">Uint</link> (unsigned)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1afdcacc546b3a633a1c6330a5b57c490b">Int64</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link>)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a9d986fde441fbb8a9660fbc1c906247e">Uint64</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a269ab4f29fb4fe3819bbfb2c58aa5ef3">Double</link> (double)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a1f1deddfb1e6bd378e420777d526af58">RawNumber</link> (const char *, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>, bool)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a1151e1ecd0a90ebe7ac3b0c9847e486b">String</link> (const char *, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>, bool)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a0718496c99aa8fd8958faa6c124af286">StartObject</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a19d6cd42eafad2146b77e0fc3418863f">Key</link> (const char *, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>, bool)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a22ea74eed0dd4747dc55dff643050b13">EndObject</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a13bd4b7c0e782a3598e6ffd4b9b25592">StartArray</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_no_op_handler_1a2358a50cff4349b8035baafd7d19de92">EndArray</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct_no_op_handler_1a563101a92a1f2a15e6a200a618adc1a6"/><section>
    <title>Bool()</title>
<indexterm><primary>Bool</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Bool</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Bool (bool )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a269ab4f29fb4fe3819bbfb2c58aa5ef3"/><section>
    <title>Double()</title>
<indexterm><primary>Double</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Double</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Double (double )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a2358a50cff4349b8035baafd7d19de92"/><section>
    <title>EndArray()</title>
<indexterm><primary>EndArray</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>EndArray</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::EndArray (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a22ea74eed0dd4747dc55dff643050b13"/><section>
    <title>EndObject()</title>
<indexterm><primary>EndObject</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>EndObject</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::EndObject (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1aa1acd69bf7981367227aad2f568e2d30"/><section>
    <title>Int()</title>
<indexterm><primary>Int</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Int</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Int (int )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1afdcacc546b3a633a1c6330a5b57c490b"/><section>
    <title>Int64()</title>
<indexterm><primary>Int64</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Int64</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Int64 (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a19d6cd42eafad2146b77e0fc3418863f"/><section>
    <title>Key()</title>
<indexterm><primary>Key</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Key</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Key (const char * , <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> , bool )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a4add8ca2d72537403f497bc3a84d42d5"/><section>
    <title>Null()</title>
<indexterm><primary>Null</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Null</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Null ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a1f1deddfb1e6bd378e420777d526af58"/><section>
    <title>RawNumber()</title>
<indexterm><primary>RawNumber</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>RawNumber</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::RawNumber (const char * , <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> , bool )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a13bd4b7c0e782a3598e6ffd4b9b25592"/><section>
    <title>StartArray()</title>
<indexterm><primary>StartArray</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>StartArray</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::StartArray ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a0718496c99aa8fd8958faa6c124af286"/><section>
    <title>StartObject()</title>
<indexterm><primary>StartObject</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>StartObject</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::StartObject ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a1151e1ecd0a90ebe7ac3b0c9847e486b"/><section>
    <title>String()</title>
<indexterm><primary>String</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>String</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::String (const char * , <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> , bool )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a56d69a61b750b893adefee2ea30a1264"/><section>
    <title>Uint()</title>
<indexterm><primary>Uint</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Uint</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Uint (unsigned )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_no_op_handler_1a9d986fde441fbb8a9660fbc1c906247e"/><section>
    <title>Uint64()</title>
<indexterm><primary>Uint64</primary><secondary>NoOpHandler</secondary></indexterm>
<indexterm><primary>NoOpHandler</primary><secondary>Uint64</secondary></indexterm>
<para><computeroutput>bool NoOpHandler::Uint64 (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<para>
The documentation for this struct was generated from the following file:</para>
src/rapidjson/test/unittest/<link linkend="_jsoncheckertest_8cpp">jsoncheckertest.cpp</link></section>
</section>
