<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_clzll_8h_source" xml:lang="en-US">
<title>clzll.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/internal/clzll.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available.</emphasis>
2 <emphasis role="comment">//</emphasis>
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015&#32;THL&#32;A29&#32;Limited,&#32;a&#32;Tencent&#32;company,&#32;and&#32;Milo&#32;Yip.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License.&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource.org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.&#32;See&#32;the&#32;License&#32;for&#32;the</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_CLZLL_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_CLZLL_H_</emphasis>
17 
18 <emphasis role="preprocessor">#include&#32;&quot;../rapidjson.h&quot;</emphasis>
19 
20 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;!defined(UNDER_CE)</emphasis>
21 <emphasis role="preprocessor">#include&#32;&lt;intrin.h&gt;</emphasis>
22 <emphasis role="preprocessor">#if&#32;defined(_WIN64)</emphasis>
23 <emphasis role="preprocessor">#pragma&#32;intrinsic(_BitScanReverse64)</emphasis>
24 <emphasis role="preprocessor">#else</emphasis>
25 <emphasis role="preprocessor">#pragma&#32;intrinsic(_BitScanReverse)</emphasis>
26 <emphasis role="preprocessor">#endif</emphasis>
27 <emphasis role="preprocessor">#endif</emphasis>
28 
29 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
30 <emphasis role="keyword">namespace&#32;</emphasis><link linkend="_namespaceinternal">internal</link>&#32;{
31 
32 <emphasis role="keyword">inline</emphasis>&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;<link linkend="_namespaceinternal_1af72bbb0200bf0166f728c7afde826286">clzll</link>(<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link>&#32;x)&#32;{
33 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Passing&#32;0&#32;to&#32;__builtin_clzll&#32;is&#32;UB&#32;in&#32;GCC&#32;and&#32;results&#32;in&#32;an</emphasis>
34 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;infinite&#32;loop&#32;in&#32;the&#32;software&#32;implementation.</emphasis>
35 &#32;&#32;&#32;&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(x&#32;!=&#32;0);
36 
37 <emphasis role="preprocessor">#if&#32;defined(_MSC_VER)&#32;&amp;&amp;&#32;!defined(UNDER_CE)</emphasis>
38 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">unsigned</emphasis>&#32;<emphasis role="keywordtype">long</emphasis>&#32;r&#32;=&#32;0;
39 <emphasis role="preprocessor">#if&#32;defined(_WIN64)</emphasis>
40 &#32;&#32;&#32;&#32;_BitScanReverse64(&amp;r,&#32;x);
41 <emphasis role="preprocessor">#else</emphasis>
42 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;the&#32;high&#32;32&#32;bits.</emphasis>
43 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">if</emphasis>&#32;(_BitScanReverse(&amp;r,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(x&#32;&gt;&gt;&#32;32)))
44 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;63&#32;-&#32;(r&#32;+&#32;32);
45 
46 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;Scan&#32;the&#32;low&#32;32&#32;bits.</emphasis>
47 &#32;&#32;&#32;&#32;_BitScanReverse(&amp;r,&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(x&#32;&amp;&#32;0xFFFFFFFF));
48 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_WIN64</emphasis>
49 
50 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;63&#32;-&#32;r;
51 <emphasis role="preprocessor">#elif&#32;(defined(__GNUC__)&#32;&amp;&amp;&#32;__GNUC__&#32;&gt;=&#32;4)&#32;||&#32;RAPIDJSON_HAS_BUILTIN(__builtin_clzll)</emphasis>
52 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;__builtin_clzll&#32;wrapper</emphasis>
53 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link><emphasis role="keyword">&gt;</emphasis>(__builtin_clzll(x));
54 <emphasis role="preprocessor">#else</emphasis>
55 &#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;naive&#32;version</emphasis>
56 &#32;&#32;&#32;&#32;<link linkend="_stdint_8h_1a435d1572bf3f880d55459d9805097f62">uint32_t</link>&#32;r&#32;=&#32;0;
57 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">while</emphasis>&#32;(!(x&#32;&amp;&#32;(<emphasis role="keyword">static_cast&lt;</emphasis><link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link><emphasis role="keyword">&gt;</emphasis>(1)&#32;&lt;&lt;&#32;63)))&#32;{
58 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;x&#32;&lt;&lt;=&#32;1;
59 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;++r;
60 &#32;&#32;&#32;&#32;}
61 
62 &#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;r;
63 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;_MSC_VER</emphasis>
64 }
65 
66 <emphasis role="preprocessor">#define&#32;RAPIDJSON_CLZLL&#32;RAPIDJSON_NAMESPACE::internal::clzll</emphasis>
67 
68 }&#32;<emphasis role="comment">//&#32;namespace&#32;internal</emphasis>
69 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
70 
71 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_CLZLL_H_</emphasis>
</programlisting></section>
