<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_md_src_rapidjson_doc_encoding_zh_cn" xml:lang="en-US">

<para>根据 <link xlink:href="http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf">ECMA-404</link>：</para>

<para><blockquote>
<para>&#8205;(in Introduction) JSON text is a sequence of Unicode code points.</para>

<para>翻译：JSON 文本是 Unicode 码点的序列。 </para>
</blockquote>较早的 <link xlink:href="http://www.ietf.org/rfc/rfc4627.txt">RFC4627</link> 申明：</para>

<para><blockquote>
<para>&#8205;(in §3) JSON text SHALL be encoded in Unicode. The default encoding is UTF-8.</para>

<para>翻译：JSON 文本应该以 Unicode 编码。缺省的编码为 UTF-8。 </para>
</blockquote><blockquote>
<para>&#8205;(in §6) JSON may be represented using UTF-8, UTF-16, or UTF-32. When JSON is written in UTF-8, JSON is 8bit compatible. When JSON is written in UTF-16 or UTF-32, the binary content-transfer-encoding must be used.</para>

<para>翻译：JSON 可使用 UTF-8、UTF-16 或 UTF-32 表示。当 JSON 以 UTF-8 写入，该 JSON 是 8 位兼容的。当 JSON 以 UTF-16 或 UTF-32 写入，就必须使用二进制的内容传送编码。 </para>
</blockquote>RapidJSON 支持多种编码。它也能检查 JSON 的编码，以及在不同编码中进行转码。所有这些功能都是在内部实现，无需使用外部的程序库（如 <link xlink:href="http://site.icu-project.org/">ICU</link>）。</para>
<section xml:id="_md_src_rapidjson_doc_encoding_zh_cn_1Unicode">
<title>Unicode</title>

<para>根据 <link xlink:href="http://www.unicode.org/standard/translations/t-chinese.html">Unicode 的官方网站</link>： &gt;Unicode 给每个字符提供了一个唯一的数字， 不论是什么平台、 不论是什么程序、 不论是什么语言。</para>

<para>这些唯一数字称为码点（code point），其范围介乎 <computeroutput>0x0</computeroutput> 至 <computeroutput>0x10FFFF</computeroutput> 之间。</para>
<section xml:id="_md_src_rapidjson_doc_encoding_zh_cn_1UTF">
<title>Unicode Transformation Format</title>

<para>存储 Unicode 码点有多种编码方式。这些称为 Unicode 转换格式（Unicode Transformation Format, UTF）。RapidJSON 支持最常用的 UTF，包括：</para>

<para><itemizedlist>
<listitem>
<para>UTF-8：8 位可变长度编码。它把一个码点映射至 1 至 4 个字节。</para>
</listitem><listitem>
<para>UTF-16：16 位可变长度编码。它把一个码点映射至 1 至 2 个 16 位编码单元（即 2 至 4 个字节）。</para>
</listitem><listitem>
<para>UTF-32：32 位固定长度编码。它直接把码点映射至单个 32 位编码单元（即 4 字节）。</para>
</listitem></itemizedlist>
</para>

<para>对于 UTF-16 及 UTF-32 来说，字节序（endianness）是有影响的。在内存中，它们通常都是以该计算机的字节序来存储。然而，当要储存在文件中或在网上传输，我们需要指明字节序列的字节序，是小端（little endian, LE）还是大端（big-endian, BE）。</para>

<para>RapidJSON 通过 <computeroutput><link linkend="_encodings_8h">rapidjson/encodings.h</link></computeroutput> 中的 struct 去提供各种编码：</para>

<para><literallayout><computeroutput>namespace&#32;rapidjson&#32;{

template&lt;typename&#32;CharType&#32;=&#32;char&gt;
struct&#32;UTF8;

template&lt;typename&#32;CharType&#32;=&#32;wchar_t&gt;
struct&#32;UTF16;

template&lt;typename&#32;CharType&#32;=&#32;wchar_t&gt;
struct&#32;UTF16LE;

template&lt;typename&#32;CharType&#32;=&#32;wchar_t&gt;
struct&#32;UTF16BE;

template&lt;typename&#32;CharType&#32;=&#32;unsigned&gt;
struct&#32;UTF32;

template&lt;typename&#32;CharType&#32;=&#32;unsigned&gt;
struct&#32;UTF32LE;

template&lt;typename&#32;CharType&#32;=&#32;unsigned&gt;
struct&#32;UTF32BE;

}&#32;//&#32;namespace&#32;rapidjson
</computeroutput></literallayout></para>

<para>对于在内存中的文本，我们正常会使用 <computeroutput><link linkend="_struct_u_t_f8">UTF8</link></computeroutput>、<computeroutput><link linkend="_struct_u_t_f16">UTF16</link></computeroutput> 或 <computeroutput><link linkend="_struct_u_t_f32">UTF32</link></computeroutput>。对于处理经过 I/O 的文本，我们可使用 <computeroutput><link linkend="_struct_u_t_f8">UTF8</link></computeroutput>、<computeroutput><link linkend="_struct_u_t_f16_l_e">UTF16LE</link></computeroutput>、<computeroutput><link linkend="_struct_u_t_f16_b_e">UTF16BE</link></computeroutput>、<computeroutput><link linkend="_struct_u_t_f32_l_e">UTF32LE</link></computeroutput> 或 <computeroutput><link linkend="_struct_u_t_f32_b_e">UTF32BE</link></computeroutput>。</para>

<para>当使用 DOM 风格的 API，<computeroutput><link linkend="_class_generic_value">GenericValue</link>&lt;Encoding&gt;</computeroutput> 及 <computeroutput><link linkend="_class_generic_document">GenericDocument</link>&lt;Encoding&gt;</computeroutput> 里的 <computeroutput>Encoding</computeroutput> 模板参数是用于指明内存中存储的 JSON 字符串使用哪种编码。因此通常我们会在此参数中使用 <computeroutput><link linkend="_struct_u_t_f8">UTF8</link></computeroutput>、<computeroutput><link linkend="_struct_u_t_f16">UTF16</link></computeroutput> 或 <computeroutput><link linkend="_struct_u_t_f32">UTF32</link></computeroutput>。如何选择，视乎应用软件所使用的操作系统及其他程序库。例如，Windows API 使用 UTF-16 表示 Unicode 字符，而多数的 Linux 发行版本及应用软件则更喜欢 UTF-8。</para>

<para>使用 UTF-16 的 DOM 声明例子：</para>

<para><literallayout><computeroutput>typedef&#32;GenericDocument&lt;UTF16&lt;&gt;&#32;&gt;&#32;WDocument;
typedef&#32;GenericValue&lt;UTF16&lt;&gt;&#32;&gt;&#32;WValue;
</computeroutput></literallayout></para>

<para>可以在 <link linkend="_stream_8zh-cn_8md">DOM&apos;s Encoding</link> 一节看到更详细的使用例子。</para>
</section>
<section xml:id="_md_src_rapidjson_doc_encoding_zh_cn_1CharacterType">
<title>Character Type</title>

<para>从之前的声明中可以看到，每个编码都有一个 <computeroutput>CharType</computeroutput> 模板参数。这可能比较容易混淆，实际上，每个 <computeroutput>CharType</computeroutput> 存储一个编码单元，而不是一个字符（码点）。如之前所谈及，在 UTF-8 中一个码点可能会编码成 1 至 4 个编码单元。</para>

<para>对于 <computeroutput><link linkend="_struct_u_t_f16">UTF16</link>(LE|BE)</computeroutput> 及 <computeroutput><link linkend="_struct_u_t_f32">UTF32</link>(LE|BE)</computeroutput> 来说，<computeroutput>CharType</computeroutput> 必须分别是一个至少 2 及 4 字节的整数类型。</para>

<para>注意 C++11 新添了 <computeroutput>char16_t</computeroutput> 及 <computeroutput>char32_t</computeroutput> 类型，也可分别用于 <computeroutput><link linkend="_struct_u_t_f16">UTF16</link></computeroutput> 及 <computeroutput><link linkend="_struct_u_t_f32">UTF32</link></computeroutput>。</para>
</section>
<section xml:id="_md_src_rapidjson_doc_encoding_zh_cn_1AutoUTF">
<title>AutoUTF</title>

<para>上述所介绍的编码都是在编译期静态挷定的。换句话说，使用者必须知道内存或流之中使用了哪种编码。然而，有时候我们可能需要读写不同编码的文件，而且这些编码需要在运行时才能决定。</para>

<para><computeroutput><link linkend="_struct_auto_u_t_f">AutoUTF</link></computeroutput> 是为此而设计的编码。它根据输入或输出流来选择使用哪种编码。目前它应该与 <computeroutput><link linkend="_class_encoded_input_stream">EncodedInputStream</link></computeroutput> 及 <computeroutput><link linkend="_class_encoded_output_stream">EncodedOutputStream</link></computeroutput> 结合使用。</para>
</section>
<section xml:id="_md_src_rapidjson_doc_encoding_zh_cn_1ASCII">
<title>ASCII</title>

<para>虽然 JSON 标准并未提及 <link xlink:href="http://en.wikipedia.org/wiki/ASCII">ASCII</link>，有时候我们希望写入 7 位的 <link linkend="_struct_a_s_c_i_i">ASCII</link> JSON，以供未能处理 UTF-8 的应用程序使用。由于任 JSON 都可以把 Unicode 字符表示为 <computeroutput>\uXXXX</computeroutput> 转义序列，JSON 总是可用 <link linkend="_struct_a_s_c_i_i">ASCII</link> 来编码。</para>

<para>以下的例子把 UTF-8 的 DOM 写成 <link linkend="_struct_a_s_c_i_i">ASCII</link> 的 JSON：</para>

<para><literallayout><computeroutput>using&#32;namespace&#32;rapidjson;
Document&#32;d;&#32;//&#32;UTF8&lt;&gt;
//&#32;...
StringBuffer&#32;buffer;
Writer&lt;StringBuffer,&#32;Document::EncodingType,&#32;ASCII&lt;&gt;&#32;&gt;&#32;writer(buffer);
d.Accept(writer);
std::cout&#32;&lt;&lt;&#32;buffer.GetString();
</computeroutput></literallayout></para>

<para><link linkend="_struct_a_s_c_i_i">ASCII</link> 可用于输入流。当输入流包含大于 127 的字节，就会导致 <computeroutput>kParseErrorStringInvalidEncoding</computeroutput> 错误。</para>

<para><link linkend="_struct_a_s_c_i_i">ASCII</link> * 不能 * 用于内存（<computeroutput>Document</computeroutput> 的编码，或 <computeroutput>Reader</computeroutput> 的目标编码)，因为它不能表示 Unicode 码点。</para>
</section>
</section>
<section xml:id="_md_src_rapidjson_doc_encoding_zh_cn_1ValidationTranscoding">
<title>Validation &amp; Transcoding</title>

<para>当 RapidJSON 解析一个 JSON 时，它能校验输入 JSON，判断它是否所标明编码的合法序列。要开启此选项，请把 <computeroutput>kParseValidateEncodingFlag</computeroutput> 加入 <computeroutput>parseFlags</computeroutput> 模板参数。</para>

<para>若输入编码和输出编码并不相同，<computeroutput>Reader</computeroutput> 及 <computeroutput><link linkend="_class_writer">Writer</link></computeroutput> 会算把文本转码。在这种情况下，并不需要 <computeroutput>kParseValidateEncodingFlag</computeroutput>，因为它必须解码输入序列。若序列不能被解码，它必然是不合法的。</para>
<section xml:id="_md_src_rapidjson_doc_encoding_zh_cn_1Transcoder">
<title>Transcoder</title>

<para>虽然 RapidJSON 的编码功能是为 JSON 解析／生成而设计，使用者也可以“滥用”它们来为非 JSON 字符串转码。</para>

<para>以下的例子把 UTF-8 字符串转码成 UTF-16：</para>

<para><literallayout><computeroutput>#include&#32;&quot;rapidjson/encodings.h&quot;

using&#32;namespace&#32;rapidjson;

const&#32;char*&#32;s&#32;=&#32;&quot;...&quot;;&#32;//&#32;UTF-8&#32;string
StringStream&#32;source(s);
GenericStringBuffer&lt;UTF16&lt;&gt;&#32;&gt;&#32;target;

bool&#32;hasError&#32;=&#32;false;
while&#32;(source.Peek()&#32;!=&#32;&apos;\0&apos;)
&#32;&#32;&#32;&#32;if&#32;(!Transcoder&lt;UTF8&lt;&gt;,&#32;UTF16&lt;&gt;&#32;&gt;::Transcode(source,&#32;target))&#32;{
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;hasError&#32;=&#32;true;
&#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;break;
&#32;&#32;&#32;&#32;}

if&#32;(!hasError)&#32;{
&#32;&#32;&#32;&#32;const&#32;wchar_t*&#32;t&#32;=&#32;target.GetString();
&#32;&#32;&#32;&#32;//&#32;...
}
</computeroutput></literallayout></para>

<para>你也可以用 <computeroutput><link linkend="_struct_auto_u_t_f">AutoUTF</link></computeroutput> 及对应的流来在运行时设置内源／目的之编码。 </para>
</section>
</section>
</section>
