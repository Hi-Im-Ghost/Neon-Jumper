<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_allocators_8h" xml:lang="en-US">
<title>src/rapidjson/include/rapidjson/allocators.h File Reference</title>
<indexterm><primary>src/rapidjson/include/rapidjson/allocators.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;rapidjson.h&quot;
#include &quot;internal/meta.h&quot;
#include &lt;memory&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_crt_allocator">CrtAllocator</link></para>

<para>C-runtime library allocator. </para>
</listitem>
            <listitem><para>class <link linkend="_class_memory_pool_allocator">MemoryPoolAllocator&lt; BaseAllocator &gt;</link></para>

<para>Default memory allocator used by the parser and DOM. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_memory_pool_allocator_1_1_chunk_header">MemoryPoolAllocator&lt; BaseAllocator &gt;::ChunkHeader</link></para>

<para>Chunk header for perpending to each chunk. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_memory_pool_allocator_1_1_shared_data">MemoryPoolAllocator&lt; BaseAllocator &gt;::SharedData</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_ref_counted">internal::IsRefCounted&lt; typename, typename &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_structinternal_1_1_is_ref_counted_3_01_t_00_01typename_01internal_1_1_enable_if_cond_3_01_t_1_1k_ref_counted_01_4_1_1_type_01_4">internal::IsRefCounted&lt; T, typename internal::EnableIfCond&lt; T::kRefCounted &gt;::Type &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_std_allocator">StdAllocator&lt; T, BaseAllocator &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_std_allocator_1_1rebind">StdAllocator&lt; T, BaseAllocator &gt;::rebind&lt; U &gt;</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_std_allocator_3_01void_00_01_base_allocator_01_4">StdAllocator&lt; void, BaseAllocator &gt;</link></para>
</listitem>
            <listitem><para>struct <link linkend="_struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind">StdAllocator&lt; void, BaseAllocator &gt;::rebind&lt; U &gt;</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Namespaces    </title>
        <itemizedlist>
            <listitem><para>namespace <link linkend="_namespaceinternal">internal</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga860570d04d489be08b9835d2ec58bac5">RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</link>   (64 * 1024)</para>

<para>User-defined kDefaultChunkCapacity definition. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename A &gt; </para><para><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_allocators_8h_1a8e4137cbc097868e8c3d785f6cca1223">Realloc</link> (A &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> *old_p, size_t old_n, size_t new_n)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename A &gt; </para><para><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * <link linkend="_allocators_8h_1a7e0ace0214f18427d9ee8e76a5b3dcdf">Malloc</link> (A &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, size_t n=1)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename A &gt; </para><para>void <link linkend="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e">Free</link> (A &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> *p, size_t n=1)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e"/><section>
    <title>Free()</title>
<indexterm><primary>Free</primary><secondary>allocators.h</secondary></indexterm>
<indexterm><primary>allocators.h</primary><secondary>Free</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename A &gt; </computeroutput><para><computeroutput>void Free (A &amp; a, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * p, size_t n = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_allocators_8h_1a7e0ace0214f18427d9ee8e76a5b3dcdf"/><section>
    <title>Malloc()</title>
<indexterm><primary>Malloc</primary><secondary>allocators.h</secondary></indexterm>
<indexterm><primary>allocators.h</primary><secondary>Malloc</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename A &gt; </computeroutput><para><computeroutput><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * Malloc (A &amp; a, size_t n = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_allocators_8h_1a8e4137cbc097868e8c3d785f6cca1223"/><section>
    <title>Realloc()</title>
<indexterm><primary>Realloc</primary><secondary>allocators.h</secondary></indexterm>
<indexterm><primary>allocators.h</primary><secondary>Realloc</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename A &gt; </computeroutput><para><computeroutput><link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * Realloc (A &amp; a, <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> * old_p, size_t old_n, size_t new_n)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
</section>
