<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_level_one_state" xml:lang="en-US">
<title>LevelOneState Class Reference</title>
<indexterm><primary>LevelOneState</primary></indexterm>
<para>
<computeroutput>#include &lt;LevelOneState.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for LevelOneState:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_level_one_state.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_level_one_state_1a3c7442500fb80b2cea0c79f3c855c11b">LevelOneState</link> (std::stack&lt; <link linkend="_class_game_state">GameState</link> * &gt; *<link linkend="_class_game_state_1a6e9e1aa616cd1071425f2766a76957ec">states</link>)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a75b5cebe202e376c76974148252978cc">update</link> (float deltaTime) override</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a2f451c45e79cda05456e9f93a62d04ce">render</link> (sf::RenderTarget &amp;window) override</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Member Functions    </title>
        <itemizedlist>
            <listitem><para>void <link linkend="_class_level_one_state_1ac732168472ecd8a88ce3fc6979f00dfb">initValues</link> ()</para>

<para>Inicjalizacja podstawowych wartości klasy. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1acf146976d04de32ace1e26d8dedfcf0d">initHitboxes</link> ()</para>

<para>Rozmieszczenie hitboxów na mapie. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1af26011bd34ff11e265c890378bf76fb0">initDmgBoxes</link> ()</para>

<para>Rozmieszczenie obszarów zadających obrażenia na mapie. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a6ad84276086cd56ac2fed6193dfc612a">initPauseButtons</link> ()</para>

<para>Inicjalizacja przycisków menu pauzy. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1ae86589d8b18215398d2437013b6013aa">initDeadButtons</link> ()</para>

<para>Inicjalizacja przycisków na ekranie śmierci. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a1229a6a0f38c0d5efab95ae28b855dfd">initEndTrigger</link> ()</para>

<para>Inicjalizacja obszaru przejścia do następnego poziomu. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a76eeb06ab7d32bddd837c43058cd709f">initView</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a6233c67853e02e52ed6b5e6f59bd1705">initViewPlayer</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a3189c03467fc082fc6dc832e67194140">initEnemies</link> ()</para>

<para>Rozmieszczenie wrogów na mapie. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a32550fe2bb71c4ba7a295b7055d46aaf">updateInput</link> ()</para>

<para>Czytanie klawiatury i wykonywanie odpowiednich operacji. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a37ff40473b38e7c146a1dd192d9fa26f">updatePaused</link> ()</para>

<para>Aktualizacja logiki gry podczas, gdy jest zapauzowana. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1af08fb775df9ad24aafd50ce0465389ea">updateDead</link> ()</para>

<para>Aktualizacja logiki gry podczas, gdy postać straci wszystkie punkty życia. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a8fbc5f403b811e8e9ed98a9dd99c900e">updateEntities</link> (float deltaTime)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1aecec7d99087ddfb52ea4a80ee8508c3d">renderPaused</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a9f12129b3ef6321b84704c8e8531c7c9">renderDead</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1aa0bd415d50fa8fd47f0a46d3ac92fb38">renderEntities</link> (sf::RenderTarget &amp;window)</para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a2d6605476d31412251809e81c4a3ded3">updateEndTrigger</link> ()</para>

<para>Sprawdza czy gracz nie wszedł na teren obszaru kończącego poziom. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a5ded76d132a758469d834d342ff356c0">updateDeadTrigger</link> ()</para>

<para>Sprawdza czy gracz zginął, jeśli tak to zostanie wyrenderowany ekran śmierci. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1ae9d52d887344a5da738da656fcdb475c">updateDmgTriggers</link> ()</para>

<para>Sprawdza czy gracz nie wszedł na teren obszaru zadającego obrażenia. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a2ff2b2ac358fdf355d029e9e3047662b">killPlayerTriggers</link> ()</para>

<para>Sprawdza czy gracz nie utonął, jeśli tak to zabija go. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a3f12cbb13eca93545d1fd6d381e2ea5e">saveGame</link> ()</para>

<para>Zapisuje stan gry. </para>
</listitem>
            <listitem><para>void <link linkend="_class_level_one_state_1a87b0216b9b2878b52d1b1aa27c93c398">loadGame</link> ()</para>

<para>Wczytuje stan gry. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Private Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_player">Player</link> * <link linkend="_class_level_one_state_1a3aa7c7c62da104dc12e44e5fd66c4e65">player</link></para>

<para>Odniesienie do obiektu gracza. </para>
</listitem>
            <listitem><para>std::list&lt; sf::RectangleShape &gt; <link linkend="_class_level_one_state_1a71cb269c3f41ff9c3662890cb24696bb">hitboxes</link></para>

<para>Lista hitboxów otoczenia. </para>
</listitem>
            <listitem><para>std::list&lt; sf::RectangleShape &gt; <link linkend="_class_level_one_state_1acffb6ddd8259798daf0e13d18c234f08">dmgboxes</link></para>

<para>Lista obszarów zadających obrażenia. </para>
</listitem>
            <listitem><para><link linkend="_class_load_map">LoadMap</link> <link linkend="_class_level_one_state_1a7629b5c3c8211c8c0e8dc4f58f1a02d7">map</link></para>

<para>Odniesienie do wybranej przez nas mapy. </para>
</listitem>
            <listitem><para>std::list&lt; <link linkend="_class_enemy">Enemy</link> * &gt; <link linkend="_class_level_one_state_1adf6dd5c52c65064710e42558d1bc68a7">enemies</link></para>

<para>Lista odniesień do wszystkich wrogów. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_one_state_1af6185680359324d3eb5e9da11dcc5b95">endMenuBtn</link></para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_one_state_1aaf0f8bea68f63c1accd4f6902122fc8c">pauseResumeBtn</link></para>

<para>Odniesienie do przycisku powrotu do rozgrywki. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_one_state_1a0851aa7943491862aa6af57391105724">pauseExitBtn</link></para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_one_state_1a1b1dcc2a3ae9edaefaef4e68ce421d2c">loadBtn</link></para>

<para>Odniesienie do przycisku wczytania zapisu gry. </para>
</listitem>
            <listitem><para><link linkend="_class_button">Button</link> * <link linkend="_class_level_one_state_1a0e222db93d719bb51281baa8358fae2b">saveBtn</link></para>

<para>Odniesienie do przycisku zapisu gry. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_level_one_state_1a1b5b342a21086a115b5cb7f015e1bb85">renderHitboxes</link> = false</para>

<para>Zmienna debug służąca do renderowania hitbox-ów. </para>
</listitem>
            <listitem><para>int <link linkend="_class_level_one_state_1a06a1084e50647de72b8212b3be292663">i</link> = 1</para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</listitem>
            <listitem><para>int <link linkend="_class_level_one_state_1ac58c354c2176bb3be559b80ea3fdb552">x</link> = 1</para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</listitem>
            <listitem><para>sf::RectangleShape <link linkend="_class_level_one_state_1a2fc589ca5431697f833f3ac56da16e1c">endLevelTrigger</link></para>

<para>Obszar wykrywający czy gracz powinien przejść do następnego poziomu. </para>
</listitem>
            <listitem><para><link linkend="_class_player_h_u_d">PlayerHUD</link> * <link linkend="_class_level_one_state_1aa289900c937c916cad577eb634304000">hud</link></para>

<para>Odniesienie do interfejsu użytkownika. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_level_one_state_1a3c7442500fb80b2cea0c79f3c855c11b"/><section>
    <title>LevelOneState()</title>
<indexterm><primary>LevelOneState</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>LevelOneState</secondary></indexterm>
<para><computeroutput>LevelOneState::LevelOneState (std::stack&lt; <link linkend="_class_game_state">GameState</link> * &gt; * states)<computeroutput>[explicit]</computeroutput></computeroutput></para>
<para>Konstruktor przyjmujący odniesienie do stosu stanów aplikacji 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>states</entry><entry>
<para>odniesienie do stosu wszystkich stanów aplikacji </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_level_one_state_1ae86589d8b18215398d2437013b6013aa"/><section>
    <title>initDeadButtons()</title>
<indexterm><primary>initDeadButtons</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initDeadButtons</secondary></indexterm>
<para><computeroutput>void LevelOneState::initDeadButtons ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja przycisków na ekranie śmierci. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1af26011bd34ff11e265c890378bf76fb0"/><section>
    <title>initDmgBoxes()</title>
<indexterm><primary>initDmgBoxes</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initDmgBoxes</secondary></indexterm>
<para><computeroutput>void LevelOneState::initDmgBoxes ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Rozmieszczenie obszarów zadających obrażenia na mapie. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a1229a6a0f38c0d5efab95ae28b855dfd"/><section>
    <title>initEndTrigger()</title>
<indexterm><primary>initEndTrigger</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initEndTrigger</secondary></indexterm>
<para><computeroutput>void LevelOneState::initEndTrigger ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja obszaru przejścia do następnego poziomu. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a3189c03467fc082fc6dc832e67194140"/><section>
    <title>initEnemies()</title>
<indexterm><primary>initEnemies</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initEnemies</secondary></indexterm>
<para><computeroutput>void LevelOneState::initEnemies ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Rozmieszczenie wrogów na mapie. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1acf146976d04de32ace1e26d8dedfcf0d"/><section>
    <title>initHitboxes()</title>
<indexterm><primary>initHitboxes</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initHitboxes</secondary></indexterm>
<para><computeroutput>void LevelOneState::initHitboxes ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Rozmieszczenie hitboxów na mapie. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a6ad84276086cd56ac2fed6193dfc612a"/><section>
    <title>initPauseButtons()</title>
<indexterm><primary>initPauseButtons</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initPauseButtons</secondary></indexterm>
<para><computeroutput>void LevelOneState::initPauseButtons ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja przycisków menu pauzy. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1ac732168472ecd8a88ce3fc6979f00dfb"/><section>
    <title>initValues()</title>
<indexterm><primary>initValues</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initValues</secondary></indexterm>
<para><computeroutput>void LevelOneState::initValues ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Inicjalizacja podstawowych wartości klasy. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a76eeb06ab7d32bddd837c43058cd709f"/><section>
    <title>initView()</title>
<indexterm><primary>initView</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initView</secondary></indexterm>
<para><computeroutput>void LevelOneState::initView (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Inicjalizacja kamery dla menu pauzy 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_one_state_1a6233c67853e02e52ed6b5e6f59bd1705"/><section>
    <title>initViewPlayer()</title>
<indexterm><primary>initViewPlayer</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>initViewPlayer</secondary></indexterm>
<para><computeroutput>void LevelOneState::initViewPlayer (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>inicjalizacja kamery gracza 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para></para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_one_state_1a2ff2b2ac358fdf355d029e9e3047662b"/><section>
    <title>killPlayerTriggers()</title>
<indexterm><primary>killPlayerTriggers</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>killPlayerTriggers</secondary></indexterm>
<para><computeroutput>void LevelOneState::killPlayerTriggers ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Sprawdza czy gracz nie utonął, jeśli tak to zabija go. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a87b0216b9b2878b52d1b1aa27c93c398"/><section>
    <title>loadGame()</title>
<indexterm><primary>loadGame</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>loadGame</secondary></indexterm>
<para><computeroutput>void LevelOneState::loadGame ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Wczytuje stan gry. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a2f451c45e79cda05456e9f93a62d04ce"/><section>
    <title>render()</title>
<indexterm><primary>render</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>render</secondary></indexterm>
<para><computeroutput>void LevelOneState::render (sf::RenderTarget &amp; window)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Wyświetla elementy stanu na ekranie 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym elementy mają być wyświetlane </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Reimplemented from <link linkend="_class_game_state_1ab54d45c62b2ec2719bd48788b982b471">GameState</link>.</para>
</section>
<anchor xml:id="_class_level_one_state_1a9f12129b3ef6321b84704c8e8531c7c9"/><section>
    <title>renderDead()</title>
<indexterm><primary>renderDead</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>renderDead</secondary></indexterm>
<para><computeroutput>void LevelOneState::renderDead (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Wyświetlanie elementów gdy gracz nie żyje 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym elementy mają być wyświetlane </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_one_state_1aa0bd415d50fa8fd47f0a46d3ac92fb38"/><section>
    <title>renderEntities()</title>
<indexterm><primary>renderEntities</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>renderEntities</secondary></indexterm>
<para><computeroutput>void LevelOneState::renderEntities (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Wyświetlanie przeciwników i gracza na ekranie 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym elementy mają być wyświetlane </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_one_state_1aecec7d99087ddfb52ea4a80ee8508c3d"/><section>
    <title>renderPaused()</title>
<indexterm><primary>renderPaused</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>renderPaused</secondary></indexterm>
<para><computeroutput>void LevelOneState::renderPaused (sf::RenderTarget &amp; window)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Wyświetlanie na ekranie elementów, gdy rozgrywka jest spauzowana 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>window</entry><entry>
<para>okno na którym elementy mają być wyświetlane </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_one_state_1a3f12cbb13eca93545d1fd6d381e2ea5e"/><section>
    <title>saveGame()</title>
<indexterm><primary>saveGame</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>saveGame</secondary></indexterm>
<para><computeroutput>void LevelOneState::saveGame ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zapisuje stan gry. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a75b5cebe202e376c76974148252978cc"/><section>
    <title>update()</title>
<indexterm><primary>update</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>update</secondary></indexterm>
<para><computeroutput>void LevelOneState::update (float deltaTime)<computeroutput>[override]</computeroutput>, <computeroutput>[virtual]</computeroutput></computeroutput></para>
<para>Odświeża logikę stanu 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>deltaTime</entry><entry>
<para>czas pomiędzy klatkami aplikacji </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
<para>
Implements <link linkend="_class_game_state_1a360521bb5b371ea942a9e4e2ba1e8145">GameState</link>.</para>
</section>
<anchor xml:id="_class_level_one_state_1af08fb775df9ad24aafd50ce0465389ea"/><section>
    <title>updateDead()</title>
<indexterm><primary>updateDead</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>updateDead</secondary></indexterm>
<para><computeroutput>void LevelOneState::updateDead ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Aktualizacja logiki gry podczas, gdy postać straci wszystkie punkty życia. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a5ded76d132a758469d834d342ff356c0"/><section>
    <title>updateDeadTrigger()</title>
<indexterm><primary>updateDeadTrigger</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>updateDeadTrigger</secondary></indexterm>
<para><computeroutput>void LevelOneState::updateDeadTrigger ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Sprawdza czy gracz zginął, jeśli tak to zostanie wyrenderowany ekran śmierci. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1ae9d52d887344a5da738da656fcdb475c"/><section>
    <title>updateDmgTriggers()</title>
<indexterm><primary>updateDmgTriggers</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>updateDmgTriggers</secondary></indexterm>
<para><computeroutput>void LevelOneState::updateDmgTriggers ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Sprawdza czy gracz nie wszedł na teren obszaru zadającego obrażenia. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a2d6605476d31412251809e81c4a3ded3"/><section>
    <title>updateEndTrigger()</title>
<indexterm><primary>updateEndTrigger</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>updateEndTrigger</secondary></indexterm>
<para><computeroutput>void LevelOneState::updateEndTrigger ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Sprawdza czy gracz nie wszedł na teren obszaru kończącego poziom. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a8fbc5f403b811e8e9ed98a9dd99c900e"/><section>
    <title>updateEntities()</title>
<indexterm><primary>updateEntities</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>updateEntities</secondary></indexterm>
<para><computeroutput>void LevelOneState::updateEntities (float deltaTime)<computeroutput>[private]</computeroutput></computeroutput></para>
<para>Aktualizacja logiki przeciwników 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>deltaTime</entry><entry>
<para>czas pomiędzy klatkami aplikacji </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_level_one_state_1a32550fe2bb71c4ba7a295b7055d46aaf"/><section>
    <title>updateInput()</title>
<indexterm><primary>updateInput</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>updateInput</secondary></indexterm>
<para><computeroutput>void LevelOneState::updateInput ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Czytanie klawiatury i wykonywanie odpowiednich operacji. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a37ff40473b38e7c146a1dd192d9fa26f"/><section>
    <title>updatePaused()</title>
<indexterm><primary>updatePaused</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>updatePaused</secondary></indexterm>
<para><computeroutput>void LevelOneState::updatePaused ( )<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Aktualizacja logiki gry podczas, gdy jest zapauzowana. </para>
</para>
</section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_level_one_state_1acffb6ddd8259798daf0e13d18c234f08"/><section>
    <title>dmgboxes</title>
<indexterm><primary>dmgboxes</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>dmgboxes</secondary></indexterm>
<para><computeroutput>std::list&lt;sf::RectangleShape&gt; LevelOneState::dmgboxes<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Lista obszarów zadających obrażenia. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a2fc589ca5431697f833f3ac56da16e1c"/><section>
    <title>endLevelTrigger</title>
<indexterm><primary>endLevelTrigger</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>endLevelTrigger</secondary></indexterm>
<para><computeroutput>sf::RectangleShape LevelOneState::endLevelTrigger<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Obszar wykrywający czy gracz powinien przejść do następnego poziomu. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1af6185680359324d3eb5e9da11dcc5b95"/><section>
    <title>endMenuBtn</title>
<indexterm><primary>endMenuBtn</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>endMenuBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelOneState::endMenuBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1adf6dd5c52c65064710e42558d1bc68a7"/><section>
    <title>enemies</title>
<indexterm><primary>enemies</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>enemies</secondary></indexterm>
<para><computeroutput>std::list&lt;<link linkend="_class_enemy">Enemy</link>*&gt; LevelOneState::enemies<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Lista odniesień do wszystkich wrogów. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a71cb269c3f41ff9c3662890cb24696bb"/><section>
    <title>hitboxes</title>
<indexterm><primary>hitboxes</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>hitboxes</secondary></indexterm>
<para><computeroutput>std::list&lt;sf::RectangleShape&gt; LevelOneState::hitboxes<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Lista hitboxów otoczenia. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1aa289900c937c916cad577eb634304000"/><section>
    <title>hud</title>
<indexterm><primary>hud</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>hud</secondary></indexterm>
<para><computeroutput><link linkend="_class_player_h_u_d">PlayerHUD</link>* LevelOneState::hud<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do interfejsu użytkownika. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a06a1084e50647de72b8212b3be292663"/><section>
    <title>i</title>
<indexterm><primary>i</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>i</secondary></indexterm>
<para><computeroutput>int LevelOneState::i = 1<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a1b1dcc2a3ae9edaefaef4e68ce421d2c"/><section>
    <title>loadBtn</title>
<indexterm><primary>loadBtn</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>loadBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelOneState::loadBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku wczytania zapisu gry. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a7629b5c3c8211c8c0e8dc4f58f1a02d7"/><section>
    <title>map</title>
<indexterm><primary>map</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>map</secondary></indexterm>
<para><computeroutput><link linkend="_class_load_map">LoadMap</link> LevelOneState::map<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do wybranej przez nas mapy. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a0851aa7943491862aa6af57391105724"/><section>
    <title>pauseExitBtn</title>
<indexterm><primary>pauseExitBtn</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>pauseExitBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelOneState::pauseExitBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku wyjścia do menu. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1aaf0f8bea68f63c1accd4f6902122fc8c"/><section>
    <title>pauseResumeBtn</title>
<indexterm><primary>pauseResumeBtn</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>pauseResumeBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelOneState::pauseResumeBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku powrotu do rozgrywki. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a3aa7c7c62da104dc12e44e5fd66c4e65"/><section>
    <title>player</title>
<indexterm><primary>player</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>player</secondary></indexterm>
<para><computeroutput><link linkend="_class_player">Player</link>* LevelOneState::player<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do obiektu gracza. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a1b5b342a21086a115b5cb7f015e1bb85"/><section>
    <title>renderHitboxes</title>
<indexterm><primary>renderHitboxes</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>renderHitboxes</secondary></indexterm>
<para><computeroutput>bool LevelOneState::renderHitboxes = false<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Zmienna debug służąca do renderowania hitbox-ów. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1a0e222db93d719bb51281baa8358fae2b"/><section>
    <title>saveBtn</title>
<indexterm><primary>saveBtn</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>saveBtn</secondary></indexterm>
<para><computeroutput><link linkend="_class_button">Button</link>* LevelOneState::saveBtn<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>Odniesienie do przycisku zapisu gry. </para>
</para>
</section>
<anchor xml:id="_class_level_one_state_1ac58c354c2176bb3be559b80ea3fdb552"/><section>
    <title>x</title>
<indexterm><primary>x</primary><secondary>LevelOneState</secondary></indexterm>
<indexterm><primary>LevelOneState</primary><secondary>x</secondary></indexterm>
<para><computeroutput>int LevelOneState::x = 1<computeroutput>[private]</computeroutput></computeroutput></para><para>

<para>zmienna okreslajaca czas widocznosci hud </para>
</para>
</section>
<para>
The documentation for this class was generated from the following files:</para>
src/states/<link linkend="__level_one_state_8h">LevelOneState.h</link>src/states/<link linkend="__level_one_state_8cpp">LevelOneState.cpp</link></section>
</section>
