<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_memorybuffer_8h_source" xml:lang="en-US">
<title>memorybuffer.h</title>
<indexterm><primary>src/rapidjson/include/rapidjson/memorybuffer.h</primary></indexterm>
Go to the documentation of this file.<programlisting linenumbering="unnumbered">1 <emphasis role="comment">//&#32;Tencent&#32;is&#32;pleased&#32;to&#32;support&#32;the&#32;open&#32;source&#32;community&#32;by&#32;making&#32;RapidJSON&#32;available.</emphasis>
2 <emphasis role="comment">//&#32;</emphasis>
3 <emphasis role="comment">//&#32;Copyright&#32;(C)&#32;2015&#32;THL&#32;A29&#32;Limited,&#32;a&#32;Tencent&#32;company,&#32;and&#32;Milo&#32;Yip.</emphasis>
4 <emphasis role="comment">//</emphasis>
5 <emphasis role="comment">//&#32;Licensed&#32;under&#32;the&#32;MIT&#32;License&#32;(the&#32;&quot;License&quot;);&#32;you&#32;may&#32;not&#32;use&#32;this&#32;file&#32;except</emphasis>
6 <emphasis role="comment">//&#32;in&#32;compliance&#32;with&#32;the&#32;License.&#32;You&#32;may&#32;obtain&#32;a&#32;copy&#32;of&#32;the&#32;License&#32;at</emphasis>
7 <emphasis role="comment">//</emphasis>
8 <emphasis role="comment">//&#32;http://opensource.org/licenses/MIT</emphasis>
9 <emphasis role="comment">//</emphasis>
10 <emphasis role="comment">//&#32;Unless&#32;required&#32;by&#32;applicable&#32;law&#32;or&#32;agreed&#32;to&#32;in&#32;writing,&#32;software&#32;distributed&#32;</emphasis>
11 <emphasis role="comment">//&#32;under&#32;the&#32;License&#32;is&#32;distributed&#32;on&#32;an&#32;&quot;AS&#32;IS&quot;&#32;BASIS,&#32;WITHOUT&#32;WARRANTIES&#32;OR&#32;</emphasis>
12 <emphasis role="comment">//&#32;CONDITIONS&#32;OF&#32;ANY&#32;KIND,&#32;either&#32;express&#32;or&#32;implied.&#32;See&#32;the&#32;License&#32;for&#32;the&#32;</emphasis>
13 <emphasis role="comment">//&#32;specific&#32;language&#32;governing&#32;permissions&#32;and&#32;limitations&#32;under&#32;the&#32;License.</emphasis>
14 
15 <emphasis role="preprocessor">#ifndef&#32;RAPIDJSON_MEMORYBUFFER_H_</emphasis>
16 <emphasis role="preprocessor">#define&#32;RAPIDJSON_MEMORYBUFFER_H_</emphasis>
17 
18 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stream_8h">stream.h</link>&quot;</emphasis>
19 <emphasis role="preprocessor">#include&#32;&quot;<link linkend="_stack_8h">internal/stack.h</link>&quot;</emphasis>
20 
21 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link>
22 
24 
36 <emphasis role="keyword">template</emphasis>&#32;&lt;<emphasis role="keyword">typename</emphasis>&#32;Allocator&#32;=&#32;CrtAllocator&gt;
37 <emphasis role="keyword">struct&#32;</emphasis><link linkend="_struct_generic_memory_buffer">GenericMemoryBuffer</link>&#32;{
38 &#32;&#32;&#32;&#32;<emphasis role="keyword">typedef</emphasis>&#32;<emphasis role="keywordtype">char</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f">Ch</link>;&#32;<emphasis role="comment">//&#32;byte</emphasis>
39 
40 &#32;&#32;&#32;&#32;<link linkend="_struct_generic_memory_buffer_1ad08f7da47bca43fcdb0c3b10e22dfa1d">GenericMemoryBuffer</link>(<link linkend="_classrapidjson_1_1_allocator">Allocator</link>*&#32;allocator&#32;=&#32;0,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;capacity&#32;=&#32;<link linkend="_struct_generic_memory_buffer_1af6ecdbdbb8d3aa53cdef6e788e4980be">kDefaultCapacity</link>)&#32;:&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>(allocator,&#32;capacity)&#32;{}
41 
42 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a9dfb477983e211893601f8ab637b42d8">Put</link>(<link linkend="_struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f">Ch</link>&#32;c)&#32;{&#32;*<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.template&#32;Push&lt;Ch&gt;()&#32;=&#32;c;&#32;}
43 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a9861181cab6f5bec2ec08b601aa53575">Flush</link>()&#32;{}
44 
45 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a036cbe2556778e1edc525602a9821df2">Clear</link>()&#32;{&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.Clear();&#32;}
46 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a3b87deb9bf34c394c8fb262ab53c0c4b">ShrinkToFit</link>()&#32;{&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.ShrinkToFit();&#32;}
47 &#32;&#32;&#32;&#32;<link linkend="_struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f">Ch</link>*&#32;<link linkend="_struct_generic_memory_buffer_1a1455475eba731dc0ce2816c70c775359">Push</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;count)&#32;{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.template&#32;Push&lt;Ch&gt;(count);&#32;}
48 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a82a6706286f1356e1769282f5d496005">Pop</link>(<emphasis role="keywordtype">size_t</emphasis>&#32;count)&#32;{&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.template&#32;Pop&lt;Ch&gt;(count);&#32;}
49 
50 &#32;&#32;&#32;&#32;<emphasis role="keyword">const</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f">Ch</link>*&#32;<link linkend="_struct_generic_memory_buffer_1a65217e77ae6d4c249c16360c24854411">GetBuffer</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{
51 &#32;&#32;&#32;&#32;&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.template&#32;Bottom&lt;Ch&gt;();
52 &#32;&#32;&#32;&#32;}
53 
54 &#32;&#32;&#32;&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1aaab1f18d03109ab01213d3e3d8368ff9">GetSize</link>()<emphasis role="keyword">&#32;const&#32;</emphasis>{&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.GetSize();&#32;}
55 
56 &#32;&#32;&#32;&#32;<emphasis role="keyword">static</emphasis>&#32;<emphasis role="keyword">const</emphasis>&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;<link linkend="_struct_generic_memory_buffer_1af6ecdbdbb8d3aa53cdef6e788e4980be">kDefaultCapacity</link>&#32;=&#32;256;
57 &#32;&#32;&#32;&#32;<emphasis role="keyword">mutable</emphasis>&#32;<link linkend="_classinternal_1_1_stack">internal::Stack&lt;Allocator&gt;</link>&#32;<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>;
58 };
59 
60 <emphasis role="keyword">typedef</emphasis>&#32;<link linkend="_struct_generic_memory_buffer">GenericMemoryBuffer&lt;&gt;</link>&#32;<link linkend="_memorybuffer_8h_1aad74f4c6994a951097a63ee117039085">MemoryBuffer</link>;
61 
63 <emphasis role="keyword">template</emphasis>&lt;&gt;
64 <emphasis role="keyword">inline</emphasis>&#32;<emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_memorybuffer_8h_1a635d8eaaf48777150dc08f7d5a8be054">PutN</link>(<link linkend="_struct_generic_memory_buffer">MemoryBuffer</link>&amp;&#32;memoryBuffer,&#32;<emphasis role="keywordtype">char</emphasis>&#32;c,&#32;<emphasis role="keywordtype">size_t</emphasis>&#32;n)&#32;{
65 &#32;&#32;&#32;&#32;std::memset(memoryBuffer.<link linkend="_struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486">stack_</link>.Push&lt;<emphasis role="keywordtype">char</emphasis>&gt;(n),&#32;c,&#32;n&#32;*&#32;<emphasis role="keyword">sizeof</emphasis>(c));
66 }
67 
68 <link linkend="_group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1">RAPIDJSON_NAMESPACE_END</link>
69 
70 <emphasis role="preprocessor">#endif&#32;</emphasis><emphasis role="comment">//&#32;RAPIDJSON_MEMORYBUFFER_H_</emphasis>
</programlisting></section>
