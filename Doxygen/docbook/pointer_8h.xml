<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_pointer_8h" xml:lang="en-US">
<title>src/rapidjson/include/rapidjson/pointer.h File Reference</title>
<indexterm><primary>src/rapidjson/include/rapidjson/pointer.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;document.h&quot;
#include &quot;uri.h&quot;
#include &quot;internal/itoa.h&quot;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_generic_pointer">GenericPointer&lt; ValueType, Allocator &gt;</link></para>

<para>Represents a JSON Pointer. Use Pointer for <link linkend="_struct_u_t_f8">UTF8</link> encoding and default allocator. </para>
</listitem>
            <listitem><para>struct <link linkend="_struct_generic_pointer_1_1_token">GenericPointer&lt; ValueType, Allocator &gt;::Token</link></para>

<para>A token is the basic units of internal representation. </para>
</listitem>
            <listitem><para>class <link linkend="_class_generic_pointer_1_1_percent_encode_stream">GenericPointer&lt; ValueType, Allocator &gt;::PercentEncodeStream&lt; OutputStream &gt;</link></para>

<para>A helper stream to encode character (UTF-8 code unit) into percent-encoded sequence. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Typedefs    </title>
        <itemizedlist>
            <listitem><para>typedef <link linkend="_class_generic_pointer">GenericPointer</link>&lt; <link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link> &gt; <link linkend="_pointer_8h_1a8db3e2eda83fba7d12ee284fff895262">Pointer</link></para>

<para><link linkend="_class_generic_pointer">GenericPointer</link> for Value (UTF-8, default allocator). </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be">PointerParseErrorCode</link> { 
<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0">kPointerParseErrorNone</link> = 0
, <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77">kPointerParseErrorTokenMustBeginWithSolidus</link>
, <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b">kPointerParseErrorInvalidEscape</link>
, <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35">kPointerParseErrorInvalidPercentEncoding</link>
, 
<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38">kPointerParseErrorCharacterMustPercentEncode</link>
 }</para>

<para>Error code of parsing. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Variables    </title>
        <itemizedlist>
            <listitem><para>static <link linkend="_namespacetest_8cpp_1ad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link> const <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> <link linkend="_pointer_8h_1ae54ef57a7b599e262127c5adcc55960e">kPointerInvalidIndex</link> = ~<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(0)</para>

<para>Represents an invalid index in <link linkend="_struct_generic_pointer_1_1_token">GenericPointer::Token</link>. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Helper functions for GenericPointer    </title>
        <itemizedlist>
            <listitem><para>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; <link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link></para>
</listitem>
            <listitem><para>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; T2 <link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link></para>
</listitem>
            <listitem><para>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; T2 T::AllocatorType &amp; <link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link></para>
</listitem>
            <listitem><para>const CharType(&amp; <link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link> )[N]</para>
</listitem>
            <listitem><para>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; T2 <link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link></para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a7ce0d37e372f630e46e221e45714e84b">CreateValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a916460d6eccdc49ecf85e2e6ab9767a4">CreateValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a6dc4215e763f8544057e36582381f66c">CreateValueByPointer</link> (DocumentType &amp;document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1ae5f22e098e170e51d47beb75812b9a5b">CreateValueByPointer</link> (DocumentType &amp;document, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N])</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * <link linkend="_pointer_8h_1a581633984b11d0587c2ad06649efefc4">GetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, size_t *unresolvedTokenIndex=0)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>const <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * <link linkend="_pointer_8h_1ae0edeb21a41191c864727b3b2ce95131">GetValueByPointer</link> (const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, size_t *unresolvedTokenIndex=0)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * <link linkend="_pointer_8h_1a3f324884650614ca6b0ef4765566bc9d">GetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], size_t *unresolvedTokenIndex=0)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para>const <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * <link linkend="_pointer_8h_1a2683bf19840749f07ceaf659b4cee6d9">GetValueByPointer</link> (const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], size_t *unresolvedTokenIndex=0)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61">GetValueByPointerWithDefault</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a38d0f082d4e54b591cba9ae9c70cf828">GetValueByPointerWithDefault</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename T::Ch *<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename T2 &gt; </para><para><link linkend="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2">RAPIDJSON_DISABLEIF_RETURN</link> ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;),(typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;)) <link linkend="_pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3">GetValueByPointerWithDefault</link>(<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a04e7d4fa9f18bae987e39e6c1045ae70">GetValueByPointerWithDefault</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a25951a749a68964998983a6b4fbebf07">GetValueByPointerWithDefault</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename T::Ch *<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N, typename T2 &gt; </para><para><link linkend="_pointer_8h_1ae26d117fc2f0ef0275825d2a510e8a8d">RAPIDJSON_DISABLEIF_RETURN</link> ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;),(typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;)) <link linkend="_pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3">GetValueByPointerWithDefault</link>(<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a6fde94e8be246ff3f73ee62335a0e09c">GetValueByPointerWithDefault</link> (DocumentType &amp;document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a9c1c1317bc0a138099995ef011f0db3f">GetValueByPointerWithDefault</link> (DocumentType &amp;document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename DocumentType::Ch *<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename T2 &gt; </para><para><link linkend="_pointer_8h_1a409f561a9f9a793f7032b50536f8c526">RAPIDJSON_DISABLEIF_RETURN</link> ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;),(typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;)) <link linkend="_pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3">GetValueByPointerWithDefault</link>(DocumentType &amp;document</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a41a691f733d842ff55465842e33c9bd3">GetValueByPointerWithDefault</link> (DocumentType &amp;document, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3">GetValueByPointerWithDefault</link> (DocumentType &amp;document, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename DocumentType::Ch *<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N, typename T2 &gt; </para><para><link linkend="_pointer_8h_1aaaf14202ae851a7d3c3db56789b9eab4">RAPIDJSON_DISABLEIF_RETURN</link> ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;),(typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;)) <link linkend="_pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3">GetValueByPointerWithDefault</link>(DocumentType &amp;document</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be">SetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1ac28f67a837bdead4e9a0b8bd02dbd4d8">SetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a3187558966f689fdd72120793b39b91a">SetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename T::Ch *<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a562b6d41c46d173c9406c8a9918c68a3">SetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a057fa4cef0e9df7176cfdc87ed895f34">SetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a2e3bd9cdb4a8dc98aaf0580dee70f264">SetValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename T::Ch *<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a4623bdd62153e95fdfac34c3af92a654">SetValueByPointer</link> (DocumentType &amp;document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a2fc4c2e668dd4e16063d596b2b9b61a3">SetValueByPointer</link> (DocumentType &amp;document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1af988b5e086851ff3645fe2345019ab44">SetValueByPointer</link> (DocumentType &amp;document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, const typename DocumentType::Ch *<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a82e5b3f00a10ab6aaac37af78de4d19d">SetValueByPointer</link> (DocumentType &amp;document, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a51a45d6a8d97468b650fc275255b7504">SetValueByPointer</link> (DocumentType &amp;document, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a46da885c093bb294a323e4c144449d2e">SetValueByPointer</link> (DocumentType &amp;document, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], const typename DocumentType::Ch *<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac">SwapValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; <link linkend="_pointer_8h_1a8f368fc6d5e55f6f0a5ea5e2af7ea23f">SwapValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>, typename T::AllocatorType &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType &gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1abd25c9d96f8e5002f93f998cf11905a3">SwapValueByPointer</link> (DocumentType &amp;document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename DocumentType , typename CharType , size_t N&gt; </para><para><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; <link linkend="_pointer_8h_1a33c56cdd1034a750112e81df6c4e653a">SwapValueByPointer</link> (DocumentType &amp;document, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </para><para>bool <link linkend="_pointer_8h_1a7342710933f35ad7267c871f4a8cc55f">EraseValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>)</para>
</listitem>
            <listitem><para>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </para><para>bool <link linkend="_pointer_8h_1a392608401615d4655338ebb295116666">EraseValueByPointer</link> (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp;root, const CharType(&amp;<link linkend="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55">source</link>)[N])</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Typedef Documentation</title>
<anchor xml:id="_pointer_8h_1a8db3e2eda83fba7d12ee284fff895262"/><section>
    <title>Pointer</title>
<indexterm><primary>Pointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>Pointer</secondary></indexterm>
<para><computeroutput>typedef <link linkend="_class_generic_pointer">GenericPointer</link>&lt;<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">Value</link>&gt; <link linkend="_fwd_8h_1a0e5c49dba7ec654cdda5735347c00397">Pointer</link></computeroutput></para><para>

<para><link linkend="_class_generic_pointer">GenericPointer</link> for Value (UTF-8, default allocator). </para>
</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_pointer_8h_1ae5f22e098e170e51d47beb75812b9a5b"/><section>
    <title>CreateValueByPointer()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>CreateValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>CreateValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; CreateValueByPointer (DocumentType &amp; document, const CharType(&amp;) source[N])</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a6dc4215e763f8544057e36582381f66c"/><section>
    <title>CreateValueByPointer()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>CreateValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>CreateValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; CreateValueByPointer (DocumentType &amp; document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a916460d6eccdc49ecf85e2e6ab9767a4"/><section>
    <title>CreateValueByPointer()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>CreateValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>CreateValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; CreateValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a7ce0d37e372f630e46e221e45714e84b"/><section>
    <title>CreateValueByPointer()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>CreateValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>CreateValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; CreateValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a392608401615d4655338ebb295116666"/><section>
    <title>EraseValueByPointer()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>EraseValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>EraseValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput>bool EraseValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N])</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a7342710933f35ad7267c871f4a8cc55f"/><section>
    <title>EraseValueByPointer()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>EraseValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>EraseValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>bool EraseValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a2683bf19840749f07ceaf659b4cee6d9"/><section>
    <title>GetValueByPointer()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>GetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput>const <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * GetValueByPointer (const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], size_t * unresolvedTokenIndex = <computeroutput>0</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1ae0edeb21a41191c864727b3b2ce95131"/><section>
    <title>GetValueByPointer()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>GetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput>const <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * GetValueByPointer (const <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, size_t * unresolvedTokenIndex = <computeroutput>0</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a3f324884650614ca6b0ef4765566bc9d"/><section>
    <title>GetValueByPointer()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>GetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * GetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], size_t * unresolvedTokenIndex = <computeroutput>0</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a581633984b11d0587c2ad06649efefc4"/><section>
    <title>GetValueByPointer()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>GetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> * GetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, size_t * unresolvedTokenIndex = <computeroutput>0</computeroutput>
)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[1/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; GetValueByPointerWithDefault (DocumentType &amp; document, const CharType(&amp;) source[N], const typename DocumentType::Ch * defaultValue)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a41a691f733d842ff55465842e33c9bd3"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[2/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; GetValueByPointerWithDefault (DocumentType &amp; document, const CharType(&amp;) source[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; defaultValue)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a9c1c1317bc0a138099995ef011f0db3f"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[3/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; GetValueByPointerWithDefault (DocumentType &amp; document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer, const typename DocumentType::Ch * defaultValue)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a6fde94e8be246ff3f73ee62335a0e09c"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[4/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; GetValueByPointerWithDefault (DocumentType &amp; document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; defaultValue)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a25951a749a68964998983a6b4fbebf07"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[5/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; GetValueByPointerWithDefault (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], const typename T::Ch * defaultValue, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a04e7d4fa9f18bae987e39e6c1045ae70"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[6/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; GetValueByPointerWithDefault (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; defaultValue, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a38d0f082d4e54b591cba9ae9c70cf828"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[7/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; GetValueByPointerWithDefault (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, const typename T::Ch * defaultValue, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1accdac20f6fea3ab631da1a0df5208a61"/><section>
    <title>GetValueByPointerWithDefault()<computeroutput>[8/8]</computeroutput></title>
<indexterm><primary>GetValueByPointerWithDefault</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>GetValueByPointerWithDefault</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; GetValueByPointerWithDefault (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; defaultValue, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a409f561a9f9a793f7032b50536f8c526"/><section>
    <title>RAPIDJSON_DISABLEIF_RETURN()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>RAPIDJSON_DISABLEIF_RETURN</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>RAPIDJSON_DISABLEIF_RETURN</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename T2 &gt; </computeroutput><para><computeroutput>RAPIDJSON_DISABLEIF_RETURN ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;) , (typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;) ) &amp;</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1aaaf14202ae851a7d3c3db56789b9eab4"/><section>
    <title>RAPIDJSON_DISABLEIF_RETURN()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>RAPIDJSON_DISABLEIF_RETURN</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>RAPIDJSON_DISABLEIF_RETURN</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N, typename T2 &gt; </computeroutput><para><computeroutput>RAPIDJSON_DISABLEIF_RETURN ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;) , (typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp;) ) &amp;</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2"/><section>
    <title>RAPIDJSON_DISABLEIF_RETURN()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>RAPIDJSON_DISABLEIF_RETURN</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>RAPIDJSON_DISABLEIF_RETURN</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename T2 &gt; </computeroutput><para><computeroutput>RAPIDJSON_DISABLEIF_RETURN ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;) , (typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;) ) &amp;</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1ae26d117fc2f0ef0275825d2a510e8a8d"/><section>
    <title>RAPIDJSON_DISABLEIF_RETURN()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>RAPIDJSON_DISABLEIF_RETURN</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>RAPIDJSON_DISABLEIF_RETURN</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N, typename T2 &gt; </computeroutput><para><computeroutput>RAPIDJSON_DISABLEIF_RETURN ((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <link linkend="_structinternal_1_1_is_generic_value">internal::IsGenericValue</link>&lt; T2 &gt; &gt;) , (typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp;) ) &amp;</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a46da885c093bb294a323e4c144449d2e"/><section>
    <title>SetValueByPointer()<computeroutput>[1/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SetValueByPointer (DocumentType &amp; document, const CharType(&amp;) source[N], const typename DocumentType::Ch * value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a51a45d6a8d97468b650fc275255b7504"/><section>
    <title>SetValueByPointer()<computeroutput>[2/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SetValueByPointer (DocumentType &amp; document, const CharType(&amp;) source[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a82e5b3f00a10ab6aaac37af78de4d19d"/><section>
    <title>SetValueByPointer()<computeroutput>[3/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SetValueByPointer (DocumentType &amp; document, const CharType(&amp;) source[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1af988b5e086851ff3645fe2345019ab44"/><section>
    <title>SetValueByPointer()<computeroutput>[4/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SetValueByPointer (DocumentType &amp; document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer, const typename DocumentType::Ch * value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a2fc4c2e668dd4e16063d596b2b9b61a3"/><section>
    <title>SetValueByPointer()<computeroutput>[5/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SetValueByPointer (DocumentType &amp; document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a4623bdd62153e95fdfac34c3af92a654"/><section>
    <title>SetValueByPointer()<computeroutput>[6/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SetValueByPointer (DocumentType &amp; document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a2e3bd9cdb4a8dc98aaf0580dee70f264"/><section>
    <title>SetValueByPointer()<computeroutput>[7/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], const typename T::Ch * value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a057fa4cef0e9df7176cfdc87ed895f34"/><section>
    <title>SetValueByPointer()<computeroutput>[8/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a562b6d41c46d173c9406c8a9918c68a3"/><section>
    <title>SetValueByPointer()<computeroutput>[9/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a3187558966f689fdd72120793b39b91a"/><section>
    <title>SetValueByPointer()<computeroutput>[10/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, const typename T::Ch * value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1ac28f67a837bdead4e9a0b8bd02dbd4d8"/><section>
    <title>SetValueByPointer()<computeroutput>[11/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, const typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be"/><section>
    <title>SetValueByPointer()<computeroutput>[12/12]</computeroutput></title>
<indexterm><primary>SetValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SetValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SetValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a33c56cdd1034a750112e81df6c4e653a"/><section>
    <title>SwapValueByPointer()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>SwapValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SwapValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SwapValueByPointer (DocumentType &amp; document, const CharType(&amp;) source[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1abd25c9d96f8e5002f93f998cf11905a3"/><section>
    <title>SwapValueByPointer()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>SwapValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SwapValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename DocumentType &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; SwapValueByPointer (DocumentType &amp; document, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &amp; value)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a8f368fc6d5e55f6f0a5ea5e2af7ea23f"/><section>
    <title>SwapValueByPointer()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>SwapValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SwapValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename CharType , size_t N&gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SwapValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const CharType(&amp;) source[N], typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac"/><section>
    <title>SwapValueByPointer()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>SwapValueByPointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>SwapValueByPointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &gt; </computeroutput><para><computeroutput><link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; SwapValueByPointer (<link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> &amp; root, const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; &amp; pointer, typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &amp; value, typename T::AllocatorType &amp; a)</computeroutput></para></section>
</section>
<section>
<title>Variable Documentation</title>
<anchor xml:id="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd"/><section>
    <title>a</title>
<indexterm><primary>a</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>a</secondary></indexterm>
<para><computeroutput>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">T::ValueType</link> &gt; T2 T::AllocatorType &amp; a</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(root,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>,&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>)
</programlisting></section>
<anchor xml:id="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05"/><section>
    <title>defaultValue</title>
<indexterm><primary>defaultValue</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>defaultValue</secondary></indexterm>
<para><computeroutput>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; T2 defaultValue</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.GetWithDefault(document,&#32;<link linkend="_pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05">defaultValue</link>)
</programlisting></section>
<anchor xml:id="_pointer_8h_1ae54ef57a7b599e262127c5adcc55960e"/><section>
    <title>kPointerInvalidIndex</title>
<indexterm><primary>kPointerInvalidIndex</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>kPointerInvalidIndex</secondary></indexterm>
<para><computeroutput><link linkend="_namespacetest_8cpp_1ad3806c8251fdc7da9618b7e922674ffc">RAPIDJSON_NAMESPACE_BEGIN</link> const <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> kPointerInvalidIndex = ~<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link>(0)<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>Represents an invalid index in <link linkend="_struct_generic_pointer_1_1_token">GenericPointer::Token</link>. </para>
</para>
</section>
<anchor xml:id="_pointer_8h_1aae1f8d263916ad71bd415381591549c0"/><section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>pointer</secondary></indexterm>
<para><computeroutput>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; &amp; pointer</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55"/><section>
    <title>source</title>
<indexterm><primary>source</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>source</secondary></indexterm>
<para><computeroutput>const CharType(&amp; source</computeroutput></para></section>
<anchor xml:id="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce"/><section>
    <title>value</title>
<indexterm><primary>value</primary><secondary>pointer.h</secondary></indexterm>
<indexterm><primary>pointer.h</primary><secondary>value</secondary></indexterm>
<para><computeroutput>const <link linkend="_class_generic_pointer">GenericPointer</link>&lt; typename <link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">DocumentType::ValueType</link> &gt; T2 value</computeroutput></para><emphasis role="strong">Initial value:</emphasis><programlisting linenumbering="unnumbered">{
&#32;&#32;&#32;&#32;<emphasis role="keywordflow">return</emphasis>&#32;<link linkend="_pointer_8h_1aae1f8d263916ad71bd415381591549c0">pointer</link>.Set(document,&#32;<link linkend="_pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce">value</link>)
</programlisting></section>
</section>
</section>
