<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_unittest_8h" xml:lang="en-US">
<title>src/rapidjson/test/unittest/unittest.h File Reference</title>
<indexterm><primary>src/rapidjson/test/unittest/unittest.h</primary></indexterm>
<programlisting linenumbering="unnumbered">#include &quot;gtest/gtest.h&quot;
#include &lt;stdexcept&gt;
</programlisting><simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>class <link linkend="_class_assert_exception">AssertException</link></para>
</listitem>
            <listitem><para>class <link linkend="_class_random">Random</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Macros    </title>
        <itemizedlist>
            <listitem><para>#define <link linkend="_unittest_8h_1a786132414c30f947907be33a4c28125a">__STDC_CONSTANT_MACROS</link>   1</para>
</listitem>
            <listitem><para>#define <link linkend="_unittest_8h_1a7aca4eff4695749d674154ddd2fd1d2e">RAPIDJSON_HAS_CXX11_NOEXCEPT</link>   0</para>
</listitem>
            <listitem><para>#define <link linkend="_unittest_8h_1abeba18d612187bad2ac62aed9276d47c">RAPIDJSON_ASSERT</link>(x)   (!(x) ? throw <link linkend="_class_assert_exception">AssertException</link>(RAPIDJSON_STRINGIFY(x)) : (void)0u)</para>
</listitem>
            <listitem><para>#define <link linkend="_unittest_8h_1ae31755b00c035016af65346934c194de">RAPIDJSON_ASSERT_THROWS</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename Ch &gt; </para><para>unsigned <link linkend="_unittest_8h_1a158bf1a4953297866644112d81a7a3e7">StrLen</link> (const Ch *s)</para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para>int <link linkend="_unittest_8h_1a8d8e3cf93e9b811c207711d0b353de02">StrCmp</link> (const Ch *s1, const Ch *s2)</para>
</listitem>
            <listitem><para>template&lt;typename Ch &gt; </para><para>Ch * <link linkend="_unittest_8h_1a0b8e1bafb97ad4a272c5cc4469a13687">StrDup</link> (const Ch *str)</para>
</listitem>
            <listitem><para>FILE * <link linkend="_unittest_8h_1acb6251ae9b44050f1fcabf8d3c2e792b">TempFile</link> (char *filename)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Macro Definition Documentation</title>
<anchor xml:id="_unittest_8h_1a786132414c30f947907be33a4c28125a"/><section>
    <title>__STDC_CONSTANT_MACROS</title>
<indexterm><primary>__STDC_CONSTANT_MACROS</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>__STDC_CONSTANT_MACROS</secondary></indexterm>
<para><computeroutput>#define __STDC_CONSTANT_MACROS   1</computeroutput></para></section>
<anchor xml:id="_unittest_8h_1abeba18d612187bad2ac62aed9276d47c"/><section>
    <title>RAPIDJSON_ASSERT</title>
<indexterm><primary>RAPIDJSON_ASSERT</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>RAPIDJSON_ASSERT</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_ASSERT( x)   (!(x) ? throw <link linkend="_class_assert_exception">AssertException</link>(RAPIDJSON_STRINGIFY(x)) : (void)0u)</computeroutput></para></section>
<anchor xml:id="_unittest_8h_1ae31755b00c035016af65346934c194de"/><section>
    <title>RAPIDJSON_ASSERT_THROWS</title>
<indexterm><primary>RAPIDJSON_ASSERT_THROWS</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>RAPIDJSON_ASSERT_THROWS</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_ASSERT_THROWS</computeroutput></para></section>
<anchor xml:id="_unittest_8h_1a7aca4eff4695749d674154ddd2fd1d2e"/><section>
    <title>RAPIDJSON_HAS_CXX11_NOEXCEPT</title>
<indexterm><primary>RAPIDJSON_HAS_CXX11_NOEXCEPT</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>RAPIDJSON_HAS_CXX11_NOEXCEPT</secondary></indexterm>
<para><computeroutput>#define RAPIDJSON_HAS_CXX11_NOEXCEPT   0</computeroutput></para></section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_unittest_8h_1a8d8e3cf93e9b811c207711d0b353de02"/><section>
    <title>StrCmp()</title>
<indexterm><primary>StrCmp</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>StrCmp</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>int StrCmp (const Ch * s1, const Ch * s2)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_unittest_8h_1a0b8e1bafb97ad4a272c5cc4469a13687"/><section>
    <title>StrDup()</title>
<indexterm><primary>StrDup</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>StrDup</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>Ch * StrDup (const Ch * str)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_unittest_8h_1a158bf1a4953297866644112d81a7a3e7"/><section>
    <title>StrLen()</title>
<indexterm><primary>StrLen</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>StrLen</secondary></indexterm>
<computeroutput>template&lt;typename Ch &gt; </computeroutput><para><computeroutput>unsigned StrLen (const Ch * s)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_unittest_8h_1acb6251ae9b44050f1fcabf8d3c2e792b"/><section>
    <title>TempFile()</title>
<indexterm><primary>TempFile</primary><secondary>unittest.h</secondary></indexterm>
<indexterm><primary>unittest.h</primary><secondary>TempFile</secondary></indexterm>
<para><computeroutput>FILE * TempFile (char * filename)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
</section>
