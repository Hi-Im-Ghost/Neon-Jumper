<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_generic_document" xml:lang="en-US">
<title>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt; Class Template Reference</title>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary></indexterm>
<para>

<para>A document for parsing JSON text as DOM. </para>
 
</para>
<para>
<computeroutput>#include &lt;document.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_generic_document.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef Encoding::Ch <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link></para>

<para>Character type derived from Encoding. </para>
</listitem>
            <listitem><para>typedef <link linkend="_class_generic_value">GenericValue</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> &gt; <link linkend="_class_generic_document_1a8936205dc215dda029060d7e835e0549">ValueType</link></para>

<para>Value type of the document. </para>
</listitem>
            <listitem><para>typedef <link linkend="_classrapidjson_1_1_allocator">Allocator</link> <link linkend="_class_generic_document_1a35155b912da66ced38d22e2551364c57">AllocatorType</link></para>

<para>Allocator type from template parameter. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_generic_document_1a3da21e72ec8f26b9da77d86cc1d41cdd">GenericDocument</link> (<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> *allocator=0, size_t stackCapacity=kDefaultStackCapacity, StackAllocator *stackAllocator=0)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_document_1a6b1c313ad538cafc4d23d4bd5f97178c">GenericDocument</link> (<link linkend="_classrapidjson_1_1_allocator">Allocator</link> *allocator=0, size_t stackCapacity=kDefaultStackCapacity, StackAllocator *stackAllocator=0)</para>

<para>Constructor. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_document_1aa9f980909298a4de32f66526484820bf">~GenericDocument</link> ()</para>
</listitem>
            <listitem><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a1c3ab2d23fcced40fced7409b9d4a1d2">Swap</link> (<link linkend="_class_generic_document">GenericDocument</link> &amp;rhs) RAPIDJSON_NOEXCEPT</para>

<para>Exchange the contents of this document with those of another. </para>
</listitem>
            <listitem><para>template&lt;typename Generator &gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1ac30b4e8887974060b695be20c3ceb02c">Populate</link> (Generator &amp;g)</para>

<para>Populate this document by a generator which produces SAX events. </para>
</listitem>
            <listitem><para><link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; <link linkend="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6">GetAllocator</link> ()</para>

<para>Get the allocator of this document. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_generic_document_1a9e2e543c326b8b981d4f2c3d6793d15b">GetStackCapacity</link> () const</para>

<para>Get the capacity of stack in bytes. </para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a87dc7f66b2b92660b8a43546733f9df2">Null</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a4c44780642518dd34bd241a1ea0ceaf1">Bool</link> (bool b)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a8cc986266becaa268474c607489745c7">Int</link> (int i)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a530dd899a04a00ba74f52507b488d2c1">Uint</link> (unsigned i)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a934b1b7a7ed89917615a5410db77a942">Int64</link> (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a50ac3451a1afd0ce248dcc023d5e09e8">Uint64</link> (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> i)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a934bf7a5d1ff062ab079756d842e4f6b">Double</link> (double d)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1af703994dec5af6ef049a24b5243aceab">RawNumber</link> (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1ad319fcc9e13606b6795424b9374a7398">String</link> (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1abb1417fde52cc34cb340e3b50a3295da">StartObject</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a600d0950baabbcab11197cacb1459c7a">Key</link> (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a42f2df68f9c9d8b88a15b609716867d9">EndObject</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> memberCount)</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1ae12c513c61745ae731a47b1ca33db063">StartArray</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_class_generic_document_1a14097c833bed1a9c7be064ea619c887f">EndArray</link> (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> elementCount)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Parse from stream</title>
        <itemizedlist>
            <listitem><para>template&lt;unsigned parseFlags, typename SourceEncoding , typename InputStream &gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921">ParseStream</link> (InputStream &amp;is)</para>

<para>Parse JSON text from an input stream (with Encoding conversion) </para>
</listitem>
            <listitem><para>template&lt;unsigned parseFlags, typename InputStream &gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a54d96ce0902d2afe033faebfd2863bbc">ParseStream</link> (InputStream &amp;is)</para>

<para>Parse JSON text from an input stream. </para>
</listitem>
            <listitem><para>template&lt;typename InputStream &gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a78f0a1448172e3e998778662e2beb0e3">ParseStream</link> (InputStream &amp;is)</para>

<para>Parse JSON text from an input stream (with <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80">kParseDefaultFlags</link>) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Parse in-place from mutable string</title>
        <itemizedlist>
            <listitem><para>template&lt;unsigned parseFlags&gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a13f68b1896a24eea4cdbc03a3916225f">ParseInsitu</link> (<link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str)</para>

<para>Parse JSON text from a mutable string. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a9bd648666f9c538e272bc980aff1b807">ParseInsitu</link> (<link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str)</para>

<para>Parse JSON text from a mutable string (with <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80">kParseDefaultFlags</link>) </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Parse from read-only string</title>
        <itemizedlist>
            <listitem><para>template&lt;unsigned parseFlags, typename SourceEncoding &gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a901db1678f99a1b550003eed75bc380a">Parse</link> (const typename SourceEncoding::Ch *str)</para>

<para>Parse JSON text from a read-only string (with Encoding conversion) </para>
</listitem>
            <listitem><para>template&lt;unsigned parseFlags&gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a3c3977dcf15fafe17d57f6784e0ce2b5">Parse</link> (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str)</para>

<para>Parse JSON text from a read-only string. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1afc8eb27bf748df642d27f5767ae4eaab">Parse</link> (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str)</para>

<para>Parse JSON text from a read-only string (with <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80">kParseDefaultFlags</link>) </para>
</listitem>
            <listitem><para>template&lt;unsigned parseFlags, typename SourceEncoding &gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1ae9f7f4eeb5950d342e71bdca6437ff27">Parse</link> (const typename SourceEncoding::Ch *str, size_t length)</para>
</listitem>
            <listitem><para>template&lt;unsigned parseFlags&gt; </para><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a40ca30aefee5016888756cac60dec261">Parse</link> (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str, size_t length)</para>
</listitem>
            <listitem><para><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document_1a7b436b2c997ffaa7d965e6ecec2f7ae4">Parse</link> (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> *str, size_t length)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect><title>Handling parse errors</title>
        <itemizedlist>
            <listitem><para>bool <link linkend="_class_generic_document_1a510a0588db4eb372f5d81bc3646578fb">HasParseError</link> () const</para>

<para>Whether a parse error has occurred in the last parsing. </para>
</listitem>
            <listitem><para><link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> <link linkend="_class_generic_document_1a9400a5bd3169cc6ed545e681ccc06070">GetParseError</link> () const</para>

<para>Get the <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> of last parsing. </para>
</listitem>
            <listitem><para>size_t <link linkend="_class_generic_document_1ae1ef7ca99ced428e9300c68e5142afdb">GetErrorOffset</link> () const</para>

<para>Get the position of last parsing error in input, 0 otherwise. </para>
</listitem>
            <listitem><para><link linkend="_class_generic_document_1af9bb8eade3eae0c039161378e8d2923a">operator ParseResult</link> () const</para>

<para>Implicit conversion to get the last parse result. </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename , typename &gt; </para><para>class <link linkend="_class_generic_document_1a899449e1a645b5e377af059fb61113d8">GenericValue</link></para>
</listitem>
            <listitem><para>void <link linkend="_class_generic_document_1a0d63efcc43758ac3aed77e868233369d">swap</link> (<link linkend="_class_generic_document">GenericDocument</link> &amp;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>, <link linkend="_class_generic_document">GenericDocument</link> &amp;b) RAPIDJSON_NOEXCEPT</para>

<para>free-standing swap function helper </para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Additional Inherited Members    </title>
</simplesect>
<section>
<title>Detailed Description</title>
<simplesect><title>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link> = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt;
class GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</title></simplesect>

<para>A document for parsing JSON text as DOM. </para>



<para><note><title>Note</title>

<para>implements Handler concept </para>
</note>

                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Encoding</entry><entry>
<para>Encoding for both parsing and string storage. </para>
</entry>
                            </row>
                            <row>
<entry>Allocator</entry><entry>
<para>Allocator for allocating memory for the DOM </para>
</entry>
                            </row>
                            <row>
<entry>StackAllocator</entry><entry>
<para>Allocator for allocating memory for stack during parsing. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <warning><title>Warning</title>

<para>Although <link linkend="_class_generic_document">GenericDocument</link> inherits from <link linkend="_class_generic_value">GenericValue</link>, the API does <emphasis role="bold">not</emphasis> provide any virtual functions, especially no virtual destructor. To avoid memory leaks, do not <computeroutput>delete</computeroutput> a <link linkend="_class_generic_document">GenericDocument</link> object via a pointer to a <link linkend="_class_generic_value">GenericValue</link>. </para>
</warning>
</para>
</section>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_generic_document_1a35155b912da66ced38d22e2551364c57"/><section>
    <title>AllocatorType</title>
<indexterm><primary>AllocatorType</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>AllocatorType</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_classrapidjson_1_1_allocator">Allocator</link> <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::AllocatorType</computeroutput></para><para>

<para>Allocator type from template parameter. </para>
</para>
</section>
<anchor xml:id="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700"/><section>
    <title>Ch</title>
<indexterm><primary>Ch</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Ch</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef Encoding::Ch <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Ch</computeroutput></para><para>

<para>Character type derived from Encoding. </para>
</para>
</section>
<anchor xml:id="_class_generic_document_1a8936205dc215dda029060d7e835e0549"/><section>
    <title>ValueType</title>
<indexterm><primary>ValueType</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>ValueType</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>typedef <link linkend="_class_generic_value">GenericValue</link>&lt;<link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>&gt; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;<link linkend="_schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f">::ValueType</link></computeroutput></para><para>

<para>Value type of the document. </para>
</para>
</section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_generic_document_1a3da21e72ec8f26b9da77d86cc1d41cdd"/><section>
    <title>GenericDocument()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>GenericDocument</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>GenericDocument</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;<link linkend="_class_generic_document">::GenericDocument</link> (<link linkend="_rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7">Type</link> type, <link linkend="_classrapidjson_1_1_allocator">Allocator</link> * allocator = <computeroutput>0</computeroutput>
, size_t stackCapacity = <computeroutput>kDefaultStackCapacity</computeroutput>
, StackAllocator * stackAllocator = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput>, <computeroutput>[explicit]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Creates an empty document of specified type. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>type</entry><entry>
<para>Mandatory type of object to create. </para>
</entry>
                            </row>
                            <row>
<entry>allocator</entry><entry>
<para>Optional allocator for allocating memory. </para>
</entry>
                            </row>
                            <row>
<entry>stackCapacity</entry><entry>
<para>Optional initial capacity of stack in bytes. </para>
</entry>
                            </row>
                            <row>
<entry>stackAllocator</entry><entry>
<para>Optional allocator for allocating memory for stack. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_generic_document_1a6b1c313ad538cafc4d23d4bd5f97178c"/><section>
    <title>GenericDocument()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>GenericDocument</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>GenericDocument</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;<link linkend="_class_generic_document">::GenericDocument</link> (<link linkend="_classrapidjson_1_1_allocator">Allocator</link> * allocator = <computeroutput>0</computeroutput>
, size_t stackCapacity = <computeroutput>kDefaultStackCapacity</computeroutput>
, StackAllocator * stackAllocator = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Constructor. </para>
</para>

<para>Creates an empty document which type is Null. 
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>allocator</entry><entry>
<para>Optional allocator for allocating memory. </para>
</entry>
                            </row>
                            <row>
<entry>stackCapacity</entry><entry>
<para>Optional initial capacity of stack in bytes. </para>
</entry>
                            </row>
                            <row>
<entry>stackAllocator</entry><entry>
<para>Optional allocator for allocating memory for stack. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_generic_document_1aa9f980909298a4de32f66526484820bf"/><section>
    <title>~GenericDocument()</title>
<indexterm><primary>~GenericDocument</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>~GenericDocument</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::~<link linkend="_class_generic_document">GenericDocument</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_generic_document_1a4c44780642518dd34bd241a1ea0ceaf1"/><section>
    <title>Bool()</title>
<indexterm><primary>Bool</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Bool</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Bool (bool b)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a934bf7a5d1ff062ab079756d842e4f6b"/><section>
    <title>Double()</title>
<indexterm><primary>Double</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Double</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Double (double d)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a14097c833bed1a9c7be064ea619c887f"/><section>
    <title>EndArray()</title>
<indexterm><primary>EndArray</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>EndArray</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::EndArray (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> elementCount)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a42f2df68f9c9d8b88a15b609716867d9"/><section>
    <title>EndObject()</title>
<indexterm><primary>EndObject</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>EndObject</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::EndObject (<link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> memberCount)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6"/><section>
    <title>GetAllocator()</title>
<indexterm><primary>GetAllocator</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>GetAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_classrapidjson_1_1_allocator">Allocator</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::GetAllocator ( )<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the allocator of this document. </para>
</para>
</section>
<anchor xml:id="_class_generic_document_1ae1ef7ca99ced428e9300c68e5142afdb"/><section>
    <title>GetErrorOffset()</title>
<indexterm><primary>GetErrorOffset</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>GetErrorOffset</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>size_t <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::GetErrorOffset ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the position of last parsing error in input, 0 otherwise. </para>
</para>
</section>
<anchor xml:id="_class_generic_document_1a9400a5bd3169cc6ed545e681ccc06070"/><section>
    <title>GetParseError()</title>
<indexterm><primary>GetParseError</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>GetParseError</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::GetParseError ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the <link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7">ParseErrorCode</link> of last parsing. </para>
</para>
</section>
<anchor xml:id="_class_generic_document_1a9e2e543c326b8b981d4f2c3d6793d15b"/><section>
    <title>GetStackCapacity()</title>
<indexterm><primary>GetStackCapacity</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>GetStackCapacity</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>size_t <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::GetStackCapacity ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Get the capacity of stack in bytes. </para>
</para>
</section>
<anchor xml:id="_class_generic_document_1a510a0588db4eb372f5d81bc3646578fb"/><section>
    <title>HasParseError()</title>
<indexterm><primary>HasParseError</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>HasParseError</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::HasParseError ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Whether a parse error has occurred in the last parsing. </para>
</para>
</section>
<anchor xml:id="_class_generic_document_1a8cc986266becaa268474c607489745c7"/><section>
    <title>Int()</title>
<indexterm><primary>Int</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Int</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Int (int i)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a934b1b7a7ed89917615a5410db77a942"/><section>
    <title>Int64()</title>
<indexterm><primary>Int64</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Int64</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Int64 (<link linkend="_stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6">int64_t</link> i)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a600d0950baabbcab11197cacb1459c7a"/><section>
    <title>Key()</title>
<indexterm><primary>Key</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Key</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Key (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a87dc7f66b2b92660b8a43546733f9df2"/><section>
    <title>Null()</title>
<indexterm><primary>Null</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Null</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Null ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1af9bb8eade3eae0c039161378e8d2923a"/><section>
    <title>operator ParseResult()</title>
<indexterm><primary>operator ParseResult</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>operator ParseResult</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::operator <link linkend="_struct_parse_result">ParseResult</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Implicit conversion to get the last parse result. </para>
</para>

<para><formalpara><title>Returns</title>

<para><link linkend="_struct_parse_result">ParseResult</link> of the last parse operation</para>
</formalpara>
<literallayout><computeroutput><link linkend="_class_generic_document">Document</link>&#32;doc;
<link linkend="_struct_parse_result">ParseResult</link>&#32;ok&#32;=&#32;doc.<link linkend="_class_generic_document_1a901db1678f99a1b550003eed75bc380a">Parse</link>(json);
<emphasis role="keywordflow">if</emphasis>&#32;(!ok)
&#32;&#32;printf(&#32;<emphasis role="stringliteral">&quot;JSON&#32;parse&#32;error:&#32;%s&#32;(%u)\n&quot;</emphasis>,&#32;<link linkend="_group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga28835eb93d2c3c07bbea13515eb31415">GetParseError_En</link>(ok.<link linkend="_struct_parse_result_1a2aae3c2f42b31cc2409ee1e03bc4852e">Code</link>()),&#32;ok.<link linkend="_struct_parse_result_1afbe762766ac21b2aae266105f1dfa643">Offset</link>());
</computeroutput></literallayout> </para>
</section>
<anchor xml:id="_class_generic_document_1a3c3977dcf15fafe17d57f6784e0ce2b5"/><section>
    <title>Parse()<computeroutput>[1/6]</computeroutput></title>
<indexterm><primary>Parse</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Parse</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;unsigned parseFlags&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Parse (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from a read-only string. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>parseFlags</entry><entry>
<para>Combination of <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450">ParseFlag</link> (must not contain <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01">kParseInsituFlag</link>). </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Read-only zero-terminated string to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_generic_document_1afc8eb27bf748df642d27f5767ae4eaab"/><section>
    <title>Parse()<computeroutput>[2/6]</computeroutput></title>
<indexterm><primary>Parse</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Parse</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Parse (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from a read-only string (with <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80">kParseDefaultFlags</link>) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Read-only zero-terminated string to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_generic_document_1a40ca30aefee5016888756cac60dec261"/><section>
    <title>Parse()<computeroutput>[3/6]</computeroutput></title>
<indexterm><primary>Parse</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Parse</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;unsigned parseFlags&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Parse (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str, size_t length)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a7b436b2c997ffaa7d965e6ecec2f7ae4"/><section>
    <title>Parse()<computeroutput>[4/6]</computeroutput></title>
<indexterm><primary>Parse</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Parse</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Parse (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str, size_t length)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a901db1678f99a1b550003eed75bc380a"/><section>
    <title>Parse()<computeroutput>[5/6]</computeroutput></title>
<indexterm><primary>Parse</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Parse</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;unsigned parseFlags, typename SourceEncoding &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Parse (const typename SourceEncoding::Ch * str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from a read-only string (with Encoding conversion) </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>parseFlags</entry><entry>
<para>Combination of <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450">ParseFlag</link> (must not contain <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01">kParseInsituFlag</link>). </para>
</entry>
                            </row>
                            <row>
<entry>SourceEncoding</entry><entry>
<para>Transcoding from input Encoding </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Read-only zero-terminated string to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                </para>
</section>
<anchor xml:id="_class_generic_document_1ae9f7f4eeb5950d342e71bdca6437ff27"/><section>
    <title>Parse()<computeroutput>[6/6]</computeroutput></title>
<indexterm><primary>Parse</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Parse</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;unsigned parseFlags, typename SourceEncoding &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Parse (const typename SourceEncoding::Ch * str, size_t length)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a13f68b1896a24eea4cdbc03a3916225f"/><section>
    <title>ParseInsitu()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ParseInsitu</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>ParseInsitu</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;unsigned parseFlags&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::ParseInsitu (<link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from a mutable string. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>parseFlags</entry><entry>
<para>Combination of <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450">ParseFlag</link>. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Mutable zero-terminated string to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The document itself for fluent API. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_document_1a9bd648666f9c538e272bc980aff1b807"/><section>
    <title>ParseInsitu()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ParseInsitu</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>ParseInsitu</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::ParseInsitu (<link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from a mutable string (with <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80">kParseDefaultFlags</link>) </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>str</entry><entry>
<para>Mutable zero-terminated string to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The document itself for fluent API. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921"/><section>
    <title>ParseStream()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>ParseStream</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>ParseStream</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;unsigned parseFlags, typename SourceEncoding , typename InputStream &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::ParseStream (InputStream &amp; is)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from an input stream (with Encoding conversion) </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>parseFlags</entry><entry>
<para>Combination of <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450">ParseFlag</link>. </para>
</entry>
                            </row>
                            <row>
<entry>SourceEncoding</entry><entry>
<para>Encoding of input stream </para>
</entry>
                            </row>
                            <row>
<entry>InputStream</entry><entry>
<para>Type of input stream, implementing Stream concept </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>is</entry><entry>
<para>Input stream to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The document itself for fluent API. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_document_1a54d96ce0902d2afe033faebfd2863bbc"/><section>
    <title>ParseStream()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>ParseStream</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>ParseStream</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;unsigned parseFlags, typename InputStream &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::ParseStream (InputStream &amp; is)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from an input stream. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>parseFlags</entry><entry>
<para>Combination of <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450">ParseFlag</link>. </para>
</entry>
                            </row>
                            <row>
<entry>InputStream</entry><entry>
<para>Type of input stream, implementing Stream concept </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>is</entry><entry>
<para>Input stream to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The document itself for fluent API. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_document_1a78f0a1448172e3e998778662e2beb0e3"/><section>
    <title>ParseStream()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>ParseStream</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>ParseStream</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename InputStream &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::ParseStream (InputStream &amp; is)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Parse JSON text from an input stream (with <link linkend="_reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80">kParseDefaultFlags</link>) </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>InputStream</entry><entry>
<para>Type of input stream, implementing Stream concept </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>is</entry><entry>
<para>Input stream to be parsed. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The document itself for fluent API. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_document_1ac30b4e8887974060b695be20c3ceb02c"/><section>
    <title>Populate()</title>
<indexterm><primary>Populate</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Populate</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename Generator &gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Populate (Generator &amp; g)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Populate this document by a generator which produces SAX events. </para>
</para>

<para>
                <formalpara>
                    <title>
Template Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>Generator</entry><entry>
<para>A functor with <computeroutput>bool f(Handler)</computeroutput> prototype. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>g</entry><entry>
<para>Generator functor which sends SAX events to the parameter. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <formalpara><title>Returns</title>

<para>The document itself for fluent API. </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_document_1af703994dec5af6ef049a24b5243aceab"/><section>
    <title>RawNumber()</title>
<indexterm><primary>RawNumber</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>RawNumber</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::RawNumber (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1ae12c513c61745ae731a47b1ca33db063"/><section>
    <title>StartArray()</title>
<indexterm><primary>StartArray</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>StartArray</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::StartArray ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1abb1417fde52cc34cb340e3b50a3295da"/><section>
    <title>StartObject()</title>
<indexterm><primary>StartObject</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>StartObject</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::StartObject ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1ad319fcc9e13606b6795424b9374a7398"/><section>
    <title>String()</title>
<indexterm><primary>String</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>String</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::String (const <link linkend="_class_generic_document_1a6f5b0b7b6626508d094ae67490269700">Ch</link> * str, <link linkend="_rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5">SizeType</link> length, bool copy)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a1c3ab2d23fcced40fced7409b9d4a1d2"/><section>
    <title>Swap()</title>
<indexterm><primary>Swap</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Swap</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput><link linkend="_class_generic_document">GenericDocument</link> &amp; <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Swap (<link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para><para>

<para>Exchange the contents of this document with those of another. </para>
</para>

<para>
                <formalpara>
                    <title>
Parameters</title>
                    <para>
                    <table frame="all">
                        <tgroup cols="2" align="left" colsep="1" rowsep="1">
                        <colspec colwidth="1*"/>
                        <colspec colwidth="4*"/>
                        <tbody>
                            <row>
<entry>rhs</entry><entry>
<para>Another document. </para>
</entry>
                            </row>
                        </tbody>
                        </tgroup>
                    </table>
                    </para>
                </formalpara>
                <note><title>Note</title>

<para>Constant complexity. </para>
</note>
<formalpara><title>See also</title>

<para>GenericValue::Swap </para>
</formalpara>
</para>
</section>
<anchor xml:id="_class_generic_document_1a530dd899a04a00ba74f52507b488d2c1"/><section>
    <title>Uint()</title>
<indexterm><primary>Uint</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Uint</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Uint (unsigned i)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a50ac3451a1afd0ce248dcc023d5e09e8"/><section>
    <title>Uint64()</title>
<indexterm><primary>Uint64</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>Uint64</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>bool <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt;::Uint64 (<link linkend="_stdint_8h_1aec6fcb673ff035718c238c8c9d544c47">uint64_t</link> i)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_class_generic_document_1a899449e1a645b5e377af059fb61113d8"/><section>
    <title>GenericValue</title>
<indexterm><primary>GenericValue</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>GenericValue</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><computeroutput>template&lt;typename , typename &gt; </computeroutput><para><computeroutput>friend class <link linkend="_class_generic_value">GenericValue</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_generic_document_1a0d63efcc43758ac3aed77e868233369d"/><section>
    <title>swap</title>
<indexterm><primary>swap</primary><secondary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</secondary></indexterm>
<indexterm><primary>GenericDocument&lt; Encoding, Allocator, StackAllocator &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_classrapidjson_1_1_encoding">Encoding</link> , typename <link linkend="_classrapidjson_1_1_allocator">Allocator</link>  = RAPIDJSON_DEFAULT_ALLOCATOR, typename StackAllocator  = RAPIDJSON_DEFAULT_STACK_ALLOCATOR&gt; </computeroutput><para><computeroutput>void swap (<link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt; &amp; a, <link linkend="_class_generic_document">GenericDocument</link>&lt; <link linkend="_classrapidjson_1_1_encoding">Encoding</link>, <link linkend="_classrapidjson_1_1_allocator">Allocator</link>, StackAllocator &gt; &amp; b)<computeroutput>[friend]</computeroutput></computeroutput></para><para>

<para>free-standing swap function helper </para>
</para>

<para>Helper function to enable support for common swap implementation pattern based on <computeroutput>std::swap:</computeroutput> <literallayout><computeroutput><emphasis role="keywordtype">void</emphasis>&#32;<link linkend="_class_generic_document_1a0d63efcc43758ac3aed77e868233369d">swap</link>(MyClass&amp;&#32;<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>,&#32;MyClass&amp;&#32;b)&#32;{
&#32;&#32;&#32;&#32;<emphasis role="keyword">using</emphasis>&#32;std::swap;
&#32;&#32;&#32;&#32;<link linkend="_class_generic_document_1a0d63efcc43758ac3aed77e868233369d">swap</link>(<link linkend="_pointer_8h_1aeeddce917cf130d62c370b8f216026dd">a</link>.doc,&#32;b.doc);
&#32;&#32;&#32;&#32;<emphasis role="comment">//&#32;...</emphasis>
}
</computeroutput></literallayout> <formalpara><title>See also</title>

<para><link linkend="_class_generic_document_1a1c3ab2d23fcced40fced7409b9d4a1d2">Swap()</link> </para>
</formalpara>
</para>
</section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/<link linkend="_document_8h">document.h</link></section>
</section>
