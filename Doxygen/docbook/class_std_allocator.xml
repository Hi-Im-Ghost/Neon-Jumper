<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_class_std_allocator" xml:lang="en-US">
<title>StdAllocator&lt; T, BaseAllocator &gt; Class Template Reference</title>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;allocators.h&gt;</computeroutput>
</para>
<para>Inheritance diagram for StdAllocator&lt; T, BaseAllocator &gt;:    <informalfigure>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="0" fileref="class_std_allocator.png"></imagedata>
            </imageobject>
        </mediaobject>
    </informalfigure>
</para>
<simplesect>
    <title>Classes    </title>
        <itemizedlist>
            <listitem><para>struct <link linkend="_struct_std_allocator_1_1rebind">rebind</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef BaseAllocator <link linkend="_class_std_allocator_1a09e7299a6c14e2d234bd469f1162bb21">BaseAllocatorType</link></para>
</listitem>
            <listitem><para>typedef traits_type::size_type <link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link></para>
</listitem>
            <listitem><para>typedef traits_type::difference_type <link linkend="_class_std_allocator_1a4f3adbac47a8c20e47dbfb5c1f421ccd">difference_type</link></para>
</listitem>
            <listitem><para>typedef traits_type::value_type <link linkend="_class_std_allocator_1aa9b7be996e5529bd6f1cbacadfa090c7">value_type</link></para>
</listitem>
            <listitem><para>typedef traits_type::pointer <link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link></para>
</listitem>
            <listitem><para>typedef traits_type::const_pointer <link linkend="_class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296">const_pointer</link></para>
</listitem>
            <listitem><para>typedef allocator_type::reference <link linkend="_class_std_allocator_1a108581b842584639473a6d3fdd135598">reference</link></para>
</listitem>
            <listitem><para>typedef allocator_type::const_reference <link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_class_std_allocator_1afdef530c5dbd0c4e86922ab263c8ca83">StdAllocator</link> () RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_1abfb16c76a06015f0ec1abe704375ace8">StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link> &amp;rhs) RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para><link linkend="_class_std_allocator_1ab41a5cbaf54473e1e10468258629bd1b">StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp;rhs) RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_1a40ffe84a544bd5fe938581d09595bd1f">StdAllocator</link> (const BaseAllocator &amp;allocator) RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_1a3d1703f93d5929c71a35e0c9baf9ceb1">~StdAllocator</link> () RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> <link linkend="_class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6">address</link> (<link linkend="_class_std_allocator_1a108581b842584639473a6d3fdd135598">reference</link> r) const RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296">const_pointer</link> <link linkend="_class_std_allocator_1a56c3bab4003eccf5b7a9d18175ef4dc2">address</link> (<link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link> r) const RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> <link linkend="_class_std_allocator_1a158b8ba5e88fbcd7a851541090654930">max_size</link> () const RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para>void <link linkend="_class_std_allocator_1a279cb8367857b1263c4ab014b74f842a">construct</link> (<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> p, <link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link> r)</para>
</listitem>
            <listitem><para>void <link linkend="_class_std_allocator_1a2aebac89efaaac9707d380b95c902567">destroy</link> (<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> p)</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para>U * <link linkend="_class_std_allocator_1a8c60bc907eb5ecb9bc174de469394e7b">allocate</link> (<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n=1, const void *=0)</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para>void <link linkend="_class_std_allocator_1a92371ba62f651185c0d3eef856080cfa">deallocate</link> (U *p, <link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n=1)</para>
</listitem>
            <listitem><para><link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> <link linkend="_class_std_allocator_1aa301f003f6722d438834b377c314247e">allocate</link> (<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n=1, const void *=0)</para>
</listitem>
            <listitem><para>void <link linkend="_class_std_allocator_1a96a27b5bc9919d08013e727f5217db7a">deallocate</link> (<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> p, <link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n=1)</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para>bool <link linkend="_class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31">operator==</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp;rhs) const RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para>template&lt;typename U &gt; </para><para>bool <link linkend="_class_std_allocator_1a6d1d3ae1297ec63f6043f06d26b99df7">operator!=</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp;rhs) const RAPIDJSON_NOEXCEPT</para>
</listitem>
            <listitem><para>void * <link linkend="_class_std_allocator_1a0499a9aa57a19d5ae174bedf8c80da87">Malloc</link> (size_t size)</para>
</listitem>
            <listitem><para>void * <link linkend="_class_std_allocator_1a97fb4098726bc00def3a205698517b8b">Realloc</link> (void *originalPtr, size_t originalSize, size_t newSize)</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Member Functions    </title>
        <itemizedlist>
            <listitem><para>static void <link linkend="_class_std_allocator_1ae3b6918eee229eeb89e9535d65296d6d">Free</link> (void *ptr) RAPIDJSON_NOEXCEPT</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Static Public Attributes    </title>
        <itemizedlist>
            <listitem><para>static const bool <link linkend="_class_std_allocator_1a75b2c8e2995e564037dd7d5408217a6b">kNeedFree</link> = BaseAllocator::kNeedFree</para>

<para>rapidjson Allocator concept </para>
</listitem>
            <listitem><para>static const bool <link linkend="_class_std_allocator_1afd2564e7c3121474d93c805839fa5f83">kRefCounted</link> = <link linkend="_structinternal_1_1_is_ref_counted">internal::IsRefCounted</link>&lt;BaseAllocator&gt;<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">::Value</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Friends    </title>
        <itemizedlist>
            <listitem><para>template&lt;typename , typename &gt; </para><para>class <link linkend="_class_std_allocator_1afb3a6a655f835f6b9ec21fab41291287">StdAllocator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_class_std_allocator_1a09e7299a6c14e2d234bd469f1162bb21"/><section>
    <title>BaseAllocatorType</title>
<indexterm><primary>BaseAllocatorType</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>BaseAllocatorType</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef BaseAllocator <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::BaseAllocatorType</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296"/><section>
    <title>const_pointer</title>
<indexterm><primary>const_pointer</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>const_pointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef traits_type::const_pointer <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::const_pointer</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e"/><section>
    <title>const_reference</title>
<indexterm><primary>const_reference</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>const_reference</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef allocator_type::const_reference <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::const_reference</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a4f3adbac47a8c20e47dbfb5c1f421ccd"/><section>
    <title>difference_type</title>
<indexterm><primary>difference_type</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>difference_type</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef traits_type::difference_type <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::difference_type</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5"/><section>
    <title>pointer</title>
<indexterm><primary>pointer</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>pointer</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef traits_type::pointer <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::pointer</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a108581b842584639473a6d3fdd135598"/><section>
    <title>reference</title>
<indexterm><primary>reference</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>reference</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef allocator_type::reference <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::reference</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1"/><section>
    <title>size_type</title>
<indexterm><primary>size_type</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>size_type</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef traits_type::size_type <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::size_type</computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1aa9b7be996e5529bd6f1cbacadfa090c7"/><section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>typedef traits_type::value_type <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::value_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_class_std_allocator_1afdef530c5dbd0c4e86922ab263c8ca83"/><section>
    <title>StdAllocator()<computeroutput>[1/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1abfb16c76a06015f0ec1abe704375ace8"/><section>
    <title>StdAllocator()<computeroutput>[2/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1ab41a5cbaf54473e1e10468258629bd1b"/><section>
    <title>StdAllocator()<computeroutput>[3/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a40ffe84a544bd5fe938581d09595bd1f"/><section>
    <title>StdAllocator()<computeroutput>[4/4]</computeroutput></title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;<link linkend="_class_std_allocator">::StdAllocator</link> (const BaseAllocator &amp; allocator)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a3d1703f93d5929c71a35e0c9baf9ceb1"/><section>
    <title>~StdAllocator()</title>
<indexterm><primary>~StdAllocator</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>~StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::~<link linkend="_class_std_allocator">StdAllocator</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_class_std_allocator_1a56c3bab4003eccf5b7a9d18175ef4dc2"/><section>
    <title>address()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>address</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>address</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296">const_pointer</link> <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::address (<link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link> r) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6"/><section>
    <title>address()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>address</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>address</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::address (<link linkend="_class_std_allocator_1a108581b842584639473a6d3fdd135598">reference</link> r) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a8c60bc907eb5ecb9bc174de469394e7b"/><section>
    <title>allocate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>allocate</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput>U * <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::allocate (<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n = <computeroutput>1</computeroutput>
, const void *  = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1aa301f003f6722d438834b377c314247e"/><section>
    <title>allocate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>allocate</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>allocate</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::allocate (<link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n = <computeroutput>1</computeroutput>
, const void *  = <computeroutput>0</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a279cb8367857b1263c4ab014b74f842a"/><section>
    <title>construct()</title>
<indexterm><primary>construct</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>construct</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>void <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::construct (<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> p, <link linkend="_class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e">const_reference</link> r)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a96a27b5bc9919d08013e727f5217db7a"/><section>
    <title>deallocate()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>deallocate</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>deallocate</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>void <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::deallocate (<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> p, <link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a92371ba62f651185c0d3eef856080cfa"/><section>
    <title>deallocate()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>deallocate</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>deallocate</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput>void <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::deallocate (U * p, <link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> n = <computeroutput>1</computeroutput>
)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a2aebac89efaaac9707d380b95c902567"/><section>
    <title>destroy()</title>
<indexterm><primary>destroy</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>destroy</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>void <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::destroy (<link linkend="_class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5">pointer</link> p)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1ae3b6918eee229eeb89e9535d65296d6d"/><section>
    <title>Free()</title>
<indexterm><primary>Free</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>Free</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>static void <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::Free (void * ptr)<computeroutput>[inline]</computeroutput>, <computeroutput>[static]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a0499a9aa57a19d5ae174bedf8c80da87"/><section>
    <title>Malloc()</title>
<indexterm><primary>Malloc</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>Malloc</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>void * <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::Malloc (size_t size)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a158b8ba5e88fbcd7a851541090654930"/><section>
    <title>max_size()</title>
<indexterm><primary>max_size</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>max_size</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput><link linkend="_class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1">size_type</link> <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::max_size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a6d1d3ae1297ec63f6043f06d26b99df7"/><section>
    <title>operator!=()</title>
<indexterm><primary>operator!=</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>operator!=</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::operator!= (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31"/><section>
    <title>operator==()</title>
<indexterm><primary>operator==</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>operator==</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename U &gt; </computeroutput><para><computeroutput>bool <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::operator== (const <link linkend="_class_std_allocator">StdAllocator</link>&lt; U, BaseAllocator &gt; &amp; rhs) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_class_std_allocator_1a97fb4098726bc00def3a205698517b8b"/><section>
    <title>Realloc()</title>
<indexterm><primary>Realloc</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>Realloc</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>void * <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::Realloc (void * originalPtr, size_t originalSize, size_t newSize)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Friends And Related Function Documentation</title>
<anchor xml:id="_class_std_allocator_1afb3a6a655f835f6b9ec21fab41291287"/><section>
    <title>StdAllocator</title>
<indexterm><primary>StdAllocator</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>StdAllocator</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><computeroutput>template&lt;typename , typename &gt; </computeroutput><para><computeroutput>friend class <link linkend="_class_std_allocator">StdAllocator</link><computeroutput>[friend]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_class_std_allocator_1a75b2c8e2995e564037dd7d5408217a6b"/><section>
    <title>kNeedFree</title>
<indexterm><primary>kNeedFree</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>kNeedFree</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>const bool <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::kNeedFree = BaseAllocator::kNeedFree<computeroutput>[static]</computeroutput></computeroutput></para><para>

<para>rapidjson Allocator concept </para>
</para>
</section>
<anchor xml:id="_class_std_allocator_1afd2564e7c3121474d93c805839fa5f83"/><section>
    <title>kRefCounted</title>
<indexterm><primary>kRefCounted</primary><secondary>StdAllocator&lt; T, BaseAllocator &gt;</secondary></indexterm>
<indexterm><primary>StdAllocator&lt; T, BaseAllocator &gt;</primary><secondary>kRefCounted</secondary></indexterm>
<computeroutput>template&lt;typename <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link> , typename BaseAllocator  = CrtAllocator&gt; </computeroutput><para><computeroutput>const bool <link linkend="_class_std_allocator">StdAllocator</link>&lt; <link linkend="_writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7">T</link>, BaseAllocator &gt;::kRefCounted = <link linkend="_structinternal_1_1_is_ref_counted">internal::IsRefCounted</link>&lt;BaseAllocator&gt;<link linkend="_document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481">::Value</link><computeroutput>[static]</computeroutput></computeroutput></para></section>
<para>
The documentation for this class was generated from the following file:</para>
src/rapidjson/include/rapidjson/<link linkend="_allocators_8h">allocators.h</link></section>
</section>
