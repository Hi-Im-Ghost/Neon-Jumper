<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="pointer_8h" kind="file" language="C++">
    <compoundname>pointer.h</compoundname>
    <includes refid="document_8h" local="yes">document.h</includes>
    <includes refid="uri_8h" local="yes">uri.h</includes>
    <includes refid="itoa_8h" local="yes">internal/itoa.h</includes>
    <includedby refid="traverseaspointer_8cpp" local="yes">src/rapidjson/example/traverseaspointer.cpp</includedby>
    <includedby refid="schema_8h" local="yes">src/rapidjson/include/rapidjson/schema.h</includedby>
    <includedby refid="pointertest_8cpp" local="yes">src/rapidjson/test/unittest/pointertest.cpp</includedby>
    <incdepgraph>
      <node id="4">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>document.h</label>
        <link refid="document_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>internal/itoa.h</label>
        <link refid="itoa_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/include/rapidjson/pointer.h</label>
        <link refid="pointer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>uri.h</label>
        <link refid="uri_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="25">
        <label>climits</label>
      </node>
      <node id="18">
        <label>cstddef</label>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="28">
        <label>cwchar</label>
      </node>
      <node id="30">
        <label>iterator</label>
      </node>
      <node id="23">
        <label>limits</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
      <node id="29">
        <label>new</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/rapidjson/example/schemavalidator/schemavalidator.cpp</label>
        <link refid="schemavalidator_8cpp"/>
      </node>
      <node id="2">
        <label>src/rapidjson/example/traverseaspointer.cpp</label>
        <link refid="traverseaspointer_8cpp"/>
      </node>
      <node id="1">
        <label>src/rapidjson/include/rapidjson/pointer.h</label>
        <link refid="pointer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/rapidjson/include/rapidjson/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/rapidjson/test/perftest/schematest.cpp</label>
        <link refid="perftest_2schematest_8cpp"/>
      </node>
      <node id="6">
        <label>src/rapidjson/test/unittest/fwdtest.cpp</label>
        <link refid="fwdtest_8cpp"/>
      </node>
      <node id="8">
        <label>src/rapidjson/test/unittest/pointertest.cpp</label>
        <link refid="pointertest_8cpp"/>
      </node>
      <node id="7">
        <label>src/rapidjson/test/unittest/schematest.cpp</label>
        <link refid="unittest_2schematest_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_generic_pointer" prot="public">GenericPointer</innerclass>
    <innerclass refid="struct_generic_pointer_1_1_token" prot="public">GenericPointer::Token</innerclass>
    <innerclass refid="class_generic_pointer_1_1_percent_encode_stream" prot="public">GenericPointer::PercentEncodeStream</innerclass>
      <sectiondef kind="user-defined">
      <header>Helper functions for GenericPointer</header>
      <memberdef kind="variable" id="pointer_8h_1aae1f8d263916ad71bd415381591549c0" prot="public" static="no" mutable="no">
        <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
        <definition>const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp; pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1249" column="24" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" prot="public" static="no" mutable="no">
        <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; T2</type>
        <definition>const GenericPointer&lt; typename DocumentType::ValueType &gt; T2 defaultValue</definition>
        <argsstring></argsstring>
        <name>defaultValue</name>
        <initializer>{
    return pointer.GetWithDefault(document, defaultValue)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1249" column="35" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" prot="public" static="no" mutable="no">
        <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; T2 T::AllocatorType &amp;</type>
        <definition>const GenericPointer&lt; typename T::ValueType &gt; T2 T::AllocatorType &amp; a</definition>
        <argsstring></argsstring>
        <name>a</name>
        <initializer>{
    return pointer.GetWithDefault(root, <ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>, a)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1249" column="74" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" prot="public" static="no" mutable="no">
        <type>const CharType(&amp;</type>
        <definition>const CharType(&amp; source</definition>
        <argsstring>)[N]</argsstring>
        <name>source</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1272" column="9" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1272" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" prot="public" static="no" mutable="no">
        <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; T2</type>
        <definition>const GenericPointer&lt; typename DocumentType::ValueType &gt; T2 value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <initializer>{
    return pointer.Set(document, value)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1350" column="35" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1350" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; CreateValueByPointer</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, typename T::AllocatorType &amp;a)</argsstring>
        <name>CreateValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1185" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1185" bodyend="1187"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a916460d6eccdc49ecf85e2e6ab9767a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; CreateValueByPointer</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], typename T::AllocatorType &amp;a)</argsstring>
        <name>CreateValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1190" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1190" bodyend="1192"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a6dc4215e763f8544057e36582381f66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; CreateValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp;pointer)</argsstring>
        <name>CreateValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1197" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1197" bodyend="1199"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1ae5f22e098e170e51d47beb75812b9a5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; CreateValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N])</argsstring>
        <name>CreateValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1202" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1202" bodyend="1204"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a581633984b11d0587c2ad06649efefc4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> *</type>
        <definition>T::ValueType * GetValueByPointer</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, size_t *unresolvedTokenIndex=0)</argsstring>
        <name>GetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>unresolvedTokenIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1209" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1209" bodyend="1211"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1ae0edeb21a41191c864727b3b2ce95131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>const <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> *</type>
        <definition>const T::ValueType * GetValueByPointer</definition>
        <argsstring>(const T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, size_t *unresolvedTokenIndex=0)</argsstring>
        <name>GetValueByPointer</name>
        <param>
          <type>const <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>size_t *</type>
          <declname>unresolvedTokenIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1214" column="29" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1214" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a3f324884650614ca6b0ef4765566bc9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> *</type>
        <definition>T::ValueType * GetValueByPointer</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], size_t *unresolvedTokenIndex=0)</argsstring>
        <name>GetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>size_t *</type>
          <declname>unresolvedTokenIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1219" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1219" bodyend="1221"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a2683bf19840749f07ceaf659b4cee6d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>const <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> *</type>
        <definition>const T::ValueType * GetValueByPointer</definition>
        <argsstring>(const T &amp;root, const CharType(&amp;source)[N], size_t *unresolvedTokenIndex=0)</argsstring>
        <name>GetValueByPointer</name>
        <param>
          <type>const <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>size_t *</type>
          <declname>unresolvedTokenIndex</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1224" column="29" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1224" bodyend="1226"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const typename T::ValueType &amp;defaultValue, typename T::AllocatorType &amp;a)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1231" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1231" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a38d0f082d4e54b591cba9ae9c70cf828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const typename T::Ch *defaultValue, typename T::AllocatorType &amp;a)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename T::Ch *</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1236" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1236" bodyend="1238"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt; &gt;),(typename T::ValueType &amp;)) GetValueByPointerWithDefault(T &amp;root</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)</type>
        </param>
        <param>
          <type>(typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a04e7d4fa9f18bae987e39e6c1045ae70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::ValueType &amp;defaultValue, typename T::AllocatorType &amp;a)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1254" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1254" bodyend="1256"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a25951a749a68964998983a6b4fbebf07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::Ch *defaultValue, typename T::AllocatorType &amp;a)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename T::Ch *</type>
          <declname>defaultValue</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1259" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1259" bodyend="1261"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1ae26d117fc2f0ef0275825d2a510e8a8d" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt; &gt;),(typename T::ValueType &amp;)) GetValueByPointerWithDefault(T &amp;root</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)</type>
        </param>
        <param>
          <type>(typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1271" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a6fde94e8be246ff3f73ee62335a0e09c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp;pointer, const typename DocumentType::ValueType &amp;defaultValue)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1279" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1279" bodyend="1281"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a9c1c1317bc0a138099995ef011f0db3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp;pointer, const typename DocumentType::Ch *defaultValue)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename DocumentType::Ch *</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1284" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1284" bodyend="1286"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a409f561a9f9a793f7032b50536f8c526" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt; &gt;),(typename DocumentType::ValueType &amp;)) GetValueByPointerWithDefault(DocumentType &amp;document</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)</type>
        </param>
        <param>
          <type>(typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a41a691f733d842ff55465842e33c9bd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename DocumentType::ValueType &amp;defaultValue)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1302" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1302" bodyend="1304"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; GetValueByPointerWithDefault</definition>
        <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename DocumentType::Ch *defaultValue)</argsstring>
        <name>GetValueByPointerWithDefault</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename DocumentType::Ch *</type>
          <declname>defaultValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1307" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1307" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1aaaf14202ae851a7d3c3db56789b9eab4" prot="public" static="no" const="no" explicit="no" inline="no" refqual="lvalue" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename T2</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, internal::IsGenericValue&lt; T2 &gt; &gt;),(typename DocumentType::ValueType &amp;)) GetValueByPointerWithDefault(DocumentType &amp;document</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <param>
          <type>(internal::OrExpr&lt; internal::IsPointer&lt; T2 &gt;, <ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue</ref>&lt; T2 &gt; &gt;)</type>
        </param>
        <param>
          <type>(typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, typename T::ValueType &amp;value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1327" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1327" bodyend="1329"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1ac28f67a837bdead4e9a0b8bd02dbd4d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const typename T::ValueType &amp;value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1332" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1332" bodyend="1334"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a3187558966f689fdd72120793b39b91a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, const typename T::Ch *value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename T::Ch *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1337" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1337" bodyend="1339"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a562b6d41c46d173c9406c8a9918c68a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], typename T::ValueType &amp;value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1355" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1355" bodyend="1357"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a057fa4cef0e9df7176cfdc87ed895f34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::ValueType &amp;value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1360" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1360" bodyend="1362"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a2e3bd9cdb4a8dc98aaf0580dee70f264" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], const typename T::Ch *value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename T::Ch *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1365" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1365" bodyend="1367"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a4623bdd62153e95fdfac34c3af92a654" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp;pointer, typename DocumentType::ValueType &amp;value)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1385" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1385" bodyend="1387"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a2fc4c2e668dd4e16063d596b2b9b61a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp;pointer, const typename DocumentType::ValueType &amp;value)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1390" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1390" bodyend="1392"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1af988b5e086851ff3645fe2345019ab44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp;pointer, const typename DocumentType::Ch *value)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>const typename DocumentType::Ch *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1395" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1395" bodyend="1397"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a82e5b3f00a10ab6aaac37af78de4d19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], typename DocumentType::ValueType &amp;value)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1413" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1413" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a51a45d6a8d97468b650fc275255b7504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename DocumentType::ValueType &amp;value)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1418" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1418" bodyend="1420"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a46da885c093bb294a323e4c144449d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SetValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], const typename DocumentType::Ch *value)</argsstring>
        <name>SetValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>const typename DocumentType::Ch *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1423" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1423" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SwapValueByPointer</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer, typename T::ValueType &amp;value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SwapValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1443" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1443" bodyend="1445"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a8f368fc6d5e55f6f0a5ea5e2af7ea23f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
        <definition>T::ValueType &amp; SwapValueByPointer</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N], typename T::ValueType &amp;value, typename T::AllocatorType &amp;a)</argsstring>
        <name>SwapValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>typename T::AllocatorType &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1448" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1448" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1abd25c9d96f8e5002f93f998cf11905a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SwapValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const GenericPointer&lt; typename DocumentType::ValueType &gt; &amp;pointer, typename DocumentType::ValueType &amp;value)</argsstring>
        <name>SwapValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1453" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1453" bodyend="1455"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a33c56cdd1034a750112e81df6c4e653a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DocumentType</type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
        <definition>DocumentType::ValueType &amp; SwapValueByPointer</definition>
        <argsstring>(DocumentType &amp;document, const CharType(&amp;source)[N], typename DocumentType::ValueType &amp;value)</argsstring>
        <name>SwapValueByPointer</name>
        <param>
          <type>DocumentType &amp;</type>
          <declname>document</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <param>
          <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1458" column="34" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1458" bodyend="1460"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool EraseValueByPointer</definition>
        <argsstring>(T &amp;root, const GenericPointer&lt; typename T::ValueType &gt; &amp;pointer)</argsstring>
        <name>EraseValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref> &gt; &amp;</type>
          <declname>pointer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1465" column="6" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1465" bodyend="1467"/>
      </memberdef>
      <memberdef kind="function" id="pointer_8h_1a392608401615d4655338ebb295116666" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename CharType</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool EraseValueByPointer</definition>
        <argsstring>(T &amp;root, const CharType(&amp;source)[N])</argsstring>
        <name>EraseValueByPointer</name>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>source</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1470" column="6" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1470" bodyend="1472"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be" prot="public" static="no" strong="no">
        <type></type>
        <name>PointerParseErrorCode</name>
        <enumvalue id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" prot="public">
          <name>kPointerParseErrorNone</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The parse is successful. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77" prot="public">
          <name>kPointerParseErrorTokenMustBeginWithSolidus</name>
          <briefdescription>
<para>A token must begin with a &apos;/&apos;. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" prot="public">
          <name>kPointerParseErrorInvalidEscape</name>
          <briefdescription>
<para>Invalid escape. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" prot="public">
          <name>kPointerParseErrorInvalidPercentEncoding</name>
          <briefdescription>
<para>Invalid percent encoding in URI fragment. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38" prot="public">
          <name>kPointerParseErrorCharacterMustPercentEncode</name>
          <briefdescription>
<para>A character must percent encoded in URI fragment. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Error code of parsing. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" kindref="member">GenericPointer::GenericPointer</ref>, GenericPointer::GetParseErrorCode </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="38" column="1" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="38" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="pointer_8h_1a8db3e2eda83fba7d12ee284fff895262" prot="public" static="no">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt; <ref refid="document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481" kindref="member">Value</ref> &gt;</type>
        <definition>typedef GenericPointer&lt;Value&gt; Pointer</definition>
        <argsstring></argsstring>
        <name>Pointer</name>
        <briefdescription>
<para><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> for Value (UTF-8, default allocator). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1177" column="24" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1177" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pointer_8h_1ae54ef57a7b599e262127c5adcc55960e" prot="public" static="yes" mutable="no">
        <type><ref refid="namespacetest_8cpp_1ad3806c8251fdc7da9618b7e922674ffc" kindref="member">RAPIDJSON_NAMESPACE_BEGIN</ref> const <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>RAPIDJSON_NAMESPACE_BEGIN const SizeType kPointerInvalidIndex</definition>
        <argsstring></argsstring>
        <name>kPointerInvalidIndex</name>
        <initializer>= ~<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>(0)</initializer>
        <briefdescription>
<para>Represents an invalid index in <ref refid="struct_generic_pointer_1_1_token" kindref="compound">GenericPointer::Token</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="32" column="23" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_POINTER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAPIDJSON_POINTER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">document.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="uri_8h" kindref="compound">uri.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="itoa_8h" kindref="compound">internal/itoa.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight></codeline>
<codeline lineno="24"><highlight class="normal">RAPIDJSON_DIAG_OFF(</highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">-</highlight><highlight class="keyword">enum</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight></codeline>
<codeline lineno="27"><highlight class="normal">RAPIDJSON_DIAG_OFF(4512)<sp/></highlight><highlight class="comment">//<sp/>assignment<sp/>operator<sp/>could<sp/>not<sp/>be<sp/>generated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc" kindref="member">RAPIDJSON_NAMESPACE_BEGIN</ref></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>kPointerInvalidIndex<sp/>=<sp/>~SizeType(0);<sp/><sp/></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be" kindref="member">PointerParseErrorCode</ref><sp/>{</highlight></codeline>
<codeline lineno="39" refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77" kindref="member">kPointerParseErrorTokenMustBeginWithSolidus</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42" refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" kindref="member">kPointerParseErrorInvalidEscape</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43" refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38" kindref="member">kPointerParseErrorCharacterMustPercentEncode</ref><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45" refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38" refkind="member"><highlight class="normal">};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="comment">//<sp/>GenericPointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>CrtAllocator&gt;</highlight></codeline>
<codeline lineno="80" refid="class_generic_pointer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82" refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_encoding" kindref="compound">ValueType::EncodingType</ref><sp/><ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">EncodingType</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="83" refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb" kindref="member">ValueType::Ch</ref><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84" refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_uri" kindref="compound">GenericUri&lt;ValueType, Allocator&gt;</ref><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref>;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="struct_generic_pointer_1_1_token" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref><sp/>{</highlight></codeline>
<codeline lineno="101" refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">name</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="102" refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/><ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="103" refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/><ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">index</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"></codeline>
<codeline lineno="108"></codeline>
<codeline lineno="110" refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" kindref="member">GenericPointer</ref>(<ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)<sp/>:<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>(<ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>),<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>(),<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>(),<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>(),<sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>(),<sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" kindref="member">GenericPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)<sp/>:<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>(<ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>),<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>(),<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>(),<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>(),<sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>(),<sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parse(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/><ref refid="namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e" kindref="member">internal::StrLen</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" kindref="member">GenericPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)<sp/>:<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>(<ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>),<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>(),<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>(),<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>(),<sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>(),<sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parse(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>.c_str(),<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>.size());</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" kindref="member">GenericPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)<sp/>:<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>(<ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>),<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>(),<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>(),<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>(),<sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>(),<sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Parse(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>length);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="166" refid="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" kindref="member">GenericPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*<sp/>tokens,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>tokenCount)<sp/>:<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>(),<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>(const_cast&lt;<ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*&gt;(tokens)),<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>(tokenCount),<sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>(),<sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="class_generic_pointer_1a7803645e8f7f349ee09c7d50351e9432" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a7803645e8f7f349ee09c7d50351e9432" kindref="member">GenericPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)<sp/>:<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>(),<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>(),<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>(),<sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>(),<sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>rhs;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="class_generic_pointer_1a4395ca3f5c646e47cc9b93d21d1660ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a4395ca3f5c646e47cc9b93d21d1660ae" kindref="member">GenericPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)<sp/>:<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>(<ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>),<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>(),<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>(),<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>(),<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>(),<sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>(),<sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>)<sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>rhs;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" kindref="member">~GenericPointer</ref>()<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>)<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>user-supplied<sp/>tokens<sp/>constructor<sp/>is<sp/>used,<sp/>nameBuffer_<sp/>is<sp/>nullptr<sp/>and<sp/>tokens_<sp/>are<sp/>not<sp/>deallocated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e" kindref="member">Allocator::Free</ref>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a" kindref="member">RAPIDJSON_DELETE</ref>(<ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="class_generic_pointer_1ae1b46fbcab2c8557825f7be842acbfe7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/><ref refid="class_generic_pointer_1ae1b46fbcab2c8557825f7be842acbfe7" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>delete<sp/>ownAllcator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e" kindref="member">Allocator::Free</ref>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>=<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref><sp/>=<sp/>rhs.<ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>=<sp/>rhs.<ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs.<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CopyFromRaw(rhs);<sp/></highlight><highlight class="comment">//<sp/>Normally<sp/>parsed<sp/>tokens.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>=<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/></highlight><highlight class="comment">//<sp/>User<sp/>supplied<sp/>const<sp/>tokens.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/><ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap</ref>(<ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>other)<sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">internal::Swap</ref>(<ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>,<sp/>other.allocator_);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">internal::Swap</ref>(<ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>,<sp/>other.ownAllocator_);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">internal::Swap</ref>(<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>,<sp/>other.nameBuffer_);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">internal::Swap</ref>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>,<sp/>other.tokens_);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">internal::Swap</ref>(<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>,<sp/>other.tokenCount_);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">internal::Swap</ref>(<ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>,<sp/>other.parseErrorOffset_);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">internal::Swap</ref>(<ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>,<sp/>other.parseErrorCode_);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="class_generic_pointer_1a249c61b5d4bed20c3f8972c57f46a937" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a249c61b5d4bed20c3f8972c57f46a937" kindref="member">swap</ref>(<ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>b)<sp/>RAPIDJSON_NOEXCEPT<sp/>{<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.Swap(b);<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"></codeline>
<codeline lineno="239"></codeline>
<codeline lineno="240"></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>&amp;<sp/>token,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref><sp/>r;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.<ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref><sp/>=<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>*p<sp/>=<sp/>r.CopyFromRaw(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>1,<sp/>token.<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(p,<sp/>token.<ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">name</ref>,<sp/>(token.<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref><sp/>+<sp/>1)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>].<ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">name</ref><sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref><sp/>=<sp/>token.<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>].<ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">index</ref><sp/>=<sp/>token.<ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref><sp/><ref refid="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>name,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref><sp/>token<sp/>=<sp/>{<sp/>name,<sp/>length,<sp/>kPointerInvalidIndex<sp/>};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(token,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="277" refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::NotExpr&lt;internal::IsSame&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">internal::RemoveConst&lt;T&gt;::Type</ref>,<sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>&gt;<sp/>&gt;),<sp/>(<ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>))</highlight></codeline>
<codeline lineno="278" refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>*<sp/>name,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(name,<sp/><ref refid="namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e" kindref="member">internal::StrLen</ref>(name),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/>name,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(name.c_str(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(name.size()),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>index,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[21];</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>end<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>)<sp/>==<sp/>4<sp/>?<sp/><ref refid="namespaceinternal_1a90e3cb218b557548f361e99dc718b4b1" kindref="member">internal::u32toa</ref>(index,<sp/>buffer)<sp/>:<sp/><ref refid="namespaceinternal_1a489150922c0320e4290b455bf3c6e36c" kindref="member">internal::u64toa</ref>(index,<sp/>buffer);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(end<sp/>-<sp/>buffer);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer[length]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Token<sp/>token<sp/>=<sp/>{<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer),<sp/>length,<sp/>index<sp/>};</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(token,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>name[21];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;=<sp/>length;<sp/>i++)</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name[i]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer[i]);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Token<sp/>token<sp/>=<sp/>{<sp/>name,<sp/>length,<sp/>index<sp/>};</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(token,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>token,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token.IsString())</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(token.GetString(),<sp/>token.GetStringLength(),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(token.IsUint64());</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(token.GetUint64()<sp/>&lt;=<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>(~0));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(token.GetUint64()),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"></codeline>
<codeline lineno="337"></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsValid()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>==<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>;<sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetParseErrorOffset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be" kindref="member">PointerParseErrorCode</ref><sp/>GetParseErrorCode()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>&amp;<sp/>GetAllocator()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*<ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"></codeline>
<codeline lineno="354"></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Token*<sp/>GetTokens()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>GetTokenCount()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"></codeline>
<codeline lineno="364"></codeline>
<codeline lineno="365"></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsValid()<sp/>||<sp/>!rhs.IsValid()<sp/>||<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>!=<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].index<sp/>!=<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">index</ref><sp/>||</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref><sp/>!=<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref><sp/>||<sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref><sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>std::memcmp(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">name</ref>,<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>)*<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref>)<sp/>!=<sp/>0))</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator!=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!IsValid())</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!rhs.IsValid())</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>!=<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>&lt;<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].index<sp/>!=<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">index</ref>)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">index</ref><sp/>&lt;<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a0ce571cfe3f3da942a5912bb2cd24dcf" kindref="member">index</ref>;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].length<sp/>!=<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref>)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref><sp/>&lt;<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cmp<sp/>=<sp/>std::memcmp(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].name,<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a8aa9b13bd66addb0c0512cfcae72174c" kindref="member">name</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>)<sp/>*<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>[i].<ref refid="struct_generic_pointer_1_1_token_1a67383574032a3289d34002bb2d95df6d" kindref="member">length</ref>))</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmp<sp/>&lt;<sp/>0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"></codeline>
<codeline lineno="422"></codeline>
<codeline lineno="423"></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputStream&gt;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Stringify(OutputStream&amp;<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Stringify&lt;false,<sp/>OutputStream&gt;(os);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputStream&gt;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StringifyUriFragment(OutputStream&amp;<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Stringify&lt;true,<sp/>OutputStream&gt;(os);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"></codeline>
<codeline lineno="447"></codeline>
<codeline lineno="448"></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Create(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>alreadyExist<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>*<sp/>v<sp/>=<sp/>&amp;root;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>exist<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Token<sp/>*t<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>t<sp/>!=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v-&gt;IsArray()<sp/>&amp;&amp;<sp/>t-&gt;name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>t-&gt;length<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;PushBack(<ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>().Move(),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;((*v)[v-&gt;Size()<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exist<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;index<sp/>==<sp/>kPointerInvalidIndex)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>must<sp/>be<sp/>object<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v-&gt;IsObject())</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;SetObject();<sp/></highlight><highlight class="comment">//<sp/>Change<sp/>to<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>object<sp/>name<sp/>or<sp/>array<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!v-&gt;IsArray()<sp/>&amp;&amp;<sp/>!v-&gt;IsObject())</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;SetArray();<sp/></highlight><highlight class="comment">//<sp/>Change<sp/>to<sp/>Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v-&gt;IsArray())<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())<sp/>{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;Reserve(t-&gt;index<sp/>+<sp/>1,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(t-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;PushBack(<ref refid="class_generic_value" kindref="compound">ValueType</ref>().Move(),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exist<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;((*v)[t-&gt;index]);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_generic_member_iterator" kindref="compound">ValueType::MemberIterator</ref><sp/>m<sp/>=<sp/>v-&gt;FindMember(<ref refid="class_generic_value" kindref="compound">GenericValue&lt;EncodingType&gt;</ref>(<ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(t-&gt;name,<sp/>t-&gt;length)));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>v-&gt;MemberEnd())<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;AddMember(<ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>(t-&gt;name,<sp/>t-&gt;length,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>).Move(),<sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>().Move(),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>v-&gt;MemberEnd();</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;(--m)-&gt;<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;<sp/></highlight><highlight class="comment">//<sp/>Assumes<sp/>AddMember()<sp/>appends<sp/>at<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exist<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;m-&gt;value;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(alreadyExist)</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*alreadyExist<sp/>=<sp/>exist;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*v;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Create(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>alreadyExist<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(document,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>(),<sp/>alreadyExist);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"></codeline>
<codeline lineno="527"></codeline>
<codeline lineno="528"></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>For<sp/>use<sp/>with<sp/>JSON<sp/>pointers<sp/>into<sp/>JSON<sp/>schema<sp/>documents.</highlight></codeline>
<codeline lineno="546"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref><sp/>GetUri(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref>&amp;<sp/>rootUri,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>kIdString[]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;i&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;d&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref><sp/>kIdValue(kIdString,<sp/>2);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref><sp/>base<sp/>=<sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref>(rootUri,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>*<sp/>v<sp/>=<sp/>&amp;root;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Token<sp/>*t<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>t<sp/>!=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v-&gt;GetType())<sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f" kindref="member">kObjectType</ref>:</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>if<sp/>we<sp/>have<sp/>an<sp/>id,<sp/>and<sp/>if<sp/>so<sp/>resolve<sp/>with<sp/>the<sp/>current<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_generic_member_iterator" kindref="compound">ValueType::MemberIterator</ref><sp/>m<sp/>=<sp/>v-&gt;FindMember(kIdValue);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>!=<sp/>v-&gt;MemberEnd()<sp/>&amp;&amp;<sp/>(m-&gt;value).IsString())<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref><sp/>here<sp/>=<sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref>(m-&gt;value,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>).Resolve(base,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>here;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>m<sp/>=<sp/>v-&gt;FindMember(<ref refid="class_generic_value" kindref="compound">GenericValue&lt;EncodingType&gt;</ref>(<ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(t-&gt;name,<sp/>t-&gt;length)));</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>v-&gt;MemberEnd())</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;m-&gt;value;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" kindref="member">kArrayType</ref>:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;index<sp/>==<sp/>kPointerInvalidIndex<sp/>||<sp/>t-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;((*v)[t-&gt;index]);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>unresolved<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unresolvedTokenIndex)</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unresolvedTokenIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t<sp/>-<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref>(<ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref><sp/>GetUri(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">UriType</ref>&amp;<sp/>rootUri,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref><sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetUri(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(root),<sp/>rootUri,<sp/>unresolvedTokenIndex,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"></codeline>
<codeline lineno="592"></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>*<sp/>Get(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>*<sp/>v<sp/>=<sp/>&amp;root;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Token<sp/>*t<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>t<sp/>!=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v-&gt;GetType())<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f" kindref="member">kObjectType</ref>:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_generic_member_iterator" kindref="compound">ValueType::MemberIterator</ref><sp/>m<sp/>=<sp/>v-&gt;FindMember(<ref refid="class_generic_value" kindref="compound">GenericValue&lt;EncodingType&gt;</ref>(<ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(t-&gt;name,<sp/>t-&gt;length)));</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>v-&gt;MemberEnd())</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;m-&gt;value;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" kindref="member">kArrayType</ref>:</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;index<sp/>==<sp/>kPointerInvalidIndex<sp/>||<sp/>t-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;((*v)[t-&gt;index]);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Error:<sp/>unresolved<sp/>token</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(unresolvedTokenIndex)</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*unresolvedTokenIndex<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t<sp/>-<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>);</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>*<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Get(</highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(root),<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"></codeline>
<codeline lineno="649"></codeline>
<codeline lineno="650"></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>GetWithDefault(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alreadyExist;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>v<sp/>=<sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>,<sp/>&amp;alreadyExist);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alreadyExist<sp/>?<sp/>v<sp/>:<sp/>v.CopyFrom(<ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>GetWithDefault(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alreadyExist;</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>v<sp/>=<sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>,<sp/>&amp;alreadyExist);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alreadyExist<sp/>?<sp/>v<sp/>:<sp/>v.SetString(<ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>GetWithDefault(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>alreadyExist;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>v<sp/>=<sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>,<sp/>&amp;alreadyExist);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>alreadyExist<sp/>?<sp/>v<sp/>:<sp/>v.SetString(<ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref><sp/>&gt;),<sp/>(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>GetWithDefault(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref><sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetWithDefault(root,<sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>(<ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>).Move(),<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref><sp/>&gt;),<sp/>(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>GetWithDefault(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref><sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"></codeline>
<codeline lineno="726"></codeline>
<codeline lineno="727"></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)<sp/>=<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>).CopyFrom(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)<sp/>=<sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>).Move();</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)<sp/>=<sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>).Move();</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref><sp/>&gt;),<sp/>(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>Set(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref><sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)<sp/>=<sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>).Move();</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(document)<sp/>=<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(document).CopyFrom(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(document)<sp/>=<sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>()).Move();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>Set(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(document)<sp/>=<sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>()).Move();</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T&gt;</ref><sp/>&gt;),<sp/>(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Set(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref><sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(document)<sp/>=<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"></codeline>
<codeline lineno="808"></codeline>
<codeline lineno="809"></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap</ref>(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root,<sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">ValueType::AllocatorType</ref>&amp;<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(root,<sp/><ref refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" kindref="member">allocator</ref>).<ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap</ref>(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>stackAllocator&gt;</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap</ref>(<ref refid="class_generic_document" kindref="compound">GenericDocument&lt;EncodingType, typename ValueType::AllocatorType, stackAllocator&gt;</ref>&amp;<sp/>document,<sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Create(document).<ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap</ref>(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Erase(<ref refid="class_generic_value" kindref="compound">ValueType</ref>&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>==<sp/>0)<sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>erase<sp/>the<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">ValueType</ref>*<sp/>v<sp/>=<sp/>&amp;root;</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Token*<sp/>last<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/>(<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Token<sp/>*t<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>t<sp/>!=<sp/>last;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v-&gt;GetType())<sp/>{</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f" kindref="member">kObjectType</ref>:</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_generic_member_iterator" kindref="compound">ValueType::MemberIterator</ref><sp/>m<sp/>=<sp/>v-&gt;FindMember(<ref refid="class_generic_value" kindref="compound">GenericValue&lt;EncodingType&gt;</ref>(<ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(t-&gt;name,<sp/>t-&gt;length)));</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>==<sp/>v-&gt;MemberEnd())</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;m-&gt;value;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" kindref="member">kArrayType</ref>:</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(t-&gt;index<sp/>==<sp/>kPointerInvalidIndex<sp/>||<sp/>t-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>&amp;((*v)[t-&gt;index]);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(v-&gt;GetType())<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f" kindref="member">kObjectType</ref>:</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v-&gt;EraseMember(<ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef&lt;Ch&gt;</ref>(last-&gt;name,<sp/>last-&gt;length));</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" kindref="member">kArrayType</ref>:</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(last-&gt;index<sp/>==<sp/>kPointerInvalidIndex<sp/>||<sp/>last-&gt;index<sp/>&gt;=<sp/>v-&gt;Size())</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v-&gt;Erase(v-&gt;Begin()<sp/>+<sp/>last-&gt;index);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>CopyFromRaw(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&amp;<sp/>rhs,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extraToken<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>extraNameBufferSize<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>)<sp/></highlight><highlight class="comment">//<sp/>allocator<sp/>is<sp/>independently<sp/>owned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref><sp/>=<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref><sp/>=<sp/><ref refid="rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b" kindref="member">RAPIDJSON_NEW</ref>(<ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>)();</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nameBufferSize<sp/>=<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/></highlight><highlight class="comment">//<sp/>null<sp/>terminators<sp/>for<sp/>tokens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Token<sp/>*t<sp/>=<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>t<sp/>!=<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>++t)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nameBufferSize<sp/>+=<sp/>t-&gt;length;</highlight></codeline>
<codeline lineno="894"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>=<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>+<sp/>extraToken;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Token<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>-&gt;Malloc(<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Token)<sp/>+<sp/>(nameBufferSize<sp/>+<sp/>extraNameBufferSize)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>)));</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>,<sp/>rhs.<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>,<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Token));</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nameBufferSize<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>,<sp/>rhs.<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>,<sp/>nameBufferSize<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>));</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adjust<sp/>pointers<sp/>to<sp/>name<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ptrdiff_t<sp/>diff<sp/>=<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>-<sp/>rhs.<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Token<sp/>*t<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>t<sp/>!=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/>rhs.<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>++t)</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t-&gt;name<sp/>+=<sp/>diff;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>+<sp/>nameBufferSize;</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NeedPercentEncode(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>c)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!((c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=</highlight><highlight class="charliteral">&apos;Z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>(c<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>c<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;z&apos;</highlight><highlight class="normal">)<sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;-&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;_&apos;</highlight><highlight class="normal"><sp/>||<sp/>c<sp/>==</highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="preprocessor">#ifndef<sp/>__clang__<sp/></highlight><highlight class="comment">//<sp/>-Wdocumentation</highlight></codeline>
<codeline lineno="929"><highlight class="comment"></highlight><highlight class="normal">#endif</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref><sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(<ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>own<sp/>allocator<sp/>if<sp/>user<sp/>did<sp/>not<sp/>supply.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>)</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref><sp/>=<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref><sp/>=<sp/><ref refid="rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b" kindref="member">RAPIDJSON_NEW</ref>(<ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>)();</highlight></codeline>
<codeline lineno="938"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Count<sp/>number<sp/>of<sp/>&apos;/&apos;<sp/>as<sp/>tokenCount</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>s<sp/>=<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>;<sp/>s<sp/>!=<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref><sp/>+<sp/>length;<sp/>s++)<sp/></highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*s<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>++;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Token*<sp/>token<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Token<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>-&gt;Malloc(<ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Token)<sp/>+<sp/>length<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>)));</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>name<sp/>=<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Detect<sp/>if<sp/>it<sp/>is<sp/>a<sp/>URI<sp/>fragment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uriFragment<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uriFragment<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>length<sp/>&amp;&amp;<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77" kindref="member">kPointerParseErrorTokenMustBeginWithSolidus</ref>;</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>[i]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;<sp/></highlight><highlight class="comment">//<sp/>consumes<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;name<sp/>=<sp/>name;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isNumber<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length<sp/>&amp;&amp;<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>c<sp/>=<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>[i];</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uriFragment)<sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decoding<sp/>percent-encoding<sp/>for<sp/>URI<sp/>fragment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PercentDecodeStream<sp/>is(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>[i],<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref><sp/>+<sp/>length);</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_insitu_string_stream" kindref="compound">GenericInsituStringStream&lt;EncodingType&gt;</ref><sp/>os(name);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>begin<sp/>=<sp/>os.PutBegin();</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_transcoder" kindref="compound">Transcoder</ref>&lt;<ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">EncodingType</ref>&gt;().Validate(is,<sp/>os)<sp/>||<sp/>!is.IsValid())<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>os.PutEnd(begin);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>is.Tell()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/>*name;</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>+=<sp/>len;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isNumber<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(NeedPercentEncode(c))<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38" kindref="member">kPointerParseErrorCharacterMustPercentEncode</ref>;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Escaping<sp/>&quot;~0&quot;<sp/>-&gt;<sp/>&apos;~&apos;,<sp/>&quot;~1&quot;<sp/>-&gt;<sp/>&apos;/&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>[i];</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">)<sp/><sp/>c<sp/>=<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" kindref="member">kPointerParseErrorInvalidEscape</ref>;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" kindref="member">kPointerParseErrorInvalidEscape</ref>;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">goto</highlight><highlight class="normal"><sp/>error;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>for<sp/>index:<sp/>all<sp/>of<sp/>characters<sp/>are<sp/>digit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>&lt;<sp/>&apos;0&apos;<sp/>||<sp/>c<sp/>&gt;<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isNumber<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*name++<sp/>=<sp/>c;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;length<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(name<sp/>-<sp/>token-&gt;name);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(token-&gt;length<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isNumber<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*name++<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>Null<sp/>terminator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Second<sp/>check<sp/>for<sp/>index:<sp/>more<sp/>than<sp/>one<sp/>digit<sp/>cannot<sp/>have<sp/>leading<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNumber<sp/>&amp;&amp;<sp/>token-&gt;length<sp/>&gt;<sp/>1<sp/>&amp;&amp;<sp/>token-&gt;name[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isNumber<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>String<sp/>to<sp/>SizeType<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>n<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(isNumber)<sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>token-&gt;length;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>m<sp/>=<sp/>n<sp/>*<sp/>10<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(token-&gt;name[j]<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>n)<sp/>{<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>overflow<sp/>detection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isNumber<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>n<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token-&gt;index<sp/>=<sp/>isNumber<sp/>?<sp/>n<sp/>:<sp/>kPointerInvalidIndex;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>token++;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(name<sp/>&lt;=<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>+<sp/>length);<sp/></highlight><highlight class="comment">//<sp/>Should<sp/>not<sp/>overflow<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea81e2b6fbd1bf4ac890ddb7779265e3a0" kindref="member">kPointerParseErrorNone</ref>;</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>error:</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e" kindref="member">Allocator::Free</ref>(<ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref><sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uriFragment,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputStream&gt;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Stringify(OutputStream&amp;<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(IsValid());</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uriFragment)</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Put(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(Token<sp/>*t<sp/>=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/>t<sp/>!=<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref><sp/>+<sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Put(</highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>t-&gt;length;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>c<sp/>=<sp/>t-&gt;name[j];</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Put(</highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Put(</highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(c<sp/>==<sp/></highlight><highlight class="charliteral">&apos;/&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Put(</highlight><highlight class="charliteral">&apos;~&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Put(</highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(uriFragment<sp/>&amp;&amp;<sp/>NeedPercentEncode(c))<sp/>{<sp/></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Transcode<sp/>to<sp/>UTF8<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">GenericStringStream&lt;typename ValueType::EncodingType&gt;</ref><sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>(&amp;t-&gt;name[j]);</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PercentEncodeStream&lt;OutputStream&gt;<sp/>target(os);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="struct_transcoder" kindref="compound">Transcoder</ref>&lt;<ref refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" kindref="member">EncodingType</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref><sp/>&gt;().Validate(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>target))</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>+=<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>.Tell()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os.Put(c);</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PercentDecodeStream<sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb" kindref="member">ValueType::Ch</ref><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PercentDecodeStream(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>end)<sp/>:<sp/>src_(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>),<sp/>head_(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>),<sp/>end_(end),<sp/>valid_(true)<sp/>{}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>Take()<sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*src_<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal"><sp/>||<sp/>src_<sp/>+<sp/>3<sp/>&gt;<sp/>end_)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>%XY<sp/>triplet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_++;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>2;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c<sp/>&lt;&lt;<sp/>4);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref><sp/>h<sp/>=<sp/>*src_;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(h<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>h<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">)<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c<sp/>+<sp/>h<sp/>-<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>h<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal">)<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c<sp/>+<sp/>h<sp/>-<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(h<sp/>&gt;=<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>&amp;&amp;<sp/>h<sp/>&lt;=<sp/></highlight><highlight class="charliteral">&apos;f&apos;</highlight><highlight class="normal">)<sp/>c<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c<sp/>+<sp/>h<sp/>-<sp/></highlight><highlight class="charliteral">&apos;a&apos;</highlight><highlight class="normal"><sp/>+<sp/>10);</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>src_++;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>Tell()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src_<sp/>-<sp/>head_);<sp/>}</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsValid()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valid_;<sp/>}</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>src_;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>head_;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/>end_;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid_;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputStream&gt;</highlight></codeline>
<codeline lineno="1153" refid="class_generic_pointer_1_1_percent_encode_stream" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_generic_pointer_1_1_percent_encode_stream" kindref="compound">PercentEncodeStream</ref><sp/>{</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1155" refid="class_generic_pointer_1_1_percent_encode_stream_1a8e16af18669e49d0ab528ba0066475d2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1_1_percent_encode_stream_1a8e16af18669e49d0ab528ba0066475d2" kindref="member">PercentEncodeStream</ref>(OutputStream&amp;<sp/>os)<sp/>:<sp/>os_(os)<sp/>{}</highlight></codeline>
<codeline lineno="1156" refid="class_generic_pointer_1_1_percent_encode_stream_1ab932ed9ab00c9e0672755133fc8d8c11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1_1_percent_encode_stream_1ab932ed9ab00c9e0672755133fc8d8c11" kindref="member">Put</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>UTF-8<sp/>must<sp/>be<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>u<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>hexDigits[16]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;0&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;1&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;2&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;3&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;4&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;5&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;6&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;7&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;8&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;9&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;F&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_.Put(</highlight><highlight class="charliteral">&apos;%&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_.Put(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>OutputStream::Ch</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hexDigits[u<sp/>&gt;&gt;<sp/>4]));</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os_.Put(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>OutputStream::Ch</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(hexDigits[u<sp/>&amp;<sp/>15]));</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OutputStream&amp;<sp/>os_;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167" refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" kindref="member">allocator_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1168" refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/><ref refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" kindref="member">ownAllocator_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1169" refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref>*<sp/><ref refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" kindref="member">nameBuffer_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1170" refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref>*<sp/><ref refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" kindref="member">tokens_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1171" refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" kindref="member">tokenCount_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1172" refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" kindref="member">parseErrorOffset_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1173" refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be" kindref="member">PointerParseErrorCode</ref><sp/><ref refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" kindref="member">parseErrorCode_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="1174"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177" refid="pointer_8h_1a8db3e2eda83fba7d12ee284fff895262" refkind="member"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;Value&gt;</ref><sp/><ref refid="pointer_8h_1a8db3e2eda83fba7d12ee284fff895262" kindref="member">Pointer</ref>;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"></codeline>
<codeline lineno="1181"></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1185" refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Create(root,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1190" refid="pointer_8h_1a916460d6eccdc49ecf85e2e6ab9767a4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Create(root,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>allocator<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1197" refid="pointer_8h_1a6dc4215e763f8544057e36582381f66c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Create(document);</highlight></codeline>
<codeline lineno="1199"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1202" refid="pointer_8h_1ae5f22e098e170e51d47beb75812b9a5b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N])<sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Create(document);</highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1209" refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>*<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Get(root,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1214" refid="pointer_8h_1ae0edeb21a41191c864727b3b2ce95131" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>*<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Get(root,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1219" refid="pointer_8h_1a3f324884650614ca6b0ef4765566bc9d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>*<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType<sp/>(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Get(root,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1221"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1224" refid="pointer_8h_1a2683bf19840749f07ceaf659b4cee6d9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>*<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">*<sp/>unresolvedTokenIndex<sp/>=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Get(root,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1231" refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1236" refid="pointer_8h_1a38d0f082d4e54b591cba9ae9c70cf828" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Ch*<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1238"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1244"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1248" refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" refkind="member"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1249" refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" refkind="member"><highlight class="normal"><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/>const<sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt;typename<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>::<ref refid="class_generic_value" kindref="compound">ValueType</ref>&gt;&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/>T2<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/>typename<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1254" refid="pointer_8h_1a04e7d4fa9f18bae987e39e6c1045ae70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1259" refid="pointer_8h_1a25951a749a68964998983a6b4fbebf07" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Ch*<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1271" refid="pointer_8h_1ae26d117fc2f0ef0275825d2a510e8a8d" refkind="member"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1272" refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" refkind="member"><highlight class="normal"><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/>const<sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/>T2<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/>typename<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(root,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>allocator<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1279" refid="pointer_8h_1a6fde94e8be246ff3f73ee62335a0e09c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1284" refid="pointer_8h_1a9c1c1317bc0a138099995ef011f0db3f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType::Ch*<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1296" refid="pointer_8h_1a409f561a9f9a793f7032b50536f8c526" refkind="member"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/>T2<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1299"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1302" refid="pointer_8h_1a41a691f733d842ff55465842e33c9bd3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1307" refid="pointer_8h_1aa818d57b32e8d879ba37871b01a2b9e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType::Ch*<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1319" refid="pointer_8h_1aaaf14202ae851a7d3c3db56789b9eab4" refkind="member"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/>T2<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).GetWithDefault(document,<sp/><ref refid="pointer_8h_1a3db30c1795eb39d4452f8698f4a67f05" kindref="member">defaultValue</ref>);</highlight></codeline>
<codeline lineno="1322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1327" refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1332" refid="pointer_8h_1ac28f67a837bdead4e9a0b8bd02dbd4d8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1337" refid="pointer_8h_1a3187558966f689fdd72120793b39b91a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Ch*<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1350" refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" refkind="member"><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/>const<sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>&lt;typename<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>::<ref refid="class_generic_value" kindref="compound">ValueType</ref>&gt;&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/>T2<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/>typename<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1352"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1355" refid="pointer_8h_1a562b6d41c46d173c9406c8a9918c68a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1360" refid="pointer_8h_1a057fa4cef0e9df7176cfdc87ed895f34" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1362"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1365" refid="pointer_8h_1a2e3bd9cdb4a8dc98aaf0580dee70f264" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Ch*<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>T::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/>T2<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>allocator<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1385" refid="pointer_8h_1a4623bdd62153e95fdfac34c3af92a654" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1390" refid="pointer_8h_1a2fc4c2e668dd4e16063d596b2b9b61a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1395" refid="pointer_8h_1af988b5e086851ff3645fe2345019ab44" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType::Ch*<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1403"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/>T2<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1413" refid="pointer_8h_1a82e5b3f00a10ab6aaac37af78de4d19d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1418" refid="pointer_8h_1a51a45d6a8d97468b650fc275255b7504" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1423" refid="pointer_8h_1a46da885c093bb294a323e4c144449d2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType::Ch*<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1425"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::basic_string&lt;typename<sp/>DocumentType::Ch&gt;&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><ref refid="pointer_8h_1a7eb8633670d0e7df80a9fa3a508dd1d2" kindref="member">RAPIDJSON_DISABLEIF_RETURN</ref>((internal::OrExpr&lt;internal::IsPointer&lt;T2&gt;,<sp/><ref refid="structinternal_1_1_is_generic_value" kindref="compound">internal::IsGenericValue&lt;T2&gt;</ref><sp/>&gt;),<sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;))</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/>T2<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1443" refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Swap(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1448" refid="pointer_8h_1a8f368fc6d5e55f6f0a5ea5e2af7ea23f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">T::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::AllocatorType&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).<ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap</ref>(root,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType&gt;</highlight></codeline>
<codeline lineno="1453" refid="pointer_8h_1abd25c9d96f8e5002f93f998cf11905a3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Swap(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DocumentType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1458" refid="pointer_8h_1a33c56cdd1034a750112e81df6c4e653a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(DocumentType&amp;<sp/>document,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N],<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">DocumentType::ValueType</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename DocumentType::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).<ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap</ref>(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="1460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1465" refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>&amp;<sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">pointer</ref>.Erase(root);</highlight></codeline>
<codeline lineno="1467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CharType,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N&gt;</highlight></codeline>
<codeline lineno="1470" refid="pointer_8h_1a392608401615d4655338ebb295116666" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/>root,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CharType(&amp;<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>)[N])<sp/>{</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;typename T::ValueType&gt;</ref>(<ref refid="pointer_8h_1adb82dfe18535e9a30aa97d275f82bd55" kindref="member">source</ref>,<sp/>N<sp/>-<sp/>1).Erase(root);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1" kindref="member">RAPIDJSON_NAMESPACE_END</ref></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal">RAPIDJSON_DIAG_POP</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>RAPIDJSON_POINTER_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/include/rapidjson/pointer.h"/>
  </compounddef>
</doxygen>
