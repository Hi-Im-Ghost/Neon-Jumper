<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="archivertest_8cpp" kind="file" language="C++">
    <compoundname>archivertest.cpp</compoundname>
    <includes refid="archiver_8h" local="yes">archiver.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="2">
        <label>archiver.h</label>
        <link refid="archiver_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/example/archiver/archivertest.cpp</label>
        <link refid="archivertest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="5">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>string</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_student" prot="public">Student</innerclass>
    <innerclass refid="struct_group" prot="public">Group</innerclass>
    <innerclass refid="class_shape" prot="public">Shape</innerclass>
    <innerclass refid="class_circle" prot="public">Circle</innerclass>
    <innerclass refid="class_box" prot="public">Box</innerclass>
    <innerclass refid="class_canvas" prot="public">Canvas</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_archiver" kindref="compound">Archiver</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
        <definition>Archiver &amp; operator&amp;</definition>
        <argsstring>(Archiver &amp;ar, Student &amp;s)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="struct_student" kindref="compound">Student</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="21" column="10" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="21" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1a07bff4b34ee18e927d9e711b6aef336f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Student &amp;s)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="struct_student" kindref="compound">Student</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="30" column="1" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1a1440a7779ac56f47a3f355ce4a8c7da0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test1</definition>
        <argsstring>()</argsstring>
        <name>test1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="34" column="6" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="34" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1aa9f8d187a44a0d9114d97d40cda5be2b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_archiver" kindref="compound">Archiver</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
        <definition>Archiver &amp; operator&amp;</definition>
        <argsstring>(Archiver &amp;ar, Group &amp;g)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="struct_group" kindref="compound">Group</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="68" column="10" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="68" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1ae256975f96ff58f1b3ba60f4ec716b9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Group &amp;g)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="struct_group" kindref="compound">Group</ref> &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="86" column="1" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1a0283886819c7c140a023582b7269e2d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test2</definition>
        <argsstring>()</argsstring>
        <name>test2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="93" column="6" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="93" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1abbaa4a3bf18ee5cda37be6ec9f43449f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_archiver" kindref="compound">Archiver</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
        <definition>Archiver &amp; operator&amp;</definition>
        <argsstring>(Archiver &amp;ar, Shape &amp;s)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="class_shape" kindref="compound">Shape</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="143" column="10" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="143" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1a6d2ced6c7a4c1268e2751373daeea3ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_archiver" kindref="compound">Archiver</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
        <definition>Archiver &amp; operator&amp;</definition>
        <argsstring>(Archiver &amp;ar, Circle &amp;c)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="class_circle" kindref="compound">Circle</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="169" column="10" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="169" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1aee7a0ca62f7a4898a0fd17926586396a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_archiver" kindref="compound">Archiver</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
        <definition>Archiver &amp; operator&amp;</definition>
        <argsstring>(Archiver &amp;ar, Box &amp;b)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="class_box" kindref="compound">Box</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="195" column="10" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="195" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1ada50dee8547db1b95bb52426b208673b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_archiver" kindref="compound">Archiver</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
        <definition>Archiver &amp; operator&amp;</definition>
        <argsstring>(Archiver &amp;ar, Shape *&amp;shape)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="class_shape" kindref="compound">Shape</ref> *&amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="229" column="10" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="229" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1a47db321e893b59b20080b4c364552844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="class_archiver" kindref="compound">Archiver</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
        <definition>Archiver &amp; operator&amp;</definition>
        <argsstring>(Archiver &amp;ar, Canvas &amp;c)</argsstring>
        <name>operator&amp;</name>
        <param>
          <type><ref refid="class_archiver" kindref="compound">Archiver</ref> &amp;</type>
          <declname>ar</declname>
        </param>
        <param>
          <type><ref refid="class_canvas" kindref="compound">Canvas</ref> &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="245" column="10" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="245" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1a6d0455dd5c30adda100e95f0423c786e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void test3</definition>
        <argsstring>()</argsstring>
        <name>test3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="257" column="6" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="257" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="archivertest_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/archiver/archivertest.cpp" line="283" column="5" bodyfile="src/rapidjson/example/archiver/archivertest.cpp" bodystart="283" bodyend="287"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="archiver_8h" kindref="compound">archiver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="comment">//<sp/>Test1:<sp/>simple<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8" refid="struct_student" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_student" kindref="compound">Student</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_student_1af9168cedbfa5565cf0b20c1a9d3f5c9d" kindref="member">Student</ref>()<sp/>:<sp/><ref refid="struct_student_1a9aeb48a925f370292564def17482f0ec" kindref="member">name</ref>(),<sp/><ref refid="struct_student_1a8fbfd10bbc9707931f6d03819f438f9a" kindref="member">age</ref>(),<sp/><ref refid="struct_student_1a3678b8d546afa6efa6120e22c51f49c3" kindref="member">height</ref>(),<sp/><ref refid="struct_student_1af95604458295ad1c3e8fcb100b44ef57" kindref="member">canSwim</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_student_1af9168cedbfa5565cf0b20c1a9d3f5c9d" kindref="member">Student</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="struct_student_1a9aeb48a925f370292564def17482f0ec" kindref="member">name</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_student_1a8fbfd10bbc9707931f6d03819f438f9a" kindref="member">age</ref>,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_student_1a3678b8d546afa6efa6120e22c51f49c3" kindref="member">height</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_student_1af95604458295ad1c3e8fcb100b44ef57" kindref="member">canSwim</ref>)<sp/>:</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_student_1a9aeb48a925f370292564def17482f0ec" kindref="member">name</ref>(<ref refid="struct_student_1a9aeb48a925f370292564def17482f0ec" kindref="member">name</ref>),<sp/><ref refid="struct_student_1a8fbfd10bbc9707931f6d03819f438f9a" kindref="member">age</ref>(<ref refid="struct_student_1a8fbfd10bbc9707931f6d03819f438f9a" kindref="member">age</ref>),<sp/><ref refid="struct_student_1a3678b8d546afa6efa6120e22c51f49c3" kindref="member">height</ref>(<ref refid="struct_student_1a3678b8d546afa6efa6120e22c51f49c3" kindref="member">height</ref>),<sp/><ref refid="struct_student_1af95604458295ad1c3e8fcb100b44ef57" kindref="member">canSwim</ref>(<ref refid="struct_student_1af95604458295ad1c3e8fcb100b44ef57" kindref="member">canSwim</ref>)</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_student_1a9aeb48a925f370292564def17482f0ec" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="struct_student_1a8fbfd10bbc9707931f6d03819f438f9a" kindref="member">age</ref>;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="struct_student_1a3678b8d546afa6efa6120e22c51f49c3" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_student_1af95604458295ad1c3e8fcb100b44ef57" kindref="member">canSwim</ref>;</highlight></codeline>
<codeline lineno="18"><highlight class="normal">};</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="struct_student" kindref="compound">Student</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.StartObject();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>s.<ref refid="struct_student_1a9aeb48a925f370292564def17482f0ec" kindref="member">name</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;age&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>s.<ref refid="struct_student_1a8fbfd10bbc9707931f6d03819f438f9a" kindref="member">age</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>s.<ref refid="struct_student_1a3678b8d546afa6efa6120e22c51f49c3" kindref="member">height</ref>;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;canSwim&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>s.<ref refid="struct_student_1af95604458295ad1c3e8fcb100b44ef57" kindref="member">canSwim</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar.EndObject();</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal">std::ostream&amp;<sp/><ref refid="archivertest_8cpp_1a07bff4b34ee18e927d9e711b6aef336f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_student" kindref="compound">Student</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>s.<ref refid="struct_student_1a9aeb48a925f370292564def17482f0ec" kindref="member">name</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="struct_student_1a8fbfd10bbc9707931f6d03819f438f9a" kindref="member">age</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="struct_student_1a3678b8d546afa6efa6120e22c51f49c3" kindref="member">height</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>s.<ref refid="struct_student_1af95604458295ad1c3e8fcb100b44ef57" kindref="member">canSwim</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="archivertest_8cpp_1a1440a7779ac56f47a3f355ce4a8c7da0" kindref="member">test1</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Serialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_student" kindref="compound">Student</ref><sp/>s(</highlight><highlight class="stringliteral">&quot;Lua&quot;</highlight><highlight class="normal">,<sp/>9,<sp/>150.5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_writer" kindref="compound">JsonWriter</ref><sp/>writer;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&amp;<sp/>s;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref><sp/>=<sp/>writer.<ref refid="class_json_writer_1a69d5a42b3c5a94f5f05bb48d2489b281" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deserialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_student" kindref="compound">Student</ref><sp/>s;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_reader" kindref="compound">JsonReader</ref><sp/>reader(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>.c_str());</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader<sp/>&amp;<sp/>s;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>s<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="comment">//<sp/>Test2:<sp/>std::vector<sp/>&lt;=&gt;<sp/>JSON<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>can<sp/>map<sp/>a<sp/>JSON<sp/>array<sp/>to<sp/>other<sp/>data<sp/>structures<sp/>as<sp/>well</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="struct_group" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_group" kindref="compound">Group</ref><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_group_1a7b74f9ac68e0504ccf2e2854b7355ff1" kindref="member">Group</ref>()<sp/>:<sp/><ref refid="struct_group_1ab2ad2245f13f8ff8ef5ef0fbebc54eb8" kindref="member">groupName</ref>(),<sp/><ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_group_1ab2ad2245f13f8ff8ef5ef0fbebc54eb8" kindref="member">groupName</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Student&gt;<sp/><ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="struct_group" kindref="compound">Group</ref>&amp;<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.StartObject();</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;groupName&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>g.<ref refid="struct_group_1ab2ad2245f13f8ff8ef5ef0fbebc54eb8" kindref="member">groupName</ref>;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;students&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>studentCount<sp/>=<sp/>g.<ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>.size();</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.StartArray(&amp;studentCount);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ar.IsReader)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>.resize(studentCount);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>studentCount;<sp/>i++)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>g.<ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>[i];</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.EndArray();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar.EndObject();</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">std::ostream&amp;<sp/><ref refid="archivertest_8cpp_1a07bff4b34ee18e927d9e711b6aef336f" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_group" kindref="compound">Group</ref>&amp;<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>g.<ref refid="struct_group_1ab2ad2245f13f8ff8ef5ef0fbebc54eb8" kindref="member">groupName</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Student&gt;::const_iterator<sp/>itr<sp/>=<sp/>g.<ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>.begin();<sp/>itr<sp/>!=<sp/>g.<ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>.end();<sp/>++itr)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>*itr<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="archivertest_8cpp_1a0283886819c7c140a023582b7269e2d0" kindref="member">test2</ref>()<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Serialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_group" kindref="compound">Group</ref><sp/>g;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="struct_group_1ab2ad2245f13f8ff8ef5ef0fbebc54eb8" kindref="member">groupName</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Rainbow&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_student" kindref="compound">Student</ref><sp/>s1(</highlight><highlight class="stringliteral">&quot;Lua&quot;</highlight><highlight class="normal">,<sp/>9,<sp/>150.5,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_student" kindref="compound">Student</ref><sp/>s2(</highlight><highlight class="stringliteral">&quot;Mio&quot;</highlight><highlight class="normal">,<sp/>7,<sp/>120.0,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>.push_back(s1);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g.<ref refid="struct_group_1a2c1ae6c9cfbec5e2c7082a67c2cd2bdc" kindref="member">students</ref>.push_back(s2);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_writer" kindref="compound">JsonWriter</ref><sp/>writer;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&amp;<sp/>g;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref><sp/>=<sp/>writer.<ref refid="class_json_writer_1a69d5a42b3c5a94f5f05bb48d2489b281" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deserialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_group" kindref="compound">Group</ref><sp/>g;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_reader" kindref="compound">JsonReader</ref><sp/>reader(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>.c_str());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader<sp/>&amp;<sp/>g;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>g<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="comment">//<sp/>Test3:<sp/>polymorphism<sp/>&amp;<sp/>friend</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>friendship<sp/>is<sp/>not<sp/>necessary<sp/>but<sp/>make<sp/>things<sp/>simpler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="class_shape" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_shape" kindref="compound">Shape</ref><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_shape_1ac3b9fc48965274893f25b18aa14ba665" kindref="member">~Shape</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_shape_1a8b6867bd77e0c1e3bd323aceb0d97382" kindref="member">GetType</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_shape_1a7dab84dc6f915f8b919954aab44fcd91" kindref="member">Print</ref>(std::ostream&amp;<sp/>os)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shape_1aaa8d87171e65e0d8ba3c5459978992a7" kindref="member">Shape</ref>()<sp/>:<sp/><ref refid="class_shape_1a0974311a6a8584d89c0b0ef54bf39025" kindref="member">x_</ref>(),<sp/><ref refid="class_shape_1a262c653c278f26cf0bd1029279a03923" kindref="member">y_</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_shape_1aaa8d87171e65e0d8ba3c5459978992a7" kindref="member">Shape</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)<sp/>:<sp/><ref refid="class_shape_1a0974311a6a8584d89c0b0ef54bf39025" kindref="member">x_</ref>(x),<sp/><ref refid="class_shape_1a262c653c278f26cf0bd1029279a03923" kindref="member">y_</ref>(y)<sp/>{}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="class_shape_1abbaa4a3bf18ee5cda37be6ec9f43449f" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_shape" kindref="compound">Shape</ref>&amp;<sp/>s);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_shape_1a0974311a6a8584d89c0b0ef54bf39025" kindref="member">x_</ref>,<sp/><ref refid="class_shape_1a262c653c278f26cf0bd1029279a03923" kindref="member">y_</ref>;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_shape" kindref="compound">Shape</ref>&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>s.<ref refid="class_shape_1a0974311a6a8584d89c0b0ef54bf39025" kindref="member">x_</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;y&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>s.<ref refid="class_shape_1a262c653c278f26cf0bd1029279a03923" kindref="member">y_</ref>;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar;</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_circle" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_circle" kindref="compound">Circle</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_shape" kindref="compound">Shape</ref><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_circle_1ad1ecfcfc7bf34529c6a6d6c448bf70fe" kindref="member">Circle</ref>()<sp/>:<sp/><ref refid="class_circle_1a7daf9293b23457177dbc0fadb960e07e" kindref="member">radius_</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_circle_1ad1ecfcfc7bf34529c6a6d6c448bf70fe" kindref="member">Circle</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>radius)<sp/>:<sp/><ref refid="class_shape_1aaa8d87171e65e0d8ba3c5459978992a7" kindref="member">Shape</ref>(x,<sp/>y),<sp/><ref refid="class_circle_1a7daf9293b23457177dbc0fadb960e07e" kindref="member">radius_</ref>(radius)<sp/>{}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_circle_1ae3f30436e645d73e368e8ee55f8d1650" kindref="member">~Circle</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_circle_1aee815ead7d60465de46900a46fcc828f" kindref="member">GetType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Circle&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_circle_1a120f5ea0bee0b2ecf636639d09370ac9" kindref="member">Print</ref>(std::ostream&amp;<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Circle<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_shape_1a0974311a6a8584d89c0b0ef54bf39025" kindref="member">x_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_shape_1a262c653c278f26cf0bd1029279a03923" kindref="member">y_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>radius<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_circle_1a7daf9293b23457177dbc0fadb960e07e" kindref="member">radius_</ref>;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="class_circle_1a6d2ced6c7a4c1268e2751373daeea3ec" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_circle" kindref="compound">Circle</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_circle_1a7daf9293b23457177dbc0fadb960e07e" kindref="member">radius_</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal">};</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_circle" kindref="compound">Circle</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_shape" kindref="compound">Shape</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(c);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;radius&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>c.<ref refid="class_circle_1a7daf9293b23457177dbc0fadb960e07e" kindref="member">radius_</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar;</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="class_box" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_box" kindref="compound">Box</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="class_shape" kindref="compound">Shape</ref><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_box_1aca78d7db44972bfa78d46b7bbc8796f6" kindref="member">Box</ref>()<sp/>:<sp/><ref refid="class_box_1aae8acc7abfcd89d46fcb01562dfc53b0" kindref="member">width_</ref>(),<sp/><ref refid="class_box_1a9b372de7550463c8bad45d61a23bfe5a" kindref="member">height_</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_box_1aca78d7db44972bfa78d46b7bbc8796f6" kindref="member">Box</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>height)<sp/>:<sp/><ref refid="class_shape_1aaa8d87171e65e0d8ba3c5459978992a7" kindref="member">Shape</ref>(x,<sp/>y),<sp/><ref refid="class_box_1aae8acc7abfcd89d46fcb01562dfc53b0" kindref="member">width_</ref>(width),<sp/><ref refid="class_box_1a9b372de7550463c8bad45d61a23bfe5a" kindref="member">height_</ref>(height)<sp/>{}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_box_1a6a5e09398e85d602a046b429062fb9c2" kindref="member">~Box</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="class_box_1adaceada7d5d145b0f23a9826cff7b6a8" kindref="member">GetType</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Box&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_box_1a86242bc341ab7392b64def3a3d08c300" kindref="member">Print</ref>(std::ostream&amp;<sp/>os)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Box<sp/>(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_shape_1a0974311a6a8584d89c0b0ef54bf39025" kindref="member">x_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_shape_1a262c653c278f26cf0bd1029279a03923" kindref="member">y_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>width<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_box_1aae8acc7abfcd89d46fcb01562dfc53b0" kindref="member">width_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>height<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="class_box_1a9b372de7550463c8bad45d61a23bfe5a" kindref="member">height_</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="class_box_1aee7a0ca62f7a4898a0fd17926586396a" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_box" kindref="compound">Box</ref>&amp;<sp/>b);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_box_1aae8acc7abfcd89d46fcb01562dfc53b0" kindref="member">width_</ref>,<sp/><ref refid="class_box_1a9b372de7550463c8bad45d61a23bfe5a" kindref="member">height_</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_box" kindref="compound">Box</ref>&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_shape" kindref="compound">Shape</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(b);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;width&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>b.<ref refid="class_box_1aae8acc7abfcd89d46fcb01562dfc53b0" kindref="member">width_</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;height&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>b.<ref refid="class_box_1a9b372de7550463c8bad45d61a23bfe5a" kindref="member">height_</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202" refid="class_canvas" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_canvas" kindref="compound">Canvas</ref><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_canvas_1a5fce53f080ad6540094901f9768805a8" kindref="member">Canvas</ref>()<sp/>:<sp/><ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_canvas_1a237c4549ad2e27c729cd1f71e89f0fd9" kindref="member">~Canvas</ref>()<sp/>{<sp/><ref refid="class_canvas_1a5cf12ec3c89b0e8b63c50317e056ebc3" kindref="member">Clear</ref>();<sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_canvas_1a5cf12ec3c89b0e8b63c50317e056ebc3" kindref="member">Clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Shape*&gt;::iterator<sp/>itr<sp/>=<sp/><ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>.begin();<sp/>itr<sp/>!=<sp/><ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>.end();<sp/>++itr)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>*itr;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_canvas_1a277e4e60f5ec3ea16efd7ce9e1fb654b" kindref="member">AddShape</ref>(<ref refid="class_shape" kindref="compound">Shape</ref>*<sp/>shape)<sp/>{<sp/><ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>.push_back(shape);<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_canvas_1acf5c8e6bbc490927df36e3c30583800e" kindref="member">Print</ref>(std::ostream&amp;<sp/>os)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;Shape*&gt;::iterator<sp/>itr<sp/>=<sp/><ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>.begin();<sp/>itr<sp/>!=<sp/><ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>.end();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*itr)-&gt;Print(os);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="class_canvas_1a47db321e893b59b20080b4c364552844" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_canvas" kindref="compound">Canvas</ref>&amp;<sp/>c);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;Shape*&gt;<sp/><ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>;</highlight></codeline>
<codeline lineno="226"><highlight class="normal">};</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_shape" kindref="compound">Shape</ref>*&amp;<sp/>shape)<sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>type<sp/>=<sp/>ar.IsReader<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>:<sp/>shape-&gt;<ref refid="class_shape_1a8b6867bd77e0c1e3bd323aceb0d97382" kindref="member">GetType</ref>();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.StartObject();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.Member(</highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">)<sp/>&amp;<sp/>type;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Circle&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ar.IsReader)<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_circle" kindref="compound">Circle</ref>;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_circle" kindref="compound">Circle</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*shape);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Box&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ar.IsReader)<sp/>shape<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_box" kindref="compound">Box</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_box" kindref="compound">Box</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*shape);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar.EndObject();</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Archiver&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/><ref refid="archivertest_8cpp_1a228adf99d45c4d34b9699fddc0050321" kindref="member">operator&amp;</ref>(<ref refid="class_archiver" kindref="compound">Archiver</ref>&amp;<sp/>ar,<sp/><ref refid="class_canvas" kindref="compound">Canvas</ref>&amp;<sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>shapeCount<sp/>=<sp/>c.<ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>.size();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>ar.StartArray(&amp;shapeCount);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ar.IsReader)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="class_canvas_1a5cf12ec3c89b0e8b63c50317e056ebc3" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>.resize(shapeCount);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>shapeCount;<sp/>i++)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ar<sp/>&amp;<sp/>c.<ref refid="class_canvas_1a929b5186aecb2699b6c89d13397ebcaf" kindref="member">shapes_</ref>[i];</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ar.EndArray();</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="archivertest_8cpp_1a6d0455dd5c30adda100e95f0423c786e" kindref="member">test3</ref>()<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Serialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_canvas" kindref="compound">Canvas</ref><sp/>c;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="class_canvas_1a277e4e60f5ec3ea16efd7ce9e1fb654b" kindref="member">AddShape</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_circle" kindref="compound">Circle</ref>(1.0,<sp/>2.0,<sp/>3.0));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="class_canvas_1a277e4e60f5ec3ea16efd7ce9e1fb654b" kindref="member">AddShape</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_box" kindref="compound">Box</ref>(4.0,<sp/>5.0,<sp/>6.0,<sp/>7.0));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_writer" kindref="compound">JsonWriter</ref><sp/>writer;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer<sp/>&amp;<sp/>c;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref><sp/>=<sp/>writer.<ref refid="class_json_writer_1a69d5a42b3c5a94f5f05bb48d2489b281" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Deserialize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_canvas" kindref="compound">Canvas</ref><sp/>c;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_json_reader" kindref="compound">JsonReader</ref><sp/>reader(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>.c_str());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader<sp/>&amp;<sp/>c;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c.<ref refid="class_canvas_1acf5c8e6bbc490927df36e3c30583800e" kindref="member">Print</ref>(std::cout);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="archivertest_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="archivertest_8cpp_1a1440a7779ac56f47a3f355ce4a8c7da0" kindref="member">test1</ref>();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="archivertest_8cpp_1a0283886819c7c140a023582b7269e2d0" kindref="member">test2</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="archivertest_8cpp_1a6d0455dd5c30adda100e95f0423c786e" kindref="member">test3</ref>();</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/example/archiver/archivertest.cpp"/>
  </compounddef>
</doxygen>
