<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="class_generic_pointer" kind="class" language="C++" prot="public">
    <compoundname>GenericPointer</compoundname>
    <includes refid="pointer_8h" local="no">pointer.h</includes>
    <innerclass refid="class_generic_pointer_1_1_percent_encode_stream" prot="public">GenericPointer::PercentEncodeStream</innerclass>
    <innerclass refid="struct_generic_pointer_1_1_token" prot="public">GenericPointer::Token</innerclass>
    <templateparamlist>
      <param>
        <type>typename <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref></type>
      </param>
      <param>
        <type>typename <ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref></type>
        <defval><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="user-defined">
      <header>Append token</header>
      <memberdef kind="variable" id="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" prot="public" static="no" mutable="no">
        <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
        <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::allocator</definition>
        <argsstring></argsstring>
        <name>allocator</name>
        <qualifiedname>GenericPointer::allocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="278" column="17" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" prot="public" static="no" mutable="no">
        <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
        <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::allocator_</definition>
        <argsstring></argsstring>
        <name>allocator_</name>
        <qualifiedname>GenericPointer::allocator_</qualifiedname>
        <briefdescription>
<para>The current allocator. It is either user-supplied or equal to ownAllocator_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1167" column="15" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" prot="public" static="no" mutable="no">
        <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
        <definition>Allocator* GenericPointer&lt; ValueType, Allocator &gt;::ownAllocator_</definition>
        <argsstring></argsstring>
        <name>ownAllocator_</name>
        <qualifiedname>GenericPointer::ownAllocator_</qualifiedname>
        <briefdescription>
<para>Allocator owned by this Pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1168" column="15" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" prot="public" static="no" mutable="no">
        <type><ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref> *</type>
        <definition>Ch* GenericPointer&lt; ValueType, Allocator &gt;::nameBuffer_</definition>
        <argsstring></argsstring>
        <name>nameBuffer_</name>
        <qualifiedname>GenericPointer::nameBuffer_</qualifiedname>
        <briefdescription>
<para>A buffer containing all names in tokens. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1169" column="8" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" prot="public" static="no" mutable="no">
        <type><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> *</type>
        <definition>Token* GenericPointer&lt; ValueType, Allocator &gt;::tokens_</definition>
        <argsstring></argsstring>
        <name>tokens_</name>
        <qualifiedname>GenericPointer::tokens_</qualifiedname>
        <briefdescription>
<para>A list of tokens. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1170" column="11" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t GenericPointer&lt; ValueType, Allocator &gt;::tokenCount_</definition>
        <argsstring></argsstring>
        <name>tokenCount_</name>
        <qualifiedname>GenericPointer::tokenCount_</qualifiedname>
        <briefdescription>
<para>Number of tokens in tokens_. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1171" column="12" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t GenericPointer&lt; ValueType, Allocator &gt;::parseErrorOffset_</definition>
        <argsstring></argsstring>
        <name>parseErrorOffset_</name>
        <qualifiedname>GenericPointer::parseErrorOffset_</qualifiedname>
        <briefdescription>
<para>Offset in code unit when parsing fail. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1172" column="12" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" prot="public" static="no" mutable="no">
        <type><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1gacb2e274f33e54d91b96e9883a99a98be" kindref="member">PointerParseErrorCode</ref></type>
        <definition>PointerParseErrorCode GenericPointer&lt; ValueType, Allocator &gt;::parseErrorCode_</definition>
        <argsstring></argsstring>
        <name>parseErrorCode_</name>
        <qualifiedname>GenericPointer::parseErrorCode_</qualifiedname>
        <briefdescription>
<para>Parsing error code. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="1173" column="27" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="1173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref></type>
        <definition>GenericPointer GenericPointer&lt; ValueType, Allocator &gt;::Append</definition>
        <argsstring>(const Token &amp;token, Allocator *allocator=0) const</argsstring>
        <name>Append</name>
        <qualifiedname>GenericPointer::Append</qualifiedname>
        <param>
          <type>const <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> &amp;</type>
          <declname>token</declname>
        </param>
        <param>
          <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Append a token and return a new Pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>token</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> to be appended. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the newly return Pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new Pointer with appended token. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="247" column="20" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="247" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref></type>
        <definition>GenericPointer GenericPointer&lt; ValueType, Allocator &gt;::Append</definition>
        <argsstring>(const Ch *name, SizeType length, Allocator *allocator=0) const</argsstring>
        <name>Append</name>
        <qualifiedname>GenericPointer::Append</qualifiedname>
        <param>
          <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref> *</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Append a name token with length, and return a new Pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name to be appended. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of name. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the newly return Pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new Pointer with appended token. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="265" column="20" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="265" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::RAPIDJSON_DISABLEIF_RETURN</definition>
        <argsstring>((internal::NotExpr&lt; internal::IsSame&lt; typename internal::RemoveConst&lt; T &gt;::Type, Ch &gt; &gt;),(GenericPointer)) Append(T *name</argsstring>
        <name>RAPIDJSON_DISABLEIF_RETURN</name>
        <qualifiedname>GenericPointer::RAPIDJSON_DISABLEIF_RETURN</qualifiedname>
        <param>
          <type>(internal::NotExpr&lt; internal::IsSame&lt; typename internal::RemoveConst&lt; <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &gt;<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">::Type</ref>, <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref> &gt; &gt;)</type>
        </param>
        <param>
          <type>(<ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref>)</type>
        </param>
        <briefdescription>
<para>Append a name token without length, and return a new Pointer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name (const Ch*) to be appended. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocator for the newly return Pointer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A new Pointer with appended token. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="277" column="5"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Constructors and destructor.</header>
      <memberdef kind="function" id="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(Allocator *allocator=0)</argsstring>
        <name>GenericPointer</name>
        <qualifiedname>GenericPointer::GenericPointer</qualifiedname>
        <param>
          <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Default constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="110" column="5" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const Ch *source, Allocator *allocator=0)</argsstring>
        <name>GenericPointer</name>
        <qualifiedname>GenericPointer::GenericPointer</qualifiedname>
        <param>
          <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor that parses a string or URI fragment representation. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A null-terminated, string or URI fragment representation of JSON pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied allocator for this pointer. If no allocator is provided, it creates a self-owned one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="117" column="14" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="117" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const Ch *source, size_t length, Allocator *allocator=0)</argsstring>
        <name>GenericPointer</name>
        <qualifiedname>GenericPointer::GenericPointer</qualifiedname>
        <param>
          <type>const <ref refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" kindref="member">Ch</ref> *</type>
          <declname>source</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
          <declname>allocator</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Constructor that parses a string or URI fragment representation, with length of the source string. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>source</parametername>
</parameternamelist>
<parameterdescription>
<para>A string or URI fragment representation of JSON pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of source. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>User supplied allocator for this pointer. If no allocator is provided, it creates a self-owned one. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Slightly faster than the overload without length. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="140" column="5" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const Token *tokens, size_t tokenCount)</argsstring>
        <name>GenericPointer</name>
        <qualifiedname>GenericPointer::GenericPointer</qualifiedname>
        <param>
          <type>const <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Token</ref> *</type>
          <declname>tokens</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>tokenCount</declname>
        </param>
        <briefdescription>
<para>Constructor with user-supplied tokens. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor let user supplies const array of tokens. This prevents the parsing process and eliminates allocation. This is preferred for memory constrained environments.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tokens</parametername>
</parameternamelist>
<parameterdescription>
<para>An constant array of tokens representing the JSON pointer. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tokenCount</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of tokens.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<bold>Example</bold> <programlisting><codeline><highlight class="preprocessor">#define<sp/>NAME(s)<sp/>{<sp/>s,<sp/>sizeof(s)<sp/>/<sp/>sizeof(s[0])<sp/>-<sp/>1,<sp/>kPointerInvalidIndex<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INDEX(i)<sp/>{<sp/>#i,<sp/>sizeof(#i)<sp/>-<sp/>1,<sp/>i<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Pointer::Token</ref><sp/><ref refid="pointertest_8cpp_1af08cb0118b0188324a43aae822fe37fe" kindref="member">kTokens</ref>[]<sp/>=<sp/>{<sp/><ref refid="pointertest_8cpp_1a59c7737920212dcb3bb9df58d7062de4" kindref="member">NAME</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointertest_8cpp_1aa5fad23b2a5eed790e6661e896a506b7" kindref="member">INDEX</ref>(123)<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(<ref refid="pointertest_8cpp_1af08cb0118b0188324a43aae822fe37fe" kindref="member">kTokens</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="pointertest_8cpp_1af08cb0118b0188324a43aae822fe37fe" kindref="member">kTokens</ref>)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="pointertest_8cpp_1af08cb0118b0188324a43aae822fe37fe" kindref="member">kTokens</ref>[0]));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to<sp/>static<sp/>const<sp/>Pointer<sp/>p(&quot;/foo/123&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INDEX</highlight></codeline>
</programlisting> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="166" column="5" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="166" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a7803645e8f7f349ee09c7d50351e9432" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const GenericPointer &amp;rhs)</argsstring>
        <name>GenericPointer</name>
        <qualifiedname>GenericPointer::GenericPointer</qualifiedname>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="169" column="5" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="169" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1a4395ca3f5c646e47cc9b93d21d1660ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::GenericPointer</definition>
        <argsstring>(const GenericPointer &amp;rhs, Allocator *allocator)</argsstring>
        <name>GenericPointer</name>
        <qualifiedname>GenericPointer::GenericPointer</qualifiedname>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> *</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
<para>Copy constructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="174" column="5" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="174" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericPointer&lt; ValueType, Allocator &gt;::~GenericPointer</definition>
        <argsstring>()</argsstring>
        <name>~GenericPointer</name>
        <qualifiedname>GenericPointer::~GenericPointer</qualifiedname>
        <briefdescription>
<para>Destructor. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="179" column="5" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1ae1b46fbcab2c8557825f7be842acbfe7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
        <definition>GenericPointer &amp; GenericPointer&lt; ValueType, Allocator &gt;::operator=</definition>
        <argsstring>(const GenericPointer &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>GenericPointer::operator=</qualifiedname>
        <param>
          <type>const <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="186" column="20" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="186" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="class_generic_pointer_1af148818f7c2b10243221953d887044c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
        <definition>GenericPointer &amp; GenericPointer&lt; ValueType, Allocator &gt;::Swap</definition>
        <argsstring>(GenericPointer &amp;other) RAPIDJSON_NOEXCEPT</argsstring>
        <name>Swap</name>
        <qualifiedname>GenericPointer::Swap</qualifiedname>
        <param>
          <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Swap the content of this pointer with an other. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to swap with. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Constant complexity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="211" column="20" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="211" bodyend="220"/>
      </memberdef>
      <memberdef kind="friend" id="class_generic_pointer_1a249c61b5d4bed20c3f8972c57f46a937" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void swap</definition>
        <argsstring>(GenericPointer &amp;a, GenericPointer &amp;b) RAPIDJSON_NOEXCEPT</argsstring>
        <name>swap</name>
        <qualifiedname>GenericPointer::swap</qualifiedname>
        <param>
          <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>free-standing swap function helper </para>
        </briefdescription>
        <detaileddescription>
<para>Helper function to enable support for common swap implementation pattern based on <computeroutput>std::swap:</computeroutput> <programlisting><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer_1a249c61b5d4bed20c3f8972c57f46a937" kindref="member">swap</ref>(MyClass&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/>MyClass&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::swap;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer_1a249c61b5d4bed20c3f8972c57f46a937" kindref="member">swap</ref>(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.pointer,<sp/>b.pointer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> <simplesect kind="see"><para><ref refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" kindref="member">Swap()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="234" column="24" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="234" bodyend="234"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" prot="public" static="no">
        <type><ref refid="class_generic_value_1a28c2cb8d04d12566c1af37597a46d209" kindref="member">ValueType::EncodingType</ref></type>
        <definition>typedef ValueType::EncodingType GenericPointer&lt; ValueType, Allocator &gt;::EncodingType</definition>
        <argsstring></argsstring>
        <name>EncodingType</name>
        <qualifiedname>GenericPointer::EncodingType</qualifiedname>
        <briefdescription>
<para>Encoding type from Value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="82" column="46" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" prot="public" static="no">
        <type><ref refid="class_generic_value_1ade0e0ce64ccd5d852da57a35e720bafb" kindref="member">ValueType::Ch</ref></type>
        <definition>typedef ValueType::Ch GenericPointer&lt; ValueType, Allocator &gt;::Ch</definition>
        <argsstring></argsstring>
        <name>Ch</name>
        <qualifiedname>GenericPointer::Ch</qualifiedname>
        <briefdescription>
<para>Character type from Value. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="83" column="36" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" prot="public" static="no">
        <type><ref refid="class_generic_uri" kindref="compound">GenericUri</ref>&lt; <ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>, <ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref> &gt;</type>
        <definition>typedef GenericUri&lt;ValueType, Allocator&gt; GenericPointer&lt; ValueType, Allocator &gt;::UriType</definition>
        <argsstring></argsstring>
        <name>UriType</name>
        <qualifiedname>GenericPointer::UriType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/pointer.h" line="84" column="24" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a JSON Pointer. Use Pointer for <ref refid="struct_u_t_f8" kindref="compound">UTF8</ref> encoding and default allocator. </para>
    </briefdescription>
    <detaileddescription>
<para>This class implements RFC 6901 &quot;JavaScript Object Notation (JSON) Pointer&quot; (<ulink url="https://tools.ietf.org/html/rfc6901">https://tools.ietf.org/html/rfc6901</ulink>).</para>
<para>A JSON pointer is for identifying a specific value in a JSON document (<ref refid="class_generic_document" kindref="compound">GenericDocument</ref>). It can simplify coding of DOM tree manipulation, because it can access multiple-level depth of DOM tree with single API call.</para>
<para>After it parses a string representation (e.g. &quot;/foo/0&quot; or URI fragment representation (e.g. &quot;#/foo/0&quot;) into its internal representation (tokens), it can be used to resolve a specific value in multiple documents, or sub-tree of documents.</para>
<para>Contrary to <ref refid="class_generic_value" kindref="compound">GenericValue</ref>, Pointer can be copy constructed and copy assigned. Apart from assignment, a Pointer cannot be modified after construction.</para>
<para>Although Pointer is very convenient, please aware that constructing Pointer involves parsing and dynamic memory allocation. A special constructor with user- supplied tokens eliminates these.</para>
<para><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> depends on <ref refid="class_generic_document" kindref="compound">GenericDocument</ref> and <ref refid="class_generic_value" kindref="compound">GenericValue</ref>.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>ValueType</parametername>
</parameternamelist>
<parameterdescription>
<para>The value type of the DOM tree. E.g. <ref refid="class_generic_value" kindref="compound">GenericValue</ref>&lt;UTF8&lt;&gt; &gt; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Allocator</parametername>
</parameternamelist>
<parameterdescription>
<para>The allocator type for allocating memory for internal representation.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para><ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> uses same encoding of ValueType. However, Allocator of <ref refid="class_generic_pointer" kindref="compound">GenericPointer</ref> is independent of Allocator of Value. </para>
</simplesect>
</para>
    </detaileddescription>
    <collaborationgraph>
      <node id="2">
        <label>CrtAllocator</label>
        <link refid="class_crt_allocator"/>
      </node>
      <node id="3">
        <label>GenericPointer&lt; ValueType, Allocator &gt;::Token</label>
        <link refid="struct_generic_pointer_1_1_token"/>
      </node>
      <node id="1">
        <label>GenericPointer&lt; ValueType, Allocator &gt;</label>
        <link refid="class_generic_pointer"/>
        <childnode refid="2" relation="usage">
          <edgelabel>allocator</edgelabel>
          <edgelabel>allocator_</edgelabel>
          <edgelabel>ownAllocator_</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>tokens_</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>parseErrorOffset_</edgelabel>
          <edgelabel>tokenCount_</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>size_t</label>
      </node>
    </collaborationgraph>
    <location file="src/rapidjson/include/rapidjson/pointer.h" line="80" column="1" bodyfile="src/rapidjson/include/rapidjson/pointer.h" bodystart="80" bodyend="1174"/>
    <listofallmembers>
      <member refid="class_generic_pointer_1aeb61ba8e67260b43090791eeca8b90e0" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>allocator</name></member>
      <member refid="class_generic_pointer_1a331cffeec161b80ea18ac3f1562851bf" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>allocator_</name></member>
      <member refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Append</name></member>
      <member refid="class_generic_pointer_1a9f8a1711f5b8e0d951c25c6c65326f77" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Append</name></member>
      <member refid="class_generic_pointer_1ab292356c11b4015c98d21b966b11f285" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Ch</name></member>
      <member refid="class_generic_pointer_1a4b802da797a7a0b615fd9611cedb7c3b" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>EncodingType</name></member>
      <member refid="class_generic_pointer_1a5d85b7dc82719643e8f7adccd5a74fbe" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a4ad549b8a826c3c2dedf03fcc07be9b0" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a9c05684ea95306aac7626e70cb3946cc" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a524a9921eff68f389a817a20ca7f1d84" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a7803645e8f7f349ee09c7d50351e9432" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a4395ca3f5c646e47cc9b93d21d1660ae" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>GenericPointer</name></member>
      <member refid="class_generic_pointer_1a2fd627c663483ad08e4f26707ea5ad86" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>nameBuffer_</name></member>
      <member refid="class_generic_pointer_1ae1b46fbcab2c8557825f7be842acbfe7" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>operator=</name></member>
      <member refid="class_generic_pointer_1a99b51c07419ee17d57e97774d8ee63ab" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>ownAllocator_</name></member>
      <member refid="class_generic_pointer_1a8898ec432dc40b28f79db78dc4ca83e0" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>parseErrorCode_</name></member>
      <member refid="class_generic_pointer_1ad103ed62e206319f1f0f4aa271866e37" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>parseErrorOffset_</name></member>
      <member refid="class_generic_pointer_1aaf4d7d852098878d24188d134182d42f" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>RAPIDJSON_DISABLEIF_RETURN</name></member>
      <member refid="class_generic_pointer_1af148818f7c2b10243221953d887044c6" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>Swap</name></member>
      <member refid="class_generic_pointer_1a249c61b5d4bed20c3f8972c57f46a937" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>swap</name></member>
      <member refid="class_generic_pointer_1a7051cf59af6622542a050bd0ff0340f8" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>tokenCount_</name></member>
      <member refid="class_generic_pointer_1a997793c66ea1a264089c37c8731eb138" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>tokens_</name></member>
      <member refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>UriType</name></member>
      <member refid="class_generic_pointer_1acf3eb2f7c4ebf9256f638aafa17534cb" prot="public" virt="non-virtual"><scope>GenericPointer</scope><name>~GenericPointer</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
