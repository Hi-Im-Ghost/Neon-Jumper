<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="faq_8md" kind="file" language="Markdown">
    <compoundname>faq.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>FAQ</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[TOC]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>General</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>What<sp/>is<sp/>RapidJSON?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>is<sp/>a<sp/>C++<sp/>library<sp/>for<sp/>parsing<sp/>and<sp/>generating<sp/>JSON.<sp/>You<sp/>may<sp/>check<sp/>all<sp/>[features](doc/features.md)<sp/>of<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>Why<sp/>is<sp/>RapidJSON<sp/>named<sp/>so?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>It<sp/>is<sp/>inspired<sp/>by<sp/>[RapidXML](http://rapidxml.sourceforge.net/),<sp/>which<sp/>is<sp/>a<sp/>fast<sp/>XML<sp/>DOM<sp/>parser.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>Is<sp/>RapidJSON<sp/>similar<sp/>to<sp/>RapidXML?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>borrowed<sp/>some<sp/>designs<sp/>of<sp/>RapidXML,<sp/>including<sp/>*in<sp/>situ*<sp/>parsing,<sp/>header-only<sp/>library.<sp/>But<sp/>the<sp/>two<sp/>APIs<sp/>are<sp/>completely<sp/>different.<sp/>Also<sp/>RapidJSON<sp/>provide<sp/>many<sp/>features<sp/>that<sp/>are<sp/>not<sp/>in<sp/>RapidXML.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>Is<sp/>RapidJSON<sp/>free?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes,<sp/>it<sp/>is<sp/>free<sp/>under<sp/>MIT<sp/>license.<sp/>It<sp/>can<sp/>be<sp/>used<sp/>in<sp/>commercial<sp/>applications.<sp/>Please<sp/>check<sp/>the<sp/>details<sp/>in<sp/>[license.txt](https://github.com/Tencent/rapidjson/blob/master/license.txt).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">5.<sp/>Is<sp/>RapidJSON<sp/>small?<sp/>What<sp/>are<sp/>its<sp/>dependencies?<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes.<sp/>A<sp/>simple<sp/>executable<sp/>which<sp/>parses<sp/>a<sp/>JSON<sp/>and<sp/>prints<sp/>its<sp/>statistics<sp/>is<sp/>less<sp/>than<sp/>30KB<sp/>on<sp/>Windows.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>depends<sp/>on<sp/>C++<sp/>standard<sp/>library<sp/>only.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">6.<sp/>How<sp/>to<sp/>install<sp/>RapidJSON?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Check<sp/>[Installation<sp/>section](https://miloyip.github.io/rapidjson/).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">7.<sp/>Can<sp/>RapidJSON<sp/>run<sp/>on<sp/>my<sp/>platform?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>has<sp/>been<sp/>tested<sp/>in<sp/>many<sp/>combinations<sp/>of<sp/>operating<sp/>systems,<sp/>compilers<sp/>and<sp/>CPU<sp/>architecture<sp/>by<sp/>the<sp/>community.<sp/>But<sp/>we<sp/>cannot<sp/>ensure<sp/>that<sp/>it<sp/>can<sp/>be<sp/>run<sp/>on<sp/>your<sp/>particular<sp/>platform.<sp/>Building<sp/>and<sp/>running<sp/>the<sp/>unit<sp/>test<sp/>suite<sp/>will<sp/>give<sp/>you<sp/>the<sp/>answer.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">8.<sp/>Does<sp/>RapidJSON<sp/>support<sp/>C++03?<sp/>C++11?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>was<sp/>firstly<sp/>implemented<sp/>for<sp/>C++03.<sp/>Later<sp/>it<sp/>added<sp/>optional<sp/>support<sp/>of<sp/>some<sp/>C++11<sp/>features<sp/>(e.g.,<sp/>move<sp/>constructor,<sp/>`noexcept`).<sp/>RapidJSON<sp/>shall<sp/>be<sp/>compatible<sp/>with<sp/>C++03<sp/>or<sp/>C++11<sp/>compliant<sp/>compilers.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">9.<sp/>Does<sp/>RapidJSON<sp/>really<sp/>work<sp/>in<sp/>real<sp/>applications?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes.<sp/>It<sp/>is<sp/>deployed<sp/>in<sp/>both<sp/>client<sp/>and<sp/>server<sp/>real<sp/>applications.<sp/>A<sp/>community<sp/>member<sp/>reported<sp/>that<sp/>RapidJSON<sp/>in<sp/>their<sp/>system<sp/>parses<sp/>50<sp/>million<sp/>JSONs<sp/>daily.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">10.<sp/>How<sp/>RapidJSON<sp/>is<sp/>tested?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>contains<sp/>a<sp/>unit<sp/>test<sp/>suite<sp/>for<sp/>automatic<sp/>testing.<sp/>[Travis](https://travis-ci.org/Tencent/rapidjson/)(for<sp/>Linux)<sp/>and<sp/>[AppVeyor](https://ci.appveyor.com/project/Tencent/rapidjson/)(for<sp/>Windows)<sp/>will<sp/>compile<sp/>and<sp/>run<sp/>the<sp/>unit<sp/>test<sp/>suite<sp/>for<sp/>all<sp/>modifications.<sp/>The<sp/>test<sp/>process<sp/>also<sp/>uses<sp/>Valgrind<sp/>(in<sp/>Linux)<sp/>to<sp/>detect<sp/>memory<sp/>leaks.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">11.<sp/>Is<sp/>RapidJSON<sp/>well<sp/>documented?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>provides<sp/>user<sp/>guide<sp/>and<sp/>API<sp/>documentationn.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">12.<sp/>Are<sp/>there<sp/>alternatives?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes,<sp/>there<sp/>are<sp/>a<sp/>lot<sp/>alternatives.<sp/>For<sp/>example,<sp/>[nativejson-benchmark](https://github.com/miloyip/nativejson-benchmark)<sp/>has<sp/>a<sp/>listing<sp/>of<sp/>open-source<sp/>C/C++<sp/>JSON<sp/>libraries.<sp/>[json.org](http://www.json.org/)<sp/>also<sp/>has<sp/>a<sp/>list.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>JSON</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>What<sp/>is<sp/>JSON?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>JSON<sp/>(JavaScript<sp/>Object<sp/>Notation)<sp/>is<sp/>a<sp/>lightweight<sp/>data-interchange<sp/>format.<sp/>It<sp/>uses<sp/>human<sp/>readable<sp/>text<sp/>format.<sp/>More<sp/>details<sp/>of<sp/>JSON<sp/>can<sp/>be<sp/>referred<sp/>to<sp/>[RFC7159](http://www.ietf.org/rfc/rfc7159.txt)<sp/>and<sp/>[ECMA-404](http://www.ecma-international.org/publications/standards/Ecma-404.htm).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>What<sp/>are<sp/>applications<sp/>of<sp/>JSON?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>JSON<sp/>are<sp/>commonly<sp/>used<sp/>in<sp/>web<sp/>applications<sp/>for<sp/>transferring<sp/>structured<sp/>data.<sp/>It<sp/>is<sp/>also<sp/>used<sp/>as<sp/>a<sp/>file<sp/>format<sp/>for<sp/>data<sp/>persistence.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>Does<sp/>RapidJSON<sp/>conform<sp/>to<sp/>the<sp/>JSON<sp/>standard?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes.<sp/>RapidJSON<sp/>is<sp/>fully<sp/>compliance<sp/>with<sp/>[RFC7159](http://www.ietf.org/rfc/rfc7159.txt)<sp/>and<sp/>[ECMA-404](http://www.ecma-international.org/publications/standards/Ecma-404.htm).<sp/>It<sp/>can<sp/>handle<sp/>corner<sp/>cases,<sp/>such<sp/>as<sp/>supporting<sp/>null<sp/>character<sp/>and<sp/>surrogate<sp/>pairs<sp/>in<sp/>JSON<sp/>strings.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>Does<sp/>RapidJSON<sp/>support<sp/>relaxed<sp/>syntax?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Currently<sp/>no.<sp/>RapidJSON<sp/>only<sp/>support<sp/>the<sp/>strict<sp/>standardized<sp/>format.<sp/>Support<sp/>on<sp/>related<sp/>syntax<sp/>is<sp/>under<sp/>discussion<sp/>in<sp/>this<sp/>[issue](https://github.com/Tencent/rapidjson/issues/36).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>DOM<sp/>and<sp/>SAX</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>What<sp/>is<sp/>DOM<sp/>style<sp/>API?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Document<sp/>Object<sp/>Model<sp/>(DOM)<sp/>is<sp/>an<sp/>in-memory<sp/>representation<sp/>of<sp/>JSON<sp/>for<sp/>query<sp/>and<sp/>manipulation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>What<sp/>is<sp/>SAX<sp/>style<sp/>API?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>SAX<sp/>is<sp/>an<sp/>event-driven<sp/>API<sp/>for<sp/>parsing<sp/>and<sp/>generation.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>Should<sp/>I<sp/>choose<sp/>DOM<sp/>or<sp/>SAX?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>DOM<sp/>is<sp/>easy<sp/>for<sp/>query<sp/>and<sp/>manipulation.<sp/>SAX<sp/>is<sp/>very<sp/>fast<sp/>and<sp/>memory-saving<sp/>but<sp/>often<sp/>more<sp/>difficult<sp/>to<sp/>be<sp/>applied.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>What<sp/>is<sp/>*in<sp/>situ*<sp/>parsing?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>*in<sp/>situ*<sp/>parsing<sp/>decodes<sp/>the<sp/>JSON<sp/>strings<sp/>directly<sp/>into<sp/>the<sp/>input<sp/>JSON.<sp/>This<sp/>is<sp/>an<sp/>optimization<sp/>which<sp/>can<sp/>reduce<sp/>memory<sp/>consumption<sp/>and<sp/>improve<sp/>performance,<sp/>but<sp/>the<sp/>input<sp/>JSON<sp/>will<sp/>be<sp/>modified.<sp/>Check<sp/>[in-situ<sp/>parsing](doc/dom.md)<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">5.<sp/>When<sp/>does<sp/>parsing<sp/>generate<sp/>an<sp/>error?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>The<sp/>parser<sp/>generates<sp/>an<sp/>error<sp/>when<sp/>the<sp/>input<sp/>JSON<sp/>contains<sp/>invalid<sp/>syntax,<sp/>or<sp/>a<sp/>value<sp/>can<sp/>not<sp/>be<sp/>represented<sp/>(a<sp/>number<sp/>is<sp/>too<sp/>big),<sp/>or<sp/>the<sp/>handler<sp/>of<sp/>parsers<sp/>terminate<sp/>the<sp/>parsing.<sp/>Check<sp/>[parse<sp/>error](doc/dom.md)<sp/>for<sp/>details.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">6.<sp/>What<sp/>error<sp/>information<sp/>is<sp/>provided?<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>The<sp/>error<sp/>is<sp/>stored<sp/>in<sp/>`ParseResult`,<sp/>which<sp/>includes<sp/>the<sp/>error<sp/>code<sp/>and<sp/>offset<sp/>(number<sp/>of<sp/>characters<sp/>from<sp/>the<sp/>beginning<sp/>of<sp/>JSON).<sp/>The<sp/>error<sp/>code<sp/>can<sp/>be<sp/>translated<sp/>into<sp/>human-readable<sp/>error<sp/>message.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">7.<sp/>Why<sp/>not<sp/>just<sp/>using<sp/>`double`<sp/>to<sp/>represent<sp/>JSON<sp/>number?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Some<sp/>applications<sp/>use<sp/>64-bit<sp/>unsigned/signed<sp/>integers.<sp/>And<sp/>these<sp/>integers<sp/>cannot<sp/>be<sp/>converted<sp/>into<sp/>`double`<sp/>without<sp/>loss<sp/>of<sp/>precision.<sp/>So<sp/>the<sp/>parsers<sp/>detects<sp/>whether<sp/>a<sp/>JSON<sp/>number<sp/>is<sp/>convertible<sp/>to<sp/>different<sp/>types<sp/>of<sp/>integers<sp/>and/or<sp/>`double`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">8.<sp/>How<sp/>to<sp/>clear-and-minimize<sp/>a<sp/>document<sp/>or<sp/>value?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Call<sp/>one<sp/>of<sp/>the<sp/>`SetXXX()`<sp/>methods<sp/>-<sp/>they<sp/>call<sp/>destructor<sp/>which<sp/>deallocates<sp/>DOM<sp/>data:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Document<sp/>d;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>d.SetObject();<sp/><sp/>//<sp/>clear<sp/>and<sp/>minimize</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Alternatively,<sp/>use<sp/>equivalent<sp/>of<sp/>the<sp/>[C++<sp/>swap<sp/>with<sp/>temporary<sp/>idiom](https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Clear-and-minimize):</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Value(kObjectType).Swap(d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>or<sp/>equivalent,<sp/>but<sp/>slightly<sp/>longer<sp/>to<sp/>type:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>d.Swap(Value(kObjectType).Move());<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">9.<sp/>How<sp/>to<sp/>insert<sp/>a<sp/>document<sp/>node<sp/>into<sp/>another<sp/>document?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Let&apos;s<sp/>take<sp/>the<sp/>following<sp/>two<sp/>DOM<sp/>trees<sp/>represented<sp/>as<sp/>JSON<sp/>documents:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Document<sp/>person;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>person.Parse(&quot;{\&quot;person\&quot;:{\&quot;name\&quot;:{\&quot;first\&quot;:\&quot;Adam\&quot;,\&quot;last\&quot;:\&quot;Thomas\&quot;}}}&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Document<sp/>address;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>address.Parse(&quot;{\&quot;address\&quot;:{\&quot;city\&quot;:\&quot;Moscow\&quot;,\&quot;street\&quot;:\&quot;Quiet\&quot;}}&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Let&apos;s<sp/>assume<sp/>we<sp/>want<sp/>to<sp/>merge<sp/>them<sp/>in<sp/>such<sp/>way<sp/>that<sp/>the<sp/>whole<sp/>`address`<sp/>document<sp/>becomes<sp/>a<sp/>node<sp/>of<sp/>the<sp/>`person`:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~js</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>{<sp/>&quot;person&quot;:<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;name&quot;:<sp/>{<sp/>&quot;first&quot;:<sp/>&quot;Adam&quot;,<sp/>&quot;last&quot;:<sp/>&quot;Thomas&quot;<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&quot;address&quot;:<sp/>{<sp/>&quot;city&quot;:<sp/>&quot;Moscow&quot;,<sp/>&quot;street&quot;:<sp/>&quot;Quiet&quot;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>The<sp/>most<sp/>important<sp/>requirement<sp/>to<sp/>take<sp/>care<sp/>of<sp/>document<sp/>and<sp/>value<sp/>life-cycle<sp/>as<sp/>well<sp/>as<sp/>consistent<sp/>memory<sp/>management<sp/>using<sp/>the<sp/>right<sp/>allocator<sp/>during<sp/>the<sp/>value<sp/>transfer.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Simple<sp/>yet<sp/>most<sp/>efficient<sp/>way<sp/>to<sp/>achieve<sp/>that<sp/>is<sp/>to<sp/>modify<sp/>the<sp/>`address`<sp/>definition<sp/>above<sp/>to<sp/>initialize<sp/>it<sp/>with<sp/>allocator<sp/>of<sp/>the<sp/>`person`<sp/>document,<sp/>then<sp/>we<sp/>just<sp/>add<sp/>the<sp/>root<sp/>member<sp/>of<sp/>the<sp/>value:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Document<sp/>address(&amp;person.GetAllocator());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>person[&quot;person&quot;].AddMember(&quot;address&quot;,<sp/>address[&quot;address&quot;],<sp/>person.GetAllocator());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal">Alternatively,<sp/>if<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>explicitly<sp/>refer<sp/>to<sp/>the<sp/>root<sp/>value<sp/>of<sp/>`address`<sp/>by<sp/>name,<sp/>we<sp/>can<sp/>refer<sp/>to<sp/>it<sp/>via<sp/>iterator:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>auto<sp/>addressRoot<sp/>=<sp/>address.MemberBegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>person[&quot;person&quot;].AddMember(addressRoot-&gt;name,<sp/>addressRoot-&gt;value,<sp/>person.GetAllocator());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Second<sp/>way<sp/>is<sp/>to<sp/>deep-clone<sp/>the<sp/>value<sp/>from<sp/>the<sp/>address<sp/>document:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~cpp</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Value<sp/>addressValue<sp/>=<sp/>Value(address[&quot;address&quot;],<sp/>person.GetAllocator());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>person[&quot;person&quot;].AddMember(&quot;address&quot;,<sp/>addressValue,<sp/>person.GetAllocator());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Document/Value<sp/>(DOM)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>What<sp/>is<sp/>move<sp/>semantics?<sp/>Why?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Instead<sp/>of<sp/>copy<sp/>semantics,<sp/>move<sp/>semantics<sp/>is<sp/>used<sp/>in<sp/>`Value`.<sp/>That<sp/>means,<sp/>when<sp/>assigning<sp/>a<sp/>source<sp/>value<sp/>to<sp/>a<sp/>target<sp/>value,<sp/>the<sp/>ownership<sp/>of<sp/>source<sp/>value<sp/>is<sp/>moved<sp/>to<sp/>the<sp/>target<sp/>value.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Since<sp/>moving<sp/>is<sp/>faster<sp/>than<sp/>copying,<sp/>this<sp/>design<sp/>decision<sp/>forces<sp/>user<sp/>to<sp/>aware<sp/>of<sp/>the<sp/>copying<sp/>overhead.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>How<sp/>to<sp/>copy<sp/>a<sp/>value?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>There<sp/>are<sp/>two<sp/>APIs:<sp/>constructor<sp/>with<sp/>allocator,<sp/>and<sp/>`CopyFrom()`.<sp/>See<sp/>[Deep<sp/>Copy<sp/>Value](doc/tutorial.md)<sp/>for<sp/>an<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>Why<sp/>do<sp/>I<sp/>need<sp/>to<sp/>provide<sp/>the<sp/>length<sp/>of<sp/>string?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Since<sp/>C<sp/>string<sp/>is<sp/>null-terminated,<sp/>the<sp/>length<sp/>of<sp/>string<sp/>needs<sp/>to<sp/>be<sp/>computed<sp/>via<sp/>`strlen()`,<sp/>with<sp/>linear<sp/>runtime<sp/>complexity.<sp/>This<sp/>incurs<sp/>an<sp/>unnecessary<sp/>overhead<sp/>of<sp/>many<sp/>operations,<sp/>if<sp/>the<sp/>user<sp/>already<sp/>knows<sp/>the<sp/>length<sp/>of<sp/>string.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Also,<sp/>RapidJSON<sp/>can<sp/>handle<sp/>`\u0000`<sp/>(null<sp/>character)<sp/>within<sp/>a<sp/>string.<sp/>If<sp/>a<sp/>string<sp/>contains<sp/>null<sp/>characters,<sp/>`strlen()`<sp/>cannot<sp/>return<sp/>the<sp/>true<sp/>length<sp/>of<sp/>it.<sp/>In<sp/>such<sp/>case<sp/>user<sp/>must<sp/>provide<sp/>the<sp/>length<sp/>of<sp/>string<sp/>explicitly.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>Why<sp/>do<sp/>I<sp/>need<sp/>to<sp/>provide<sp/>allocator<sp/>parameter<sp/>in<sp/>many<sp/>DOM<sp/>manipulation<sp/>API?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Since<sp/>the<sp/>APIs<sp/>are<sp/>member<sp/>functions<sp/>of<sp/>`Value`,<sp/>we<sp/>do<sp/>not<sp/>want<sp/>to<sp/>save<sp/>an<sp/>allocator<sp/>pointer<sp/>in<sp/>every<sp/>`Value`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">5.<sp/>Does<sp/>it<sp/>convert<sp/>between<sp/>numerical<sp/>types?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>When<sp/>using<sp/>`GetInt()`,<sp/>`GetUint()`,<sp/>...<sp/>conversion<sp/>may<sp/>occur.<sp/>For<sp/>integer-to-integer<sp/>conversion,<sp/>it<sp/>only<sp/>convert<sp/>when<sp/>it<sp/>is<sp/>safe<sp/>(otherwise<sp/>it<sp/>will<sp/>assert).<sp/>However,<sp/>when<sp/>converting<sp/>a<sp/>64-bit<sp/>signed/unsigned<sp/>integer<sp/>to<sp/>double,<sp/>it<sp/>will<sp/>convert<sp/>but<sp/>be<sp/>aware<sp/>that<sp/>it<sp/>may<sp/>lose<sp/>precision.<sp/>A<sp/>number<sp/>with<sp/>fraction,<sp/>or<sp/>an<sp/>integer<sp/>larger<sp/>than<sp/>64-bit,<sp/>can<sp/>only<sp/>be<sp/>obtained<sp/>by<sp/>`GetDouble()`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Reader/Writer<sp/>(SAX)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Why<sp/>don&apos;t<sp/>we<sp/>just<sp/>`printf`<sp/>a<sp/>JSON?<sp/>Why<sp/>do<sp/>we<sp/>need<sp/>a<sp/>`Writer`?<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Most<sp/>importantly,<sp/>`Writer`<sp/>will<sp/>ensure<sp/>the<sp/>output<sp/>JSON<sp/>is<sp/>well-formed.<sp/>Calling<sp/>SAX<sp/>events<sp/>incorrectly<sp/>(e.g.<sp/>`StartObject()`<sp/>pairing<sp/>with<sp/>`EndArray()`)<sp/>will<sp/>assert.<sp/>Besides,<sp/>`Writer`<sp/>will<sp/>escapes<sp/>strings<sp/>(e.g.,<sp/>`\n`).<sp/>Finally,<sp/>the<sp/>numeric<sp/>output<sp/>of<sp/>`printf()`<sp/>may<sp/>not<sp/>be<sp/>a<sp/>valid<sp/>JSON<sp/>number,<sp/>especially<sp/>in<sp/>some<sp/>locale<sp/>with<sp/>digit<sp/>delimiters.<sp/>And<sp/>the<sp/>number-to-string<sp/>conversion<sp/>in<sp/>`Writer`<sp/>is<sp/>implemented<sp/>with<sp/>very<sp/>fast<sp/>algorithms,<sp/>which<sp/>outperforms<sp/>than<sp/>`printf()`<sp/>or<sp/>`iostream`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>Can<sp/>I<sp/>pause<sp/>the<sp/>parsing<sp/>process<sp/>and<sp/>resume<sp/>it<sp/>later?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>This<sp/>is<sp/>not<sp/>directly<sp/>supported<sp/>in<sp/>the<sp/>current<sp/>version<sp/>due<sp/>to<sp/>performance<sp/>consideration.<sp/>However,<sp/>if<sp/>the<sp/>execution<sp/>environment<sp/>supports<sp/>multi-threading,<sp/>user<sp/>can<sp/>parse<sp/>a<sp/>JSON<sp/>in<sp/>a<sp/>separate<sp/>thread,<sp/>and<sp/>pause<sp/>it<sp/>by<sp/>blocking<sp/>in<sp/>the<sp/>input<sp/>stream.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Unicode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Does<sp/>it<sp/>support<sp/>UTF-8,<sp/>UTF-16<sp/>and<sp/>other<sp/>format?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes.<sp/>It<sp/>fully<sp/>support<sp/>UTF-8,<sp/>UTF-16<sp/>(LE/BE),<sp/>UTF-32<sp/>(LE/BE)<sp/>and<sp/>ASCII.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>Can<sp/>it<sp/>validate<sp/>the<sp/>encoding?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes,<sp/>just<sp/>pass<sp/>`kParseValidateEncodingFlag`<sp/>to<sp/>`Parse()`.<sp/>If<sp/>there<sp/>is<sp/>invalid<sp/>encoding<sp/>in<sp/>the<sp/>stream,<sp/>it<sp/>will<sp/>generate<sp/>`kParseErrorStringInvalidEncoding`<sp/>error.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>What<sp/>is<sp/>surrogate<sp/>pair?<sp/>Does<sp/>RapidJSON<sp/>support<sp/>it?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>JSON<sp/>uses<sp/>UTF-16<sp/>encoding<sp/>when<sp/>escaping<sp/>unicode<sp/>character,<sp/>e.g.<sp/>`\u5927`<sp/>representing<sp/>Chinese<sp/>character<sp/>&quot;big&quot;.<sp/>To<sp/>handle<sp/>characters<sp/>other<sp/>than<sp/>those<sp/>in<sp/>basic<sp/>multilingual<sp/>plane<sp/>(BMP),<sp/>UTF-16<sp/>encodes<sp/>those<sp/>characters<sp/>with<sp/>two<sp/>16-bit<sp/>values,<sp/>which<sp/>is<sp/>called<sp/>UTF-16<sp/>surrogate<sp/>pair.<sp/>For<sp/>example,<sp/>the<sp/>Emoji<sp/>character<sp/>U+1F602<sp/>can<sp/>be<sp/>encoded<sp/>as<sp/>`\uD83D\uDE02`<sp/>in<sp/>JSON.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON<sp/>fully<sp/>support<sp/>parsing/generating<sp/>UTF-16<sp/>surrogates.<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>Can<sp/>it<sp/>handle<sp/>`\u0000`<sp/>(null<sp/>character)<sp/>in<sp/>JSON<sp/>string?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes.<sp/>RapidJSON<sp/>fully<sp/>support<sp/>null<sp/>character<sp/>in<sp/>JSON<sp/>string.<sp/>However,<sp/>user<sp/>need<sp/>to<sp/>be<sp/>aware<sp/>of<sp/>it<sp/>and<sp/>using<sp/>`GetStringLength()`<sp/>and<sp/>related<sp/>APIs<sp/>to<sp/>obtain<sp/>the<sp/>true<sp/>length<sp/>of<sp/>string.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">5.<sp/>Can<sp/>I<sp/>output<sp/>`\uxxxx`<sp/>for<sp/>all<sp/>non-ASCII<sp/>character?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes,<sp/>use<sp/>`ASCII&lt;&gt;`<sp/>as<sp/>output<sp/>encoding<sp/>template<sp/>parameter<sp/>in<sp/>`Writer`<sp/>can<sp/>enforce<sp/>escaping<sp/>those<sp/>characters.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Stream</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>I<sp/>have<sp/>a<sp/>big<sp/>JSON<sp/>file.<sp/>Should<sp/>I<sp/>load<sp/>the<sp/>whole<sp/>file<sp/>to<sp/>memory?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>User<sp/>can<sp/>use<sp/>`FileReadStream`<sp/>to<sp/>read<sp/>the<sp/>file<sp/>chunk-by-chunk.<sp/>But<sp/>for<sp/>*in<sp/>situ*<sp/>parsing,<sp/>the<sp/>whole<sp/>file<sp/>must<sp/>be<sp/>loaded.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>Can<sp/>I<sp/>parse<sp/>JSON<sp/>while<sp/>it<sp/>is<sp/>streamed<sp/>from<sp/>network?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes.<sp/>User<sp/>can<sp/>implement<sp/>a<sp/>custom<sp/>stream<sp/>for<sp/>this.<sp/>Please<sp/>refer<sp/>to<sp/>the<sp/>implementation<sp/>of<sp/>`FileReadStream`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>I<sp/>don&apos;t<sp/>know<sp/>what<sp/>encoding<sp/>will<sp/>the<sp/>JSON<sp/>be.<sp/>How<sp/>to<sp/>handle<sp/>them?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>You<sp/>may<sp/>use<sp/>`AutoUTFInputStream`<sp/>which<sp/>detects<sp/>the<sp/>encoding<sp/>of<sp/>input<sp/>stream<sp/>automatically.<sp/>However,<sp/>it<sp/>will<sp/>incur<sp/>some<sp/>performance<sp/>overhead.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>What<sp/>is<sp/>BOM?<sp/>How<sp/>RapidJSON<sp/>handle<sp/>it?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[Byte<sp/>order<sp/>mark<sp/>(BOM)](http://en.wikipedia.org/wiki/Byte_order_mark)<sp/>sometimes<sp/>reside<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>file/stream<sp/>to<sp/>indicate<sp/>the<sp/>UTF<sp/>encoding<sp/>type<sp/>of<sp/>it.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>RapidJSON&apos;s<sp/>`EncodedInputStream`<sp/>can<sp/>detect/consume<sp/>BOM.<sp/>`EncodedOutputStream`<sp/>can<sp/>optionally<sp/>write<sp/>a<sp/>BOM.<sp/>See<sp/>[Encoded<sp/>Streams](doc/stream.md)<sp/>for<sp/>example.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">5.<sp/>Why<sp/>little/big<sp/>endian<sp/>is<sp/>related?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>little/big<sp/>endian<sp/>of<sp/>stream<sp/>is<sp/>an<sp/>issue<sp/>for<sp/>UTF-16<sp/>and<sp/>UTF-32<sp/>streams,<sp/>but<sp/>not<sp/>UTF-8<sp/>stream.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Performance</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Is<sp/>RapidJSON<sp/>really<sp/>fast?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Yes.<sp/>It<sp/>may<sp/>be<sp/>the<sp/>fastest<sp/>open<sp/>source<sp/>JSON<sp/>library.<sp/>There<sp/>is<sp/>a<sp/>[benchmark](https://github.com/miloyip/nativejson-benchmark)<sp/>for<sp/>evaluating<sp/>performance<sp/>of<sp/>C/C++<sp/>JSON<sp/>libraries.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>Why<sp/>is<sp/>it<sp/>fast?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Many<sp/>design<sp/>decisions<sp/>of<sp/>RapidJSON<sp/>is<sp/>aimed<sp/>at<sp/>time/space<sp/>performance.<sp/>These<sp/>may<sp/>reduce<sp/>user-friendliness<sp/>of<sp/>APIs.<sp/>Besides,<sp/>it<sp/>also<sp/>employs<sp/>low-level<sp/>optimizations<sp/>(intrinsics,<sp/>SIMD)<sp/>and<sp/>special<sp/>algorithms<sp/>(custom<sp/>double-to-string,<sp/>string-to-double<sp/>conversions).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>What<sp/>is<sp/>SIMD?<sp/>How<sp/>it<sp/>is<sp/>applied<sp/>in<sp/>RapidJSON?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>[SIMD](http://en.wikipedia.org/wiki/SIMD)<sp/>instructions<sp/>can<sp/>perform<sp/>parallel<sp/>computation<sp/>in<sp/>modern<sp/>CPUs.<sp/>RapidJSON<sp/>support<sp/>Intel&apos;s<sp/>SSE2/SSE4.2<sp/>and<sp/>ARM&apos;s<sp/>Neon<sp/>to<sp/>accelerate<sp/>whitespace/tabspace/carriage-return/line-feed<sp/>skipping.<sp/>This<sp/>improves<sp/>performance<sp/>of<sp/>parsing<sp/>indent<sp/>formatted<sp/>JSON.<sp/>Define<sp/>`RAPIDJSON_SSE2`,<sp/>`RAPIDJSON_SSE42`<sp/>or<sp/>`RAPIDJSON_NEON`<sp/>macro<sp/>to<sp/>enable<sp/>this<sp/>feature.<sp/>However,<sp/>running<sp/>the<sp/>executable<sp/>on<sp/>a<sp/>machine<sp/>without<sp/>such<sp/>instruction<sp/>set<sp/>support<sp/>will<sp/>make<sp/>it<sp/>crash.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>Does<sp/>it<sp/>consume<sp/>a<sp/>lot<sp/>of<sp/>memory?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>The<sp/>design<sp/>of<sp/>RapidJSON<sp/>aims<sp/>at<sp/>reducing<sp/>memory<sp/>footprint.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>In<sp/>the<sp/>SAX<sp/>API,<sp/>`Reader`<sp/>consumes<sp/>memory<sp/>proportional<sp/>to<sp/>maximum<sp/>depth<sp/>of<sp/>JSON<sp/>tree,<sp/>plus<sp/>maximum<sp/>length<sp/>of<sp/>JSON<sp/>string.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>In<sp/>the<sp/>DOM<sp/>API,<sp/>each<sp/>`Value`<sp/>consumes<sp/>exactly<sp/>16/24<sp/>bytes<sp/>for<sp/>32/64-bit<sp/>architecture<sp/>respectively.<sp/>RapidJSON<sp/>also<sp/>uses<sp/>a<sp/>special<sp/>memory<sp/>allocator<sp/>to<sp/>minimize<sp/>overhead<sp/>of<sp/>allocations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">5.<sp/>What<sp/>is<sp/>the<sp/>purpose<sp/>of<sp/>being<sp/>high<sp/>performance?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Some<sp/>applications<sp/>need<sp/>to<sp/>process<sp/>very<sp/>large<sp/>JSON<sp/>files.<sp/>Some<sp/>server-side<sp/>applications<sp/>need<sp/>to<sp/>process<sp/>huge<sp/>amount<sp/>of<sp/>JSONs.<sp/>Being<sp/>high<sp/>performance<sp/>can<sp/>improve<sp/>both<sp/>latency<sp/>and<sp/>throughput.<sp/>In<sp/>a<sp/>broad<sp/>sense,<sp/>it<sp/>will<sp/>also<sp/>save<sp/>energy.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Gossip</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>Who<sp/>are<sp/>the<sp/>developers<sp/>of<sp/>RapidJSON?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>Milo<sp/>Yip<sp/>([miloyip](https://github.com/miloyip))<sp/>is<sp/>the<sp/>original<sp/>author<sp/>of<sp/>RapidJSON.<sp/>Many<sp/>contributors<sp/>from<sp/>the<sp/>world<sp/>have<sp/>improved<sp/>RapidJSON.<sp/><sp/>Philipp<sp/>A.<sp/>Hartmann<sp/>([pah](https://github.com/pah))<sp/>has<sp/>implemented<sp/>a<sp/>lot<sp/>of<sp/>improvements,<sp/>setting<sp/>up<sp/>automatic<sp/>testing<sp/>and<sp/>also<sp/>involves<sp/>in<sp/>a<sp/>lot<sp/>of<sp/>discussions<sp/>for<sp/>the<sp/>community.<sp/>Don<sp/>Ding<sp/>([thebusytypist](https://github.com/thebusytypist))<sp/>implemented<sp/>the<sp/>iterative<sp/>parser.<sp/>Andrii<sp/>Senkovych<sp/>([jollyroger](https://github.com/jollyroger))<sp/>completed<sp/>the<sp/>CMake<sp/>migration.<sp/>Kosta<sp/>([Kosta-Github](https://github.com/Kosta-Github))<sp/>provided<sp/>a<sp/>very<sp/>neat<sp/>short-string<sp/>optimization.<sp/>Thank<sp/>you<sp/>for<sp/>all<sp/>other<sp/>contributors<sp/>and<sp/>community<sp/>members<sp/>as<sp/>well.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">2.<sp/>Why<sp/>do<sp/>you<sp/>develop<sp/>RapidJSON?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>It<sp/>was<sp/>just<sp/>a<sp/>hobby<sp/>project<sp/>initially<sp/>in<sp/>2011.<sp/>Milo<sp/>Yip<sp/>is<sp/>a<sp/>game<sp/>programmer<sp/>and<sp/>he<sp/>just<sp/>knew<sp/>about<sp/>JSON<sp/>at<sp/>that<sp/>time<sp/>and<sp/>would<sp/>like<sp/>to<sp/>apply<sp/>JSON<sp/>in<sp/>future<sp/>projects.<sp/>As<sp/>JSON<sp/>seems<sp/>very<sp/>simple<sp/>he<sp/>would<sp/>like<sp/>to<sp/>write<sp/>a<sp/>header-only<sp/>and<sp/>fast<sp/>library.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">3.<sp/>Why<sp/>there<sp/>is<sp/>a<sp/>long<sp/>empty<sp/>period<sp/>of<sp/>development?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>It<sp/>is<sp/>basically<sp/>due<sp/>to<sp/>personal<sp/>issues,<sp/>such<sp/>as<sp/>getting<sp/>new<sp/>family<sp/>members.<sp/>Also,<sp/>Milo<sp/>Yip<sp/>has<sp/>spent<sp/>a<sp/>lot<sp/>of<sp/>spare<sp/>time<sp/>on<sp/>translating<sp/>&quot;Game<sp/>Engine<sp/>Architecture&quot;<sp/>by<sp/>Jason<sp/>Gregory<sp/>into<sp/>Chinese.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">4.<sp/>Why<sp/>did<sp/>the<sp/>repository<sp/>move<sp/>from<sp/>Google<sp/>Code<sp/>to<sp/>GitHub?</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>This<sp/>is<sp/>the<sp/>trend.<sp/>And<sp/>GitHub<sp/>is<sp/>much<sp/>more<sp/>powerful<sp/>and<sp/>convenient.</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/doc/faq.md"/>
  </compounddef>
</doxygen>
