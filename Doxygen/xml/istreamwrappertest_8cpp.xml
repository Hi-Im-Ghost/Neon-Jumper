<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="istreamwrappertest_8cpp" kind="file" language="C++">
    <compoundname>istreamwrappertest.cpp</compoundname>
    <includes refid="unittest_8h" local="yes">unittest.h</includes>
    <includes refid="istreamwrapper_8h" local="yes">rapidjson/istreamwrapper.h</includes>
    <includes refid="encodedstream_8h" local="yes">rapidjson/encodedstream.h</includes>
    <includes refid="document_8h" local="yes">rapidjson/document.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">fstream</includes>
    <incdepgraph>
      <node id="18">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>rapidjson/document.h</label>
        <link refid="document_8h"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>rapidjson/encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rapidjson/istreamwrapper.h</label>
        <link refid="istreamwrapper_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/test/unittest/istreamwrappertest.cpp</label>
        <link refid="istreamwrappertest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>unittest.h</label>
        <link refid="unittest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cassert</label>
      </node>
      <node id="31">
        <label>climits</label>
      </node>
      <node id="24">
        <label>cstddef</label>
      </node>
      <node id="8">
        <label>cstdlib</label>
      </node>
      <node id="9">
        <label>cstring</label>
      </node>
      <node id="34">
        <label>cwchar</label>
      </node>
      <node id="38">
        <label>fstream</label>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
      </node>
      <node id="13">
        <label>ios</label>
      </node>
      <node id="12">
        <label>iosfwd</label>
      </node>
      <node id="36">
        <label>iterator</label>
      </node>
      <node id="29">
        <label>limits</label>
      </node>
      <node id="20">
        <label>memory</label>
      </node>
      <node id="35">
        <label>new</label>
      </node>
      <node id="37">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="istreamwrappertest_8cpp_1a78eb10c4531741712cdcd639ab3a774d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StringStreamType</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void TestStringStream</definition>
        <argsstring>()</argsstring>
        <name>TestStringStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="32" column="13" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="32" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IStreamWrapper, istringstream)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref></type>
        </param>
        <param>
          <type>istringstream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="89" column="1" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="89" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="istreamwrappertest_8cpp_1a7623e3f1efdf5824e2060120907ee4b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IStreamWrapper, stringstream)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref></type>
        </param>
        <param>
          <type>stringstream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="93" column="1" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="istreamwrappertest_8cpp_1ab7e3e7d322c547de212c4e641225139d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IStreamWrapper, wistringstream)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref></type>
        </param>
        <param>
          <type>wistringstream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="97" column="1" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="97" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="istreamwrappertest_8cpp_1a930ba314abcb4e4f1a4f59f288880dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IStreamWrapper, wstringstream)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref></type>
        </param>
        <param>
          <type>wstringstream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="101" column="1" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="101" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="istreamwrappertest_8cpp_1a8c3d756ec6a6acfffdf8a8571920a73e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename FileStreamType</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>static bool Open</definition>
        <argsstring>(FileStreamType &amp;fs, const char *filename)</argsstring>
        <name>Open</name>
        <param>
          <type>FileStreamType &amp;</type>
          <declname>fs</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="106" column="13" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="106" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="istreamwrappertest_8cpp_1a9c5c165e99d252d037f449731a524177" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IStreamWrapper, ifstream)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref></type>
        </param>
        <param>
          <type>ifstream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="124" column="1" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="124" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="istreamwrappertest_8cpp_1a6b91d174b12191c11cf2771d4d41fa31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(IStreamWrapper, fstream)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref></type>
        </param>
        <param>
          <type>fstream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp" line="135" column="1" bodyfile="src/rapidjson/test/unittest/istreamwrappertest.cpp" bodystart="135" bodyend="144"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unittest_8h" kindref="compound">unittest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="istreamwrapper_8h" kindref="compound">rapidjson/istreamwrapper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="encodedstream_8h" kindref="compound">rapidjson/encodedstream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">rapidjson/document.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight></codeline>
<codeline lineno="25"><highlight class="normal">RAPIDJSON_DIAG_OFF(4702)<sp/></highlight><highlight class="comment">//<sp/>unreachable<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringStreamType&gt;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>TestStringStream()<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>StringStreamType::char_type<sp/>Ch;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringStreamType<sp/>iss;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_basic_i_stream_wrapper" kindref="compound">BasicIStreamWrapper&lt;StringStreamType&gt;</ref><sp/>is(iss);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>is.Tell());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Ch)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Peek4());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>is.Tell());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Peek());</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Take());</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>is.Tell());</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ch<sp/>s[]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringStreamType<sp/>iss(s);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_basic_i_stream_wrapper" kindref="compound">BasicIStreamWrapper&lt;StringStreamType&gt;</ref><sp/>is(iss);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>is.Tell());</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Ch)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Peek4());<sp/></highlight><highlight class="comment">//<sp/>less<sp/>than<sp/>4<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>3;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i),<sp/>is.Tell());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>i,<sp/>is.Peek());</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>i,<sp/>is.Peek());</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>i,<sp/>is.Take());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>is.Tell());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Peek());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Take());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ch<sp/>s[]<sp/>=<sp/>{<sp/></highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;B&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;C&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;D&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;E&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringStreamType<sp/>iss(s);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_basic_i_stream_wrapper" kindref="compound">BasicIStreamWrapper&lt;StringStreamType&gt;</ref><sp/>is(iss);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Ch)<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>c<sp/>=<sp/>is.Peek4();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>i,<sp/>c[i]);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>is.Tell());</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i),<sp/>is.Tell());</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>i,<sp/>is.Peek());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>i,<sp/>is.Peek());</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;A&apos;</highlight><highlight class="normal"><sp/>+<sp/>i,<sp/>is.Take());</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(5u,<sp/>is.Tell());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Peek());</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>is.Take());</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>istringstream)<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>TestStringStream&lt;istringstream&gt;();</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>stringstream)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>TestStringStream&lt;stringstream&gt;();</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>wistringstream)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>TestStringStream&lt;wistringstream&gt;();</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>wstringstream)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>TestStringStream&lt;wstringstream&gt;();</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FileStreamType&gt;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Open(FileStreamType&amp;<sp/>fs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*paths[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;encodings&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;bin/encodings&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;../bin/encodings&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;../../bin/encodings&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;../../../bin/encodings&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[1024];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(paths)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(paths[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(buffer,<sp/></highlight><highlight class="stringliteral">&quot;%s/%s&quot;</highlight><highlight class="normal">,<sp/>paths[i],<sp/>filename);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fs.open(buffer,<sp/>ios_base::in<sp/>|<sp/>ios_base::binary);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fs.is_open())</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>ifstream)<sp/>{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>ifstream<sp/>ifs;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(Open(ifs,<sp/></highlight><highlight class="stringliteral">&quot;utf8bom.json&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(ifs);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_encoded_input_stream" kindref="compound">EncodedInputStream&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>&gt;<sp/>eis(isw);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(!d.<ref refid="class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921" kindref="member">ParseStream</ref>(eis).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(d.IsObject());</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(5u,<sp/>d.MemberCount());</highlight></codeline>
<codeline lineno="133"><highlight class="normal">}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>fstream)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>fstream<sp/>fs;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(Open(fs,<sp/></highlight><highlight class="stringliteral">&quot;utf8bom.json&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(fs);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_encoded_input_stream" kindref="compound">EncodedInputStream&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>&gt;<sp/>eis(isw);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(!d.<ref refid="class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921" kindref="member">ParseStream</ref>(eis).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(d.IsObject());</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(5u,<sp/>d.MemberCount());</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wifstream/wfstream<sp/>only<sp/>works<sp/>on<sp/>C++11<sp/>with<sp/>codecvt_utf16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>But<sp/>many<sp/>C++11<sp/>library<sp/>still<sp/>not<sp/>have<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;codecvt&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>wifstream)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>wifstream<sp/>ifs;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(Open(ifs,<sp/></highlight><highlight class="stringliteral">&quot;utf16bebom.json&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>ifs.imbue(std::locale(ifs.getloc(),</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::codecvt_utf16&lt;wchar_t,<sp/>0x10ffff,<sp/>std::consume_header&gt;));</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_w_i_stream_wrapper" kindref="compound">WIStreamWrapper</ref><sp/>isw(ifs);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">GenericDocument&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>d;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921" kindref="member">ParseStream</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80" kindref="member">kParseDefaultFlags</ref>,<sp/><ref refid="struct_u_t_f16" kindref="compound">UTF16&lt;&gt;</ref>,<sp/><ref refid="class_w_i_stream_wrapper" kindref="compound">WIStreamWrapper</ref>&gt;(isw);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(!d.<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(d.IsObject());</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(5,<sp/>d.MemberCount());</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><ref refid="istreamwrappertest_8cpp_1a094c4188ee3ce4059b610931fae7584d" kindref="member">TEST</ref>(<ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>,<sp/>wfstream)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>wfstream<sp/>fs;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(Open(fs,<sp/></highlight><highlight class="stringliteral">&quot;utf16bebom.json&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>fs.imbue(std::locale(fs.getloc(),</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::codecvt_utf16&lt;wchar_t,<sp/>0x10ffff,<sp/>std::consume_header&gt;));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_w_i_stream_wrapper" kindref="compound">WIStreamWrapper</ref><sp/>isw(fs);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">GenericDocument&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>d;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921" kindref="member">ParseStream</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80" kindref="member">kParseDefaultFlags</ref>,<sp/><ref refid="struct_u_t_f16" kindref="compound">UTF16&lt;&gt;</ref>,<sp/><ref refid="class_w_i_stream_wrapper" kindref="compound">WIStreamWrapper</ref>&gt;(isw);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(!d.<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(d.IsObject());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(5,<sp/>d.MemberCount());</highlight></codeline>
<codeline lineno="175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)<sp/>&amp;&amp;<sp/>!defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">RAPIDJSON_DIAG_POP</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/test/unittest/istreamwrappertest.cpp"/>
  </compounddef>
</doxygen>
