<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="md_src_rapidjson_readme" kind="page">
    <compoundname>md_src_rapidjson_readme</compoundname>
    <title>readme</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="doc/logo/rapidjson.png" alt="RapidJSON logo" inline="yes"></image>
</para>
<para><image type="html" name="https://img.shields.io/badge/release-v1.1.0-blue.svg" alt="Release version" inline="yes"></image>
</para>
<sect2 id="md_src_rapidjson_readme_1autotoc_md129">
<title>A fast JSON parser/generator for C++ with both SAX/DOM style API</title>
<para>Tencent is pleased to support the open source community by making RapidJSON available.</para>
<para>Copyright (C) 2015 THL A29 Limited, a Tencent company, and Milo Yip.</para>
<para><itemizedlist>
<listitem><para><ulink url="https://github.com/Tencent/rapidjson/">RapidJSON GitHub</ulink></para>
</listitem><listitem><para>RapidJSON Documentation<itemizedlist>
<listitem><para><ulink url="http://rapidjson.org/">English</ulink></para>
</listitem><listitem><para><ulink url="http://rapidjson.org/zh-cn/">简体中文</ulink></para>
</listitem><listitem><para><ulink url="https://www.gitbook.com/book/miloyip/rapidjson/">GitBook</ulink> with downloadable PDF/EPUB/MOBI, without API reference.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_src_rapidjson_readme_1autotoc_md130">
<title>Build status</title>
<para><table rows="2" cols="3"><row>
<entry thead="yes" align='center'><para><ulink url="https://travis-ci.org/Tencent/rapidjson">Linux</ulink>   </para>
</entry><entry thead="yes" align='center'><para><ulink url="https://ci.appveyor.com/project/miloyip/rapidjson-0fdqj/branch/master">Windows</ulink>   </para>
</entry><entry thead="yes" align='center'><para><ulink url="https://coveralls.io/r/Tencent/rapidjson?branch=master">Coveralls</ulink>    </para>
</entry></row>
<row>
<entry thead="no" align='center'><para><image type="html" name="https://travis-ci.org/Tencent/rapidjson.svg?branch=master" alt="lin-badge" inline="yes"></image>
   </para>
</entry><entry thead="no" align='center'><para><image type="html" name="https://ci.appveyor.com/api/projects/status/l6qulgqahcayidrf/branch/master?svg=true" alt="win-badge" inline="yes"></image>
   </para>
</entry><entry thead="no" align='center'><para><image type="html" name="https://coveralls.io/repos/Tencent/rapidjson/badge.svg?branch=master" alt="cov-badge" inline="yes"></image>
   </para>
</entry></row>
</table>
</para>
</sect2>
<sect2 id="md_src_rapidjson_readme_1autotoc_md131">
<title>Introduction</title>
<para>RapidJSON is a JSON parser and generator for C++. It was inspired by <ulink url="http://rapidxml.sourceforge.net/">RapidXml</ulink>.</para>
<para><itemizedlist>
<listitem><para>RapidJSON is <bold>small</bold> but <bold>complete</bold>. It supports both SAX and DOM style API. The SAX parser is only a half thousand lines of code.</para>
</listitem><listitem><para>RapidJSON is <bold>fast</bold>. Its performance can be comparable to <computeroutput>strlen()</computeroutput>. It also optionally supports SSE2/SSE4.2 for acceleration.</para>
</listitem><listitem><para>RapidJSON is <bold>self-contained</bold> and <bold>header-only</bold>. It does not depend on external libraries such as BOOST. It even does not depend on STL.</para>
</listitem><listitem><para>RapidJSON is <bold>memory-friendly</bold>. Each JSON value occupies exactly 16 bytes for most 32/64-bit machines (excluding text string). By default it uses a fast memory allocator, and the parser allocates memory compactly during parsing.</para>
</listitem><listitem><para>RapidJSON is <bold>Unicode-friendly</bold>. It supports UTF-8, UTF-16, UTF-32 (LE &amp; BE), and their detection, validation and transcoding internally. For example, you can read a UTF-8 file and let RapidJSON transcode the JSON strings into UTF-16 in the DOM. It also supports surrogates and &quot;\u0000&quot; (null character).</para>
</listitem></itemizedlist>
</para>
<para>More features can be read C:/Users/R2-D2/Desktop/STUDIA/Semestr 5/Podstawy grafiki komputerowej/Projekt/Neon <ref refid="features_8md" kindref="compound">Jumper/src/rapidjson/doc/features.md</ref> &quot;here&quot;.</para>
<para>JSON(JavaScript Object Notation) is a light-weight data exchange format. RapidJSON should be in full compliance with RFC7159/ECMA-404, with optional support of relaxed syntax. More information about JSON can be obtained at<itemizedlist>
<listitem><para><ulink url="http://json.org/">Introducing JSON</ulink></para>
</listitem><listitem><para><ulink url="https://tools.ietf.org/html/rfc7159">RFC7159: The JavaScript Object Notation (JSON) Data Interchange Format</ulink></para>
</listitem><listitem><para><ulink url="https://www.ecma-international.org/publications/standards/Ecma-404.htm">Standard ECMA-404: The JSON Data Interchange Format</ulink></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_src_rapidjson_readme_1autotoc_md132">
<title>Highlights in v1.1 (2016-8-25)</title>
<para><itemizedlist>
<listitem><para>Added C:/Users/R2-D2/Desktop/STUDIA/Semestr 5/Podstawy grafiki komputerowej/Projekt/Neon <ref refid="pointer_8md" kindref="compound">Jumper/src/rapidjson/doc/pointer.md</ref> &quot;JSON Pointer&quot;</para>
</listitem><listitem><para>Added C:/Users/R2-D2/Desktop/STUDIA/Semestr 5/Podstawy grafiki komputerowej/Projekt/Neon <ref refid="schema_8md" kindref="compound">Jumper/src/rapidjson/doc/schema.md</ref> &quot;JSON Schema&quot;</para>
</listitem><listitem><para>Added C:/Users/R2-D2/Desktop/STUDIA/Semestr 5/Podstawy grafiki komputerowej/Projekt/Neon <ref refid="dom_8md" kindref="compound">Jumper/src/rapidjson/doc/dom.md</ref> &quot;relaxed JSON syntax&quot; (comment, trailing comma, NaN/Infinity)</para>
</listitem><listitem><para>Iterating array/object with C:/Users/R2-D2/Desktop/STUDIA/Semestr 5/Podstawy grafiki komputerowej/Projekt/Neon <ref refid="tutorial_8md" kindref="compound">Jumper/src/rapidjson/doc/tutorial.md</ref> &quot;C++11 Range-based for loop&quot;</para>
</listitem><listitem><para>Reduce memory overhead of each <computeroutput>Value</computeroutput> from 24 bytes to 16 bytes in x86-64 architecture.</para>
</listitem></itemizedlist>
</para>
<para>For other changes please refer to C:/Users/R2-D2/Desktop/STUDIA/Semestr 5/Podstawy grafiki komputerowej/Projekt/Neon <ref refid="_c_h_a_n_g_e_l_o_g_8md" kindref="compound">Jumper/src/rapidjson/CHANGELOG.md</ref> &quot;change log&quot;.</para>
</sect2>
<sect2 id="md_src_rapidjson_readme_1autotoc_md133">
<title>Compatibility</title>
<para>RapidJSON is cross-platform. Some platform/compiler combinations which have been tested are shown as follows.<itemizedlist>
<listitem><para>Visual C++ 2008/2010/2013 on Windows (32/64-bit)</para>
</listitem><listitem><para>GNU C++ 3.8.x on Cygwin</para>
</listitem><listitem><para>Clang 3.4 on Mac OS X (32/64-bit) and iOS</para>
</listitem><listitem><para>Clang 3.4 on Android NDK</para>
</listitem></itemizedlist>
</para>
<para>Users can build and run the unit tests on their platform/compiler.</para>
</sect2>
<sect2 id="md_src_rapidjson_readme_1autotoc_md134">
<title>Installation</title>
<para>RapidJSON is a header-only C++ library. Just copy the <computeroutput>include/rapidjson</computeroutput> folder to system or project&apos;s include path.</para>
<para>Alternatively, if you are using the <ulink url="https://github.com/Microsoft/vcpkg/">vcpkg</ulink> dependency manager you can download and install rapidjson with CMake integration in a single command:<itemizedlist>
<listitem><para>vcpkg install rapidjson</para>
</listitem></itemizedlist>
</para>
<para>RapidJSON uses following software as its dependencies:<itemizedlist>
<listitem><para><ulink url="https://cmake.org/">CMake</ulink> as a general build tool</para>
</listitem><listitem><para>(optional) <ulink url="http://www.doxygen.org">Doxygen</ulink> to build documentation</para>
</listitem><listitem><para>(optional) <ulink url="https://github.com/google/googletest">googletest</ulink> for unit and performance testing</para>
</listitem></itemizedlist>
</para>
<para>To generate user documentation and run tests please proceed with the steps below:</para>
<para><orderedlist>
<listitem><para>Execute <computeroutput>git submodule update --init</computeroutput> to get the files of thirdparty submodules (google test).</para>
</listitem><listitem><para>Create directory called <computeroutput>build</computeroutput> in rapidjson source directory.</para>
</listitem><listitem><para>Change to <computeroutput>build</computeroutput> directory and run <computeroutput>cmake ..</computeroutput> command to configure your build. Windows users can do the same with cmake-gui application.</para>
</listitem><listitem><para>On Windows, build the solution found in the build directory. On Linux, run <computeroutput>make</computeroutput> from the build directory.</para>
</listitem></orderedlist>
</para>
<para>On successful build you will find compiled test and example binaries in <computeroutput>bin</computeroutput> directory. The generated documentation will be available in <computeroutput>doc/html</computeroutput> directory of the build tree. To run tests after finished build please run <computeroutput>make test</computeroutput> or <computeroutput>ctest</computeroutput> from your build tree. You can get detailed output using <computeroutput>ctest -V</computeroutput> command.</para>
<para>It is possible to install library system-wide by running <computeroutput>make install</computeroutput> command from the build tree with administrative privileges. This will install all files according to system preferences. Once RapidJSON is installed, it is possible to use it from other CMake projects by adding <computeroutput>find_package(RapidJSON)</computeroutput> line to your CMakeLists.txt.</para>
</sect2>
<sect2 id="md_src_rapidjson_readme_1autotoc_md135">
<title>Usage at a glance</title>
<para>This simple example parses a JSON string into a document (DOM), make a simple modification of the DOM, and finally stringify the DOM to a JSON string.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>rapidjson/example/simpledom/simpledom.cpp`</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">rapidjson/document.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="writer_8h" kindref="compound">rapidjson/writer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringbuffer_8h" kindref="compound">rapidjson/stringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>Parse<sp/>a<sp/>JSON<sp/>string<sp/>into<sp/>DOM.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;project\&quot;:\&quot;rapidjson\&quot;,\&quot;stars\&quot;:10}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>Modify<sp/>it<sp/>by<sp/>DOM.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>s<sp/>=<sp/>d[</highlight><highlight class="stringliteral">&quot;stars&quot;</highlight><highlight class="normal">];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>s.SetInt(s.GetInt()<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>Stringify<sp/>the<sp/>DOM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>d.Accept(writer);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Output<sp/>{&quot;project&quot;:&quot;rapidjson&quot;,&quot;stars&quot;:11}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that this example did not handle potential errors.</para>
<para>The following diagram shows the process.</para>
<para><image type="html" name="doc/diagram/simpledom.png" alt="simpledom" inline="yes"></image>
</para>
<para>More <ulink url="https://github.com/Tencent/rapidjson/tree/master/example">examples</ulink> are available:</para>
<para><itemizedlist>
<listitem><para>DOM API<itemizedlist>
<listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/tutorial/tutorial.cpp">tutorial</ulink>: Basic usage of DOM API.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>SAX API<itemizedlist>
<listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/simplereader/simplereader.cpp">simplereader</ulink>: Dumps all SAX events while parsing a JSON by <computeroutput>Reader</computeroutput>.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/condense/condense.cpp">condense</ulink>: A command line tool to rewrite a JSON, with all whitespaces removed.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/pretty/pretty.cpp">pretty</ulink>: A command line tool to rewrite a JSON with indents and newlines by <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput>.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/capitalize/capitalize.cpp">capitalize</ulink>: A command line tool to capitalize strings in JSON.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/messagereader/messagereader.cpp">messagereader</ulink>: Parse a JSON message with SAX API.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/serialize/serialize.cpp">serialize</ulink>: Serialize a C++ object into JSON with SAX API.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/jsonx/jsonx.cpp">jsonx</ulink>: Implements a <computeroutput><ref refid="class_jsonx_writer" kindref="compound">JsonxWriter</ref></computeroutput> which stringify SAX events into <ulink url="https://www-01.ibm.com/support/knowledgecenter/SS9H2Y_7.1.0/com.ibm.dp.doc/json_jsonx.html">JSONx</ulink> (a kind of XML) format. The example is a command line tool which converts input JSON into JSONx format.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><ref refid="class_schema" kindref="compound">Schema</ref><itemizedlist>
<listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/schemavalidator/schemavalidator.cpp">schemavalidator</ulink> : A command line tool to validate a JSON with a JSON schema.</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para>Advanced<itemizedlist>
<listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/prettyauto/prettyauto.cpp">prettyauto</ulink>: A modified version of <ulink url="https://github.com/Tencent/rapidjson/blob/master/example/pretty/pretty.cpp">pretty</ulink> to automatically handle JSON with any UTF encodings.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/parsebyparts/parsebyparts.cpp">parsebyparts</ulink>: Implements an <computeroutput>AsyncDocumentParser</computeroutput> which can parse JSON in parts, using C++11 thread.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/filterkey/filterkey.cpp">filterkey</ulink>: A command line tool to remove all values with user-specified key.</para>
</listitem><listitem><para><ulink url="https://github.com/Tencent/rapidjson/blob/master/example/filterkeydom/filterkeydom.cpp">filterkeydom</ulink>: Same tool as above, but it demonstrates how to use a generator to populate a <computeroutput>Document</computeroutput>.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_src_rapidjson_readme_1autotoc_md136">
<title>Contributing</title>
<para>RapidJSON welcomes contributions. When contributing, please follow the code below.</para>
<sect3 id="md_src_rapidjson_readme_1autotoc_md137">
<title>Issues</title>
<para>Feel free to submit issues and enhancement requests.</para>
<para>Please help us by providing <bold>minimal reproducible examples</bold>, because source code is easier to let other people understand what happens. For crash problems on certain platforms, please bring stack dump content with the detail of the OS, compiler, etc.</para>
<para>Please try breakpoint debugging first, tell us what you found, see if we can start exploring based on more information been prepared.</para>
</sect3>
<sect3 id="md_src_rapidjson_readme_1autotoc_md138">
<title>Workflow</title>
<para>In general, we follow the &quot;fork-and-pull&quot; Git workflow.</para>
<para><orderedlist>
<listitem><para><bold>Fork</bold> the repo on GitHub</para>
</listitem><listitem><para><bold>Clone</bold> the project to your own machine</para>
</listitem><listitem><para><bold>Checkout</bold> a new branch on your fork, start developing on the branch</para>
</listitem><listitem><para><bold>Test</bold> the change before commit, Make sure the changes pass all the tests, including <computeroutput>unittest</computeroutput> and <computeroutput>preftest</computeroutput>, please add test case for each new feature or bug-fix if needed.</para>
</listitem><listitem><para><bold>Commit</bold> changes to your own branch</para>
</listitem><listitem><para><bold>Push</bold> your work back up to your fork</para>
</listitem><listitem><para>Submit a <bold>Pull request</bold> so that we can review your changes</para>
</listitem></orderedlist>
</para>
<para>NOTE: Be sure to merge the latest from &quot;upstream&quot; before making a pull request!</para>
</sect3>
<sect3 id="md_src_rapidjson_readme_1autotoc_md139">
<title>Copyright and Licensing</title>
<para>You can copy and paste the license summary from below.</para>
<para><programlisting><codeline><highlight class="normal">Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight></codeline>
<codeline><highlight class="normal">in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">http://opensource.org/licenses/MIT</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight></codeline>
<codeline><highlight class="normal">under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight></codeline>
<codeline><highlight class="normal">CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight></codeline>
<codeline><highlight class="normal">specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight></codeline>
</programlisting> </para>
</sect3>
</sect2>
    </detaileddescription>
    <location file="src/rapidjson/readme.md"/>
  </compounddef>
</doxygen>
