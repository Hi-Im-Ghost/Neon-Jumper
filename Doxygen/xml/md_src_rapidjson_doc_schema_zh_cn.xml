<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="md_src_rapidjson_doc_schema_zh_cn" kind="page">
    <compoundname>md_src_rapidjson_doc_schema_zh_cn</compoundname>
    <title>Schema</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>（本功能于 v1.1.0 发布）</para>
<para>JSON <ref refid="class_schema" kindref="compound">Schema</ref> 是描述 JSON 格式的一个标准草案。一个 schema 本身也是一个 JSON。使用 JSON <ref refid="class_schema" kindref="compound">Schema</ref> 去校验 JSON，可以让你的代码安全地访问 DOM，而无须检查类型或键值是否存在等。这也能确保输出的 JSON 是符合指定的 schema。</para>
<para>RapidJSON 实现了一个 <ulink url="http://json-schema.org/documentation.html">JSON Schema Draft v4</ulink> 的校验器。若你不熟悉 JSON Schema，可以参考 <ulink url="http://spacetelescope.github.io/understanding-json-schema/">Understanding JSON Schema</ulink>。</para>
<sect1 id="md_src_rapidjson_doc_schema_zh_cn_1BasicUsage">
<title>Basic Usage</title>
<para>首先，你要把 JSON <ref refid="class_schema" kindref="compound">Schema</ref> 解析成 <computeroutput>Document</computeroutput>，再把它编译成一个 <computeroutput>SchemaDocument</computeroutput>。</para>
<para>然后，利用该 <computeroutput>SchemaDocument</computeroutput> 创建一个 <computeroutput>SchemaValidator</computeroutput>。它与 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 相似，都是能够处理 SAX 事件的。因此，你可以用 <computeroutput>document.Accept(validator)</computeroutput> 去校验一个 JSON，然后再获取校验结果。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schema_8h" kindref="compound">rapidjson/schema.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>sd;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(sd.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(schemaJson).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>此<sp/>schema<sp/>不是合法的<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_schema_document" kindref="compound">SchemaDocument</ref><sp/>schema(sd);<sp/></highlight><highlight class="comment">//<sp/>把一个<sp/>Document<sp/>编译至<sp/>SchemaDocument</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>之后不再需要<sp/>sd</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(inputJson).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>输入不是一个合法的<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_schema_validator" kindref="compound">SchemaValidator</ref><sp/>validator(schema);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!d.Accept(validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>输入的<sp/>JSON<sp/>不合乎<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>打印诊断信息</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>sb;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>validator.GetInvalidSchemaPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>schema:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>sb.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>keyword:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>validator.GetInvalidSchemaKeyword());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sb.<ref refid="class_generic_string_buffer_1a42f15c959046d899cb74c3120a6995f9" kindref="member">Clear</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>validator.GetInvalidDocumentPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>document:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>sb.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>一些注意点：</para>
<para><itemizedlist>
<listitem><para>一个 <computeroutput>SchemaDocment</computeroutput> 能被多个 <computeroutput>SchemaValidator</computeroutput> 引用。它不会被 <computeroutput>SchemaValidator</computeroutput> 修改。</para>
</listitem><listitem><para>可以重复使用一个 <computeroutput>SchemaValidator</computeroutput> 来校验多个文件。在校验其他文件前，须先调用 <computeroutput>validator.Reset()</computeroutput>。</para>
</listitem></itemizedlist>
</para>
</sect1>
<sect1 id="md_src_rapidjson_doc_schema_zh_cn_1ParsingSerialization">
<title>在解析／生成时进行校验</title>
<para>与大部分 JSON <ref refid="class_schema" kindref="compound">Schema</ref> 校验器有所不同，RapidJSON 提供了一个基于 SAX 的 schema 校验器实现。因此，你可以在输入流解析 JSON 的同时进行校验。若校验器遇到一个与 schema 不符的值，就会立即终止解析。这设计对于解析大型 JSON 文件时特别有用。</para>
<sect2 id="md_src_rapidjson_doc_schema_zh_cn_1DomParsing">
<title>DOM 解析</title>
<para>在使用 DOM 进行解析时，<computeroutput>Document</computeroutput> 除了接收 SAX 事件外，还需做一些准备及结束工作，因此，为了连接 <computeroutput>Reader</computeroutput>、<computeroutput>SchemaValidator</computeroutput> 和 <computeroutput>Document</computeroutput> 要做多一点事情。<computeroutput><ref refid="class_schema_validating_reader" kindref="compound">SchemaValidatingReader</ref></computeroutput> 是一个辅助类去做那些工作。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filereadstream_8h" kindref="compound">rapidjson/filereadstream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_schema_document" kindref="compound">SchemaDocument</ref><sp/>schema(sd);<sp/></highlight><highlight class="comment">//<sp/>把一个<sp/>Document<sp/>编译至<sp/>SchemaDocument</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>使用<sp/>reader<sp/>解析<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">FILE*<sp/>fp<sp/>=<sp/>fopen(</highlight><highlight class="stringliteral">&quot;big.json&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;r&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_file_read_stream" kindref="compound">FileReadStream</ref><sp/>is(fp,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>用<sp/>reader<sp/>解析<sp/>JSON，校验它的<sp/>SAX<sp/>事件，并存储至<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_schema_validating_reader" kindref="compound">SchemaValidatingReader&lt;kParseDefaultFlags, FileReadStream, UTF8&lt;&gt;</ref><sp/>&gt;<sp/>reader(is,<sp/>schema);</highlight></codeline>
<codeline><highlight class="normal">d.<ref refid="class_generic_document_1ac30b4e8887974060b695be20c3ceb02c" kindref="member">Populate</ref>(reader);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader.GetParseResult())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>不是一个合法的<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>当<sp/>reader.GetParseResult().Code()<sp/>==<sp/>kParseErrorTermination,</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>它可能是被以下原因中止：</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(1)<sp/>校验器发现<sp/>JSON<sp/>不合乎<sp/>schema；或</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(2)<sp/>输入流有<sp/>I/O<sp/>错误。</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>检查校验结果</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>输入的<sp/>JSON<sp/>不合乎<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>打印诊断信息</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>sb;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.GetInvalidSchemaPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>schema:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>sb.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>keyword:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>reader.GetInvalidSchemaKeyword());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.<ref refid="class_generic_string_buffer_1a42f15c959046d899cb74c3120a6995f9" kindref="member">Clear</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.GetInvalidDocumentPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>document:<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>sb.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_src_rapidjson_doc_schema_zh_cn_1SaxParsing">
<title>Parsing</title>
<para>使用 SAX 解析时，情况就简单得多。若只需要校验 JSON 而无需进一步处理，那么仅需要：</para>
<para><programlisting><codeline><highlight class="normal">SchemaValidator<sp/>validator(schema);</highlight></codeline>
<codeline><highlight class="normal">Reader<sp/>reader;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!reader.Parse(stream,<sp/>validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!validator.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>这种方式和 <ulink url="example/schemavalidator/schemavalidator.cpp">schemavalidator</ulink> 例子完全相同。这带来的独特优势是，无论 JSON 多巨大，永远维持低内存用量（内存用量只与 <ref refid="class_schema" kindref="compound">Schema</ref> 的复杂度相关）。</para>
<para>若你需要进一步处理 SAX 事件，便可使用模板类 <computeroutput><ref refid="class_generic_schema_validator" kindref="compound">GenericSchemaValidator</ref></computeroutput> 去设置校验器的输出 <computeroutput>Handler</computeroutput>：</para>
<para><programlisting><codeline><highlight class="normal">MyHandler<sp/>handler;</highlight></codeline>
<codeline><highlight class="normal">GenericSchemaValidator&lt;SchemaDocument,<sp/>MyHandler&gt;<sp/>validator(schema,<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal">Reader<sp/>reader;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!reader.Parse(ss,<sp/>validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!validator.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_src_rapidjson_doc_schema_zh_cn_1Serialization">
<title>Serialization</title>
<para>我们也可以在生成（serialization）的时候进行校验。这能确保输出的 JSON 符合一个 JSON Schema。</para>
<para><programlisting><codeline><highlight class="normal">StringBuffer<sp/>sb;</highlight></codeline>
<codeline><highlight class="normal">Writer&lt;StringBuffer&gt;<sp/>writer(sb);</highlight></codeline>
<codeline><highlight class="normal">GenericSchemaValidator&lt;SchemaDocument,<sp/>Writer&lt;StringBuffer&gt;<sp/>&gt;<sp/>validator(s,<sp/>writer);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!d.Accept(validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Some<sp/>problem<sp/>during<sp/>Accept(),<sp/>it<sp/>may<sp/>be<sp/>validation<sp/>or<sp/>encoding<sp/>issues.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!validator.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>当然，如果你的应用仅需要 SAX 风格的生成，那么只需要把 SAX 事件由原来发送到 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput>，改为发送到 <computeroutput>SchemaValidator</computeroutput>。</para>
</sect2>
</sect1>
<sect1 id="md_src_rapidjson_doc_schema_zh_cn_1RemoteSchema">
<title>远程 Schema</title>
<para>JSON <ref refid="class_schema" kindref="compound">Schema</ref> 支持 <ulink url="http://spacetelescope.github.io/understanding-json-schema/structuring.html"><computeroutput>$ref</computeroutput> 关键字</ulink>，它是一个 <ref refid="pointer_8zh-cn_8md" kindref="compound">JSON pointer</ref> 引用至一个本地（local）或远程（remote） schema。本地指针的首字符是 <computeroutput>#</computeroutput>，而远程指针是一个相对或绝对 URI。例如：</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">{<sp/>&quot;$ref&quot;:<sp/>&quot;definitions.json#/address&quot;<sp/>}</highlight></codeline>
</programlisting></para>
<para>由于 <computeroutput>SchemaDocument</computeroutput> 并不知道如何处理那些 URI，它需要使用者提供一个 <computeroutput>IRemoteSchemaDocumentProvider</computeroutput> 的实例去处理。</para>
<para><programlisting><codeline><highlight class="normal">class<sp/>MyRemoteSchemaDocumentProvider<sp/>:<sp/>public<sp/>IRemoteSchemaDocumentProvider<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>virtual<sp/>const<sp/>SchemaDocument*<sp/>GetRemoteDocument(const<sp/>char*<sp/>uri,<sp/>SizeType<sp/>length)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Resolve<sp/>the<sp/>uri<sp/>and<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>that<sp/>schema.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MyRemoteSchemaDocumentProvider<sp/>provider;</highlight></codeline>
<codeline><highlight class="normal">SchemaDocument<sp/>schema(sd,<sp/>&amp;provider);</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_src_rapidjson_doc_schema_zh_cn_1Conformance">
<title>Conformance</title>
<para>RapidJSON 通过了 <ulink url="https://github.com/json-schema/JSON-Schema-Test-Suite">JSON Schema Test Suite</ulink> (Json <ref refid="class_schema" kindref="compound">Schema</ref> draft 4) 中 263 个测试的 262 个。</para>
<para>没通过的测试是 <computeroutput>refRemote.json</computeroutput> 中的 &quot;change resolution scope&quot; - &quot;changed scope ref invalid&quot;。这是由于未实现 <computeroutput>id</computeroutput> schema 关键字及 URI 合并功能。</para>
<para>除此以外，关于字符串类型的 <computeroutput>format</computeroutput> schema 关键字也会被忽略，因为标准中并没需求必须实现。</para>
<sect2 id="md_src_rapidjson_doc_schema_zh_cn_1RegEx">
<title>正则表达式</title>
<para><computeroutput>pattern</computeroutput> 及 <computeroutput>patternProperties</computeroutput> 这两个 schema 关键字使用了正则表达式去匹配所需的模式。</para>
<para>RapidJSON 实现了一个简单的 NFA 正则表达式引擎，并预设使用。它支持以下语法。</para>
<para><table rows="25" cols="2"><row>
<entry thead="yes"><para>语法   </para>
</entry><entry thead="yes"><para>描述    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>ab</computeroutput>   </para>
</entry><entry thead="no"><para>串联    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a&amp;#124;b</computeroutput>   </para>
</entry><entry thead="no"><para>交替    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a?</computeroutput>   </para>
</entry><entry thead="no"><para>零或一次    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a*</computeroutput>   </para>
</entry><entry thead="no"><para>零或多次    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a+</computeroutput>   </para>
</entry><entry thead="no"><para>一或多次    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a{3}</computeroutput>   </para>
</entry><entry thead="no"><para>刚好 3 次    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a{3,}</computeroutput>   </para>
</entry><entry thead="no"><para>至少 3 次    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a{3,5}</computeroutput>   </para>
</entry><entry thead="no"><para>3 至 5 次    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>(ab)</computeroutput>   </para>
</entry><entry thead="no"><para>分组    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>^a</computeroutput>   </para>
</entry><entry thead="no"><para>在开始处    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>a$</computeroutput>   </para>
</entry><entry thead="no"><para>在结束处    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>.</computeroutput>   </para>
</entry><entry thead="no"><para>任何字符    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>[abc]</computeroutput>   </para>
</entry><entry thead="no"><para>字符组    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>[a-c]</computeroutput>   </para>
</entry><entry thead="no"><para>字符组范围    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>[a-z0-9_]</computeroutput>   </para>
</entry><entry thead="no"><para>字符组组合    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>[^abc]</computeroutput>   </para>
</entry><entry thead="no"><para>字符组取反    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>[^a-c]</computeroutput>   </para>
</entry><entry thead="no"><para>字符组范围取反    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>[\b]</computeroutput>   </para>
</entry><entry thead="no"><para>退格符 (U+0008)    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\&amp;#124;</computeroutput>, <computeroutput>\\</computeroutput>, ...   </para>
</entry><entry thead="no"><para>转义字符    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\f</computeroutput>   </para>
</entry><entry thead="no"><para>馈页 (U+000C)    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\n</computeroutput>   </para>
</entry><entry thead="no"><para>馈行 (U+000A)    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\r</computeroutput>   </para>
</entry><entry thead="no"><para>回车 (U+000D)    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\t</computeroutput>   </para>
</entry><entry thead="no"><para>制表 (U+0009)    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>\v</computeroutput>   </para>
</entry><entry thead="no"><para>垂直制表 (U+000B)   </para>
</entry></row>
</table>
</para>
<para>对于使用 C++11 编译器的使用者，也可使用 <computeroutput>std::regex</computeroutput>，只需定义 <computeroutput>RAPIDJSON_SCHEMA_USE_INTERNALREGEX=0</computeroutput> 及 <computeroutput>RAPIDJSON_SCHEMA_USE_STDREGEX=1</computeroutput>。若你的 schema 无需使用 <computeroutput>pattern</computeroutput> 或 <computeroutput>patternProperties</computeroutput>，可以把两个宏都设为零，以禁用此功能，这样做可节省一些代码体积。</para>
</sect2>
</sect1>
<sect1 id="md_src_rapidjson_doc_schema_zh_cn_1Performance">
<title>Performance</title>
<para>大部分 C++ JSON 库都未支持 JSON Schema。因此我们尝试按照 <ulink url="https://github.com/ebdrup/json-schema-benchmark">json-schema-benchmark</ulink> 去评估 RapidJSON 的 JSON <ref refid="class_schema" kindref="compound">Schema</ref> 校验器。该评测测试了 11 个运行在 node.js 上的 JavaScript 库。</para>
<para>该评测校验 <ulink url="https://github.com/json-schema/JSON-Schema-Test-Suite">JSON Schema Test Suite</ulink> 中的测试，当中排除了一些测试套件及个别测试。我们在 <ulink url="test/perftest/schematest.cpp"><computeroutput>schematest.cpp</computeroutput></ulink> 实现了相同的评测。</para>
<para>在 MacBook Pro (2.8 GHz Intel Core i7) 上收集到以下结果。</para>
<para><table rows="13" cols="3"><row>
<entry thead="yes"><para>校验器   </para>
</entry><entry thead="yes" align='center'><para>相对速度   </para>
</entry><entry thead="yes" align='center'><para>每秒执行的测试数目    </para>
</entry></row>
<row>
<entry thead="no"><para>RapidJSON   </para>
</entry><entry thead="no" align='center'><para>155%   </para>
</entry><entry thead="no" align='center'><para>30682    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/epoberezkin/ajv"><computeroutput>ajv</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>100%   </para>
</entry><entry thead="no" align='center'><para>19770 (± 1.31%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/mafintosh/is-my-json-valid"><computeroutput>is-my-json-valid</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>70%   </para>
</entry><entry thead="no" align='center'><para>13835 (± 2.84%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/bugventure/jsen"><computeroutput>jsen</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>57.7%   </para>
</entry><entry thead="no" align='center'><para>11411 (± 1.27%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/AlexeyGrishin/schemasaurus"><computeroutput>schemasaurus</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>26%   </para>
</entry><entry thead="no" align='center'><para>5145 (± 1.62%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/playlyfe/themis"><computeroutput>themis</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>19.9%   </para>
</entry><entry thead="no" align='center'><para>3935 (± 2.69%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/zaggino/z-schema"><computeroutput>z-schema</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>7%   </para>
</entry><entry thead="no" align='center'><para>1388 (± 0.84%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/pandastrike/jsck#readme"><computeroutput>jsck</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>3.1%   </para>
</entry><entry thead="no" align='center'><para>606 (± 2.84%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/tdegrunt/jsonschema#readme"><computeroutput>jsonschema</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>0.9%   </para>
</entry><entry thead="no" align='center'><para>185 (± 1.01%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/Prestaul/skeemas#readme"><computeroutput>skeemas</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>0.8%   </para>
</entry><entry thead="no" align='center'><para>154 (± 0.79%)    </para>
</entry></row>
<row>
<entry thead="no"><para>tv4   </para>
</entry><entry thead="no" align='center'><para>0.5%   </para>
</entry><entry thead="no" align='center'><para>93 (± 0.94%)    </para>
</entry></row>
<row>
<entry thead="no"><para><ulink url="https://github.com/natesilva/jayschema"><computeroutput>jayschema</computeroutput></ulink>   </para>
</entry><entry thead="no" align='center'><para>0.1%   </para>
</entry><entry thead="no" align='center'><para>21 (± 1.14%)   </para>
</entry></row>
</table>
</para>
<para>换言之，RapidJSON 比最快的 JavaScript 库（ajv）快约 1.5x。比最慢的快 1400x。 </para>
</sect1>
    </detaileddescription>
    <location file="src/rapidjson/doc/schema.zh-cn.md"/>
  </compounddef>
</doxygen>
