<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="rapidjsontest_8cpp" kind="file" language="C++">
    <compoundname>rapidjsontest.cpp</compoundname>
    <includes refid="perftest_8h" local="yes">perftest.h</includes>
    <includes refid="rapidjson_8h" local="yes">rapidjson/rapidjson.h</includes>
    <includes refid="document_8h" local="yes">rapidjson/document.h</includes>
    <includes refid="prettywriter_8h" local="yes">rapidjson/prettywriter.h</includes>
    <includes refid="stringbuffer_8h" local="yes">rapidjson/stringbuffer.h</includes>
    <includes refid="filereadstream_8h" local="yes">rapidjson/filereadstream.h</includes>
    <includes refid="istreamwrapper_8h" local="yes">rapidjson/istreamwrapper.h</includes>
    <includes refid="encodedstream_8h" local="yes">rapidjson/encodedstream.h</includes>
    <includes refid="memorystream_8h" local="yes">rapidjson/memorystream.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">vector</includes>
    <incdepgraph>
      <node id="9">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>rapidjson/document.h</label>
        <link refid="document_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>rapidjson/filereadstream.h</label>
        <link refid="filereadstream_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>internal/dtoa.h</label>
        <link refid="dtoa_8h"/>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>itoa.h</label>
        <link refid="itoa_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>rapidjson/istreamwrapper.h</label>
        <link refid="istreamwrapper_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>rapidjson/prettywriter.h</label>
        <link refid="prettywriter_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>rapidjson/rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>stringbuffer.h</label>
        <link refid="stringbuffer_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>writer.h</label>
        <link refid="writer_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>perftest.h</label>
        <link refid="perftest_8h"/>
      </node>
      <node id="1">
        <label>src/rapidjson/test/perftest/rapidjsontest.cpp</label>
        <link refid="rapidjsontest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="26">
        <label>climits</label>
      </node>
      <node id="19">
        <label>cstddef</label>
      </node>
      <node id="38">
        <label>cstdio</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>cstring</label>
      </node>
      <node id="29">
        <label>cwchar</label>
      </node>
      <node id="42">
        <label>fstream</label>
      </node>
      <node id="41">
        <label>ios</label>
      </node>
      <node id="40">
        <label>iosfwd</label>
      </node>
      <node id="31">
        <label>iterator</label>
      </node>
      <node id="24">
        <label>limits</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
      <node id="30">
        <label>new</label>
      </node>
      <node id="43">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_rapid_json" prot="public">RapidJson</innerclass>
    <innerclass refid="struct_value_counter" prot="public">ValueCounter</innerclass>
    <innerclass refid="struct_null_stream" prot="public">NullStream</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" prot="public" static="no">
        <name>SIMD_SUFFIX</name>
        <param><defname>name</defname></param>
        <initializer>name</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="38" column="10" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" prot="public" static="no">
        <name>TEST_TYPED</name>
        <param><defname>index</defname></param>
        <param><defname>Name</defname></param>
        <initializer><ref refid="filestreamtest_8cpp_1abbbd79560da589a811f680dad7f5746a" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>, <ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_##Name)) {\
    for (size_t i = 0; i &lt; kTrialCount * 10; i++) {\
        <ref refid="fwd_8h_1a2d1473c3dd9ab6c975589b45436fe55e" kindref="member">StringStream</ref> s(types_[index]);\
        <ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler</ref>&lt;&gt; h;\
        <ref refid="fwd_8h_1ab7f1c1207749ff25c0d7f0cc88e62788" kindref="member">Reader</ref> reader;\
        EXPECT_TRUE(reader.Parse(s, h));\
    }\
}\
<ref refid="filestreamtest_8cpp_1abbbd79560da589a811f680dad7f5746a" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>, <ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseInsitu_DummyHandler_##Name)) {\
    for (size_t i = 0; i &lt; kTrialCount * 10; i++) {\
        memcpy(temp_, types_[index], typesLength_[index] + 1);\
        <ref refid="fwd_8h_1a87256fd77e335ea15cd195ed8c55e312" kindref="member">InsituStringStream</ref> s(temp_);\
        <ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler</ref>&lt;&gt; h;\
        <ref refid="fwd_8h_1ab7f1c1207749ff25c0d7f0cc88e62788" kindref="member">Reader</ref> reader;\
        EXPECT_TRUE(reader.Parse&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01" kindref="member">kParseInsituFlag</ref>&gt;(s, h));\
    }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="104" column="9" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" prot="public" static="no">
        <name>TEST_TYPED</name>
        <param><defname>index</defname></param>
        <param><defname>Name</defname></param>
        <initializer><ref refid="filestreamtest_8cpp_1abbbd79560da589a811f680dad7f5746a" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>, <ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(Writer_StringBuffer_##Name)) {\
    for (size_t i = 0; i &lt; kTrialCount * 10; i++) {\
        <ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref> s(0, 1024 * 1024);\
        <ref refid="class_writer" kindref="compound">Writer</ref>&lt;<ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref>&gt; writer(s);\
        typesDoc_[index].Accept(writer);\
        const char* str = s.GetString();\
        (void)str;\
    }\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="387" column="9" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="387" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParseInsitu_DummyHandler))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseInsitu_DummyHandler)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="75" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ac416532c31a62b0c44e621bc61546c18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParseInsitu_DummyHandler_ValidateEncoding))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseInsitu_DummyHandler_ValidateEncoding)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="85" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="85" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a5c4da49db46044172dd84750e942b8d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="95" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="95" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a509df972ce4104de1a4037a2104b5a3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_FullPrecision))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_FullPrecision)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="133" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="133" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a9ec5a4cb11f28ae3b27ad05f79658d07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParseIterative_DummyHandler))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterative_DummyHandler)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="142" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="142" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a29e2ade76e0630e68be012847c2baae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParseIterativeInsitu_DummyHandler))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterativeInsitu_DummyHandler)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="151" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="151" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ae9f355efa759013fb88ce867af8534b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParseIterativePull_DummyHandler))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterativePull_DummyHandler)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="161" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="161" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a05a7bbdf647c72c2d8e75cd3ee31c57f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParseIterativePullInsitu_DummyHandler))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterativePullInsitu_DummyHandler)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="175" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="175" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a610733b1c473d4125c41e28f47330b87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_ValidateEncoding))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_ValidateEncoding)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="190" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="190" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a8d33c9dfd7bb9a1848d3fa4b8b89d5c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParseInsitu_MemoryPoolAllocator))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseInsitu_MemoryPoolAllocator)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="199" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="199" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a362d87248c7e945df452bb3b8f3fbbf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParseIterativeInsitu_MemoryPoolAllocator))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseIterativeInsitu_MemoryPoolAllocator)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="208" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="208" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a83c1d0fe86cff05d80f01062603e5685" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParse_MemoryPoolAllocator))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParse_MemoryPoolAllocator)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="217" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="217" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a5077a48271eeb5a0a5c3fe5158626dba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParseLength_MemoryPoolAllocator))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseLength_MemoryPoolAllocator)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="225" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="225" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a179d9510510b8a35d756b8320c78123b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParseStdString_MemoryPoolAllocator))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseStdString_MemoryPoolAllocator)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="234" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="234" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a7b6ae3b0826983eda5b282d9539e2d63" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParseIterative_MemoryPoolAllocator))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseIterative_MemoryPoolAllocator)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="244" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="244" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1abe383995a368245e577231d56f4a2bfe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParse_CrtAllocator))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParse_CrtAllocator)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="252" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="252" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a490588a7375741a24695d645ff6f0b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParseEncodedInputStream_MemoryStream))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseEncodedInputStream_MemoryStream)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="261" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="261" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a3f65d904fae20e0a4bf35f7a76e427af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(DocumentParseAutoUTFInputStream_MemoryStream))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseAutoUTFInputStream_MemoryStream)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="271" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="271" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1af9d33af8023a2f15d5e4b40cc41acf68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>size_t</type>
        <definition>size_t Traverse</definition>
        <argsstring>(const T &amp;value)</argsstring>
        <name>Traverse</name>
        <param>
          <type>const <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="282" column="8" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="282" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a93f2bfd63a35e72ffe1101f4fff144d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, DocumentTraverse)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>DocumentTraverse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="304" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="304" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ad10d99603afdb6113f09dc3d3a4ff34a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, DocumentAccept)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>DocumentAccept</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="331" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="331" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1aa70d4192d54d67608f2c2f53b2c4235d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, DocumentFind)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>DocumentFind</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="339" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="339" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ab6ab26a19c3a30bc0f9ba15cbfb316f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, Writer_NullStream)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>Writer_NullStream</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="365" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="365" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a0c64eabfbfc2cd8615130026e1a9d9a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(Writer_StringBuffer))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(Writer_StringBuffer)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="375" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="375" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a2133e33675a85073c826dfba6b7b07d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(PrettyWriter_StringBuffer))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(PrettyWriter_StringBuffer)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="408" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="408" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ae857c8073b2a1aa721b533f79cf25e37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, internal_Pow10)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>internal_Pow10</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="421" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="421" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a0be9d103f6c0660995f3c836184c4aa6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SkipWhitespace_Basic)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>SkipWhitespace_Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="428" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="428" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ada56e6952daca0eee7b4042b94fc074f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(SkipWhitespace))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(<ref refid="reader_8h_1aeddf0374b22926be76140ec6708dc203" kindref="member">SkipWhitespace</ref>)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="437" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="437" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a151f2ae17ac9f36edbb883570448b32a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SkipWhitespace_strspn)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>SkipWhitespace_strspn</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="445" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="445" bodyend="450"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a7182b72d16b823573c12d79999f73ffc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, UTF8_Validate)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>UTF8_Validate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="452" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="452" bodyend="462"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ace05756eaf9f09ee243463f45ba6c42e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, FileReadStream)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="class_file_read_stream" kindref="compound">FileReadStream</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="464" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="464" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a3ebb608772c889020d0fd63bea73b8ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_FileReadStream))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_FileReadStream)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="475" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="475" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a06cc4ad2ab6f651379c14cd8a8c7b7cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, IStreamWrapper)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="487" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="487" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a7f86ee31336d3d12540c837de9e2e699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, IStreamWrapper_Unbuffered)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>IStreamWrapper_Unbuffered</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="498" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="498" bodyend="506"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a6372368807ad302478937a5fad2ac188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, IStreamWrapper_Setbuffered)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type>IStreamWrapper_Setbuffered</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="508" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="508" bodyend="519"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1ade385e9ec32bd32f1690280a746a663b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_IStreamWrapper))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_IStreamWrapper)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="521" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="521" bodyend="531"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a4c765ff3cc2dbed0fe4b59509272bdc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_IStreamWrapper_Unbuffered))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_IStreamWrapper_Unbuffered)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="533" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="533" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a468dd3d8d3db254455a83503d48ecff3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, SIMD_SUFFIX(ReaderParse_DummyHandler_IStreamWrapper_Setbuffered))</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="simdtest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_IStreamWrapper_Setbuffered)</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="544" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="544" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="rapidjsontest_8cpp_1a0f38c4daa432d3b8b275790f12642103" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST_F</definition>
        <argsstring>(RapidJson, StringBuffer)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="class_rapid_json" kindref="compound">RapidJson</ref></type>
        </param>
        <param>
          <type><ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/perftest/rapidjsontest.cpp" line="558" column="1" bodyfile="src/rapidjson/test/perftest/rapidjsontest.cpp" bodystart="558" bodyend="562"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="perftest_8h" kindref="compound">perftest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>TEST_RAPIDJSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rapidjson_8h" kindref="compound">rapidjson/rapidjson.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">rapidjson/document.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="prettywriter_8h" kindref="compound">rapidjson/prettywriter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringbuffer_8h" kindref="compound">rapidjson/stringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filereadstream_8h" kindref="compound">rapidjson/filereadstream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="istreamwrapper_8h" kindref="compound">rapidjson/istreamwrapper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="encodedstream_8h" kindref="compound">rapidjson/encodedstream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memorystream_8h" kindref="compound">rapidjson/memorystream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>RAPIDJSON_SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMD_SUFFIX(name)<sp/>name##_SSE2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RAPIDJSON_SSE42)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMD_SUFFIX(name)<sp/>name##_SSE42</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(RAPIDJSON_NEON)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMD_SUFFIX(name)<sp/>name##_NEON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMD_SUFFIX(name)<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="class_rapid_json" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_rapid_json" kindref="compound">RapidJson</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>PerfTest<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_rapid_json_1a5bd86d58d01d92ae83938bc3e09192d5" kindref="member">RapidJson</ref>()<sp/>:<sp/><ref refid="class_rapid_json_1a03764452de8099f9fc03e5c7666dd5af" kindref="member">temp_</ref>(),<sp/><ref refid="class_rapid_json_1ab3e1ab7e5ed74284ebb9d9a4a6de0bcf" kindref="member">doc_</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_rapid_json_1ae4e7e160193b9cac9c22f226e3d2b20e" kindref="member">SetUp</ref>()<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerfTest::SetUp();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>temp<sp/>buffer<sp/>for<sp/>insitu<sp/>parsing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_rapid_json_1a03764452de8099f9fc03e5c7666dd5af" kindref="member">temp_</ref><sp/>=<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*)malloc(length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Parse<sp/>as<sp/>a<sp/>document</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="class_rapid_json_1ab3e1ab7e5ed74284ebb9d9a4a6de0bcf" kindref="member">doc_</ref>.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(json_).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>8;<sp/>i++)</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="class_rapid_json_1a8a2cefbee6abd70b9efd3ddaf49fe97e" kindref="member">typesDoc_</ref>[i].Parse(types_[i]).HasParseError());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_rapid_json_1ac89662f7dc5847e43237fe7c4121e2e4" kindref="member">TearDown</ref>()<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PerfTest::TearDown();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<ref refid="class_rapid_json_1a03764452de8099f9fc03e5c7666dd5af" kindref="member">temp_</ref>);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_rapid_json_1a5bd86d58d01d92ae83938bc3e09192d5" kindref="member">RapidJson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_rapid_json" kindref="compound">RapidJson</ref>&amp;);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_rapid_json" kindref="compound">RapidJson</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_rapid_json" kindref="compound">RapidJson</ref>&amp;);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="class_rapid_json_1a03764452de8099f9fc03e5c7666dd5af" kindref="member">temp_</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/><ref refid="class_rapid_json_1ab3e1ab7e5ed74284ebb9d9a4a6de0bcf" kindref="member">doc_</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/><ref refid="class_rapid_json_1a8a2cefbee6abd70b9efd3ddaf49fe97e" kindref="member">typesDoc_</ref>[8];</highlight></codeline>
<codeline lineno="73"><highlight class="normal">};</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseInsitu_DummyHandler))<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>json_,<sp/>length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_insitu_string_stream" kindref="compound">InsituStringStream</ref><sp/>s(temp_);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01" kindref="member">kParseInsituFlag</ref>&gt;(s,<sp/>h));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseInsitu_DummyHandler_ValidateEncoding))<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>json_,<sp/>length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_insitu_string_stream" kindref="compound">InsituStringStream</ref><sp/>s(temp_);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01" kindref="member">kParseInsituFlag</ref><sp/>|<sp/><ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a9b3baa16346575d2dc072b23a88e1928" kindref="member">kParseValidateEncodingFlag</ref>&gt;(s,<sp/>h));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler))<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(json_);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>h));</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_TYPED(index,<sp/>Name)\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor">TEST_F(RapidJson,<sp/>SIMD_SUFFIX(ReaderParse_DummyHandler_##Name))<sp/>{\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount<sp/>*<sp/>10;<sp/>i++)<sp/>{\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringStream<sp/>s(types_[index]);\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseReaderHandler&lt;&gt;<sp/>h;\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader<sp/>reader;\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.Parse(s,<sp/>h));\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor">}\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor">TEST_F(RapidJson,<sp/>SIMD_SUFFIX(ReaderParseInsitu_DummyHandler_##Name))<sp/>{\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount<sp/>*<sp/>10;<sp/>i++)<sp/>{\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>types_[index],<sp/>typesLength_[index]<sp/>+<sp/>1);\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>InsituStringStream<sp/>s(temp_);\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseReaderHandler&lt;&gt;<sp/>h;\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader<sp/>reader;\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.Parse&lt;kParseInsituFlag&gt;(s,<sp/>h));\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(0,<sp/>Booleans)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(1,<sp/>Floats)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(2,<sp/>Guids)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(3,<sp/>Integers)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(4,<sp/>Mixed)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(5,<sp/>Nulls)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(6,<sp/>Paragraphs)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TEST_TYPED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_FullPrecision))<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(json_);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a057fbeacafb16bb7d24c9998262cae46" kindref="member">kParseFullPrecisionFlag</ref>&gt;(s,<sp/>h));</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterative_DummyHandler))<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(json_);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450aadb14f5a3b6b33e28055e913a2eae5e9" kindref="member">kParseIterativeFlag</ref>&gt;(s,<sp/>h));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterativeInsitu_DummyHandler))<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>json_,<sp/>length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_insitu_string_stream" kindref="compound">InsituStringStream</ref><sp/>s(temp_);</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450aadb14f5a3b6b33e28055e913a2eae5e9" kindref="member">kParseIterativeFlag</ref>|<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01" kindref="member">kParseInsituFlag</ref>&gt;(s,<sp/>h));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterativePull_DummyHandler))<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(json_);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a7de472eda2ad9de13cfd8c1de74f1754" kindref="member">IterativeParseInit</ref>();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!reader.<ref refid="class_generic_reader_1aa1e9e1eef614fde971550ed2f955151d" kindref="member">IterativeParseComplete</ref>())<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader.<ref refid="class_generic_reader_1a257891331e0c259903e7066fb4cebf92" kindref="member">IterativeParseNext</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80" kindref="member">kParseDefaultFlags</ref>&gt;(s,<sp/>h))</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(reader.<ref refid="class_generic_reader_1ac417441794477ea747b63adb6d3653a9" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal">}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParseIterativePullInsitu_DummyHandler))<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>json_,<sp/>length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_insitu_string_stream" kindref="compound">InsituStringStream</ref><sp/>s(temp_);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a7de472eda2ad9de13cfd8c1de74f1754" kindref="member">IterativeParseInit</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!reader.<ref refid="class_generic_reader_1aa1e9e1eef614fde971550ed2f955151d" kindref="member">IterativeParseComplete</ref>())<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader.<ref refid="class_generic_reader_1a257891331e0c259903e7066fb4cebf92" kindref="member">IterativeParseNext</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80" kindref="member">kParseDefaultFlags</ref>|<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a13188bd483b4df0b6582bebe2aeb5b01" kindref="member">kParseInsituFlag</ref>&gt;(s,<sp/>h))</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(reader.<ref refid="class_generic_reader_1ac417441794477ea747b63adb6d3653a9" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_ValidateEncoding))<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(json_);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a9b3baa16346575d2dc072b23a88e1928" kindref="member">kParseValidateEncodingFlag</ref>&gt;(s,<sp/>h));</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal">}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseInsitu_MemoryPoolAllocator))<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>json_,<sp/>length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a13f68b1896a24eea4cdbc03a3916225f" kindref="member">ParseInsitu</ref>(temp_);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseIterativeInsitu_MemoryPoolAllocator))<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>json_,<sp/>length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a13f68b1896a24eea4cdbc03a3916225f" kindref="member">ParseInsitu</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450aadb14f5a3b6b33e28055e913a2eae5e9" kindref="member">kParseIterativeFlag</ref>&gt;(temp_);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParse_MemoryPoolAllocator))<sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(json_);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseLength_MemoryPoolAllocator))<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(json_,<sp/>length_);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal">}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseStdString_MemoryPoolAllocator))<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>s(json_,<sp/>length_);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(s);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseIterative_MemoryPoolAllocator))<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450aadb14f5a3b6b33e28055e913a2eae5e9" kindref="member">kParseIterativeFlag</ref>&gt;(json_);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParse_CrtAllocator))<sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(temp_,<sp/>json_,<sp/>length_<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">GenericDocument&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>&gt;<sp/>doc;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(temp_);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseEncodedInputStream_MemoryStream))<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_memory_stream" kindref="compound">MemoryStream</ref><sp/>ms(json_,<sp/>length_);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_encoded_input_stream" kindref="compound">EncodedInputStream&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_memory_stream" kindref="compound">MemoryStream</ref>&gt;<sp/>is(ms);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921" kindref="member">ParseStream</ref>&lt;0,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref><sp/>&gt;(is);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(DocumentParseAutoUTFInputStream_MemoryStream))<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_memory_stream" kindref="compound">MemoryStream</ref><sp/>ms(json_,<sp/>length_);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auto_u_t_f_input_stream" kindref="compound">AutoUTFInputStream&lt;unsigned, MemoryStream&gt;</ref><sp/>is(ms);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>doc;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc.<ref refid="class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921" kindref="member">ParseStream</ref>&lt;0,<sp/><ref refid="struct_auto_u_t_f" kindref="compound">AutoUTF&lt;unsigned&gt;</ref><sp/>&gt;(is);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_TRUE(doc.IsObject());</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="rapidjsontest_8cpp_1af9d33af8023a2f15d5e4b40cc41acf68" kindref="member">Traverse</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>&amp;<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>.GetType())<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a146f46700e905e8df96a6a90b5c7640f" kindref="member">kObjectType</ref>:</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::ConstMemberIterator<sp/>itr<sp/>=<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>.MemberBegin();<sp/>itr<sp/>!=<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>.MemberEnd();<sp/>++itr)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count++;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/><ref refid="rapidjsontest_8cpp_1af9d33af8023a2f15d5e4b40cc41acf68" kindref="member">Traverse</ref>(itr-&gt;value);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" kindref="member">kArrayType</ref>:</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::ConstValueIterator<sp/>itr<sp/>=<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>.Begin();<sp/>itr<sp/>!=<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>.End();<sp/>++itr)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>+=<sp/><ref refid="rapidjsontest_8cpp_1af9d33af8023a2f15d5e4b40cc41acf68" kindref="member">Traverse</ref>(*itr);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>count;</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>DocumentTraverse)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count<sp/>=<sp/><ref refid="rapidjsontest_8cpp_1af9d33af8023a2f15d5e4b40cc41acf68" kindref="member">Traverse</ref>(doc_);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(4339u,<sp/>count);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(i<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>count<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight></codeline>
<codeline lineno="315"><highlight class="normal">RAPIDJSON_DIAG_OFF(effc++)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="struct_value_counter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_value_counter" kindref="compound">ValueCounter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler</ref>&lt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_value_counter_1a05f8468b0095bc67022219da8f2a3727" kindref="member">ValueCounter</ref>()<sp/>:<sp/><ref refid="struct_value_counter_1a91a3e1a166d86d269efeea502946e3da" kindref="member">count_</ref>(1)<sp/>{}<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>root</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_value_counter_1aa3bdd686be53d1978d491ac4da4a3593" kindref="member">EndObject</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>memberCount)<sp/>{<sp/><ref refid="struct_value_counter_1a91a3e1a166d86d269efeea502946e3da" kindref="member">count_</ref><sp/>+=<sp/>memberCount<sp/>*<sp/>2;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_value_counter_1a54a92e4c244e7148bcb3d054f0ecfdda" kindref="member">EndArray</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>elementCount)<sp/>{<sp/><ref refid="struct_value_counter_1a91a3e1a166d86d269efeea502946e3da" kindref="member">count_</ref><sp/>+=<sp/>elementCount;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/><ref refid="struct_value_counter_1a91a3e1a166d86d269efeea502946e3da" kindref="member">count_</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">};</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">RAPIDJSON_DIAG_POP</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>DocumentAccept)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_value_counter" kindref="compound">ValueCounter</ref><sp/>counter;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc_.Accept(counter);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(4339u,<sp/>counter.<ref refid="struct_value_counter_1a91a3e1a166d86d269efeea502946e3da" kindref="member">count_</ref>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal">}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>DocumentFind)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Document::ValueType</ref><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">ValueType</ref>;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_member_iterator" kindref="compound">ValueType::ConstMemberIterator</ref><sp/>ConstMemberIterator;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>&amp;doc<sp/>=<sp/>typesDoc_[7];<sp/></highlight><highlight class="comment">//<sp/>alotofkeys.json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doc.IsObject())<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;const<sp/>ValueType*&gt;<sp/>keys;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ConstMemberIterator<sp/>it<sp/>=<sp/>doc.MemberBegin();<sp/>it<sp/>!=<sp/>doc.MemberEnd();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>keys.push_back(&amp;it-&gt;name);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>keys.size();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(doc.FindMember(*keys[j])<sp/>!=<sp/>doc.MemberEnd());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356" refid="struct_null_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_null_stream" kindref="compound">NullStream</ref><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_null_stream_1a2cd06f2c81786d49bd493c9fe8edb5b1" kindref="member">Ch</ref>;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_null_stream_1ab0d616a614956971c8389ddb6367cb51" kindref="member">NullStream</ref>()<sp/></highlight><highlight class="comment">/*:<sp/>length_(0)*/</highlight><highlight class="normal"><sp/>{}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_null_stream_1afb69c2362a2745716285da8784a1d0af" kindref="member">Put</ref>(<ref refid="struct_null_stream_1a2cd06f2c81786d49bd493c9fe8edb5b1" kindref="member">Ch</ref>)<sp/>{<sp/></highlight><highlight class="comment">/*++length_;*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_null_stream_1ad83125678bf1ee3278fefa5cbef3f7ed" kindref="member">Flush</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//size_t<sp/>length_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal">};</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>Writer_NullStream)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_null_stream" kindref="compound">NullStream</ref><sp/>s;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;NullStream&gt;</ref><sp/>writer(s);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc_.Accept(writer);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(i<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>s.length_<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(Writer_StringBuffer))<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>s(0,<sp/>1024<sp/>*<sp/>1024);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(s);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc_.Accept(writer);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str<sp/>=<sp/>s.GetString();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)str;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(i<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>strlen(str)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_TYPED(index,<sp/>Name)\</highlight></codeline>
<codeline lineno="388"><highlight class="preprocessor">TEST_F(RapidJson,<sp/>SIMD_SUFFIX(Writer_StringBuffer_##Name))<sp/>{\</highlight></codeline>
<codeline lineno="389"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>for<sp/>(size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount<sp/>*<sp/>10;<sp/>i++)<sp/>{\</highlight></codeline>
<codeline lineno="390"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBuffer<sp/>s(0,<sp/>1024<sp/>*<sp/>1024);\</highlight></codeline>
<codeline lineno="391"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer&lt;StringBuffer&gt;<sp/>writer(s);\</highlight></codeline>
<codeline lineno="392"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typesDoc_[index].Accept(writer);\</highlight></codeline>
<codeline lineno="393"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>char*<sp/>str<sp/>=<sp/>s.GetString();\</highlight></codeline>
<codeline lineno="394"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)str;\</highlight></codeline>
<codeline lineno="395"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}\</highlight></codeline>
<codeline lineno="396"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(0,<sp/>Booleans)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(1,<sp/>Floats)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(2,<sp/>Guids)</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(3,<sp/>Integers)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(4,<sp/>Mixed)</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(5,<sp/>Nulls)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1ae81a4befe2b9452fb97758328a5ee633" kindref="member">TEST_TYPED</ref>(6,<sp/>Paragraphs)</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TEST_TYPED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(PrettyWriter_StringBuffer))<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>s(0,<sp/>2048<sp/>*<sp/>1024);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(s);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.SetIndent(</highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doc_.Accept(writer);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str<sp/>=<sp/>s.GetString();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)str;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(i<sp/>==<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>strlen(str)<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>internal_Pow10)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sum<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount<sp/>*<sp/>kTrialCount;<sp/>i++)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sum<sp/>+=<sp/><ref refid="namespaceinternal_1af01c41d045d596e2f8d1888cf6fbecb6" kindref="member">internal::Pow10</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">(i<sp/>&amp;<sp/>255));</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_GT(sum,<sp/>0.0);</highlight></codeline>
<codeline lineno="426"><highlight class="normal">}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>SkipWhitespace_Basic)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fwd_8h_1a2d1473c3dd9ab6c975589b45436fe55e" kindref="member">rapidjson::StringStream</ref><sp/>s(whitespace_);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s.Peek()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal"><sp/>||<sp/>s.Peek()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\n&apos;</highlight><highlight class="normal"><sp/>||<sp/>s.Peek()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\r&apos;</highlight><highlight class="normal"><sp/>||<sp/>s.Peek()<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Take();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,<sp/>s.Peek());</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal">}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(<ref refid="reader_8h_1a60338858b2582eca23f3e509a2d82e0e" kindref="member">SkipWhitespace</ref>))<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="fwd_8h_1a2d1473c3dd9ab6c975589b45436fe55e" kindref="member">rapidjson::StringStream</ref><sp/>s(whitespace_);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="reader_8h_1a60338858b2582eca23f3e509a2d82e0e" kindref="member">rapidjson::SkipWhitespace</ref>(s);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,<sp/>s.Peek());</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal">}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>SkipWhitespace_strspn)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s<sp/>=<sp/>whitespace_<sp/>+<sp/>std::strspn(whitespace_,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>\t\r\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_EQ(</highlight><highlight class="charliteral">&apos;[&apos;</highlight><highlight class="normal">,<sp/>*s);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>UTF8_Validate)<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_null_stream" kindref="compound">NullStream</ref><sp/>os;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>is(json_);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(is.Peek()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result<sp/>&amp;=<sp/><ref refid="struct_u_t_f8_1a9e2e7e37d819baeb5e643654c6e61e33" kindref="member">UTF8&lt;&gt;::Validate</ref>(is,<sp/>os);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(result);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="462"><highlight class="normal">}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="class_file_read_stream" kindref="compound">FileReadStream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>fopen(filename_,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[65536];</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_read_stream" kindref="compound">FileReadStream</ref><sp/>s(fp,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(s.Take()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_FileReadStream))<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FILE<sp/>*fp<sp/>=<sp/>fopen(filename_,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[65536];</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_file_read_stream" kindref="compound">FileReadStream</ref><sp/>s(fp,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>h);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref>)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>is(filename_,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[65536];</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(is,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isw.Take()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.close();</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>IStreamWrapper_Unbuffered)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>is(filename_,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(is);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isw.Take()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.close();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/>IStreamWrapper_Setbuffered)<sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>is;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[65536];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.rdbuf()-&gt;pubsetbuf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.open(filename_,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(is);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isw.Take()<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.close();</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal">}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_IStreamWrapper))<sp/>{</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>is(filename_,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[65536];</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(is,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(isw,<sp/>h);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.close();</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal">}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_IStreamWrapper_Unbuffered))<sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>is(filename_,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(is);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(isw,<sp/>h);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.close();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="rapidjsontest_8cpp_1acdeb8bf1a2cf8ab5b4b520fdcf470958" kindref="member">SIMD_SUFFIX</ref>(ReaderParse_DummyHandler_IStreamWrapper_Setbuffered))<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kTrialCount;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ifstream<sp/>is;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[65536];</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.rdbuf()-&gt;pubsetbuf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.open(filename_,<sp/>std::ios::in<sp/>|<sp/>std::ios::binary);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_i_stream_wrapper" kindref="compound">IStreamWrapper</ref><sp/>isw(is);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler&lt;&gt;</ref><sp/>h;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(isw,<sp/>h);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.close();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="rapidjsontest_8cpp_1a7e724ce6c8f6f3fb095afa0a00ee9f1f" kindref="member">TEST_F</ref>(<ref refid="class_rapid_json" kindref="compound">RapidJson</ref>,<sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>sb;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32<sp/>*<sp/>1024<sp/>*<sp/>1024;<sp/>i++)</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.<ref refid="class_generic_string_buffer_1a8be5c8fadccacdcf40e20220f38e0afa" kindref="member">Put</ref>(i<sp/>&amp;<sp/>0x7f);</highlight></codeline>
<codeline lineno="562"><highlight class="normal">}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>TEST_RAPIDJSON</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/test/perftest/rapidjsontest.cpp"/>
  </compounddef>
</doxygen>
