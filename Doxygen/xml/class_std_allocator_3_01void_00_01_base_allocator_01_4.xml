<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="class_std_allocator_3_01void_00_01_base_allocator_01_4" kind="class" language="C++" prot="public">
    <compoundname>StdAllocator&lt; void, BaseAllocator &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::allocator&lt; void &gt;</basecompoundref>
    <includes refid="allocators_8h" local="no">allocators.h</includes>
    <innerclass refid="struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind" prot="public">StdAllocator&lt; void, BaseAllocator &gt;::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename BaseAllocator</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1aa894cbe0a0970c07b34e4320e6054c10" prot="private" static="no">
        <type>std::allocator&lt; void &gt;</type>
        <definition>typedef std::allocator&lt;void&gt; StdAllocator&lt; void, BaseAllocator &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::allocator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="641" column="28" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="641" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a72dfb6c478f475a31ef99be2fbe9332f" prot="public" static="no">
        <type>BaseAllocator</type>
        <definition>typedef BaseAllocator StdAllocator&lt; void, BaseAllocator &gt;::BaseAllocatorType</definition>
        <argsstring></argsstring>
        <name>BaseAllocatorType</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::BaseAllocatorType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="644" column="27" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="644" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a1df4e2d5cfdec13a30e19fa73507c542" prot="public" static="no">
        <type>allocator_type::value_type</type>
        <definition>typedef allocator_type::value_type StdAllocator&lt; void, BaseAllocator &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="676" column="49" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1afb3a6a655f835f6b9ec21fab41291287" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class StdAllocator</definition>
        <argsstring></argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="680" column="18" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="680" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ac691821bb9f8c7f557c7d3c069b37dc2" prot="private" static="no" mutable="no">
        <type>BaseAllocator</type>
        <definition>BaseAllocator StdAllocator&lt; void, BaseAllocator &gt;::baseAllocator_</definition>
        <argsstring></argsstring>
        <name>baseAllocator_</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::baseAllocator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="682" column="19" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="682" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ae04f7a523d5d80dde6ce700e2807ff27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>() RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="646" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="646" bodyend="649"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ab7d8af9c46aaee8e3e2c60b95b1d595d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>(const StdAllocator &amp;rhs) RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</qualifiedname>
        <param>
          <type>const <ref refid="class_std_allocator" kindref="compound">StdAllocator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="651" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="651" bodyend="654"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a47cf6d8a7f37c6f1c03c158948d88553" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>(const StdAllocator&lt; U, BaseAllocator &gt; &amp;rhs) RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</qualifiedname>
        <param>
          <type>const <ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&lt; U, BaseAllocator &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="657" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="657" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a8ee693f821d2a7209947faab4a77e304" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>(const BaseAllocator &amp;baseAllocator) RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::StdAllocator</qualifiedname>
        <param>
          <type>const BaseAllocator &amp;</type>
          <declname>baseAllocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="663" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="663" bodyend="666"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a223afcc6a4765478ca3c89f1164913d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; void, BaseAllocator &gt;::~StdAllocator</definition>
        <argsstring>() RAPIDJSON_NOEXCEPT</argsstring>
        <name>~StdAllocator</name>
        <qualifiedname>StdAllocator&lt; void, BaseAllocator &gt;::~StdAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="668" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="668" bodyend="669"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>StdAllocator&lt; void, BaseAllocator &gt;</label>
        <link refid="class_std_allocator_3_01void_00_01_base_allocator_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; void &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>StdAllocator&lt; void, BaseAllocator &gt;</label>
        <link refid="class_std_allocator_3_01void_00_01_base_allocator_01_4"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; void &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/rapidjson/include/rapidjson/allocators.h" line="638" column="1" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="640" bodyend="683"/>
    <listofallmembers>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1aa894cbe0a0970c07b34e4320e6054c10" prot="private" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>allocator_type</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ac691821bb9f8c7f557c7d3c069b37dc2" prot="private" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>baseAllocator_</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a72dfb6c478f475a31ef99be2fbe9332f" prot="public" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>BaseAllocatorType</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1afb3a6a655f835f6b9ec21fab41291287" prot="private" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ae04f7a523d5d80dde6ce700e2807ff27" prot="public" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ab7d8af9c46aaee8e3e2c60b95b1d595d" prot="public" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a47cf6d8a7f37c6f1c03c158948d88553" prot="public" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a8ee693f821d2a7209947faab4a77e304" prot="public" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a1df4e2d5cfdec13a30e19fa73507c542" prot="public" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>value_type</name></member>
      <member refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a223afcc6a4765478ca3c89f1164913d4" prot="public" virt="non-virtual"><scope>StdAllocator&lt; void, BaseAllocator &gt;</scope><name>~StdAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
