<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="writertest_8cpp" kind="file" language="C++">
    <compoundname>writertest.cpp</compoundname>
    <includes refid="unittest_8h" local="yes">unittest.h</includes>
    <includes refid="document_8h" local="yes">rapidjson/document.h</includes>
    <includes refid="reader_8h" local="yes">rapidjson/reader.h</includes>
    <includes refid="writer_8h" local="yes">rapidjson/writer.h</includes>
    <includes refid="stringbuffer_8h" local="yes">rapidjson/stringbuffer.h</includes>
    <includes refid="memorybuffer_8h" local="yes">rapidjson/memorybuffer.h</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="7">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rapidjson/document.h</label>
        <link refid="document_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>internal/dtoa.h</label>
        <link refid="dtoa_8h"/>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>itoa.h</label>
        <link refid="itoa_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>rapidjson/memorybuffer.h</label>
        <link refid="memorybuffer_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>stringbuffer.h</label>
        <link refid="stringbuffer_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>rapidjson/writer.h</label>
        <link refid="writer_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>unittest.h</label>
        <link refid="unittest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/test/unittest/writertest.cpp</label>
        <link refid="writertest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="28">
        <label>climits</label>
      </node>
      <node id="21">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>cstring</label>
      </node>
      <node id="31">
        <label>cwchar</label>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
      </node>
      <node id="33">
        <label>iterator</label>
      </node>
      <node id="26">
        <label>limits</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="32">
        <label>new</label>
      </node>
      <node id="39">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_o_stream_wrapper" prot="public">OStreamWrapper</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" prot="public" static="no">
        <name>TEST_ROUNDTRIP</name>
        <param><defname>json</defname></param>
        <initializer>    { \
        <ref refid="fwd_8h_1a2d1473c3dd9ab6c975589b45436fe55e" kindref="member">StringStream</ref> s(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>); \
        <ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref> buffer; \
        <ref refid="class_writer" kindref="compound">Writer</ref>&lt;<ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref>&gt; writer(buffer); \
        <ref refid="fwd_8h_1ab7f1c1207749ff25c0d7f0cc88e62788" kindref="member">Reader</ref> reader; \
        reader.Parse&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a057fbeacafb16bb7d24c9998262cae46" kindref="member">kParseFullPrecisionFlag</ref>&gt;(s, writer); \
        EXPECT_STREQ(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>, <ref refid="schemavalidator_8cpp_1a6d90bf6105415d941d0ee014f2aa79c0" kindref="member">buffer.GetString</ref>()); \
        EXPECT_TRUE(writer.IsComplete()); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="43" column="9" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" prot="public" static="no">
        <name>T</name>
        <param><defname>x</defname></param>
        <initializer>    {\
        <ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref> buffer;\
        <ref refid="class_writer" kindref="compound">Writer</ref>&lt;<ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref>&gt; writer(buffer);\
        EXPECT_TRUE(x);\
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="237" column="9"/>
      </memberdef>
      <memberdef kind="define" id="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" prot="public" static="no">
        <name>T</name>
        <param><defname>x</defname></param>
        <initializer>    {\
        <ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref> buffer;\
        <ref refid="class_writer" kindref="compound">Writer</ref>&lt;<ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref>&gt; writer(buffer);\
        writer.StartObject();\
        ASSERT_THROW(x, <ref refid="class_assert_exception" kindref="compound">AssertException</ref>); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="286" column="9"/>
      </memberdef>
      <memberdef kind="define" id="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" prot="public" static="no">
        <name>T</name>
        <param><defname>x</defname></param>
        <initializer>    {\
        <ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref> buffer;\
        <ref refid="class_writer" kindref="compound">Writer</ref>&lt;<ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref>&gt; writer(buffer);\
        EXPECT_FALSE(writer.IsComplete()); \
        x; \
        EXPECT_TRUE(writer.IsComplete()); \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="357" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Compact)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Compact</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="30" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a569d21a65af56001cb7331468290b545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Root)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Root</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="54" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="54" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1ab1eb5f1274db6126688bad41a32d8794" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Int)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="64" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a243fdd75314baf2c0447aa6e0357556a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, UInt)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>UInt</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="70" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1ad9fb17bf46a8c3ce3413231f712de41b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Int64)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Int64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="78" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1acc528934cbc7ab7a5b9bcbd9d5965e51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Uint64)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Uint64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="83" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a273109a47b675051e9a20a79028aa369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, String)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>String</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="88" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="88" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1ad66cd6e2bd1c874767f0282454792faf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Issue_889)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Issue_889</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="103" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="103" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a245d7101f30e51d928868dab14623a46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, ScanWriteUnescapedString)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>ScanWriteUnescapedString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="116" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="116" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aec32b4d8edd87b05b090b6a9c215d9a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Double)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Double</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="129" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="129" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a119032a410dd614cc22a08969ff1f2fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename TargetEncoding</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void TestTranscode</definition>
        <argsstring>(const char *json)</argsstring>
        <name>TestTranscode</name>
        <param>
          <type>const char *</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="144" column="6" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="144" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aa51b8f4acf2b8f7170d250c882c66de0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Transcode)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Transcode</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="160" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="160" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a344d3e1fc28bce5b406d3204c821a237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, OStreamWrapper)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="221" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="221" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aabbf7aa570c665b1a0f8ceb8a3cc7f57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, AssertRootMayBeAnyValue)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>AssertRootMayBeAnyValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="236" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="236" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a570e1b8a4bd516c7549f8fcd7ab7520f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, AssertIncorrectObjectLevel)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>AssertIncorrectObjectLevel</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="255" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="255" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1acc7988b8b0ea6ca178d53a7fba5287a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, AssertIncorrectArrayLevel)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>AssertIncorrectArrayLevel</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="263" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="263" bodyend="269"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aaf82ac83cd347c65b0535436047796dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, AssertIncorrectEndObject)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>AssertIncorrectEndObject</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="271" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="271" bodyend="276"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aa37eb23a27d1a2555c1054cdadec1cd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, AssertIncorrectEndArray)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>AssertIncorrectEndArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="278" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="278" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aa4b1901efe06bf0911c23e40066a381b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, AssertObjectKeyNotString)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>AssertObjectKeyNotString</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="285" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="285" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aefbf298bdddf79d3d300633fa449c104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, AssertMultipleRoot)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>AssertMultipleRoot</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="306" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="306" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a52dab6dd5f297c20ea7403610b56db4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, RootObjectIsComplete)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>RootObjectIsComplete</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="328" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="328" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a34dc08ca330946819e373c771932ec54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, RootArrayIsComplete)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>RootArrayIsComplete</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="342" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="342" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a3cd9a3dee67420bedb4938ac6d23dc6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, RootValueIsComplete)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>RootValueIsComplete</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="356" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="356" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a797f4d7d65c434b12b38fef1fd29f12e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, InvalidEncoding)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>InvalidEncoding</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="377" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="377" bodyend="404"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1af27cdb997b5307ccc597726f3de02cfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, ValidateEncoding)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>ValidateEncoding</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="406" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="406" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a80be7fa365cb784245eed8653bd20717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, InvalidEventSequence)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>InvalidEventSequence</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="433" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="433" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a83d59fe87a008c60a4c7a7cfdda12de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, NaN)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>NaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="484" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="484" bodyend="501"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1ad41932732e3e5c3df1a922c2f6cda90b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, Inf)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>Inf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="503" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="503" bodyend="525"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1a83e9c781f01842bc1ce45cfb02c6724f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Writer, RawValue)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_writer" kindref="compound">Writer</ref></type>
        </param>
        <param>
          <type>RawValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="527" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="527" bodyend="539"/>
      </memberdef>
      <memberdef kind="function" id="writertest_8cpp_1aa59b06d241d019412b7e60e31223442d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Write, RawValue_Issue1152)</argsstring>
        <name>TEST</name>
        <param>
          <type>Write</type>
        </param>
        <param>
          <type>RawValue_Issue1152</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/writertest.cpp" line="541" column="1" bodyfile="src/rapidjson/test/unittest/writertest.cpp" bodystart="541" bodyend="576"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unittest_8h" kindref="compound">unittest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">rapidjson/document.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="writer_8h" kindref="compound">rapidjson/writer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringbuffer_8h" kindref="compound">rapidjson/stringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memorybuffer_8h" kindref="compound">rapidjson/memorybuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight></codeline>
<codeline lineno="25"><highlight class="normal">RAPIDJSON_DIAG_OFF(c++98-compat)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Compact)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(</highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;hello\&quot;<sp/>:<sp/>\&quot;world\&quot;,<sp/>\&quot;t\&quot;<sp/>:<sp/>true<sp/>,<sp/>\&quot;f\&quot;<sp/>:<sp/>false,<sp/>\&quot;n\&quot;:<sp/>null,<sp/>\&quot;i\&quot;:123,<sp/>\&quot;pi\&quot;:<sp/>3.1416,<sp/>\&quot;a\&quot;:[1,<sp/>2,<sp/>3]<sp/>}<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer.<ref refid="class_generic_string_buffer_1a0dbdb77489b95923795011a24f705be5" kindref="member">ShrinkToFit</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;0&gt;(s,<sp/>writer);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;{\&quot;hello\&quot;:\&quot;world\&quot;,\&quot;t\&quot;:true,\&quot;f\&quot;:false,\&quot;n\&quot;:null,\&quot;i\&quot;:123,\&quot;pi\&quot;:3.1416,\&quot;a\&quot;:[1,2,3]}&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(77u,<sp/>buffer.<ref refid="class_generic_string_buffer_1a725e862b9a78375f5363b0b61ad789f3" kindref="member">GetSize</ref>());</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>json<sp/>-&gt;<sp/>parse<sp/>-&gt;<sp/>writer<sp/>-&gt;<sp/>json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_ROUNDTRIP(json)<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringStream<sp/>s(json);<sp/>\</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBuffer<sp/>buffer;<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer&lt;StringBuffer&gt;<sp/>writer(buffer);<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reader<sp/>reader;<sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.Parse&lt;kParseFullPrecisionFlag&gt;(s,<sp/>writer);<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(json,<sp/>buffer.GetString());<sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());<sp/>\</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Root)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;\&quot;foo\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;{}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Int)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[-1]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[-123]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[-2147483648]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>UInt)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[0]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[1]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[123]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[2147483647]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[4294967295]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Int64)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[-1234567890123456789]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[-9223372036854775808]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Uint64)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[1234567890123456789]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[9223372036854775807]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>String)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[\&quot;Hello\&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[\&quot;Hello\\u0000World\&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[\&quot;\\\&quot;\\\\/\\b\\f\\n\\r\\t\&quot;]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.String(std::string(</highlight><highlight class="stringliteral">&quot;Hello\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\&quot;Hello\\n\&quot;&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Issue_889)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[100]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.String(buf);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;[\&quot;Hello\&quot;]&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());<sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>ScanWriteUnescapedString)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[\&quot;<sp/>\\\&quot;0123456789ABCDEF\&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>^<sp/>scanning<sp/>stops<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer2[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>)<sp/>+<sp/>32];</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>different<sp/>offset<sp/>to<sp/>test<sp/>different<sp/>alignments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>32;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p<sp/>=<sp/>buffer2<sp/>+<sp/>i;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(p,<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>));</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(p);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Double)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;[1.2345,1.2345678,0.123456789012,1234567.8]&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;0.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;-0.0&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Issue<sp/>#289</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;1e30&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;1.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;5e-324&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Min<sp/>subnormal<sp/>positive<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;2.225073858507201e-308&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Max<sp/>subnormal<sp/>positive<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;2.2250738585072014e-308&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Min<sp/>normal<sp/>positive<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a0734986014050d8f62a96c9b381ba771" kindref="member">TEST_ROUNDTRIP</ref>(</highlight><highlight class="stringliteral">&quot;1.7976931348623157e308&quot;</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>Max<sp/>double</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UTF8<sp/>-&gt;<sp/>TargetEncoding<sp/>-&gt;<sp/>UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetEncoding&gt;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="writertest_8cpp_1a119032a410dd614cc22a08969ff1f2fb" kindref="member">TestTranscode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">GenericStringBuffer&lt;TargetEncoding&gt;</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;GenericStringBuffer&lt;TargetEncoding&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/>TargetEncoding&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>writer);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer2;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer2(buffer2);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">GenericReader&lt;TargetEncoding, UTF8&lt;&gt;</ref><sp/>&gt;<sp/>reader2;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">GenericStringStream&lt;TargetEncoding&gt;</ref><sp/>s2(buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>reader2.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s2,<sp/>writer2);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>,<sp/>buffer2.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Transcode)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;hello\&quot;:\&quot;world\&quot;,\&quot;t\&quot;:true,\&quot;f\&quot;:false,\&quot;n\&quot;:null,\&quot;i\&quot;:123,\&quot;pi\&quot;:3.1416,\&quot;a\&quot;:[1,2,3],\&quot;dollar\&quot;:\&quot;\x24\&quot;,\&quot;cents\&quot;:\&quot;\xC2\xA2\&quot;,\&quot;euro\&quot;:\&quot;\xE2\x82\xAC\&quot;,\&quot;gclef\&quot;:\&quot;\xF0\x9D\x84\x9E\&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF8<sp/>-&gt;<sp/>UTF16<sp/>-&gt;<sp/>UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>TestTranscode&lt;UTF8&lt;&gt;<sp/>&gt;(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF8<sp/>-&gt;<sp/>ASCII<sp/>-&gt;<sp/>UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>TestTranscode&lt;ASCII&lt;&gt;<sp/>&gt;(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF8<sp/>-&gt;<sp/>UTF16<sp/>-&gt;<sp/>UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>TestTranscode&lt;UTF16&lt;&gt;<sp/>&gt;(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF8<sp/>-&gt;<sp/>UTF32<sp/>-&gt;<sp/>UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>TestTranscode&lt;UTF32&lt;&gt;<sp/>&gt;(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>UTF8<sp/>-&gt;<sp/>AutoUTF<sp/>-&gt;<sp/>UTF8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58" kindref="member">UTFType</ref><sp/>types[]<sp/>=<sp/>{<sp/><ref refid="encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a7fd9945f1c494a4a4ee9446017e790f1" kindref="member">kUTF8</ref>,<sp/><ref refid="encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58ab72f5865db6af4e33757ee52ddad9fda" kindref="member">kUTF16LE</ref><sp/>,<sp/><ref refid="encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a1a455c6e8be641e715de9aa8ffa6cea0" kindref="member">kUTF16BE</ref>,<sp/><ref refid="encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a885dec757d256c427be6759296d482e0" kindref="member">kUTF32LE</ref><sp/>,<sp/><ref refid="encodings_8h_1ac9448aedf514a5bb509bae73a9ce4e58a14da8da33c9f9aa904bf0d1aac3fa76e" kindref="member">kUTF32BE</ref><sp/>};</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>5;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_generic_memory_buffer" kindref="compound">MemoryBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auto_u_t_f_output_stream" kindref="compound">AutoUTFOutputStream&lt;unsigned, MemoryBuffer&gt;</ref><sp/>os(buffer,<sp/>types[i],<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;AutoUTFOutputStream&lt;unsigned, MemoryBuffer&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_auto_u_t_f" kindref="compound">AutoUTF&lt;unsigned&gt;</ref><sp/>&gt;<sp/>writer(os);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>writer);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer2;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer2(buffer2);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">GenericReader&lt;AutoUTF&lt;unsigned&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref><sp/>&gt;<sp/>reader2;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_memory_stream" kindref="compound">MemoryStream</ref><sp/>s2(buffer.<ref refid="struct_generic_memory_buffer_1a65217e77ae6d4c249c16360c24854411" kindref="member">GetBuffer</ref>(),<sp/>buffer.<ref refid="struct_generic_memory_buffer_1aaab1f18d03109ab01213d3e3d8368ff9" kindref="member">GetSize</ref>());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_auto_u_t_f_input_stream" kindref="compound">AutoUTFInputStream&lt;unsigned, MemoryStream&gt;</ref><sp/>is(s2);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader2.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(is,<sp/>writer2);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>,<sp/>buffer2.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal">}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1adb6c4fb526c0f91eb24da2c6d3fce770" kindref="member">OStreamWrapper</ref>(std::ostream&amp;<sp/>os)<sp/>:<sp/><ref refid="class_o_stream_wrapper_1ad0a160a042bd6778171fb9088bcdb07a" kindref="member">os_</ref>(os)<sp/>{}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref><sp/><ref refid="class_o_stream_wrapper_1aad80276a3af7da88f1cdde77c6e01277" kindref="member">Peek</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref><sp/><ref refid="class_o_stream_wrapper_1aa7695be6ed74a50a29f7baee63800cf4" kindref="member">Take</ref>()<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1a308fd9f938c9f52ec1ac26f3a9b2f48e" kindref="member">Tell</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref>*<sp/><ref refid="class_o_stream_wrapper_1a23aa06a5e084fc07cc617082bd63d122" kindref="member">PutBegin</ref>()<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1a68f0e728e2780b74de545ae752c5c637" kindref="member">Put</ref>(<ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref><sp/>c)<sp/>{<sp/><ref refid="class_o_stream_wrapper_1ad0a160a042bd6778171fb9088bcdb07a" kindref="member">os_</ref>.put(c);<sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1ad053cc149354ad4503248886374e3c40" kindref="member">Flush</ref>()<sp/>{<sp/><ref refid="class_o_stream_wrapper_1ad0a160a042bd6778171fb9088bcdb07a" kindref="member">os_</ref>.flush();<sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1afd040491313089c3de54e70200c9f3ed" kindref="member">PutEnd</ref>(<ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref>*)<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1adb6c4fb526c0f91eb24da2c6d3fce770" kindref="member">OStreamWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>&amp;);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>&amp;<sp/><ref refid="class_o_stream_wrapper_1ab80e7a41629bc3f9760826db0af80aa2" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>&amp;);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/><ref refid="class_o_stream_wrapper_1ad0a160a042bd6778171fb9088bcdb07a" kindref="member">os_</ref>;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(</highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;hello\&quot;<sp/>:<sp/>\&quot;world\&quot;,<sp/>\&quot;t\&quot;<sp/>:<sp/>true<sp/>,<sp/>\&quot;f\&quot;<sp/>:<sp/>false,<sp/>\&quot;n\&quot;:<sp/>null,<sp/>\&quot;i\&quot;:123,<sp/>\&quot;pi\&quot;:<sp/>3.1416,<sp/>\&quot;a\&quot;:[1,<sp/>2,<sp/>3],<sp/>\&quot;u64\&quot;:<sp/>1234567890123456789,<sp/>\&quot;i64\&quot;:-1234567890123456789<sp/>}<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref><sp/>os(ss);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;OStreamWrapper&gt;</ref><sp/>writer(os);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>&lt;0&gt;(s,<sp/>writer);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>actual<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;{\&quot;hello\&quot;:\&quot;world\&quot;,\&quot;t\&quot;:true,\&quot;f\&quot;:false,\&quot;n\&quot;:null,\&quot;i\&quot;:123,\&quot;pi\&quot;:3.1416,\&quot;a\&quot;:[1,2,3],\&quot;u64\&quot;:1234567890123456789,\&quot;i64\&quot;:-1234567890123456789}&quot;</highlight><highlight class="normal">,<sp/>actual.c_str());</highlight></codeline>
<codeline lineno="234"><highlight class="normal">}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>AssertRootMayBeAnyValue)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>T(x)\</highlight></codeline>
<codeline lineno="238"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="239"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBuffer<sp/>buffer;\</highlight></codeline>
<codeline lineno="240"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer&lt;StringBuffer&gt;<sp/>writer(buffer);\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(x);\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Bool(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Bool(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Null());</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Int(0));</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Uint(0));</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Int64(0));</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Uint64(0));</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Double(0));</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.String(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>AssertIncorrectObjectLevel)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(writer.EndObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>AssertIncorrectArrayLevel)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(writer.EndArray(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>AssertIncorrectEndObject)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(writer.EndArray(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>AssertIncorrectEndArray)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(writer.EndArray(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal">}</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>AssertObjectKeyNotString)<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>T(x)\</highlight></codeline>
<codeline lineno="287"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="288"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBuffer<sp/>buffer;\</highlight></codeline>
<codeline lineno="289"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer&lt;StringBuffer&gt;<sp/>writer(buffer);\</highlight></codeline>
<codeline lineno="290"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();\</highlight></codeline>
<codeline lineno="291"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASSERT_THROW(x,<sp/>AssertException);<sp/>\</highlight></codeline>
<codeline lineno="292"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Bool(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Bool(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Null());</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Int(0));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Uint(0));</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Int64(0));</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Uint64(0));</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Double(0));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.StartObject());</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.StartArray());</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>AssertMultipleRoot)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(writer.StartObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Reset(buffer);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Null();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(writer.Int(0),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Reset(buffer);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.String(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_THROW(writer.StartArray(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Reset(buffer);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//ASSERT_THROW(writer.Double(3.14),<sp/>AssertException);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>RootObjectIsComplete)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.String(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Int(1);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>RootArrayIsComplete)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.String(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Int(1);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>RootValueIsComplete)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>T(x)\</highlight></codeline>
<codeline lineno="358"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{\</highlight></codeline>
<codeline lineno="359"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBuffer<sp/>buffer;\</highlight></codeline>
<codeline lineno="360"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Writer&lt;StringBuffer&gt;<sp/>writer(buffer);\</highlight></codeline>
<codeline lineno="361"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());<sp/>\</highlight></codeline>
<codeline lineno="362"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x;<sp/>\</highlight></codeline>
<codeline lineno="363"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());<sp/>\</highlight></codeline>
<codeline lineno="364"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Null());</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Bool(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Bool(</highlight><highlight class="keyword">false</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Int(0));</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Uint(0));</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Int64(0));</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Uint64(0));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.Double(0));</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref>(writer.String(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal">}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>InvalidEncoding)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>in<sp/>decoding<sp/>invalid<sp/>UTF-8<sp/>sequence<sp/>http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f16" kindref="compound">UTF16&lt;&gt;</ref><sp/>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(</highlight><highlight class="stringliteral">&quot;\xfe&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(</highlight><highlight class="stringliteral">&quot;\xff&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(</highlight><highlight class="stringliteral">&quot;\xfe\xfe\xff\xff&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>in<sp/>encoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF32&lt;&gt;</ref><sp/>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_t_f32_1ab4502672d56436e730ca5f647bb52be9" kindref="member">UTF32&lt;&gt;::Ch</ref><sp/>s[]<sp/>=<sp/>{<sp/>0x110000,<sp/>0<sp/>};<sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>U+0000<sp/>to<sp/>U+10FFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(s));</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>in<sp/>unicode<sp/>escaping<sp/>in<sp/>ASCII<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF32&lt;&gt;</ref>,<sp/><ref refid="struct_a_s_c_i_i" kindref="compound">ASCII&lt;&gt;</ref><sp/>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_u_t_f32_1ab4502672d56436e730ca5f647bb52be9" kindref="member">UTF32&lt;&gt;::Ch</ref><sp/>s[]<sp/>=<sp/>{<sp/>0x110000,<sp/>0<sp/>};<sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>U+0000<sp/>to<sp/>U+10FFFF</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(s));</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>ValidateEncoding)<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a4a41050fd3b8f133b51ced9905f839c4" kindref="member">kWriteValidateEncodingFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(</highlight><highlight class="stringliteral">&quot;\x24&quot;</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Dollar<sp/>sign<sp/>U+0024</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(</highlight><highlight class="stringliteral">&quot;\xC2\xA2&quot;</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Cents<sp/>sign<sp/>U+00A2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(</highlight><highlight class="stringliteral">&quot;\xE2\x82\xAC&quot;</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Euro<sp/>sign<sp/>U+20AC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(</highlight><highlight class="stringliteral">&quot;\xF0\x9D\x84\x9E&quot;</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>G<sp/>clef<sp/>sign<sp/>U+1D11E</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(</highlight><highlight class="stringliteral">&quot;\x01&quot;</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SOH<sp/>control<sp/>U+0001</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(</highlight><highlight class="stringliteral">&quot;\x1B&quot;</highlight><highlight class="normal">));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Escape<sp/>control<sp/>U+001B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;[\&quot;\x24\&quot;,\&quot;\xC2\xA2\&quot;,\&quot;\xE2\x82\xAC\&quot;,\&quot;\xF0\x9D\x84\x9E\&quot;,\&quot;\\u0001\&quot;,\&quot;\\u001B\&quot;]&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>in<sp/>decoding<sp/>invalid<sp/>UTF-8<sp/>sequence<sp/>http://www.cl.cam.ac.uk/~mgk25/ucs/examples/UTF-8-test.txt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a4a41050fd3b8f133b51ced9905f839c4" kindref="member">kWriteValidateEncodingFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(</highlight><highlight class="stringliteral">&quot;\xfe&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(</highlight><highlight class="stringliteral">&quot;\xff&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.String(</highlight><highlight class="stringliteral">&quot;\xfe\xfe\xff\xff&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>InvalidEventSequence)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndArray(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>1:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.Int(1),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>&apos;a&apos;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>&apos;a&apos;:&apos;b&apos;,&apos;c&apos;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.String(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal">}</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>NaN)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nan<sp/>=<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="classinternal_1_1_double" kindref="compound">internal::Double</ref>(nan).IsNan());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.Double(nan));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a1ff67a91b689ae093ce241e0301c0816" kindref="member">kWriteNanAndInfFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.Double(nan));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>buffer2;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>&gt;<sp/>writer2(buffer2);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer2.Double(nan));</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>Inf)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="classinternal_1_1_double" kindref="compound">internal::Double</ref>(inf).IsInf());</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.Double(inf));</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.Double(-inf));</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a1ff67a91b689ae093ce241e0301c0816" kindref="member">kWriteNanAndInfFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.Double(inf));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a1ff67a91b689ae093ce241e0301c0816" kindref="member">kWriteNanAndInfFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.Double(-inf));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Infinity-Infinity&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="525"><highlight class="normal">}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>RawValue)<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Int(1);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;raw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[\&quot;Hello\\nWorld\&quot;,<sp/>123.456]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.RawValue(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>,<sp/>strlen(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>),<sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" kindref="member">kArrayType</ref>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;{\&quot;a\&quot;:1,\&quot;raw\&quot;:[\&quot;Hello\\nWorld\&quot;,<sp/>123.456]}&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="539"><highlight class="normal">}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(Write,<sp/>RawValue_Issue1152)<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">GenericStringBuffer&lt;UTF32&lt;&gt;</ref><sp/>&gt;<sp/>sb;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;GenericStringBuffer&lt;UTF32&lt;&gt;</ref><sp/>&gt;,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f32" kindref="compound">UTF32&lt;&gt;</ref><sp/>&gt;<sp/>writer(sb);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.RawValue(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,<sp/>4,<sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7aa09befbfb4f2e1409f237817979d8087" kindref="member">kNullType</ref>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>*out<sp/>=<sp/>sb.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;n&apos;</highlight><highlight class="normal">),<sp/>out[0]);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;u&apos;</highlight><highlight class="normal">),<sp/>out[1]);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">),<sp/>out[2]);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="charliteral">&apos;l&apos;</highlight><highlight class="normal">),<sp/>out[3]);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0<sp/><sp/>),<sp/>out[4]);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">GenericStringBuffer&lt;UTF8&lt;&gt;</ref><sp/>&gt;<sp/>sb;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;GenericStringBuffer&lt;UTF8&lt;&gt;</ref><sp/>&gt;,<sp/><ref refid="struct_u_t_f16" kindref="compound">UTF16&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref><sp/>&gt;<sp/>writer(sb);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.RawValue(L</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,<sp/>4,<sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7aa09befbfb4f2e1409f237817979d8087" kindref="member">kNullType</ref>);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,<sp/>sb.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>in<sp/>transcoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>buffer;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f16" kindref="compound">UTF16&lt;&gt;</ref><sp/>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.RawValue(</highlight><highlight class="stringliteral">&quot;\&quot;\xfe\&quot;&quot;</highlight><highlight class="normal">,<sp/>3,<sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a2d823b89b055bc743d05c03183d3f338" kindref="member">kStringType</ref>));</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fail<sp/>in<sp/>encoding<sp/>validation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a4a41050fd3b8f133b51ced9905f839c4" kindref="member">kWriteValidateEncodingFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.RawValue(</highlight><highlight class="stringliteral">&quot;\&quot;\xfe\&quot;&quot;</highlight><highlight class="normal">,<sp/>3,<sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a2d823b89b055bc743d05c03183d3f338" kindref="member">kStringType</ref>));</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11_RVALUE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>WriterGen(<ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>&amp;target)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(target);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Int(1);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writer;</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><ref refid="writertest_8cpp_1aa264cd0f1fed39bec0fc98c9a9c45229" kindref="member">TEST</ref>(<ref refid="class_writer" kindref="compound">Writer</ref>,<sp/>MoveCtor)<sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(WriterGen(buffer));</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;{\&quot;a\&quot;:1}&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="593"><highlight class="normal">}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal">RAPIDJSON_DIAG_POP</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/test/unittest/writertest.cpp"/>
  </compounddef>
</doxygen>
