<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="md_src_rapidjson_doc_sax" kind="page">
    <compoundname>md_src_rapidjson_doc_sax</compoundname>
    <title>SAX</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The term &quot;SAX&quot; originated from <ulink url="http://en.wikipedia.org/wiki/Simple_API_for_XML">Simple API for XML</ulink>. We borrowed this term for JSON parsing and generation.</para>
<para>In RapidJSON, <computeroutput>Reader</computeroutput> (typedef of <computeroutput><ref refid="class_generic_reader" kindref="compound">GenericReader</ref>&lt;...&gt;</computeroutput>) is the SAX-style parser for JSON, and <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> (typedef of <computeroutput>GenericWriter&lt;...&gt;</computeroutput>) is the SAX-style generator for JSON.</para>
<sect1 id="md_src_rapidjson_doc_sax_zh_cn_1Reader">
<title>Reader</title>
<para><computeroutput>Reader</computeroutput> parses a JSON from a stream. While it reads characters from the stream, it analyzes the characters according to the syntax of JSON, and publishes events to a handler.</para>
<para>For example, here is a JSON.</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;hello&quot;:<sp/>&quot;world&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;t&quot;:<sp/>true<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;f&quot;:<sp/>false,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;n&quot;:<sp/>null,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;i&quot;:<sp/>123,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;pi&quot;:<sp/>3.1416,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;a&quot;:<sp/>[1,<sp/>2,<sp/>3,<sp/>4]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>When a <computeroutput>Reader</computeroutput> parses this JSON, it publishes the following events to the handler sequentially:</para>
<para><programlisting><codeline><highlight class="normal">StartObject()</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;hello&quot;,<sp/>5,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">String(&quot;world&quot;,<sp/>5,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;t&quot;,<sp/>1,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Bool(true)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;f&quot;,<sp/>1,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Bool(false)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;n&quot;,<sp/>1,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Null()</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;i&quot;)</highlight></codeline>
<codeline><highlight class="normal">Uint(123)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;pi&quot;)</highlight></codeline>
<codeline><highlight class="normal">Double(3.1416)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;a&quot;)</highlight></codeline>
<codeline><highlight class="normal">StartArray()</highlight></codeline>
<codeline><highlight class="normal">Uint(1)</highlight></codeline>
<codeline><highlight class="normal">Uint(2)</highlight></codeline>
<codeline><highlight class="normal">Uint(3)</highlight></codeline>
<codeline><highlight class="normal">Uint(4)</highlight></codeline>
<codeline><highlight class="normal">EndArray(4)</highlight></codeline>
<codeline><highlight class="normal">EndObject(7)</highlight></codeline>
</programlisting></para>
<para>These events can be easily matched with the JSON, but some event parameters need further explanation. Let&apos;s see the <computeroutput>simplereader</computeroutput> example which produces exactly the same output as above:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_my_handler" kindref="compound">MyHandler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler</ref>&lt;UTF8&lt;&gt;,<sp/>MyHandler&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a73b14891ee0ab44fc336b3e2044e3153" kindref="member">Null</ref>()<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Null()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a29eeca8918d0966a0551adb23c8a2b15" kindref="member">Bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bool(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boolalpha<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1aa7cda8307f15dd8f4a09947e527d56cf" kindref="member">Int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Int(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a469684e51df996bab87e0c22c0ea64fd" kindref="member">Uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Uint(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>u<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a5676446b090d3c71386aec6a39dbb188" kindref="member">Int64</ref>(<ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Int64(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a87b2d8341b4e3a38d405a89fe0d848ad" kindref="member">Uint64</ref>(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Uint64(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>u<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a5ff39ea10f682eab1943480b020c6f5a" kindref="member">Double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Double(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>d<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a5f46e8498869668d70e23453126a7b12" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;String(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>length<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boolalpha<sp/>&lt;&lt;<sp/>copy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1afc0da4321f0a06e3cd351e573c435ffe" kindref="member">StartObject</ref>()<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StartObject()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1afca1a3a16289baf03128fa7d63081526" kindref="member">Key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Key(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>length<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boolalpha<sp/>&lt;&lt;<sp/>copy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a3eb4011dcba95939e5f08e71c1596395" kindref="member">EndObject</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>memberCount)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EndObject(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>memberCount<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a1e794a6439658520bda0de14f661fc50" kindref="member">StartArray</ref>()<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StartArray()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a8654e16efc52d41397ce1a9af98bcb80" kindref="member">EndArray</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>elementCount)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EndArray(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>elementCount<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{<sp/>\&quot;hello\&quot;<sp/>:<sp/>\&quot;world\&quot;,<sp/>\&quot;t\&quot;<sp/>:<sp/>true<sp/>,<sp/>\&quot;f\&quot;<sp/>:<sp/>false,<sp/>\&quot;n\&quot;:<sp/>null,<sp/>\&quot;i\&quot;:123,<sp/>\&quot;pi\&quot;:<sp/>3.1416,<sp/>\&quot;a\&quot;:[1,<sp/>2,<sp/>3,<sp/>4]<sp/>}<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_my_handler" kindref="compound">MyHandler</ref><sp/>handler;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>ss(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(ss,<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that RapidJSON uses templates to statically bind the <computeroutput>Reader</computeroutput> type and the handler type, instead of using classes with virtual functions. This paradigm can improve performance by inlining functions.</para>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1Handler">
<title>Handler</title>
<para>As shown in the previous example, the user needs to implement a handler which consumes the events (via function calls) from the <computeroutput>Reader</computeroutput>. The handler must contain the following member functions.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrapidjson_1_1_handler" kindref="compound">Handler</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Null();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Bool(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Uint(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Int64(<ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Uint64(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Double(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RawNumber(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>String(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartObject();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EndObject(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>memberCount);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartArray();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EndArray(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>elementCount);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><computeroutput>Null()</computeroutput> is called when the <computeroutput>Reader</computeroutput> encounters a JSON null value.</para>
<para><computeroutput>Bool(bool)</computeroutput> is called when the <computeroutput>Reader</computeroutput> encounters a JSON true or false value.</para>
<para>When the <computeroutput>Reader</computeroutput> encounters a JSON number, it chooses a suitable C++ type mapping. And then it calls <emphasis>one</emphasis> function out of <computeroutput>Int(int)</computeroutput>, <computeroutput>Uint(unsigned)</computeroutput>, <computeroutput>Int64(int64_t)</computeroutput>, <computeroutput>Uint64(uint64_t)</computeroutput> and <computeroutput>Double(double)</computeroutput>. If <computeroutput>kParseNumbersAsStrings</computeroutput> is enabled, <computeroutput>Reader</computeroutput> will always calls <computeroutput>RawNumber()</computeroutput> instead.</para>
<para><computeroutput>String(const char* str, SizeType length, bool copy)</computeroutput> is called when the <computeroutput>Reader</computeroutput> encounters a string. The first parameter is pointer to the string. The second parameter is the length of the string (excluding the null terminator). Note that RapidJSON supports null character <computeroutput>\0</computeroutput> inside a string. If such situation happens, <computeroutput>strlen(str) &lt; length</computeroutput>. The last <computeroutput>copy</computeroutput> indicates whether the handler needs to make a copy of the string. For normal parsing, <computeroutput>copy = true</computeroutput>. Only when <emphasis>insitu</emphasis> parsing is used, <computeroutput>copy = false</computeroutput>. And be aware that the character type depends on the target encoding, which will be explained later.</para>
<para>When the <computeroutput>Reader</computeroutput> encounters the beginning of an object, it calls <computeroutput>StartObject()</computeroutput>. An object in JSON is a set of name-value pairs. If the object contains members it first calls <computeroutput>Key()</computeroutput> for the name of member, and then calls functions depending on the type of the value. These calls of name-value pairs repeat until calling <computeroutput>EndObject(SizeType memberCount)</computeroutput>. Note that the <computeroutput>memberCount</computeroutput> parameter is just an aid for the handler; users who do not need this parameter may ignore it.</para>
<para>Arrays are similar to objects, but simpler. At the beginning of an array, the <computeroutput>Reader</computeroutput> calls <computeroutput>BeginArray()</computeroutput>. If there is elements, it calls functions according to the types of element. Similarly, in the last call <computeroutput>EndArray(SizeType elementCount)</computeroutput>, the parameter <computeroutput>elementCount</computeroutput> is just an aid for the handler.</para>
<para>Every handler function returns a <computeroutput>bool</computeroutput>. Normally it should return <computeroutput>true</computeroutput>. If the handler encounters an error, it can return <computeroutput>false</computeroutput> to notify the event publisher to stop further processing.</para>
<para>For example, when we parse a JSON with <computeroutput>Reader</computeroutput> and the handler detects that the JSON does not conform to the required schema, the handler can return <computeroutput>false</computeroutput> and let the <computeroutput>Reader</computeroutput> stop further parsing. This will place the <computeroutput>Reader</computeroutput> in an error state, with error code <computeroutput>kParseErrorTermination</computeroutput>.</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1GenericReader">
<title>GenericReader</title>
<para>As mentioned before, <computeroutput>Reader</computeroutput> is a typedef of a template class <computeroutput><ref refid="class_generic_reader" kindref="compound">GenericReader</ref></computeroutput>:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SourceEncoding,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetEncoding,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>MemoryPoolAllocator&lt;&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_generic_reader" kindref="compound">GenericReader</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_reader" kindref="compound">GenericReader&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref><sp/>&gt;<sp/><ref refid="fwd_8h_1ab7f1c1207749ff25c0d7f0cc88e62788" kindref="member">Reader</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>rapidjson</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>Reader</computeroutput> uses UTF-8 as both source and target encoding. The source encoding means the encoding in the JSON stream. The target encoding means the encoding of the <computeroutput>str</computeroutput> parameter in <computeroutput>String()</computeroutput> calls. For example, to parse a UTF-8 stream and output UTF-16 string events, you can define a reader by:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_generic_reader" kindref="compound">GenericReader&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f16" kindref="compound">UTF16&lt;&gt;</ref><sp/>&gt;<sp/>reader;</highlight></codeline>
</programlisting></para>
<para>Note that, the default character type of <computeroutput><ref refid="struct_u_t_f16" kindref="compound">UTF16</ref></computeroutput> is <computeroutput>wchar_t</computeroutput>. So this <computeroutput>reader</computeroutput> needs to call <computeroutput>String(const wchar_t*, SizeType, bool)</computeroutput> of the handler.</para>
<para>The third template parameter <computeroutput>Allocator</computeroutput> is the allocator type for internal data structure (actually a stack).</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_schema_zh_cn_1SaxParsing">
<title>Parsing</title>
<para>The main function of <computeroutput>Reader</computeroutput> is used to parse JSON.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parseFlags,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputStream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Parse(InputStream&amp;<sp/>is,<sp/><ref refid="classrapidjson_1_1_handler" kindref="compound">Handler</ref>&amp;<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>parseFlags<sp/>=<sp/>kDefaultParseFlags</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputStream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Parse(InputStream&amp;<sp/>is,<sp/><ref refid="classrapidjson_1_1_handler" kindref="compound">Handler</ref>&amp;<sp/>handler);</highlight></codeline>
</programlisting></para>
<para>If an error occurs during parsing, it will return <computeroutput>false</computeroutput>. User can also call <computeroutput>bool HasParseError()</computeroutput>, <computeroutput>ParseErrorCode GetParseErrorCode()</computeroutput> and <computeroutput>size_t GetErrorOffset()</computeroutput> to obtain the error states. In fact, <computeroutput>Document</computeroutput> uses these <computeroutput>Reader</computeroutput> functions to obtain parse errors. Please refer to <ref refid="dom_8md" kindref="compound">DOM</ref> for details about parse errors.</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_1TokenByTokenParsing">
<title>Token-by-Token Parsing</title>
<para>Some users may wish to parse a JSON input stream a single token at a time, instead of immediately parsing an entire document without stopping. To parse JSON this way, instead of calling <computeroutput>Parse</computeroutput>, you can use the <computeroutput>IterativeParse</computeroutput> set of functions:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>IterativeParseInit();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parseFlags,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputStream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IterativeParseNext(InputStream&amp;<sp/>is,<sp/><ref refid="classrapidjson_1_1_handler" kindref="compound">Handler</ref>&amp;<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IterativeParseComplete();</highlight></codeline>
</programlisting></para>
<para>Here is an example of iteratively parsing JSON, token by token:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">reader.<ref refid="class_generic_reader_1a7de472eda2ad9de13cfd8c1de74f1754" kindref="member">IterativeParseInit</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!reader.<ref refid="class_generic_reader_1aa1e9e1eef614fde971550ed2f955151d" kindref="member">IterativeParseComplete</ref>())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a257891331e0c259903e7066fb4cebf92" kindref="member">IterativeParseNext</ref>&lt;<ref refid="reader_8h_1ab7be7dabe6ffcba60fad441505583450a9104b0946d648e9467cb7a967401ec80" kindref="member">kParseDefaultFlags</ref>&gt;(is,<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Your<sp/>handler<sp/>has<sp/>been<sp/>called<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
</sect2>
</sect1>
<sect1 id="md_src_rapidjson_doc_sax_zh_cn_1Writer">
<title>Writer</title>
<para><computeroutput>Reader</computeroutput> converts (parses) JSON into events. <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> does exactly the opposite. It converts events into JSON.</para>
<para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> is very easy to use. If your application only need to converts some data into JSON, it may be a good choice to use <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> directly, instead of building a <computeroutput>Document</computeroutput> and then stringifying it with a <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput>.</para>
<para>In <computeroutput>simplewriter</computeroutput> example, we do exactly the reverse of <computeroutput>simplereader</computeroutput>.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="writer_8h" kindref="compound">rapidjson/writer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringbuffer_8h" kindref="compound">rapidjson/stringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>s;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(s);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.String(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Bool(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Bool(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Null();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Uint(123);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Double(3.1416);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Uint(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>s.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">{&quot;hello&quot;:&quot;world&quot;,&quot;t&quot;:true,&quot;f&quot;:false,&quot;n&quot;:null,&quot;i&quot;:123,&quot;pi&quot;:3.1416,&quot;a&quot;:[0,1,2,3]}</highlight></codeline>
</programlisting></para>
<para>There are two <computeroutput>String()</computeroutput> and <computeroutput>Key()</computeroutput> overloads. One is the same as defined in handler concept with 3 parameters. It can handle string with null characters. Another one is the simpler version used in the above example.</para>
<para>Note that, the example code does not pass any parameters in <computeroutput>EndArray()</computeroutput> and <computeroutput>EndObject()</computeroutput>. An <computeroutput>SizeType</computeroutput> can be passed but it will be simply ignored by <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput>.</para>
<para>You may doubt that, why not just using <computeroutput>sprintf()</computeroutput> or <computeroutput>std::stringstream</computeroutput> to build a JSON?</para>
<para>There are various reasons:<orderedlist>
<listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> must output a well-formed JSON. If there is incorrect event sequence (e.g. <computeroutput>Int()</computeroutput> just after <computeroutput>StartObject()</computeroutput>), it generates assertion fail in debug mode.</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer_1a8b4dc44f471403a83c9959575796ceab" kindref="member">Writer::String()</ref></computeroutput> can handle string escaping (e.g. converting code point <computeroutput>U+000A</computeroutput> to <computeroutput>\n</computeroutput>) and Unicode transcoding.</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> handles number output consistently.</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> implements the event handler concept. It can be used to handle events from <computeroutput>Reader</computeroutput>, <computeroutput>Document</computeroutput> or other event publisher.</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> can be optimized for different platforms.</para>
</listitem></orderedlist>
</para>
<para>Anyway, using <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> API is even simpler than generating a JSON by ad hoc methods.</para>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1WriterTemplate">
<title>Template</title>
<para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> has a minor design difference to <computeroutput>Reader</computeroutput>. <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> is a template class, not a typedef. There is no <computeroutput>GenericWriter</computeroutput>. The following is the declaration.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputStream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SourceEncoding<sp/>=<sp/>UTF8&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetEncoding<sp/>=<sp/>UTF8&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>CrtAllocator&lt;&gt;,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>writeFlags<sp/>=<sp/>kWriteDefaultFlags&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_writer" kindref="compound">Writer</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer</ref>(OutputStream&amp;<sp/>os,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/>allocator<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>levelDepth<sp/>=<sp/>kDefaultLevelDepth)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>rapidjson</highlight></codeline>
</programlisting></para>
<para>The <computeroutput>OutputStream</computeroutput> template parameter is the type of output stream. It cannot be deduced and must be specified by user.</para>
<para>The <computeroutput>SourceEncoding</computeroutput> template parameter specifies the encoding to be used in <computeroutput>String(const Ch*, ...)</computeroutput>.</para>
<para>The <computeroutput>TargetEncoding</computeroutput> template parameter specifies the encoding in the output stream.</para>
<para>The <computeroutput>Allocator</computeroutput> is the type of allocator, which is used for allocating internal data structure (a stack).</para>
<para>The <computeroutput>writeFlags</computeroutput> are combination of the following bit-flags:</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para>Parse flags   </para>
</entry><entry thead="yes"><para>Meaning    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteNoFlags</computeroutput>   </para>
</entry><entry thead="no"><para>No flag is set.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteDefaultFlags</computeroutput>   </para>
</entry><entry thead="no"><para>Default write flags. It is equal to macro <computeroutput>RAPIDJSON_WRITE_DEFAULT_FLAGS</computeroutput>, which is defined as <computeroutput>kWriteNoFlags</computeroutput>.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteValidateEncodingFlag</computeroutput>   </para>
</entry><entry thead="no"><para>Validate encoding of JSON strings.    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteNanAndInfFlag</computeroutput>   </para>
</entry><entry thead="no"><para>Allow writing of <computeroutput>Infinity</computeroutput>, <computeroutput>-Infinity</computeroutput> and <computeroutput>NaN</computeroutput>.   </para>
</entry></row>
</table>
</para>
<para>Besides, the constructor of <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> has a <computeroutput>levelDepth</computeroutput> parameter. This parameter affects the initial memory allocated for storing information per hierarchy level.</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1PrettyWriter">
<title>PrettyWriter</title>
<para>While the output of <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> is the most condensed JSON without white-spaces, suitable for network transfer or storage, it is not easily readable by human.</para>
<para>Therefore, RapidJSON provides a <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput>, which adds indentation and line feeds in the output.</para>
<para>The usage of <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput> is exactly the same as <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput>, expect that <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput> provides a <computeroutput>SetIndent(Ch indentChar, unsigned indentCharCount)</computeroutput> function. The default is 4 spaces.</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1CompletenessReset">
<title>Completeness and Reset</title>
<para>A <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> can only output a single JSON, which can be any JSON type at the root. Once the singular event for root (e.g. <computeroutput>String()</computeroutput>), or the last matching <computeroutput>EndObject()</computeroutput> or <computeroutput>EndArray()</computeroutput> event, is handled, the output JSON is well-formed and complete. User can detect this state by calling <computeroutput><ref refid="class_writer_1a07d74d36dd3191b06e0aab678c246157" kindref="member">Writer::IsComplete()</ref></computeroutput>.</para>
<para>When a JSON is complete, the <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> cannot accept any new events. Otherwise the output will be invalid (i.e. having more than one root). To reuse the <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> object, user can call <computeroutput><ref refid="class_writer_1a8b53e8f137f7fcf694f5500711b3f58d" kindref="member">Writer::Reset(OutputStream&amp; os)</ref></computeroutput> to reset all internal states of the <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> with a new output stream.</para>
</sect2>
</sect1>
<sect1 id="md_src_rapidjson_doc_sax_zh_cn_1SaxTechniques">
<title>Techniques</title>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1CustomDataStructure">
<title>Parsing JSON to Custom Data Structure</title>
<para><computeroutput>Document</computeroutput>&apos;s parsing capability is completely based on <computeroutput>Reader</computeroutput>. Actually <computeroutput>Document</computeroutput> is a handler which receives events from a reader to build a DOM during parsing.</para>
<para>User may uses <computeroutput>Reader</computeroutput> to build other data structures directly. This eliminates building of DOM, thus reducing memory and improving performance.</para>
<para>In the following <computeroutput>messagereader</computeroutput> example, <computeroutput><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages()</ref></computeroutput> parses a JSON which should be an object with key-string pairs.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="en_8h" kindref="compound">rapidjson/error/en.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>map&lt;string,<sp/>string&gt;<sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_message_handler" kindref="compound">MessageHandler</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler</ref>&lt;UTF8&lt;&gt;,<sp/>MessageHandler&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a4f6165a34fa3a4de7021e7e5cd7fd4f6" kindref="member">MessageHandler</ref>()<sp/>:<sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>(<ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca43d4b1361a039d9a3223b2407ed5b506" kindref="member">kExpectObjectStart</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a3d7e691831748287252e10ced02061f5" kindref="member">StartObject</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca43d4b1361a039d9a3223b2407ed5b506" kindref="member">kExpectObjectStart</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>=<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1ab9de0f0bd0666b805563cb3f86ef3fc0" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a7a61cf6c752b8829eb9c058341617c69" kindref="member">name_</ref><sp/>=<sp/>string(str,<sp/>length);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>=<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca6f46eb7d062c953ecb1a28a471908568" kindref="member">kExpectValue</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca6f46eb7d062c953ecb1a28a471908568" kindref="member">kExpectValue</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a628b5a49349a2027c84ffb4f6249fa51" kindref="member">messages_</ref>.insert(MessageMap::value_type(<ref refid="struct_message_handler_1a7a61cf6c752b8829eb9c058341617c69" kindref="member">name_</ref>,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(str,<sp/>length)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>=<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1ab423864fd5ca806d4211c03acbdad67b" kindref="member">EndObject</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>==<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a3ab79ae50d26d5b3fb62a9bab58c21bb" kindref="member">Default</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>events<sp/>are<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref><sp/><ref refid="struct_message_handler_1a628b5a49349a2027c84ffb4f6249fa51" kindref="member">messages_</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2c" kindref="member">State</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca43d4b1361a039d9a3223b2407ed5b506" kindref="member">kExpectObjectStart</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca6f46eb7d062c953ecb1a28a471908568" kindref="member">kExpectValue</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_message_handler_1a7a61cf6c752b8829eb9c058341617c69" kindref="member">name_</ref>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>,<sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref>&amp;<sp/>messages)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_message_handler" kindref="compound">MessageHandler</ref><sp/>handler;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>ss(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(ss,<sp/>handler))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messages.swap(handler.<ref refid="struct_message_handler_1a628b5a49349a2027c84ffb4f6249fa51" kindref="member">messages_</ref>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>change<sp/>it<sp/>if<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7" kindref="member">ParseErrorCode</ref><sp/>e<sp/>=<sp/>reader.<ref refid="class_generic_reader_1a937bf90919f50e1c370b312cee5833e8" kindref="member">GetParseErrorCode</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>o<sp/>=<sp/>reader.<ref refid="class_generic_reader_1ae9008523ccd06d839a57335835cb4091" kindref="member">GetErrorOffset</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga28835eb93d2c3c07bbea13515eb31415" kindref="member">GetParseError_En</ref>(e)<sp/>&lt;&lt;<sp/>endl;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>offset<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>near<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>).substr(o,<sp/>10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref><sp/>messages;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;greeting\&quot;<sp/>:<sp/>\&quot;Hello!\&quot;,<sp/>\&quot;farewell\&quot;<sp/>:<sp/>\&quot;bye-bye!\&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>json1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages</ref>(json1,<sp/>messages);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MessageMap::const_iterator<sp/>itr<sp/>=<sp/>messages.begin();<sp/>itr<sp/>!=<sp/>messages.end();<sp/>++itr)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>itr-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>itr-&gt;second<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Parse<sp/>a<sp/>JSON<sp/>with<sp/>invalid<sp/>schema.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;greeting\&quot;<sp/>:<sp/>\&quot;Hello!\&quot;,<sp/>\&quot;farewell\&quot;<sp/>:<sp/>\&quot;bye-bye!\&quot;,<sp/>\&quot;foo\&quot;<sp/>:<sp/>{}<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>json2<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages</ref>(json2,<sp/>messages);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">{<sp/>&quot;greeting&quot;<sp/>:<sp/>&quot;Hello!&quot;,<sp/>&quot;farewell&quot;<sp/>:<sp/>&quot;bye-bye!&quot;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">farewell:<sp/>bye-bye!</highlight></codeline>
<codeline><highlight class="normal">greeting:<sp/>Hello!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Parse<sp/>a<sp/>JSON<sp/>with<sp/>invalid<sp/>schema.</highlight></codeline>
<codeline><highlight class="normal">{<sp/>&quot;greeting&quot;<sp/>:<sp/>&quot;Hello!&quot;,<sp/>&quot;farewell&quot;<sp/>:<sp/>&quot;bye-bye!&quot;,<sp/>&quot;foo&quot;<sp/>:<sp/>{}<sp/>}</highlight></codeline>
<codeline><highlight class="normal">Error:<sp/>Terminate<sp/>parsing<sp/>due<sp/>to<sp/>Handler<sp/>error.</highlight></codeline>
<codeline><highlight class="normal"><sp/>at<sp/>offset<sp/>59<sp/>near<sp/>&apos;}<sp/>}...&apos;</highlight></codeline>
</programlisting></para>
<para>The first JSON (<computeroutput>json1</computeroutput>) was successfully parsed into <computeroutput>MessageMap</computeroutput>. Since <computeroutput>MessageMap</computeroutput> is a <computeroutput>std::map</computeroutput>, the printing order are sorted by the key. This order is different from the JSON&apos;s order.</para>
<para>In the second JSON (<computeroutput>json2</computeroutput>), <computeroutput>foo</computeroutput>&apos;s value is an empty object. As it is an object, <computeroutput><ref refid="struct_message_handler_1a3d7e691831748287252e10ced02061f5" kindref="member">MessageHandler::StartObject()</ref></computeroutput> will be called. However, at that moment <computeroutput>state_ = kExpectValue</computeroutput>, so that function returns <computeroutput>false</computeroutput> and cause the parsing process be terminated. The error code is <computeroutput>kParseErrorTermination</computeroutput>.</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1Filtering">
<title>Filtering of JSON</title>
<para>As mentioned earlier, <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> can handle the events published by <computeroutput>Reader</computeroutput>. <computeroutput>condense</computeroutput> example simply set a <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> as handler of a <computeroutput>Reader</computeroutput>, so it can remove all white-spaces in JSON. <computeroutput>pretty</computeroutput> example uses the same relationship, but replacing <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> by <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput>. So <computeroutput>pretty</computeroutput> can be used to reformat a JSON with indentation and line feed.</para>
<para>Actually, we can add intermediate layer(s) to filter the contents of JSON via these SAX-style API. For example, <computeroutput>capitalize</computeroutput> example capitalize all strings in a JSON.</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="writer_8h" kindref="compound">rapidjson/writer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filereadstream_8h" kindref="compound">rapidjson/filereadstream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filewritestream_8h" kindref="compound">rapidjson/filewritestream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="en_8h" kindref="compound">rapidjson/error/en.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputHandler&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_capitalize_filter" kindref="compound">CapitalizeFilter</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter_1afe978f33a2f30a84a9e69cc91fe2da6d" kindref="member">CapitalizeFilter</ref>(OutputHandler&amp;<sp/>out)<sp/>:<sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>(out),<sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a8638839428a447d47711a4b367dc13a4" kindref="member">Null</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Null();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a957038be10025563a35ad32ab9d78418" kindref="member">Bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Bool(b);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a5eec489885ed7f982ea66caf8d557210" kindref="member">Int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Int(i);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a0e1d475eec0129d65fd7b2c06878e445" kindref="member">Uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Uint(u);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a5ab3ec8eba2a56f595bf10e2f63c0446" kindref="member">Int64</ref>(<ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Int64(i);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a603a8c709c0009d7b21dbb20a570bac7" kindref="member">Uint64</ref>(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Uint64(u);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a1c21df7948456b3ae679db9d1a190249" kindref="member">Double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Double(d);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a471c199da18ca411550e703a6256abd8" kindref="member">RawNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.RawNumber(str,<sp/>length,<sp/>copy);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a9888a3eadb5297cc06b76df470767b48" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>.clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>.push_back(std::toupper(str[i]));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.String(&amp;<ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>.front(),<sp/>length,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>true<sp/>=<sp/>output<sp/>handler<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1ab21677e0794b7414ff0fec27f6599095" kindref="member">StartObject</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.StartObject();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1abe3c83f43cbb9ff7ff0e5fdabee79b21" kindref="member">Key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a9888a3eadb5297cc06b76df470767b48" kindref="member">String</ref>(str,<sp/>length,<sp/>copy);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1aea1d83e92b986264e04314ea2259207d" kindref="member">EndObject</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>memberCount)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.EndObject(memberCount);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1ac6c50b5828bb848fbc98b92c2f432e9f" kindref="member">StartArray</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.StartArray();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a3d7092e115d0b3f0a277da8487eff4d4" kindref="member">EndArray</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>elementCount)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.EndArray(elementCount);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OutputHandler&amp;<sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>JSON<sp/>reader<sp/>and<sp/>input<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>readBuffer[65536];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_read_stream" kindref="compound">FileReadStream</ref><sp/>is(stdin,<sp/>readBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(readBuffer));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>JSON<sp/>writer<sp/>and<sp/>output<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>writeBuffer[65536];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_write_stream" kindref="compound">FileWriteStream</ref><sp/>os(stdout,<sp/>writeBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(writeBuffer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;FileWriteStream&gt;</ref><sp/>writer(os);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JSON<sp/>reader<sp/>parse<sp/>from<sp/>the<sp/>input<sp/>stream<sp/>and<sp/>let<sp/>writer<sp/>generate<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter" kindref="compound">CapitalizeFilter&lt;Writer&lt;FileWriteStream&gt;</ref><sp/>&gt;<sp/>filter(writer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(is,<sp/>filter))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nError(%u):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)reader.<ref refid="class_generic_reader_1ae9008523ccd06d839a57335835cb4091" kindref="member">GetErrorOffset</ref>(),<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga28835eb93d2c3c07bbea13515eb31415" kindref="member">GetParseError_En</ref>(reader.<ref refid="class_generic_reader_1a937bf90919f50e1c370b312cee5833e8" kindref="member">GetParseErrorCode</ref>()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>Note that, it is incorrect to simply capitalize the JSON as a string. For example: <programlisting><codeline><highlight class="normal">[&quot;Hello\nWorld&quot;]</highlight></codeline>
</programlisting></para>
<para>Simply capitalizing the whole JSON would contain incorrect escape character: <programlisting><codeline><highlight class="normal">[&quot;HELLO\NWORLD&quot;]</highlight></codeline>
</programlisting></para>
<para>The correct result by <computeroutput>capitalize</computeroutput>: <programlisting><codeline><highlight class="normal">[&quot;HELLO\nWORLD&quot;]</highlight></codeline>
</programlisting></para>
<para>More complicated filters can be developed. However, since SAX-style API can only provide information about a single event at a time, user may need to book-keeping the contextual information (e.g. the path from root value, storage of other related values). Some processing may be easier to be implemented in DOM than SAX. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="src/rapidjson/doc/sax.md"/>
  </compounddef>
</doxygen>
