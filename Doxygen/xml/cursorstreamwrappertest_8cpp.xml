<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="cursorstreamwrappertest_8cpp" kind="file" language="C++">
    <compoundname>cursorstreamwrappertest.cpp</compoundname>
    <includes refid="unittest_8h" local="yes">unittest.h</includes>
    <includes refid="document_8h" local="yes">rapidjson/document.h</includes>
    <includes refid="cursorstreamwrapper_8h" local="yes">rapidjson/cursorstreamwrapper.h</includes>
    <incdepgraph>
      <node id="7">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>rapidjson/cursorstreamwrapper.h</label>
        <link refid="cursorstreamwrapper_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rapidjson/document.h</label>
        <link refid="document_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/test/unittest/cursorstreamwrappertest.cpp</label>
        <link refid="cursorstreamwrappertest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>unittest.h</label>
        <link refid="unittest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>cassert</label>
      </node>
      <node id="28">
        <label>climits</label>
      </node>
      <node id="21">
        <label>cstddef</label>
      </node>
      <node id="9">
        <label>cstdlib</label>
      </node>
      <node id="10">
        <label>cstring</label>
      </node>
      <node id="31">
        <label>cwchar</label>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
      </node>
      <node id="33">
        <label>iterator</label>
      </node>
      <node id="26">
        <label>limits</label>
      </node>
      <node id="13">
        <label>memory</label>
      </node>
      <node id="32">
        <label>new</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool testJson</definition>
        <argsstring>(const char *json, size_t &amp;line, size_t &amp;col)</argsstring>
        <name>testJson</name>
        <param>
          <type>const char *</type>
          <declname>json</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>line</declname>
        </param>
        <param>
          <type>size_t &amp;</type>
          <declname>col</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="23" column="6" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="23" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingFirstBracket)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingFirstBracket</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="36" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="36" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1ae8b36851bf3b3305e4292794cdd52ddc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingQuotes)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingQuotes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="45" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="45" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1ad4f41f82ee5faf1e197735d085678b10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingColon)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingColon</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="54" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="54" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1a128a1978f9d76e5b8f33a73fb193cd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingSecondQuotes)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingSecondQuotes</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="63" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="63" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1a540fcbc4d8110c5cf1e394bef973864e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingComma)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingComma</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="72" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="72" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1ad7be74dba4df64b632deef663f49ee1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingArrayBracket)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingArrayBracket</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="81" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="81" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1aa928a9ee549a92b19b936232e5b80529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingArrayComma)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingArrayComma</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="90" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1ac4cf5478a8fa67307f2b5d2213aca3a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingLastArrayBracket)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingLastArrayBracket</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="99" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="99" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="cursorstreamwrappertest_8cpp_1a6bd684af3886ac0848edf1a8bdfc5c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(CursorStreamWrapper, MissingLastBracket)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref></type>
        </param>
        <param>
          <type>MissingLastBracket</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" line="108" column="1" bodyfile="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp" bodystart="108" bodyend="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unittest_8h" kindref="compound">unittest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">rapidjson/document.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cursorstreamwrapper_8h" kindref="compound">rapidjson/cursorstreamwrapper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>static<sp/>const<sp/>char<sp/>json[]<sp/>=<sp/>&quot;{\&quot;string\&quot;\n\n:\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*json,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;line,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;col)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>ss(json);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper&lt;StringStream&gt;</ref><sp/>csw(ss);</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>document;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>document.<ref refid="class_generic_document_1a7bc1827a7ab04de4789fe46237f0e921" kindref="member">ParseStream</ref>(csw);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/>document.<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>col<sp/>=<sp/>csw.GetColumn();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line<sp/>=<sp/>csw.GetLine();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="34"><highlight class="normal">}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingFirstBracket)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;\&quot;string\&quot;\n\n:\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>3u);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>0u);</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingQuotes)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\n\n:\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>1u);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>8u);</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingColon)<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\&quot;\n\n\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>3u);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>0u);</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingSecondQuotes)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\&quot;\n\n:my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>3u);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>1u);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingComma)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\&quot;\n\n:\&quot;my<sp/>string\&quot;\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>3u);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>12u);</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingArrayBracket)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\&quot;\n\n:\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>4u);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>9u);</highlight></codeline>
<codeline lineno="88"><highlight class="normal">}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingArrayComma)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\&quot;\n\n:\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>4u);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>6u);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingLastArrayBracket)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json8[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\&quot;\n\n:\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json8,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>4u);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>15u);</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><ref refid="cursorstreamwrappertest_8cpp_1ac4fb8d3acd98f897e36fa6bc9d54583d" kindref="member">TEST</ref>(<ref refid="class_cursor_stream_wrapper" kindref="compound">CursorStreamWrapper</ref>,<sp/>MissingLastBracket)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json9[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;string\&quot;\n\n:\&quot;my<sp/>string\&quot;,\&quot;array\&quot;\n:[\&quot;1\&quot;,<sp/>\&quot;2\&quot;,<sp/>\&quot;3\&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>col,<sp/>line;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/><ref refid="cursorstreamwrappertest_8cpp_1a275da0d1f29dba3630a7ba31e01101e2" kindref="member">testJson</ref>(json9,<sp/>line,<sp/>col);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(ret);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(line,<sp/>4u);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(col,<sp/>16u);</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/test/unittest/cursorstreamwrappertest.cpp"/>
  </compounddef>
</doxygen>
