<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="internals_8zh-cn_8md" kind="file" language="Markdown">
    <compoundname>internals.zh-cn.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>内部架构</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">本部分记录了一些设计和实现细节。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[TOC]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>架构<sp/>{#Architecture}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>SAX<sp/>和<sp/>DOM</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">下面的<sp/>UML<sp/>图显示了<sp/>SAX<sp/>和<sp/>DOM<sp/>的基本关系。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![架构<sp/>UML<sp/>类图](diagram/architecture.png)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">关系的核心是<sp/>`Handler`<sp/>概念。在<sp/>SAX<sp/>一边，`Reader`<sp/>从流解析<sp/>JSON<sp/>并将事件发送到<sp/>`Handler`。`Writer`<sp/>实现了<sp/>`Handler`<sp/>概念，用于处理相同的事件。在<sp/>DOM<sp/>一边，`Document`<sp/>实现了<sp/>`Handler`<sp/>概念，用于通过这些时间来构建<sp/>DOM。`Value`<sp/>支持了<sp/>`Value::Accept(Handler&amp;)`<sp/>函数，它可以将<sp/>DOM<sp/>转换为事件进行发送。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在这个设计，SAX<sp/>是不依赖于<sp/>DOM<sp/>的。甚至<sp/>`Reader`<sp/>和<sp/>`Writer`<sp/>之间也没有依赖。这提供了连接事件发送器和处理器的灵活性。除此之外，`Value`<sp/>也是不依赖于<sp/>SAX<sp/>的。所以，除了将<sp/>DOM<sp/>序列化为<sp/>JSON<sp/>之外，用户也可以将其序列化为<sp/>XML，或者做任何其他事情。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>工具类</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SAX<sp/>和<sp/>DOM<sp/>API<sp/>都依赖于3个额外的概念：`Allocator`、`Encoding`<sp/>和<sp/>`Stream`。它们的继承层次结构如下图所示。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![工具类<sp/>UML<sp/>类图](diagram/utilityclass.png)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>值（Value）<sp/>{#Value}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`Value`<sp/>（实际上被定义为<sp/>`GenericValue&lt;UTF8&lt;&gt;&gt;`）是<sp/>DOM<sp/>API<sp/>的核心。本部分描述了它的设计。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>数据布局<sp/>{#DataLayout}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`Value`<sp/>是[可变类型](http://en.wikipedia.org/wiki/Variant_type)。在<sp/>RapidJSON<sp/>的上下文中，一个<sp/>`Value`<sp/>的实例可以包含6种<sp/>JSON<sp/>数据类型之一。通过使用<sp/>`union`<sp/>，这是可能实现的。每一个<sp/>`Value`<sp/>包含两个成员：`union<sp/>Data<sp/>data_`<sp/>和<sp/>`unsigned<sp/>flags_`。`flags_`<sp/>表明了<sp/>JSON<sp/>类型，以及附加的信息。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">下表显示了所有类型的数据布局。32位/64位列表明了字段所占用的字节数。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Null<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|-------------------|----------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/>|<sp/>`kNullType<sp/>kNullFlag`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Bool<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|-------------------|----------------------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/>|<sp/>`kBoolType`<sp/>(either<sp/>`kTrueFlag`<sp/>or<sp/>`kFalseFlag`)<sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>String<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Ch*<sp/>str`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>指向字符串的指针（可能拥有所有权）<sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`SizeType<sp/>length`<sp/><sp/><sp/>|<sp/>字符串长度<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kStringType<sp/>kStringFlag<sp/>...`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Object<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Member*<sp/>members`<sp/><sp/><sp/>|<sp/>指向成员数组的指针（拥有所有权）<sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`SizeType<sp/>size`<sp/><sp/><sp/><sp/><sp/>|<sp/>成员数量<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`SizeType<sp/>capacity`<sp/>|<sp/>成员容量<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kObjectType<sp/>kObjectFlag`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Array<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Value*<sp/>values`<sp/><sp/><sp/><sp/><sp/>|<sp/>指向值数组的指针（拥有所有权）<sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`SizeType<sp/>size`<sp/><sp/><sp/><sp/><sp/>|<sp/>值数量<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`SizeType<sp/>capacity`<sp/>|<sp/>值容量<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kArrayType<sp/>kArrayFlag`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Number<sp/>(Int)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`int<sp/>i`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位有符号整数<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（零填充）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kNumberType<sp/>kNumberFlag<sp/>kIntFlag<sp/>kInt64Flag<sp/>...`<sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Number<sp/>(UInt)<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>u`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位无符号整数<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（零填充）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kNumberType<sp/>kNumberFlag<sp/>kUintFlag<sp/>kUint64Flag<sp/>...`<sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Number<sp/>(Int64)<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`int64_t<sp/>i64`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>64位有符号整数<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kNumberType<sp/>kNumberFlag<sp/>kInt64Flag<sp/>...`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Number<sp/>(Uint64)<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`uint64_t<sp/>i64`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>64位无符号整数<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kNumberType<sp/>kNumberFlag<sp/>kInt64Flag<sp/>...`<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Number<sp/>(Double)<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`uint64_t<sp/>i64`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>双精度浮点数<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>（未使用）<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|8<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|`kNumberType<sp/>kNumberFlag<sp/>kDoubleFlag`|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">这里有一些需要注意的地方：</highlight></codeline>
<codeline><highlight class="normal">*<sp/>为了减少在64位架构上的内存消耗，`SizeType`<sp/>被定义为<sp/>`unsigned`<sp/>而不是<sp/>`size_t`。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>32位整数的零填充可能被放在实际类型的前面或后面，这依赖于字节序。这使得它可以将32位整数不经过任何转换就可以解释为64位整数。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`Int`<sp/>永远是<sp/>`Int64`，反之不然。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>标志<sp/>{#Flags}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">32位的<sp/>`flags_`<sp/>包含了<sp/>JSON<sp/>类型和其他信息。如前文中的表所述，每一种<sp/>JSON<sp/>类型包含了冗余的<sp/>`kXXXType`<sp/>和<sp/>`kXXXFlag`。这个设计是为了优化测试位标志（`IsNumber()`）和获取每一种类型的序列号（`GetType()`）。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">字符串有两个可选的标志。`kCopyFlag`<sp/>表明这个字符串拥有字符串拷贝的所有权。而<sp/>`kInlineStrFlag`<sp/>意味着使用了[短字符串优化](#ShortString)。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">数字更加复杂一些。对于普通的整数值，它可以包含<sp/>`kIntFlag`、`kUintFlag`、<sp/>`kInt64Flag`<sp/>和/或<sp/>`kUint64Flag`，这由整数的范围决定。带有小数或者超过64位所能表达的范围的整数的数字会被存储为带有<sp/>`kDoubleFlag`<sp/>的<sp/>`double`。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>短字符串优化<sp/>{#ShortString}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[Kosta](https://github.com/Kosta-Github)<sp/>提供了很棒的短字符串优化。这个优化的xxx如下所述。除去<sp/>`flags_`<sp/>，`Value`<sp/>有12或16字节（对于32位或64位）来存储实际的数据。这为在其内部直接存储短字符串而不是存储字符串的指针创造了可能。对于1字节的字符类型（例如<sp/>`char`），它可以在<sp/>`Value`<sp/>类型内部存储至多11或15个字符的字符串。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|ShortString<sp/>(Ch=char)|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>32位<sp/>|<sp/>64位<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|---------------------|-------------------------------------|:----:|:----:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Ch<sp/>str[MaxChars]`<sp/><sp/>|<sp/>字符串缓冲区<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|11<sp/><sp/><sp/><sp/>|15<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`Ch<sp/>invLength`<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>MaxChars<sp/>-<sp/>Length<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|1<sp/><sp/><sp/><sp/><sp/>|1<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>`unsigned<sp/>flags_`<sp/><sp/><sp/>|<sp/>`kStringType<sp/>kStringFlag<sp/>...`<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|4<sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">这里使用了一项特殊的技术。它存储了<sp/>(MaxChars<sp/>-<sp/>length)<sp/>而不直接存储字符串的长度。这使得存储11个字符并且带有后缀<sp/>`\0`<sp/>成为可能。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">这个优化可以减少字符串拷贝内存占用。它也改善了缓存一致性，并进一步提高了运行时性能。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>分配器（Allocator）<sp/>{#InternalAllocator}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`Allocator`<sp/>是<sp/>RapidJSON<sp/>中的概念：</highlight></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">concept<sp/>Allocator<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>const<sp/>bool<sp/>kNeedFree;<sp/><sp/><sp/><sp/>//!&lt;<sp/>表明这个分配器是否需要调用<sp/>Free()。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>申请内存块。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>\param<sp/>size<sp/>内存块的大小，以字节记。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>\returns<sp/>指向内存块的指针。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>Malloc(size_t<sp/>size);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>调整内存块的大小。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>\param<sp/>originalPtr<sp/>当前内存块的指针。空指针是被允许的。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>\param<sp/>originalSize<sp/>当前大小，以字节记。（设计问题：因为有些分配器可能不会记录它，显示的传递它可以节约内存。）</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>\param<sp/>newSize<sp/>新大小，以字节记。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>void*<sp/>Realloc(void*<sp/>originalPtr,<sp/>size_t<sp/>originalSize,<sp/>size_t<sp/>newSize);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>释放内存块。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>\param<sp/>ptr<sp/>指向内存块的指针。空指针是被允许的。</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>static<sp/>void<sp/>Free(void<sp/>*ptr);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">需要注意的是<sp/>`Malloc()`<sp/>和<sp/>`Realloc()`<sp/>是成员函数而<sp/>`Free()`<sp/>是静态成员函数。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>MemoryPoolAllocator<sp/>{#MemoryPoolAllocator}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`MemoryPoolAllocator`<sp/>是<sp/>DOM<sp/>的默认内存分配器。它只申请内存而不释放内存。这对于构建<sp/>DOM<sp/>树非常合适。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在它的内部，它从基础的内存分配器申请内存块（默认为<sp/>`CrtAllocator`）并将这些内存块存储为单向链表。当用户请求申请内存，它会遵循下列步骤来申请内存：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>如果可用，使用用户提供的缓冲区。（见<sp/>[User<sp/>Buffer<sp/>section<sp/>in<sp/>DOM](doc/dom.md)）</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>如果用户提供的缓冲区已满，使用当前内存块。</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>如果当前内存块已满，申请新的内存块。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>解析优化<sp/>{#ParsingOptimization}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>使用<sp/>SIMD<sp/>跳过空格<sp/>{#SkipwhitespaceWithSIMD}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">当从流中解析<sp/>JSON<sp/>时，解析器需要跳过4种空格字符：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">1.<sp/>空格<sp/>(`U+0020`)</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>制表符<sp/>(`U+000B`)</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>换行<sp/>(`U+000A`)</highlight></codeline>
<codeline><highlight class="normal">4.<sp/>回车<sp/>(`U+000D`)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">这是一份简单的实现：</highlight></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">void<sp/>SkipWhitespace(InputStream&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(s.Peek()<sp/>==<sp/>&apos;<sp/>&apos;<sp/>||<sp/>s.Peek()<sp/>==<sp/>&apos;\n&apos;<sp/>||<sp/>s.Peek()<sp/>==<sp/>&apos;\r&apos;<sp/>||<sp/>s.Peek()<sp/>==<sp/>&apos;\t&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Take();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">但是，这需要对每个字符进行4次比较以及一些分支。这被发现是一个热点。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">为了加速这一处理，RapidJSON<sp/>使用<sp/>SIMD<sp/>来在一次迭代中比较16个字符和4个空格。目前<sp/>RapidJSON<sp/>支持<sp/>SSE2<sp/>，<sp/>SSE4.2<sp/>和<sp/>ARM<sp/>Neon<sp/>指令。同时它也只会对<sp/>UTF-8<sp/>内存流启用，包括字符串流或<sp/>*原位*<sp/>解析。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">你可以通过在包含<sp/>`rapidjson.h`<sp/>之前定义<sp/>`RAPIDJSON_SSE2`<sp/>，<sp/>`RAPIDJSON_SSE42`<sp/>或<sp/>`RAPIDJSON_NEON`<sp/>来启用这个优化。一些编译器可以检测这个设置，如<sp/>`perftest.h`：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>__SSE2__<sp/>和<sp/>__SSE4_2__<sp/>可被<sp/>gcc、clang<sp/>和<sp/>Intel<sp/>编译器识别：</highlight></codeline>
<codeline><highlight class="normal">//<sp/>如果支持的话，我们在<sp/>gmake<sp/>中使用了<sp/>-march=native<sp/>来启用<sp/>-msse2<sp/>和<sp/>-msse4.2</highlight></codeline>
<codeline><highlight class="normal">//<sp/>同样的，<sp/>__ARM_NEON<sp/>被用于识别Neon</highlight></codeline>
<codeline><highlight class="normal">#if<sp/>defined(__SSE4_2__)</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/>define<sp/>RAPIDJSON_SSE42</highlight></codeline>
<codeline><highlight class="normal">#elif<sp/>defined(__SSE2__)</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/>define<sp/>RAPIDJSON_SSE2</highlight></codeline>
<codeline><highlight class="normal">#elif<sp/>defined(__ARM_NEON)</highlight></codeline>
<codeline><highlight class="normal">#<sp/><sp/>define<sp/>RAPIDJSON_NEON</highlight></codeline>
<codeline><highlight class="normal">#endif</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">需要注意的是，这是编译期的设置。在不支持这些指令的机器上运行可执行文件会使它崩溃。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>页面对齐问题</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在<sp/>RapidJSON<sp/>的早期版本中，被报告了[一个问题](https://code.google.com/archive/p/rapidjson/issues/104)：`SkipWhitespace_SIMD()`<sp/>会罕见地导致崩溃（约五十万分之一的几率）。在调查之后，怀疑是<sp/>`_mm_loadu_si128()`<sp/>访问了<sp/>`&apos;\0&apos;`<sp/>之后的内存，并越过被保护的页面边界。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在<sp/>[Intel®<sp/>64<sp/>and<sp/>IA-32<sp/>Architectures<sp/>Optimization<sp/>Reference<sp/>Manual</highlight></codeline>
<codeline><highlight class="normal">](http://www.intel.com/content/www/us/en/architecture-and-technology/64-ia-32-architectures-optimization-manual.html)<sp/>中，章节<sp/>10.2.1：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">&gt;<sp/>为了支持需要费对齐的128位<sp/>SIMD<sp/>内存访问的算法，调用者的内存缓冲区申请应当考虑添加一些填充空间，这样被调用的函数可以安全地将地址指针用于未对齐的128位<sp/>SIMD<sp/>内存操作。</highlight></codeline>
<codeline><highlight class="normal">&gt;<sp/>在结合非对齐的<sp/>SIMD<sp/>内存操作中，最小的对齐大小应该等于<sp/>SIMD<sp/>寄存器的大小。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">对于<sp/>RapidJSON<sp/>来说，这显然是不可行的，因为<sp/>RapidJSON<sp/>不应当强迫用户进行内存对齐。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">为了修复这个问题，当前的代码会先按字节处理直到下一个对齐的地址。在这之后，使用对齐读取来进行<sp/>SIMD<sp/>处理。见<sp/>[#85](https://github.com/Tencent/rapidjson/issues/85)。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>局部流拷贝<sp/>{#LocalStreamCopy}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在优化的过程中，我们发现一些编译器不能将访问流的一些成员数据放入局部变量或者寄存器中。测试结果显示，对于一些流类型，创建流的拷贝并将其用于内层循环中可以改善性能。例如，实际（非<sp/>SIMD）的<sp/>`SkipWhitespace()`<sp/>被实现为：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">template&lt;typename<sp/>InputStream&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>SkipWhitespace(InputStream&amp;<sp/>is)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>internal::StreamLocalCopy&lt;InputStream&gt;<sp/>copy(is);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InputStream&amp;<sp/>s(copy.s);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>while<sp/>(s.Peek()<sp/>==<sp/>&apos;<sp/>&apos;<sp/>||<sp/>s.Peek()<sp/>==<sp/>&apos;\n&apos;<sp/>||<sp/>s.Peek()<sp/>==<sp/>&apos;\r&apos;<sp/>||<sp/>s.Peek()<sp/>==<sp/>&apos;\t&apos;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>s.Take();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">基于流的特征，`StreamLocalCopy`<sp/>会创建（或不创建）流对象的拷贝，在局部使用它并将流的状态拷贝回原来的流。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>解析为双精度浮点数<sp/>{#ParsingDouble}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">将字符串解析为<sp/>`double`<sp/>并不简单。标准库函数<sp/>`strtod()`<sp/>可以胜任这项工作，但它比较缓慢。默认情况下，解析器使用默认的精度设置。这最多有<sp/>3[ULP](http://en.wikipedia.org/wiki/Unit_in_the_last_place)<sp/>的误差，并实现在<sp/>`internal::StrtodNormalPrecision()`<sp/>中。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">当使用<sp/>`kParseFullPrecisionFlag`<sp/>时，编译器会改为调用<sp/>`internal::StrtodFullPrecision()`<sp/>，这个函数会自动调用三个版本的转换。</highlight></codeline>
<codeline><highlight class="normal">1.<sp/>[Fast-Path](http://www.exploringbinary.com/fast-path-decimal-to-floating-point-conversion/)。</highlight></codeline>
<codeline><highlight class="normal">2.<sp/>[double-conversion](https://github.com/floitsch/double-conversion)<sp/>中的自定义<sp/>DIY-FP<sp/>实现。</highlight></codeline>
<codeline><highlight class="normal">3.<sp/>（Clinger,<sp/>William<sp/>D. How<sp/>to<sp/>read<sp/>floating<sp/>point<sp/>numbers<sp/>accurately.<sp/>Vol.<sp/>25.<sp/>No.<sp/>6.<sp/>ACM,<sp/>1990）<sp/>中的大整数算法。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">如果第一个转换方法失败，则尝试使用第二种方法，以此类推。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>生成优化<sp/>{#GenerationOptimization}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>整数到字符串的转换<sp/>{#itoa}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">整数到字符串转换的朴素算法需要对每一个十进制位进行一次除法。我们实现了若干版本并在<sp/>[itoa-benchmark](https://github.com/miloyip/itoa-benchmark)<sp/>中对它们进行了评估。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">虽然<sp/>SSE2<sp/>版本是最快的，但它和第二快的<sp/>`branchlut`<sp/>差距不大。而且<sp/>`branchlut`<sp/>是纯C++实现，所以我们在<sp/>RapidJSON<sp/>中使用了<sp/>`branchlut`。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>双精度浮点数到字符串的转换<sp/>{#dtoa}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">原来<sp/>RapidJSON<sp/>使用<sp/>`snprintf(...,<sp/>...,<sp/>&quot;%g&quot;)`<sp/>来进行双精度浮点数到字符串的转换。这是不准确的，因为默认的精度是6。随后我们发现它很缓慢，而且有其它的替代品。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Google<sp/>的<sp/>V8<sp/>[double-conversion](https://github.com/floitsch/double-conversion</highlight></codeline>
<codeline><highlight class="normal">)<sp/>实现了更新的、快速的被称为<sp/>Grisu3<sp/>的算法（Loitsch,<sp/>Florian.<sp/>&quot;Printing<sp/>floating-point<sp/>numbers<sp/>quickly<sp/>and<sp/>accurately<sp/>with<sp/>integers.&quot; ACM<sp/>Sigplan<sp/>Notices 45.6<sp/>(2010):<sp/>233-243.）。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">然而，这个实现不是仅头文件的，所以我们实现了一个仅头文件的<sp/>Grisu2<sp/>版本。这个算法保证了结果永远精确。而且在大多数情况下，它会生成最短的（可选）字符串表示。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">这个仅头文件的转换函数在<sp/>[dtoa-benchmark](https://github.com/miloyip/dtoa-benchmark)<sp/>中进行评估。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>解析器<sp/>{#Parser}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>迭代解析<sp/>{#IterativeParser}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">迭代解析器是一个以非递归方式实现的递归下降的<sp/>LL(1)<sp/>解析器。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>语法<sp/>{#IterativeParserGrammar}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">解析器使用的语法是基于严格<sp/>JSON<sp/>语法的：</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~</highlight></codeline>
<codeline><highlight class="normal">S<sp/>-&gt;<sp/>array<sp/>|<sp/>object</highlight></codeline>
<codeline><highlight class="normal">array<sp/>-&gt;<sp/>[<sp/>values<sp/>]</highlight></codeline>
<codeline><highlight class="normal">object<sp/>-&gt;<sp/>{<sp/>members<sp/>}</highlight></codeline>
<codeline><highlight class="normal">values<sp/>-&gt;<sp/>non-empty-values<sp/>|<sp/>ε</highlight></codeline>
<codeline><highlight class="normal">non-empty-values<sp/>-&gt;<sp/>value<sp/>addition-values</highlight></codeline>
<codeline><highlight class="normal">addition-values<sp/>-&gt;<sp/>ε<sp/>|<sp/>,<sp/>non-empty-values</highlight></codeline>
<codeline><highlight class="normal">members<sp/>-&gt;<sp/>non-empty-members<sp/>|<sp/>ε</highlight></codeline>
<codeline><highlight class="normal">non-empty-members<sp/>-&gt;<sp/>member<sp/>addition-members</highlight></codeline>
<codeline><highlight class="normal">addition-members<sp/>-&gt;<sp/>ε<sp/>|<sp/>,<sp/>non-empty-members</highlight></codeline>
<codeline><highlight class="normal">member<sp/>-&gt;<sp/>STRING<sp/>:<sp/>value</highlight></codeline>
<codeline><highlight class="normal">value<sp/>-&gt;<sp/>STRING<sp/>|<sp/>NUMBER<sp/>|<sp/>NULL<sp/>|<sp/>BOOLEAN<sp/>|<sp/>object<sp/>|<sp/>array</highlight></codeline>
<codeline><highlight class="normal">~~~~~~~~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">注意到左因子被加入了非终结符的<sp/>`values`<sp/>和<sp/>`members`<sp/>来保证语法是<sp/>LL(1)<sp/>的。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>解析表<sp/>{#IterativeParserParsingTable}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">基于这份语法，我们可以构造<sp/>FIRST<sp/>和<sp/>FOLLOW<sp/>集合。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">非终结符的<sp/>FIRST<sp/>集合如下所示：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/>NON-TERMINAL<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>FIRST<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-----------------:|:--------------------------------:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>ε<sp/>STRING<sp/>NUMBER<sp/>NULL<sp/>BOOLEAN<sp/>{<sp/>[<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>addition-values<sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ε<sp/>COMMA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/>members<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ε<sp/>STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>addition-members<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ε<sp/>COMMA<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>member<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>STRING<sp/>NUMBER<sp/>NULL<sp/>BOOLEAN<sp/>{<sp/>[<sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>non-empty-members<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>non-empty-values<sp/>|<sp/><sp/>STRING<sp/>NUMBER<sp/>NULL<sp/>BOOLEAN<sp/>{<sp/>[<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">FOLLOW<sp/>集合如下所示：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/>NON-TERMINAL<sp/><sp/><sp/>|<sp/><sp/>FOLLOW<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-----------------:|:-------:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>$<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>,<sp/>$<sp/>}<sp/>]<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>,<sp/>$<sp/>}<sp/>]<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>]<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>non-empty-values<sp/>|<sp/><sp/><sp/><sp/>]<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>addition-values<sp/><sp/>|<sp/><sp/><sp/><sp/>]<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/>members<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>non-empty-members<sp/>|<sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>addition-members<sp/>|<sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>member<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>,<sp/>}<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>,<sp/>}<sp/>]<sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">最终可以从<sp/>FIRST<sp/>和<sp/>FOLLOW<sp/>集合生成解析表：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/>NON-TERMINAL<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>:<sp/>|<sp/>]<sp/>|<sp/>}<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NUMBER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOLEAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|:-----------------:|:---------------------:|:---------------------:|:-------------------:|:-:|:-:|:-:|:-----------------------:|:---------------------:|:---------------------:|:---------------------:|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/>values<sp/>]<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>members<sp/>}<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>values<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>non-empty-values<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>non-empty-values<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/>ε<sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/>non-empty-values<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>non-empty-values<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>non-empty-values<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/>non-empty-values<sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>non-empty-values<sp/>|<sp/>value<sp/>addition-values<sp/>|<sp/>value<sp/>addition-values<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/>value<sp/>addition-values<sp/><sp/>|<sp/>value<sp/>addition-values<sp/>|<sp/>value<sp/>addition-values<sp/>|<sp/>value<sp/>addition-values<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>addition-values<sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/>,<sp/>non-empty-values<sp/>|<sp/><sp/><sp/>|<sp/>ε<sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/>members<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/>ε<sp/>|<sp/><sp/><sp/><sp/>non-empty-members<sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>non-empty-members<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/>member<sp/>addition-members<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>addition-members<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>,<sp/>non-empty-members<sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/>ε<sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>member<sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/>STRING<sp/>:<sp/>value<sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>object<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>STRING<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NUMBER<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BOOLEAN<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">对于上面的语法分析，这里有一个很棒的[工具](http://hackingoff.com/compilers/predict-first-follow-set)。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>实现<sp/>{#IterativeParserImplementation}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">基于这份解析表，一个直接的（常规的）将规则反向入栈的实现可以正常工作。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在<sp/>RapidJSON<sp/>中，对直接的实现进行了一些修改：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">首先，在<sp/>RapidJSON<sp/>中，这份解析表被编码为状态机。</highlight></codeline>
<codeline><highlight class="normal">规则由头部和主体组成。</highlight></codeline>
<codeline><highlight class="normal">状态转换由规则构造。</highlight></codeline>
<codeline><highlight class="normal">除此之外，额外的状态被添加到与<sp/>`array`<sp/>和<sp/>`object`<sp/>有关的规则。</highlight></codeline>
<codeline><highlight class="normal">通过这种方式，生成数组值或对象成员可以只用一次状态转移便可完成，</highlight></codeline>
<codeline><highlight class="normal">而不需要在直接的实现中的多次出栈/入栈操作。</highlight></codeline>
<codeline><highlight class="normal">这也使得估计栈的大小更加容易。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">状态图如如下所示：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![状态图](diagram/iterative-parser-states-diagram.png)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">第二，迭代解析器也在内部栈保存了数组的值个数和对象成员的数量，这也与传统的实现不同。</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/doc/internals.zh-cn.md"/>
  </compounddef>
</doxygen>
