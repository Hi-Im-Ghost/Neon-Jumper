<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="md_src_rapidjson_doc_sax_zh_cn" kind="page">
    <compoundname>md_src_rapidjson_doc_sax_zh_cn</compoundname>
    <title>SAX</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>&quot;SAX&quot; 此术语源于 <ulink url="http://en.wikipedia.org/wiki/Simple_API_for_XML">Simple API for XML</ulink>。我们借了此术语去套用在 JSON 的解析及生成。</para>
<para>在 RapidJSON 中，<computeroutput>Reader</computeroutput>（<computeroutput><ref refid="class_generic_reader" kindref="compound">GenericReader</ref>&lt;...&gt;</computeroutput> 的 typedef）是 JSON 的 SAX 风格解析器，而 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput>（<computeroutput>GenericWriter&lt;...&gt;</computeroutput> 的 typedef）则是 JSON 的 SAX 风格生成器。</para>
<sect1 id="md_src_rapidjson_doc_sax_zh_cn_1Reader">
<title>Reader</title>
<para><computeroutput>Reader</computeroutput> 从输入流解析一个 JSON。当它从流中读取字符时，它会基于 JSON 的语法去分析字符，并向处理器发送事件。</para>
<para>例如，以下是一个 JSON。</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;hello&quot;:<sp/>&quot;world&quot;,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;t&quot;:<sp/>true<sp/>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;f&quot;:<sp/>false,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;n&quot;:<sp/>null,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;i&quot;:<sp/>123,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;pi&quot;:<sp/>3.1416,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;a&quot;:<sp/>[1,<sp/>2,<sp/>3,<sp/>4]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>当一个 <computeroutput>Reader</computeroutput> 解析此 JSON 时，它会顺序地向处理器发送以下的事件：</para>
<para><programlisting><codeline><highlight class="normal">StartObject()</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;hello&quot;,<sp/>5,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">String(&quot;world&quot;,<sp/>5,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;t&quot;,<sp/>1,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Bool(true)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;f&quot;,<sp/>1,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Bool(false)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;n&quot;,<sp/>1,<sp/>true)</highlight></codeline>
<codeline><highlight class="normal">Null()</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;i&quot;)</highlight></codeline>
<codeline><highlight class="normal">Uint(123)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;pi&quot;)</highlight></codeline>
<codeline><highlight class="normal">Double(3.1416)</highlight></codeline>
<codeline><highlight class="normal">Key(&quot;a&quot;)</highlight></codeline>
<codeline><highlight class="normal">StartArray()</highlight></codeline>
<codeline><highlight class="normal">Uint(1)</highlight></codeline>
<codeline><highlight class="normal">Uint(2)</highlight></codeline>
<codeline><highlight class="normal">Uint(3)</highlight></codeline>
<codeline><highlight class="normal">Uint(4)</highlight></codeline>
<codeline><highlight class="normal">EndArray(4)</highlight></codeline>
<codeline><highlight class="normal">EndObject(7)</highlight></codeline>
</programlisting></para>
<para>除了一些事件参数需要再作解释，这些事件可以轻松地与 JSON 对上。我们可以看看 <computeroutput>simplereader</computeroutput> 例子怎样产生和以上完全相同的结果：</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_my_handler" kindref="compound">MyHandler</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler</ref>&lt;UTF8&lt;&gt;,<sp/>MyHandler&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a73b14891ee0ab44fc336b3e2044e3153" kindref="member">Null</ref>()<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Null()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a29eeca8918d0966a0551adb23c8a2b15" kindref="member">Bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Bool(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boolalpha<sp/>&lt;&lt;<sp/>b<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1aa7cda8307f15dd8f4a09947e527d56cf" kindref="member">Int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Int(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a469684e51df996bab87e0c22c0ea64fd" kindref="member">Uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Uint(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>u<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a5676446b090d3c71386aec6a39dbb188" kindref="member">Int64</ref>(<ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Int64(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a87b2d8341b4e3a38d405a89fe0d848ad" kindref="member">Uint64</ref>(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Uint64(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>u<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a5ff39ea10f682eab1943480b020c6f5a" kindref="member">Double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Double(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>d<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a5f46e8498869668d70e23453126a7b12" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;String(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>length<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boolalpha<sp/>&lt;&lt;<sp/>copy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1afc0da4321f0a06e3cd351e573c435ffe" kindref="member">StartObject</ref>()<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StartObject()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1afca1a3a16289baf03128fa7d63081526" kindref="member">Key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Key(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>length<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>boolalpha<sp/>&lt;&lt;<sp/>copy<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a3eb4011dcba95939e5f08e71c1596395" kindref="member">EndObject</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>memberCount)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EndObject(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>memberCount<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a1e794a6439658520bda0de14f661fc50" kindref="member">StartArray</ref>()<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;StartArray()&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_my_handler_1a8654e16efc52d41397ce1a9af98bcb80" kindref="member">EndArray</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>elementCount)<sp/>{<sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;EndArray(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>elementCount<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{<sp/>\&quot;hello\&quot;<sp/>:<sp/>\&quot;world\&quot;,<sp/>\&quot;t\&quot;<sp/>:<sp/>true<sp/>,<sp/>\&quot;f\&quot;<sp/>:<sp/>false,<sp/>\&quot;n\&quot;:<sp/>null,<sp/>\&quot;i\&quot;:123,<sp/>\&quot;pi\&quot;:<sp/>3.1416,<sp/>\&quot;a\&quot;:[1,<sp/>2,<sp/>3,<sp/>4]<sp/>}<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_my_handler" kindref="compound">MyHandler</ref><sp/>handler;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>ss(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(ss,<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>注意 RapidJSON 使用模板去静态挷定 <computeroutput>Reader</computeroutput> 类型及处理器的类型，而不是使用含虚函数的类。这个范式可以通过把函数内联而改善性能。</para>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1Handler">
<title>Handler</title>
<para>如前例所示，使用者需要实现一个处理器（handler），用于处理来自 <computeroutput>Reader</computeroutput> 的事件（函数调用）。处理器必须包含以下的成员函数。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classrapidjson_1_1_handler" kindref="compound">Handler</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Null();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Bool(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Int(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Uint(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Int64(<ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Uint64(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Double(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RawNumber(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>String(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartObject();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Key(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EndObject(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>memberCount);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>StartArray();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EndArray(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>elementCount);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>当 <computeroutput>Reader</computeroutput> 遇到 JSON null 值时会调用 <computeroutput>Null()</computeroutput>。</para>
<para>当 <computeroutput>Reader</computeroutput> 遇到 JSON true 或 false 值时会调用 <computeroutput>Bool(bool)</computeroutput>。</para>
<para>当 <computeroutput>Reader</computeroutput> 遇到 JSON number，它会选择一个合适的 C++ 类型映射，然后调用 <computeroutput>Int(int)</computeroutput>、<computeroutput>Uint(unsigned)</computeroutput>、<computeroutput>Int64(int64_t)</computeroutput>、<computeroutput>Uint64(uint64_t)</computeroutput> 及 <computeroutput>Double(double)</computeroutput> 的 * 其中之一个 *。 若开启了 <computeroutput>kParseNumbersAsStrings</computeroutput> 选项，<computeroutput>Reader</computeroutput> 便会改为调用 <computeroutput>RawNumber()</computeroutput>。</para>
<para>当 <computeroutput>Reader</computeroutput> 遇到 JSON string，它会调用 <computeroutput>String(const char* str, SizeType length, bool copy)</computeroutput>。第一个参数是字符串的指针。第二个参数是字符串的长度（不包含空终止符号）。注意 RapidJSON 支持字串中含有空字符 <computeroutput>\0</computeroutput>。若出现这种情况，便会有 <computeroutput>strlen(str) &lt; length</computeroutput>。最后的 <computeroutput>copy</computeroutput> 参数表示处理器是否需要复制该字符串。在正常解析时，<computeroutput>copy = true</computeroutput>。仅当使用原位解析时，<computeroutput>copy = false</computeroutput>。此外，还要注意字符的类型与目标编码相关，我们稍后会再谈这一点。</para>
<para>当 <computeroutput>Reader</computeroutput> 遇到 JSON object 的开始之时，它会调用 <computeroutput>StartObject()</computeroutput>。JSON 的 object 是一个键值对（成员）的集合。若 object 包含成员，它会先为成员的名字调用 <computeroutput>Key()</computeroutput>，然后再按值的类型调用函数。它不断调用这些键值对，直至最终调用 <computeroutput>EndObject(SizeType memberCount)</computeroutput>。注意 <computeroutput>memberCount</computeroutput> 参数对处理器来说只是协助性质，使用者可能不需要此参数。</para>
<para>JSON array 与 object 相似，但更简单。在 array 开始时，<computeroutput>Reader</computeroutput> 会调用 <computeroutput>BeginArary()</computeroutput>。若 array 含有元素，它会按元素的类型来读用函数。相似地，最后它会调用 <computeroutput>EndArray(SizeType elementCount)</computeroutput>，其中 <computeroutput>elementCount</computeroutput> 参数对处理器来说只是协助性质。</para>
<para>每个处理器函数都返回一个 <computeroutput>bool</computeroutput>。正常它们应返回 <computeroutput>true</computeroutput>。若处理器遇到错误，它可以返回 <computeroutput>false</computeroutput> 去通知事件发送方停止继续处理。</para>
<para>例如，当我们用 <computeroutput>Reader</computeroutput> 解析一个 JSON 时，处理器检测到该 JSON 并不符合所需的 schema，那么处理器可以返回 <computeroutput>false</computeroutput>，令 <computeroutput>Reader</computeroutput> 停止之后的解析工作。而 <computeroutput>Reader</computeroutput> 会进入一个错误状态，并以 <computeroutput>kParseErrorTermination</computeroutput> 错误码标识。</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1GenericReader">
<title>GenericReader</title>
<para>前面提及，<computeroutput>Reader</computeroutput> 是 <computeroutput><ref refid="class_generic_reader" kindref="compound">GenericReader</ref></computeroutput> 模板类的 typedef：</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SourceEncoding,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetEncoding,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>MemoryPoolAllocator&lt;&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_generic_reader" kindref="compound">GenericReader</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_reader" kindref="compound">GenericReader&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref><sp/>&gt;<sp/><ref refid="fwd_8h_1ab7f1c1207749ff25c0d7f0cc88e62788" kindref="member">Reader</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>rapidjson</highlight></codeline>
</programlisting></para>
<para><computeroutput>Reader</computeroutput> 使用 UTF-8 作为来源及目标编码。来源编码是指 JSON 流的编码。目标编码是指 <computeroutput>String()</computeroutput> 的 <computeroutput>str</computeroutput> 参数所用的编码。例如，要解析一个 UTF-8 流并输出至 UTF-16 string 事件，你需要这么定义一个 reader：</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_generic_reader" kindref="compound">GenericReader&lt;UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f16" kindref="compound">UTF16&lt;&gt;</ref><sp/>&gt;<sp/>reader;</highlight></codeline>
</programlisting></para>
<para>注意到 <computeroutput><ref refid="struct_u_t_f16" kindref="compound">UTF16</ref></computeroutput> 的缺省类型是 <computeroutput>wchar_t</computeroutput>。因此这个 <computeroutput>reader</computeroutput> 需要调用处理器的 <computeroutput>String(const wchar_t*, SizeType, bool)</computeroutput>。</para>
<para>第三个模板参数 <computeroutput>Allocator</computeroutput> 是内部数据结构（实际上是一个堆栈）的分配器类型。</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_schema_zh_cn_1SaxParsing">
<title>Parsing</title>
<para><computeroutput>Reader</computeroutput> 的唯一功能就是解析 JSON。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>parseFlags,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputStream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Parse(InputStream&amp;<sp/>is,<sp/><ref refid="classrapidjson_1_1_handler" kindref="compound">Handler</ref>&amp;<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>使用<sp/>parseFlags<sp/>=<sp/>kDefaultParseFlags</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InputStream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Handler&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Parse(InputStream&amp;<sp/>is,<sp/><ref refid="classrapidjson_1_1_handler" kindref="compound">Handler</ref>&amp;<sp/>handler);</highlight></codeline>
</programlisting></para>
<para>若在解析中出现错误，它会返回 <computeroutput>false</computeroutput>。使用者可调用 <computeroutput>bool HasParseEror()</computeroutput>, <computeroutput>ParseErrorCode GetParseErrorCode()</computeroutput> 及 <computeroutput>size_t GetErrorOffset()</computeroutput> 获取错误状态。实际上 <computeroutput>Document</computeroutput> 使用这些 <computeroutput>Reader</computeroutput> 函数去获取解析错误。请参考 <ref refid="dom_8zh-cn_8md" kindref="compound">DOM</ref> 去了解有关解析错误的细节。</para>
</sect2>
</sect1>
<sect1 id="md_src_rapidjson_doc_sax_zh_cn_1Writer">
<title>Writer</title>
<para><computeroutput>Reader</computeroutput> 把 JSON 转换（解析）成为事件。<computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 做完全相反的事情。它把事件转换成 JSON。</para>
<para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 是非常容易使用的。若你的应用程序只需把一些数据转换成 JSON，可能直接使用 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput>，会比建立一个 <computeroutput>Document</computeroutput> 然后用 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 把它转换成 JSON 更加方便。</para>
<para>在 <computeroutput>simplewriter</computeroutput> 例子里，我们做 <computeroutput>simplereader</computeroutput> 完全相反的事情。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="writer_8h" kindref="compound">rapidjson/writer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringbuffer_8h" kindref="compound">rapidjson/stringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>s;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;StringBuffer&gt;</ref><sp/>writer(s);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.String(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Bool(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Bool(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Null();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Uint(123);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Double(3.1416);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>4;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Uint(i);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>s.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>()<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">{&quot;hello&quot;:&quot;world&quot;,&quot;t&quot;:true,&quot;f&quot;:false,&quot;n&quot;:null,&quot;i&quot;:123,&quot;pi&quot;:3.1416,&quot;a&quot;:[0,1,2,3]}</highlight></codeline>
</programlisting></para>
<para><computeroutput>String()</computeroutput> 及 <computeroutput>Key()</computeroutput> 各有两个重载。一个是如处理器 concept 般，有 3 个参数。它能处理含空字符的字符串。另一个是如上中使用的较简单版本。</para>
<para>注意到，例子代码中的 <computeroutput>EndArray()</computeroutput> 及 <computeroutput>EndObject()</computeroutput> 并没有参数。可以传递一个 <computeroutput>SizeType</computeroutput> 的参数，但它会被 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 忽略。</para>
<para>你可能会怀疑，为什么不使用 <computeroutput>sprintf()</computeroutput> 或 <computeroutput>std::stringstream</computeroutput> 去建立一个 JSON？</para>
<para>这有几个原因：<orderedlist>
<listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 必然会输出一个结构良好（well-formed）的 JSON。若然有错误的事件次序（如 <computeroutput>Int()</computeroutput> 紧随 <computeroutput>StartObject()</computeroutput> 出现），它会在调试模式中产生断言失败。</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer_1a8b4dc44f471403a83c9959575796ceab" kindref="member">Writer::String()</ref></computeroutput> 可处理字符串转义（如把码点 <computeroutput>U+000A</computeroutput> 转换成 <computeroutput>\n</computeroutput>）及进行 Unicode 转码。</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 一致地处理 number 的输出。</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 实现了事件处理器 concept。可用于处理来自 <computeroutput>Reader</computeroutput>、<computeroutput>Document</computeroutput> 或其他事件发生器。</para>
</listitem><listitem><para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 可对不同平台进行优化。</para>
</listitem></orderedlist>
</para>
<para>无论如何，使用 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> API 去生成 JSON 甚至乎比这些临时方法更简单。</para>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1WriterTemplate">
<title>Template</title>
<para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 与 <computeroutput>Reader</computeroutput> 有少许设计区别。<computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 是一个模板类，而不是一个 typedef。 并没有 <computeroutput>GenericWriter</computeroutput>。以下是 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 的声明。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputStream,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SourceEncoding<sp/>=<sp/>UTF8&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TargetEncoding<sp/>=<sp/>UTF8&lt;&gt;,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>CrtAllocator&lt;&gt;<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_writer" kindref="compound">Writer</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer</ref>(OutputStream&amp;<sp/>os,<sp/><ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/>allocator<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>levelDepth<sp/>=<sp/>kDefaultLevelDepth)</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>rapidjson</highlight></codeline>
</programlisting></para>
<para><computeroutput>OutputStream</computeroutput> 模板参数是输出流的类型。它的类型不可以被自动推断，必须由使用者提供。</para>
<para><computeroutput>SourceEncoding</computeroutput> 模板参数指定了 <computeroutput>String(const Ch*, ...)</computeroutput> 的编码。</para>
<para><computeroutput>TargetEncoding</computeroutput> 模板参数指定输出流的编码。</para>
<para><computeroutput>Allocator</computeroutput> 是分配器的类型，用于分配内部数据结构（一个堆栈）。</para>
<para><computeroutput>writeFlags</computeroutput> 是以下位标志的组合：</para>
<para><table rows="5" cols="2"><row>
<entry thead="yes"><para>写入位标志   </para>
</entry><entry thead="yes"><para>意义    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteNoFlags</computeroutput>   </para>
</entry><entry thead="no"><para>没有任何标志。    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteDefaultFlags</computeroutput>   </para>
</entry><entry thead="no"><para>缺省的解析选项。它等于 <computeroutput>RAPIDJSON_WRITE_DEFAULT_FLAGS</computeroutput> 宏，此宏定义为 <computeroutput>kWriteNoFlags</computeroutput>。    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteValidateEncodingFlag</computeroutput>   </para>
</entry><entry thead="no"><para>校验 JSON 字符串的编码。    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>kWriteNanAndInfFlag</computeroutput>   </para>
</entry><entry thead="no"><para>容许写入 <computeroutput>Infinity</computeroutput>, <computeroutput>-Infinity</computeroutput> 及 <computeroutput>NaN</computeroutput>。   </para>
</entry></row>
</table>
</para>
<para>此外，<computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 的构造函数有一 <computeroutput>levelDepth</computeroutput> 参数。存储每层阶信息的初始内存分配量受此参数影响。</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1PrettyWriter">
<title>PrettyWriter</title>
<para><computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 所输出的是没有空格字符的最紧凑 JSON，适合网络传输或储存，但不适合人类阅读。</para>
<para>因此，RapidJSON 提供了一个 <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput>，它在输出中加入缩进及换行。</para>
<para><computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput> 的用法与 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 几乎一样，不同之处是 <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput> 提供了一个 <computeroutput>SetIndent(Ch indentChar, unsigned indentCharCount)</computeroutput> 函数。缺省的缩进是 4 个空格。</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1CompletenessReset">
<title>Completeness and Reset</title>
<para>一个 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 只可输出单个 JSON，其根节点可以是任何 JSON 类型。当处理完单个根节点事件（如 <computeroutput>String()</computeroutput>），或匹配的最后 <computeroutput>EndObject()</computeroutput> 或 <computeroutput>EndArray()</computeroutput> 事件，输出的 JSON 是结构完整（well-formed）及完整的。使用者可调用 <computeroutput><ref refid="class_writer_1a07d74d36dd3191b06e0aab678c246157" kindref="member">Writer::IsComplete()</ref></computeroutput> 去检测完整性。</para>
<para>当 JSON 完整时，<computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 不能再接受新的事件。不然其输出便会是不合法的（例如有超过一个根节点）。为了重新利用 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 对象，使用者可调用 <computeroutput><ref refid="class_writer_1a8b53e8f137f7fcf694f5500711b3f58d" kindref="member">Writer::Reset(OutputStream&amp; os)</ref></computeroutput> 去重置其所有内部状态及设置新的输出流。</para>
</sect2>
</sect1>
<sect1 id="md_src_rapidjson_doc_sax_zh_cn_1SaxTechniques">
<title>Techniques</title>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1CustomDataStructure">
<title>Parsing JSON to Custom Data Structure</title>
<para><computeroutput>Document</computeroutput> 的解析功能完全依靠 <computeroutput>Reader</computeroutput>。实际上 <computeroutput>Document</computeroutput> 是一个处理器，在解析 JSON 时接收事件去建立一个 DOM。</para>
<para>使用者可以直接使用 <computeroutput>Reader</computeroutput> 去建立其他数据结构。这消除了建立 DOM 的步骤，从而减少了内存开销并改善性能。</para>
<para>在以下的 <computeroutput>messagereader</computeroutput> 例子中，<computeroutput><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages()</ref></computeroutput> 解析一个 JSON，该 JSON 应该是一个含键值对的 object。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="en_8h" kindref="compound">rapidjson/error/en.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>map&lt;string,<sp/>string&gt;<sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_message_handler" kindref="compound">MessageHandler</ref></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="struct_base_reader_handler" kindref="compound">BaseReaderHandler</ref>&lt;UTF8&lt;&gt;,<sp/>MessageHandler&gt;<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a4f6165a34fa3a4de7021e7e5cd7fd4f6" kindref="member">MessageHandler</ref>()<sp/>:<sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>(<ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca43d4b1361a039d9a3223b2407ed5b506" kindref="member">kExpectObjectStart</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a3d7e691831748287252e10ced02061f5" kindref="member">StartObject</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca43d4b1361a039d9a3223b2407ed5b506" kindref="member">kExpectObjectStart</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>=<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1ab9de0f0bd0666b805563cb3f86ef3fc0" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a7a61cf6c752b8829eb9c058341617c69" kindref="member">name_</ref><sp/>=<sp/>string(str,<sp/>length);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>=<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca6f46eb7d062c953ecb1a28a471908568" kindref="member">kExpectValue</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca6f46eb7d062c953ecb1a28a471908568" kindref="member">kExpectValue</ref>:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a628b5a49349a2027c84ffb4f6249fa51" kindref="member">messages_</ref>.insert(MessageMap::value_type(<ref refid="struct_message_handler_1a7a61cf6c752b8829eb9c058341617c69" kindref="member">name_</ref>,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(str,<sp/>length)));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>=<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1ab423864fd5ca806d4211c03acbdad67b" kindref="member">EndObject</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref><sp/>==<sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>;<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a3ab79ae50d26d5b3fb62a9bab58c21bb" kindref="member">Default</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>All<sp/>other<sp/>events<sp/>are<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref><sp/><ref refid="struct_message_handler_1a628b5a49349a2027c84ffb4f6249fa51" kindref="member">messages_</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2c" kindref="member">State</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca43d4b1361a039d9a3223b2407ed5b506" kindref="member">kExpectObjectStart</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca70008d18048772c50a2226a6e592c7db" kindref="member">kExpectNameOrObjectEnd</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_message_handler_1a704e2a1bc5f7a4644998112cba61db2ca6f46eb7d062c953ecb1a28a471908568" kindref="member">kExpectValue</ref>,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}<ref refid="struct_message_handler_1a927d3ae4618ed37e3904ff673fdd3768" kindref="member">state_</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="struct_message_handler_1a7a61cf6c752b8829eb9c058341617c69" kindref="member">name_</ref>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>,<sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref>&amp;<sp/>messages)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_message_handler" kindref="compound">MessageHandler</ref><sp/>handler;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>ss(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(ss,<sp/>handler))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messages.swap(handler.<ref refid="struct_message_handler_1a628b5a49349a2027c84ffb4f6249fa51" kindref="member">messages_</ref>);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>change<sp/>it<sp/>if<sp/>success.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga8d4b32dfc45840bca189ade2bbcb6ba7" kindref="member">ParseErrorCode</ref><sp/>e<sp/>=<sp/>reader.<ref refid="class_generic_reader_1a937bf90919f50e1c370b312cee5833e8" kindref="member">GetParseErrorCode</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>o<sp/>=<sp/>reader.<ref refid="class_generic_reader_1ae9008523ccd06d839a57335835cb4091" kindref="member">GetErrorOffset</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga28835eb93d2c3c07bbea13515eb31415" kindref="member">GetParseError_En</ref>(e)<sp/>&lt;&lt;<sp/>endl;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>at<sp/>offset<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>o<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>near<sp/>&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>string(<ref refid="namespacetest_8cpp_1a04e873a45a18dab42dc9a0eba4f3deee" kindref="member">json</ref>).substr(o,<sp/>10)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;...&apos;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1ae2c5980b5eb04369faa7f72447e6d664" kindref="member">MessageMap</ref><sp/>messages;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json1<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;greeting\&quot;<sp/>:<sp/>\&quot;Hello!\&quot;,<sp/>\&quot;farewell\&quot;<sp/>:<sp/>\&quot;bye-bye!\&quot;<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>json1<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages</ref>(json1,<sp/>messages);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(MessageMap::const_iterator<sp/>itr<sp/>=<sp/>messages.begin();<sp/>itr<sp/>!=<sp/>messages.end();<sp/>++itr)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>itr-&gt;first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>itr-&gt;second<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>endl<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Parse<sp/>a<sp/>JSON<sp/>with<sp/>invalid<sp/>schema.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json2<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{<sp/>\&quot;greeting\&quot;<sp/>:<sp/>\&quot;Hello!\&quot;,<sp/>\&quot;farewell\&quot;<sp/>:<sp/>\&quot;bye-bye!\&quot;,<sp/>\&quot;foo\&quot;<sp/>:<sp/>{}<sp/>}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/>json2<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="messagereader_8cpp_1a5cd118312f7d5b3983499e2934611ebf" kindref="member">ParseMessages</ref>(json2,<sp/>messages);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><programlisting><codeline><highlight class="normal">{<sp/>&quot;greeting&quot;<sp/>:<sp/>&quot;Hello!&quot;,<sp/>&quot;farewell&quot;<sp/>:<sp/>&quot;bye-bye!&quot;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">farewell:<sp/>bye-bye!</highlight></codeline>
<codeline><highlight class="normal">greeting:<sp/>Hello!</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Parse<sp/>a<sp/>JSON<sp/>with<sp/>invalid<sp/>schema.</highlight></codeline>
<codeline><highlight class="normal">{<sp/>&quot;greeting&quot;<sp/>:<sp/>&quot;Hello!&quot;,<sp/>&quot;farewell&quot;<sp/>:<sp/>&quot;bye-bye!&quot;,<sp/>&quot;foo&quot;<sp/>:<sp/>{}<sp/>}</highlight></codeline>
<codeline><highlight class="normal">Error:<sp/>Terminate<sp/>parsing<sp/>due<sp/>to<sp/>Handler<sp/>error.</highlight></codeline>
<codeline><highlight class="normal"><sp/>at<sp/>offset<sp/>59<sp/>near<sp/>&apos;}<sp/>}...&apos;</highlight></codeline>
</programlisting></para>
<para>第一个 JSON（<computeroutput>json1</computeroutput>）被成功地解析至 <computeroutput>MessageMap</computeroutput>。由于 <computeroutput>MessageMap</computeroutput> 是一个 <computeroutput>std::map</computeroutput>，打印次序按键值排序。此次序与 JSON 中的次序不同。</para>
<para>在第二个 JSON（<computeroutput>json2</computeroutput>）中，<computeroutput>foo</computeroutput> 的值是一个空 object。由于它是一个 object，<computeroutput><ref refid="struct_message_handler_1a3d7e691831748287252e10ced02061f5" kindref="member">MessageHandler::StartObject()</ref></computeroutput> 会被调用。然而，在 <computeroutput>state_ = kExpectValue</computeroutput> 的情况下，该函数会返回 <computeroutput>false</computeroutput>，并导致解析过程终止。错误代码是 <computeroutput>kParseErrorTermination</computeroutput>。</para>
</sect2>
<sect2 id="md_src_rapidjson_doc_sax_zh_cn_1Filtering">
<title>Filtering of JSON</title>
<para>如前面提及过，<computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 可处理 <computeroutput>Reader</computeroutput> 发出的事件。<computeroutput><ref refid="condense_8cpp" kindref="compound">example/condense/condense.cpp</ref></computeroutput> 例子简单地设置 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput> 作为一个 <computeroutput>Reader</computeroutput> 的处理器，因此它能移除 JSON 中的所有空白字符。<computeroutput><ref refid="pretty_8cpp" kindref="compound">example/pretty/pretty.cpp</ref></computeroutput> 例子使用同样的关系，只是以 <computeroutput><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></computeroutput> 取代 <computeroutput><ref refid="class_writer" kindref="compound">Writer</ref></computeroutput>。因此 <computeroutput>pretty</computeroutput> 能够重新格式化 JSON，加入缩进及换行。</para>
<para>实际上，我们可以使用 SAX 风格 API 去加入（多个）中间层去过滤 JSON 的内容。例如 <computeroutput>capitalize</computeroutput> 例子可以把所有 JSON string 改为大写。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="writer_8h" kindref="compound">rapidjson/writer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filereadstream_8h" kindref="compound">rapidjson/filereadstream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filewritestream_8h" kindref="compound">rapidjson/filewritestream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="en_8h" kindref="compound">rapidjson/error/en.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cctype&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OutputHandler&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_capitalize_filter" kindref="compound">CapitalizeFilter</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter_1afe978f33a2f30a84a9e69cc91fe2da6d" kindref="member">CapitalizeFilter</ref>(OutputHandler&amp;<sp/>out)<sp/>:<sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>(out),<sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a8638839428a447d47711a4b367dc13a4" kindref="member">Null</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Null();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a957038be10025563a35ad32ab9d78418" kindref="member">Bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Bool(b);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a5eec489885ed7f982ea66caf8d557210" kindref="member">Int</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Int(i);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a0e1d475eec0129d65fd7b2c06878e445" kindref="member">Uint</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>u)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Uint(u);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a5ab3ec8eba2a56f595bf10e2f63c0446" kindref="member">Int64</ref>(<ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Int64(i);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a603a8c709c0009d7b21dbb20a570bac7" kindref="member">Uint64</ref>(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Uint64(u);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a1c21df7948456b3ae679db9d1a190249" kindref="member">Double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.Double(d);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a471c199da18ca411550e703a6256abd8" kindref="member">RawNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.RawNumber(str,<sp/>length,<sp/>copy);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a9888a3eadb5297cc06b76df470767b48" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">)<sp/>{<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>.clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>length;<sp/>i++)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>.push_back(std::toupper(str[i]));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.String(&amp;<ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>.front(),<sp/>length,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);<sp/></highlight><highlight class="comment">//<sp/>true<sp/>=<sp/>output<sp/>handler<sp/>need<sp/>to<sp/>copy<sp/>the<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1ab21677e0794b7414ff0fec27f6599095" kindref="member">StartObject</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.StartObject();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1abe3c83f43cbb9ff7ff0e5fdabee79b21" kindref="member">Key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str,<sp/><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>copy)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a9888a3eadb5297cc06b76df470767b48" kindref="member">String</ref>(str,<sp/>length,<sp/>copy);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1aea1d83e92b986264e04314ea2259207d" kindref="member">EndObject</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>memberCount)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.EndObject(memberCount);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1ac6c50b5828bb848fbc98b92c2f432e9f" kindref="member">StartArray</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.StartArray();<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a3d7092e115d0b3f0a277da8487eff4d4" kindref="member">EndArray</ref>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>elementCount)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>.EndArray(elementCount);<sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>OutputHandler&amp;<sp/><ref refid="struct_capitalize_filter_1a76bff3d685698cd6ab2e4cbb84bbf011" kindref="member">out_</ref>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;char&gt;<sp/><ref refid="struct_capitalize_filter_1a6e05d2941c11423da2dbb3ab8eb2367d" kindref="member">buffer_</ref>;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_c_make_c_compiler_id_8c_1a0ddf1224851353fc92bfbff6f499fa97" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*[])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>JSON<sp/>reader<sp/>and<sp/>input<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>readBuffer[65536];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_read_stream" kindref="compound">FileReadStream</ref><sp/>is(stdin,<sp/>readBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(readBuffer));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prepare<sp/>JSON<sp/>writer<sp/>and<sp/>output<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>writeBuffer[65536];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_write_stream" kindref="compound">FileWriteStream</ref><sp/>os(stdout,<sp/>writeBuffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(writeBuffer));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_writer" kindref="compound">Writer&lt;FileWriteStream&gt;</ref><sp/>writer(os);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JSON<sp/>reader<sp/>parse<sp/>from<sp/>the<sp/>input<sp/>stream<sp/>and<sp/>let<sp/>writer<sp/>generate<sp/>the<sp/>output.</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_capitalize_filter" kindref="compound">CapitalizeFilter&lt;Writer&lt;FileWriteStream&gt;</ref><sp/>&gt;<sp/>filter(writer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(is,<sp/>filter))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;\nError(%u):<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal">)reader.<ref refid="class_generic_reader_1ae9008523ccd06d839a57335835cb4091" kindref="member">GetErrorOffset</ref>(),<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ga28835eb93d2c3c07bbea13515eb31415" kindref="member">GetParseError_En</ref>(reader.<ref refid="class_generic_reader_1a937bf90919f50e1c370b312cee5833e8" kindref="member">GetParseErrorCode</ref>()));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>注意到，不可简单地把 JSON 当作字符串去改为大写。例如： <programlisting><codeline><highlight class="normal">[&quot;Hello\nWorld&quot;]</highlight></codeline>
</programlisting></para>
<para>简单地把整个 JSON 转为大写的话会产生错误的转义符： <programlisting><codeline><highlight class="normal">[&quot;HELLO\NWORLD&quot;]</highlight></codeline>
</programlisting></para>
<para>而 <computeroutput>capitalize</computeroutput> 就会产生正确的结果： <programlisting><codeline><highlight class="normal">[&quot;HELLO\nWORLD&quot;]</highlight></codeline>
</programlisting></para>
<para>我们还可以开发更复杂的过滤器。然而，由于 SAX 风格 API 在某一时间点只能提供单一事件的信息，使用者需要自行记录一些上下文信息（例如从根节点起的路径、储存其他相关值）。对于处理某些情况，用 DOM 会比 SAX 更容易实现。 </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="src/rapidjson/doc/sax.zh-cn.md"/>
  </compounddef>
</doxygen>
