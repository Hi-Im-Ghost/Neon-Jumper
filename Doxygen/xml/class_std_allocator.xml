<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="class_std_allocator" kind="class" language="C++" prot="public">
    <compoundname>StdAllocator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::allocator&lt; T &gt;</basecompoundref>
    <includes refid="allocators_8h" local="no">allocators.h</includes>
    <innerclass refid="struct_std_allocator_1_1rebind" prot="public">StdAllocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
      </param>
      <param>
        <type>typename BaseAllocator</type>
        <defval><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" prot="private" static="no">
        <type>std::allocator&lt; <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &gt;</type>
        <definition>typedef std::allocator&lt;T&gt; StdAllocator&lt; T, BaseAllocator &gt;::allocator_type</definition>
        <argsstring></argsstring>
        <name>allocator_type</name>
        <qualifiedname>StdAllocator::allocator_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="461" column="28" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="461" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1a5cc8d5905b0333753db9d7437aeadfc0" prot="private" static="no">
        <type><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref></type>
        <definition>typedef allocator_type StdAllocator&lt; T, BaseAllocator &gt;::traits_type</definition>
        <argsstring></argsstring>
        <name>traits_type</name>
        <qualifiedname>StdAllocator::traits_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="465" column="28" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="465" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_std_allocator_1a09e7299a6c14e2d234bd469f1162bb21" prot="public" static="no">
        <type>BaseAllocator</type>
        <definition>typedef BaseAllocator StdAllocator&lt; T, BaseAllocator &gt;::BaseAllocatorType</definition>
        <argsstring></argsstring>
        <name>BaseAllocatorType</name>
        <qualifiedname>StdAllocator::BaseAllocatorType</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="469" column="27" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" prot="public" static="no">
        <type>traits_type::size_type</type>
        <definition>typedef traits_type::size_type StdAllocator&lt; T, BaseAllocator &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <qualifiedname>StdAllocator::size_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="512" column="53" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="512" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1a4f3adbac47a8c20e47dbfb5c1f421ccd" prot="public" static="no">
        <type>traits_type::difference_type</type>
        <definition>typedef traits_type::difference_type StdAllocator&lt; T, BaseAllocator &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <qualifiedname>StdAllocator::difference_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="513" column="53" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="513" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1aa9b7be996e5529bd6f1cbacadfa090c7" prot="public" static="no">
        <type>traits_type::value_type</type>
        <definition>typedef traits_type::value_type StdAllocator&lt; T, BaseAllocator &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <qualifiedname>StdAllocator::value_type</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="515" column="53" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="515" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" prot="public" static="no">
        <type>traits_type::pointer</type>
        <definition>typedef traits_type::pointer StdAllocator&lt; T, BaseAllocator &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <qualifiedname>StdAllocator::pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="516" column="53" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="516" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296" prot="public" static="no">
        <type>traits_type::const_pointer</type>
        <definition>typedef traits_type::const_pointer StdAllocator&lt; T, BaseAllocator &gt;::const_pointer</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <qualifiedname>StdAllocator::const_pointer</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="517" column="53" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="517" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1a108581b842584639473a6d3fdd135598" prot="public" static="no">
        <type>allocator_type::reference</type>
        <definition>typedef allocator_type::reference StdAllocator&lt; T, BaseAllocator &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <qualifiedname>StdAllocator::reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="550" column="54" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="550" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" prot="public" static="no">
        <type>allocator_type::const_reference</type>
        <definition>typedef allocator_type::const_reference StdAllocator&lt; T, BaseAllocator &gt;::const_reference</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <qualifiedname>StdAllocator::const_reference</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="551" column="54" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="551" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_std_allocator_1a75b2c8e2995e564037dd7d5408217a6b" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool StdAllocator&lt; T, BaseAllocator &gt;::kNeedFree</definition>
        <argsstring></argsstring>
        <name>kNeedFree</name>
        <qualifiedname>StdAllocator::kNeedFree</qualifiedname>
        <initializer>= BaseAllocator::kNeedFree</initializer>
        <briefdescription>
<para>rapidjson Allocator concept </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="614" column="23" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="614" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_std_allocator_1afd2564e7c3121474d93c805839fa5f83" prot="public" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool StdAllocator&lt; T, BaseAllocator &gt;::kRefCounted</definition>
        <argsstring></argsstring>
        <name>kRefCounted</name>
        <qualifiedname>StdAllocator::kRefCounted</qualifiedname>
        <initializer>= <ref refid="structinternal_1_1_is_ref_counted" kindref="compound">internal::IsRefCounted</ref>&lt;BaseAllocator&gt;<ref refid="document_8h_1a071cf97155ba72ac9a1fc4ad7e63d481" kindref="member">::Value</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="615" column="23" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="615" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_std_allocator_1afb3a6a655f835f6b9ec21fab41291287" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
          </param>
          <param>
            <type>typename</type>
          </param>
        </templateparamlist>
        <type>class</type>
        <definition>friend class StdAllocator</definition>
        <argsstring></argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator::StdAllocator</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="631" column="18" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="631" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" prot="private" static="no" mutable="no">
        <type>BaseAllocator</type>
        <definition>BaseAllocator StdAllocator&lt; T, BaseAllocator &gt;::baseAllocator_</definition>
        <argsstring></argsstring>
        <name>baseAllocator_</name>
        <qualifiedname>StdAllocator::baseAllocator_</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="633" column="19" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="633" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_std_allocator_1afdef530c5dbd0c4e86922ab263c8ca83" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; T, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>() RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator::StdAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="471" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="471" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1abfb16c76a06015f0ec1abe704375ace8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; T, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>(const StdAllocator &amp;rhs) RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator::StdAllocator</qualifiedname>
        <param>
          <type>const <ref refid="class_std_allocator" kindref="compound">StdAllocator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="476" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="476" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1ab41a5cbaf54473e1e10468258629bd1b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>StdAllocator&lt; T, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>(const StdAllocator&lt; U, BaseAllocator &gt; &amp;rhs) RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator::StdAllocator</qualifiedname>
        <param>
          <type>const <ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&lt; U, BaseAllocator &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="482" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a40ffe84a544bd5fe938581d09595bd1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; T, BaseAllocator &gt;::StdAllocator</definition>
        <argsstring>(const BaseAllocator &amp;allocator) RAPIDJSON_NOEXCEPT</argsstring>
        <name>StdAllocator</name>
        <qualifiedname>StdAllocator::StdAllocator</qualifiedname>
        <param>
          <type>const BaseAllocator &amp;</type>
          <declname>allocator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="499" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="499" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a3d1703f93d5929c71a35e0c9baf9ceb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>StdAllocator&lt; T, BaseAllocator &gt;::~StdAllocator</definition>
        <argsstring>() RAPIDJSON_NOEXCEPT</argsstring>
        <name>~StdAllocator</name>
        <qualifiedname>StdAllocator::~StdAllocator</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="504" column="5" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="504" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref></type>
        <definition>pointer StdAllocator&lt; T, BaseAllocator &gt;::address</definition>
        <argsstring>(reference r) const RAPIDJSON_NOEXCEPT</argsstring>
        <name>address</name>
        <qualifiedname>StdAllocator::address</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator_1a108581b842584639473a6d3fdd135598" kindref="member">reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="553" column="13" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="553" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a56c3bab4003eccf5b7a9d18175ef4dc2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296" kindref="member">const_pointer</ref></type>
        <definition>const_pointer StdAllocator&lt; T, BaseAllocator &gt;::address</definition>
        <argsstring>(const_reference r) const RAPIDJSON_NOEXCEPT</argsstring>
        <name>address</name>
        <qualifiedname>StdAllocator::address</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" kindref="member">const_reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="557" column="19" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="557" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a158b8ba5e88fbcd7a851541090654930" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref></type>
        <definition>size_type StdAllocator&lt; T, BaseAllocator &gt;::max_size</definition>
        <argsstring>() const RAPIDJSON_NOEXCEPT</argsstring>
        <name>max_size</name>
        <qualifiedname>StdAllocator::max_size</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="562" column="15" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="562" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a279cb8367857b1263c4ab014b74f842a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void StdAllocator&lt; T, BaseAllocator &gt;::construct</definition>
        <argsstring>(pointer p, const_reference r)</argsstring>
        <name>construct</name>
        <qualifiedname>StdAllocator::construct</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" kindref="member">const_reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="567" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="567" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a2aebac89efaaac9707d380b95c902567" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void StdAllocator&lt; T, BaseAllocator &gt;::destroy</definition>
        <argsstring>(pointer p)</argsstring>
        <name>destroy</name>
        <qualifiedname>StdAllocator::destroy</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="571" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="571" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a8c60bc907eb5ecb9bc174de469394e7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>U *</type>
        <definition>U * StdAllocator&lt; T, BaseAllocator &gt;::allocate</definition>
        <argsstring>(size_type n=1, const void *=0)</argsstring>
        <name>allocate</name>
        <qualifiedname>StdAllocator::allocate</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref></type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const void *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="579" column="7" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="579" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a92371ba62f651185c0d3eef856080cfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void StdAllocator&lt; T, BaseAllocator &gt;::deallocate</definition>
        <argsstring>(U *p, size_type n=1)</argsstring>
        <name>deallocate</name>
        <qualifiedname>StdAllocator::deallocate</qualifiedname>
        <param>
          <type>U *</type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref></type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="584" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="584" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1aa301f003f6722d438834b377c314247e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref></type>
        <definition>pointer StdAllocator&lt; T, BaseAllocator &gt;::allocate</definition>
        <argsstring>(size_type n=1, const void *=0)</argsstring>
        <name>allocate</name>
        <qualifiedname>StdAllocator::allocate</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref></type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <param>
          <type>const void *</type>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="589" column="13" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="589" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a96a27b5bc9919d08013e727f5217db7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void StdAllocator&lt; T, BaseAllocator &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type n=1)</argsstring>
        <name>deallocate</name>
        <qualifiedname>StdAllocator::deallocate</qualifiedname>
        <param>
          <type><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref></type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="593" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="593" bodyend="596"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool StdAllocator&lt; T, BaseAllocator &gt;::operator==</definition>
        <argsstring>(const StdAllocator&lt; U, BaseAllocator &gt; &amp;rhs) const RAPIDJSON_NOEXCEPT</argsstring>
        <name>operator==</name>
        <qualifiedname>StdAllocator::operator==</qualifiedname>
        <param>
          <type>const <ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&lt; U, BaseAllocator &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="603" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="603" bodyend="606"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a6d1d3ae1297ec63f6043f06d26b99df7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool StdAllocator&lt; T, BaseAllocator &gt;::operator!=</definition>
        <argsstring>(const StdAllocator&lt; U, BaseAllocator &gt; &amp;rhs) const RAPIDJSON_NOEXCEPT</argsstring>
        <name>operator!=</name>
        <qualifiedname>StdAllocator::operator!=</qualifiedname>
        <param>
          <type>const <ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&lt; U, BaseAllocator &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="608" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="608" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a0499a9aa57a19d5ae174bedf8c80da87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * StdAllocator&lt; T, BaseAllocator &gt;::Malloc</definition>
        <argsstring>(size_t size)</argsstring>
        <name>Malloc</name>
        <qualifiedname>StdAllocator::Malloc</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="616" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="616" bodyend="619"/>
      </memberdef>
      <memberdef kind="function" id="class_std_allocator_1a97fb4098726bc00def3a205698517b8b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>void * StdAllocator&lt; T, BaseAllocator &gt;::Realloc</definition>
        <argsstring>(void *originalPtr, size_t originalSize, size_t newSize)</argsstring>
        <name>Realloc</name>
        <qualifiedname>StdAllocator::Realloc</qualifiedname>
        <param>
          <type>void *</type>
          <declname>originalPtr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>originalSize</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>newSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="620" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="620" bodyend="623"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="class_std_allocator_1ae3b6918eee229eeb89e9535d65296d6d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void StdAllocator&lt; T, BaseAllocator &gt;::Free</definition>
        <argsstring>(void *ptr) RAPIDJSON_NOEXCEPT</argsstring>
        <name>Free</name>
        <qualifiedname>StdAllocator::Free</qualifiedname>
        <param>
          <type>void *</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="624" column="17" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="624" bodyend="627"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>StdAllocator&lt; T, BaseAllocator &gt;</label>
        <link refid="class_std_allocator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>CrtAllocator</label>
        <link refid="class_crt_allocator"/>
      </node>
      <node id="1">
        <label>StdAllocator&lt; T, BaseAllocator &gt;</label>
        <link refid="class_std_allocator"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>baseAllocator_</edgelabel>
        </childnode>
      </node>
      <node id="2">
        <label>std::allocator&lt; T &gt;</label>
      </node>
    </collaborationgraph>
    <location file="src/rapidjson/include/rapidjson/allocators.h" line="458" column="1" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="460" bodyend="634"/>
    <listofallmembers>
      <member refid="class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>address</name></member>
      <member refid="class_std_allocator_1a56c3bab4003eccf5b7a9d18175ef4dc2" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>address</name></member>
      <member refid="class_std_allocator_1a8c60bc907eb5ecb9bc174de469394e7b" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>allocate</name></member>
      <member refid="class_std_allocator_1aa301f003f6722d438834b377c314247e" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>allocate</name></member>
      <member refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" prot="private" virt="non-virtual"><scope>StdAllocator</scope><name>allocator_type</name></member>
      <member refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" prot="private" virt="non-virtual"><scope>StdAllocator</scope><name>baseAllocator_</name></member>
      <member refid="class_std_allocator_1a09e7299a6c14e2d234bd469f1162bb21" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>BaseAllocatorType</name></member>
      <member refid="class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>const_pointer</name></member>
      <member refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>const_reference</name></member>
      <member refid="class_std_allocator_1a279cb8367857b1263c4ab014b74f842a" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>construct</name></member>
      <member refid="class_std_allocator_1a92371ba62f651185c0d3eef856080cfa" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>deallocate</name></member>
      <member refid="class_std_allocator_1a96a27b5bc9919d08013e727f5217db7a" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>deallocate</name></member>
      <member refid="class_std_allocator_1a2aebac89efaaac9707d380b95c902567" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>destroy</name></member>
      <member refid="class_std_allocator_1a4f3adbac47a8c20e47dbfb5c1f421ccd" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>difference_type</name></member>
      <member refid="class_std_allocator_1ae3b6918eee229eeb89e9535d65296d6d" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>Free</name></member>
      <member refid="class_std_allocator_1a75b2c8e2995e564037dd7d5408217a6b" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>kNeedFree</name></member>
      <member refid="class_std_allocator_1afd2564e7c3121474d93c805839fa5f83" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>kRefCounted</name></member>
      <member refid="class_std_allocator_1a0499a9aa57a19d5ae174bedf8c80da87" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>Malloc</name></member>
      <member refid="class_std_allocator_1a158b8ba5e88fbcd7a851541090654930" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>max_size</name></member>
      <member refid="class_std_allocator_1a6d1d3ae1297ec63f6043f06d26b99df7" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>operator!=</name></member>
      <member refid="class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>operator==</name></member>
      <member refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>pointer</name></member>
      <member refid="class_std_allocator_1a97fb4098726bc00def3a205698517b8b" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>Realloc</name></member>
      <member refid="class_std_allocator_1a108581b842584639473a6d3fdd135598" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>reference</name></member>
      <member refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>size_type</name></member>
      <member refid="class_std_allocator_1afb3a6a655f835f6b9ec21fab41291287" prot="private" virt="non-virtual"><scope>StdAllocator</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_1afdef530c5dbd0c4e86922ab263c8ca83" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_1abfb16c76a06015f0ec1abe704375ace8" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_1ab41a5cbaf54473e1e10468258629bd1b" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_1a40ffe84a544bd5fe938581d09595bd1f" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>StdAllocator</name></member>
      <member refid="class_std_allocator_1a5cc8d5905b0333753db9d7437aeadfc0" prot="private" virt="non-virtual"><scope>StdAllocator</scope><name>traits_type</name></member>
      <member refid="class_std_allocator_1aa9b7be996e5529bd6f1cbacadfa090c7" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>value_type</name></member>
      <member refid="class_std_allocator_1a3d1703f93d5929c71a35e0c9baf9ceb1" prot="public" virt="non-virtual"><scope>StdAllocator</scope><name>~StdAllocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
