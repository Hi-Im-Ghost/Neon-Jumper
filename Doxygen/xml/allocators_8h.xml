<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="allocators_8h" kind="file" language="C++">
    <compoundname>allocators.h</compoundname>
    <includes refid="rapidjson_8h" local="yes">rapidjson.h</includes>
    <includes refid="meta_8h" local="yes">internal/meta.h</includes>
    <includes local="no">memory</includes>
    <includedby refid="regex_8h" local="yes">src/rapidjson/include/rapidjson/internal/regex.h</includedby>
    <includedby refid="stack_8h" local="yes">src/rapidjson/include/rapidjson/internal/stack.h</includedby>
    <includedby refid="reader_8h" local="yes">src/rapidjson/include/rapidjson/reader.h</includedby>
    <includedby refid="allocatorstest_8cpp" local="yes">src/rapidjson/test/unittest/allocatorstest.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/rapidjson/include/rapidjson/allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="3">
        <label>cstdlib</label>
      </node>
      <node id="4">
        <label>cstring</label>
      </node>
      <node id="7">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="26">
        <label>src/Layer.cpp</label>
        <link refid="_layer_8cpp"/>
      </node>
      <node id="25">
        <label>src/Layer.h</label>
        <link refid="_layer_8h"/>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>src/LoadMap.cpp</label>
        <link refid="_load_map_8cpp"/>
      </node>
      <node id="28">
        <label>src/LoadMap.h</label>
        <link refid="_load_map_8h"/>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>src/Map.cpp</label>
        <link refid="_map_8cpp"/>
      </node>
      <node id="27">
        <label>src/Map.h</label>
        <link refid="_map_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
      </node>
      <node id="39">
        <label>src/TileMap.cpp</label>
        <link refid="_tile_map_8cpp"/>
      </node>
      <node id="38">
        <label>src/TileMap.h</label>
        <link refid="_tile_map_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="40">
        <label>src/TileSet.cpp</label>
        <link refid="_tile_set_8cpp"/>
      </node>
      <node id="41">
        <label>src/TileSet.h</label>
        <link refid="_tile_set_8h"/>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
      </node>
      <node id="43">
        <label>src/TileSetMap.cpp</label>
        <link refid="_tile_set_map_8cpp"/>
      </node>
      <node id="42">
        <label>src/TileSetMap.h</label>
        <link refid="_tile_set_map_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="43" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>src/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
      <node id="44">
        <label>src/rapidjson/example/archiver/archiver.cpp</label>
        <link refid="archiver_8cpp"/>
      </node>
      <node id="14">
        <label>src/rapidjson/example/capitalize/capitalize.cpp</label>
        <link refid="capitalize_8cpp"/>
      </node>
      <node id="15">
        <label>src/rapidjson/example/condense/condense.cpp</label>
        <link refid="condense_8cpp"/>
      </node>
      <node id="16">
        <label>src/rapidjson/example/filterkey/filterkey.cpp</label>
        <link refid="filterkey_8cpp"/>
      </node>
      <node id="45">
        <label>src/rapidjson/example/filterkeydom/filterkeydom.cpp</label>
        <link refid="filterkeydom_8cpp"/>
      </node>
      <node id="17">
        <label>src/rapidjson/example/jsonx/jsonx.cpp</label>
        <link refid="jsonx_8cpp"/>
      </node>
      <node id="18">
        <label>src/rapidjson/example/lookaheadparser/lookaheadparser.cpp</label>
        <link refid="lookaheadparser_8cpp"/>
      </node>
      <node id="19">
        <label>src/rapidjson/example/messagereader/messagereader.cpp</label>
        <link refid="messagereader_8cpp"/>
      </node>
      <node id="20">
        <label>src/rapidjson/example/pretty/pretty.cpp</label>
        <link refid="pretty_8cpp"/>
      </node>
      <node id="21">
        <label>src/rapidjson/example/prettyauto/prettyauto.cpp</label>
        <link refid="prettyauto_8cpp"/>
      </node>
      <node id="4">
        <label>src/rapidjson/example/schemavalidator/schemavalidator.cpp</label>
        <link refid="schemavalidator_8cpp"/>
      </node>
      <node id="69">
        <label>src/rapidjson/example/serialize/serialize.cpp</label>
        <link refid="serialize_8cpp"/>
      </node>
      <node id="46">
        <label>src/rapidjson/example/simpledom/simpledom.cpp</label>
        <link refid="simpledom_8cpp"/>
      </node>
      <node id="22">
        <label>src/rapidjson/example/simplepullreader/simplepullreader.cpp</label>
        <link refid="simplepullreader_8cpp"/>
      </node>
      <node id="23">
        <label>src/rapidjson/example/simplereader/simplereader.cpp</label>
        <link refid="simplereader_8cpp"/>
      </node>
      <node id="66">
        <label>src/rapidjson/example/simplewriter/simplewriter.cpp</label>
        <link refid="simplewriter_8cpp"/>
      </node>
      <node id="47">
        <label>src/rapidjson/example/sortkeys/sortkeys.cpp</label>
        <link refid="sortkeys_8cpp"/>
      </node>
      <node id="48">
        <label>src/rapidjson/example/traverseaspointer.cpp</label>
        <link refid="traverseaspointer_8cpp"/>
      </node>
      <node id="49">
        <label>src/rapidjson/example/tutorial/tutorial.cpp</label>
        <link refid="tutorial_8cpp"/>
      </node>
      <node id="1">
        <label>src/rapidjson/include/rapidjson/allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="72" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>src/rapidjson/include/rapidjson/document.h</label>
        <link refid="document_8h"/>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="50" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="53" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="55" relation="include">
        </childnode>
        <childnode refid="56" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="58" relation="include">
        </childnode>
        <childnode refid="59" relation="include">
        </childnode>
        <childnode refid="60" relation="include">
        </childnode>
        <childnode refid="61" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/rapidjson/include/rapidjson/internal/regex.h</label>
        <link refid="regex_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>src/rapidjson/include/rapidjson/internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="65" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/rapidjson/include/rapidjson/memorybuffer.h</label>
        <link refid="memorybuffer_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="50">
        <label>src/rapidjson/include/rapidjson/pointer.h</label>
        <link refid="pointer_8h"/>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
      </node>
      <node id="68">
        <label>src/rapidjson/include/rapidjson/prettywriter.h</label>
        <link refid="prettywriter_8h"/>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="69" relation="include">
        </childnode>
        <childnode refid="47" relation="include">
        </childnode>
        <childnode refid="49" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>src/rapidjson/include/rapidjson/reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="63" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/rapidjson/include/rapidjson/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="65">
        <label>src/rapidjson/include/rapidjson/stringbuffer.h</label>
        <link refid="stringbuffer_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="44" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="48" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="67" relation="include">
        </childnode>
        <childnode refid="52" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="71" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="51" relation="include">
        </childnode>
        <childnode refid="62" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="67">
        <label>src/rapidjson/include/rapidjson/writer.h</label>
        <link refid="writer_8h"/>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="45" relation="include">
        </childnode>
        <childnode refid="46" relation="include">
        </childnode>
        <childnode refid="66" relation="include">
        </childnode>
        <childnode refid="68" relation="include">
        </childnode>
        <childnode refid="54" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="57" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="64" relation="include">
        </childnode>
        <childnode refid="70" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="52">
        <label>src/rapidjson/test/perftest/rapidjsontest.cpp</label>
        <link refid="rapidjsontest_8cpp"/>
      </node>
      <node id="5">
        <label>src/rapidjson/test/perftest/schematest.cpp</label>
        <link refid="perftest_2schematest_8cpp"/>
      </node>
      <node id="72">
        <label>src/rapidjson/test/unittest/allocatorstest.cpp</label>
        <link refid="allocatorstest_8cpp"/>
      </node>
      <node id="53">
        <label>src/rapidjson/test/unittest/cursorstreamwrappertest.cpp</label>
        <link refid="cursorstreamwrappertest_8cpp"/>
      </node>
      <node id="54">
        <label>src/rapidjson/test/unittest/documenttest.cpp</label>
        <link refid="documenttest_8cpp"/>
      </node>
      <node id="11">
        <label>src/rapidjson/test/unittest/encodedstreamtest.cpp</label>
        <link refid="encodedstreamtest_8cpp"/>
      </node>
      <node id="71">
        <label>src/rapidjson/test/unittest/encodingstest.cpp</label>
        <link refid="encodingstest_8cpp"/>
      </node>
      <node id="6">
        <label>src/rapidjson/test/unittest/fwdtest.cpp</label>
        <link refid="fwdtest_8cpp"/>
      </node>
      <node id="55">
        <label>src/rapidjson/test/unittest/istreamwrappertest.cpp</label>
        <link refid="istreamwrappertest_8cpp"/>
      </node>
      <node id="56">
        <label>src/rapidjson/test/unittest/jsoncheckertest.cpp</label>
        <link refid="jsoncheckertest_8cpp"/>
      </node>
      <node id="57">
        <label>src/rapidjson/test/unittest/namespacetest.cpp</label>
        <link refid="namespacetest_8cpp"/>
      </node>
      <node id="58">
        <label>src/rapidjson/test/unittest/ostreamwrappertest.cpp</label>
        <link refid="ostreamwrappertest_8cpp"/>
      </node>
      <node id="59">
        <label>src/rapidjson/test/unittest/platformtest.cpp</label>
        <link refid="unittest_2platformtest_8cpp"/>
      </node>
      <node id="51">
        <label>src/rapidjson/test/unittest/pointertest.cpp</label>
        <link refid="pointertest_8cpp"/>
      </node>
      <node id="62">
        <label>src/rapidjson/test/unittest/prettywritertest.cpp</label>
        <link refid="prettywritertest_8cpp"/>
      </node>
      <node id="63">
        <label>src/rapidjson/test/unittest/readertest.cpp</label>
        <link refid="readertest_8cpp"/>
      </node>
      <node id="8">
        <label>src/rapidjson/test/unittest/regextest.cpp</label>
        <link refid="regextest_8cpp"/>
      </node>
      <node id="7">
        <label>src/rapidjson/test/unittest/schematest.cpp</label>
        <link refid="unittest_2schematest_8cpp"/>
      </node>
      <node id="64">
        <label>src/rapidjson/test/unittest/simdtest.cpp</label>
        <link refid="simdtest_8cpp"/>
      </node>
      <node id="70">
        <label>src/rapidjson/test/unittest/stringbuffertest.cpp</label>
        <link refid="stringbuffertest_8cpp"/>
      </node>
      <node id="60">
        <label>src/rapidjson/test/unittest/uritest.cpp</label>
        <link refid="uritest_8cpp"/>
      </node>
      <node id="61">
        <label>src/rapidjson/test/unittest/valuetest.cpp</label>
        <link refid="valuetest_8cpp"/>
      </node>
      <node id="12">
        <label>src/rapidjson/test/unittest/writertest.cpp</label>
        <link refid="writertest_8cpp"/>
      </node>
      <node id="32">
        <label>src/states/LevelOneState.cpp</label>
        <link refid="_level_one_state_8cpp"/>
      </node>
      <node id="31">
        <label>src/states/LevelOneState.h</label>
        <link refid="_level_one_state_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>src/states/LevelTwoState.cpp</label>
        <link refid="_level_two_state_8cpp"/>
      </node>
      <node id="35">
        <label>src/states/LevelTwoState.h</label>
        <link refid="_level_two_state_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>src/states/MainMenuState.cpp</label>
        <link refid="_main_menu_state_8cpp"/>
      </node>
      <node id="33">
        <label>src/states/MainMenuState.h</label>
        <link refid="_main_menu_state_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="class_crt_allocator" prot="public">CrtAllocator</innerclass>
    <innerclass refid="class_memory_pool_allocator" prot="public">MemoryPoolAllocator</innerclass>
    <innerclass refid="struct_memory_pool_allocator_1_1_chunk_header" prot="private">MemoryPoolAllocator::ChunkHeader</innerclass>
    <innerclass refid="struct_memory_pool_allocator_1_1_shared_data" prot="private">MemoryPoolAllocator::SharedData</innerclass>
    <innerclass refid="structinternal_1_1_is_ref_counted" prot="public">internal::IsRefCounted</innerclass>
    <innerclass refid="structinternal_1_1_is_ref_counted_3_01_t_00_01typename_01internal_1_1_enable_if_cond_3_01_t_1_1k_ref_counted_01_4_1_1_type_01_4" prot="public">internal::IsRefCounted&lt; T, typename internal::EnableIfCond&lt; T::kRefCounted &gt;::Type &gt;</innerclass>
    <innerclass refid="class_std_allocator" prot="public">StdAllocator</innerclass>
    <innerclass refid="struct_std_allocator_1_1rebind" prot="public">StdAllocator::rebind</innerclass>
    <innerclass refid="class_std_allocator_3_01void_00_01_base_allocator_01_4" prot="public">StdAllocator&lt; void, BaseAllocator &gt;</innerclass>
    <innerclass refid="struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind" prot="public">StdAllocator&lt; void, BaseAllocator &gt;::rebind</innerclass>
    <innernamespace refid="namespaceinternal">internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga860570d04d489be08b9835d2ec58bac5" prot="public" static="no">
        <name>RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</name>
        <initializer>(64 * 1024)</initializer>
        <briefdescription>
<para>User-defined kDefaultChunkCapacity definition. </para>
        </briefdescription>
        <detaileddescription>
<para>User can define this as any <computeroutput>size</computeroutput> that is a power of 2. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="71" column="9" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="allocators_8h_1a8e4137cbc097868e8c3d785f6cca1223" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> *</type>
        <definition>T * Realloc</definition>
        <argsstring>(A &amp;a, T *old_p, size_t old_n, size_t new_n)</argsstring>
        <name>Realloc</name>
        <param>
          <type>A &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> *</type>
          <declname>old_p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>old_n</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>new_n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="434" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="434" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="allocators_8h_1a7e0ace0214f18427d9ee8e76a5b3dcdf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> *</type>
        <definition>T * Malloc</definition>
        <argsstring>(A &amp;a, size_t n=1)</argsstring>
        <name>Malloc</name>
        <param>
          <type>A &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="441" column="10" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="441" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
          <param>
            <type>typename A</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void Free</definition>
        <argsstring>(A &amp;a, T *p, size_t n=1)</argsstring>
        <name>Free</name>
        <param>
          <type>A &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/allocators.h" line="447" column="13" bodyfile="src/rapidjson/include/rapidjson/allocators.h" bodystart="447" bodyend="450"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_ALLOCATORS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAPIDJSON_ALLOCATORS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="rapidjson_8h" kindref="compound">rapidjson.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="meta_8h" kindref="compound">internal/meta.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc" kindref="member">RAPIDJSON_NAMESPACE_BEGIN</ref></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="comment">//<sp/>Allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga860570d04d489be08b9835d2ec58bac5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY<sp/>(64<sp/>*<sp/>1024)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="comment">//<sp/>CrtAllocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="class_crt_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84" refid="class_crt_allocator_1ac7df8398c529290f0cd5950d9492f524" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_crt_allocator_1ac7df8398c529290f0cd5950d9492f524" kindref="member">kNeedFree</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85" refid="class_crt_allocator_1ae9b348831bee2b1b52b736c2d3921bad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_crt_allocator_1ae9b348831bee2b1b52b736c2d3921bad" kindref="member">Malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{<sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(size)<sp/></highlight><highlight class="comment">//<sp/><sp/>behavior<sp/>of<sp/>malloc(0)<sp/>is<sp/>implementation<sp/>defined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1a047ad77d620d1ae97c1bc70a9f316f27" kindref="member">RAPIDJSON_MALLOC</ref>(size);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/></highlight><highlight class="comment">//<sp/>standardize<sp/>to<sp/>returning<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91" refid="class_crt_allocator_1a54b9a20354ba249613d332a7b445575d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_crt_allocator_1a54b9a20354ba249613d332a7b445575d" kindref="member">Realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originalPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>originalSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)originalSize;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1aa6d5138eed2c5b311d9862d191393a5f" kindref="member">RAPIDJSON_FREE</ref>(originalPtr);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="rapidjson_8h_1aa2c0f2121d7803191a43609ea5d8dd67" kindref="member">RAPIDJSON_REALLOC</ref>(originalPtr,<sp/>newSize);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99" refid="class_crt_allocator_1aa09ed06f0decbedcaaa2c2a417820a79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_crt_allocator_1aa09ed06f0decbedcaaa2c2a417820a79" kindref="member">Free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)<sp/>RAPIDJSON_NOEXCEPT<sp/>{<sp/><ref refid="rapidjson_8h_1aa6d5138eed2c5b311d9862d191393a5f" kindref="member">RAPIDJSON_FREE</ref>(ptr);<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="class_crt_allocator_1ae65fb1b4e1272d05e003be57feac68a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_crt_allocator_1ae65fb1b4e1272d05e003be57feac68a6" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104" refid="class_crt_allocator_1a1fb8ca99a43c939595e5c0b548d7532c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_crt_allocator_1a1fb8ca99a43c939595e5c0b548d7532c" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="comment">//<sp/>MemoryPoolAllocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseAllocator<sp/>=<sp/>CrtAllocator&gt;</highlight></codeline>
<codeline lineno="129" refid="class_memory_pool_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="struct_memory_pool_allocator_1_1_chunk_header" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref><sp/>{</highlight></codeline>
<codeline lineno="134" refid="struct_memory_pool_allocator_1_1_chunk_header_1ae19df98bce5dd485a23f953112ecde5f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ae19df98bce5dd485a23f953112ecde5f" kindref="member">capacity</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135" refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="136" refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref><sp/>*<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" kindref="member">next</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="struct_memory_pool_allocator_1_1_shared_data" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_memory_pool_allocator_1_1_shared_data" kindref="compound">SharedData</ref><sp/>{</highlight></codeline>
<codeline lineno="140" refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref><sp/>*<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="141" refid="struct_memory_pool_allocator_1_1_shared_data_1a8e991b807bbdde89645a19bde7398bf7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseAllocator*<sp/><ref refid="struct_memory_pool_allocator_1_1_shared_data_1a8e991b807bbdde89645a19bde7398bf7" kindref="member">ownBaseAllocator</ref>;<sp/></highlight></codeline>
<codeline lineno="142" refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="143" refid="struct_memory_pool_allocator_1_1_shared_data_1a89636640af96ac5eddb73c7377981eb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="struct_memory_pool_allocator_1_1_shared_data_1a89636640af96ac5eddb73c7377981eb9" kindref="member">ownBuffer</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="class_memory_pool_allocator_1aa2538f9ce977f511009747f60b1ae552" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1aa2538f9ce977f511009747f60b1ae552" kindref="member">SIZEOF_SHARED_DATA</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242" kindref="member">RAPIDJSON_ALIGN</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_memory_pool_allocator_1_1_shared_data" kindref="compound">SharedData</ref>));</highlight></codeline>
<codeline lineno="147" refid="class_memory_pool_allocator_1a195c16fcdba57918869168c48d97737f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a195c16fcdba57918869168c48d97737f" kindref="member">SIZEOF_CHUNK_HEADER</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242" kindref="member">RAPIDJSON_ALIGN</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref>));</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="class_memory_pool_allocator_1a9e67d84bf86241a3da276057f4458cda" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref><sp/>*<ref refid="class_memory_pool_allocator_1a9e67d84bf86241a3da276057f4458cda" kindref="member">GetChunkHead</ref>(<ref refid="struct_memory_pool_allocator_1_1_shared_data" kindref="compound">SharedData</ref><sp/>*shared)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shared)<sp/>+<sp/><ref refid="class_memory_pool_allocator_1aa2538f9ce977f511009747f60b1ae552" kindref="member">SIZEOF_SHARED_DATA</ref>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153" refid="class_memory_pool_allocator_1a76f41aff1e8a9f82abc571df564c18d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref><sp/>*<ref refid="class_memory_pool_allocator_1a76f41aff1e8a9f82abc571df564c18d5" kindref="member">GetChunkBuffer</ref>(<ref refid="struct_memory_pool_allocator_1_1_shared_data" kindref="compound">SharedData</ref><sp/>*shared)</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1aba7bc1797add20fe3efdf37ced1182c5" kindref="member">uint8_t</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shared-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>)<sp/>+<sp/><ref refid="class_memory_pool_allocator_1a195c16fcdba57918869168c48d97737f" kindref="member">SIZEOF_CHUNK_HEADER</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="class_memory_pool_allocator_1a8d9337bc406a25dd06a24ee3fa5fb58c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a8d9337bc406a25dd06a24ee3fa5fb58c" kindref="member">kDefaultChunkCapacity</ref><sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga860570d04d489be08b9835d2ec58bac5" kindref="member">RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY</ref>;<sp/></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161" refid="class_memory_pool_allocator_1ab4c7c5c631e451689bc9da392a65194f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1ab4c7c5c631e451689bc9da392a65194f" kindref="member">kNeedFree</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162" refid="class_memory_pool_allocator_1a3a18920d6afd9e9c9e62d8fd8f73e095" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a3a18920d6afd9e9c9e62d8fd8f73e095" kindref="member">kRefCounted</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="class_memory_pool_allocator_1aeec85ac657f242ac5620115141be5209" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1aeec85ac657f242ac5620115141be5209" kindref="member">MemoryPoolAllocator</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkSize<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a8d9337bc406a25dd06a24ee3fa5fb58c" kindref="member">kDefaultChunkCapacity</ref>,<sp/>BaseAllocator*<sp/>baseAllocator<sp/>=<sp/>0)<sp/>:<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref>(chunkSize),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>(baseAllocator<sp/>?<sp/>baseAllocator<sp/>:<sp/><ref refid="rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b" kindref="member">RAPIDJSON_NEW</ref>(BaseAllocator)()),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>(static_cast&lt;<ref refid="struct_memory_pool_allocator_1_1_shared_data" kindref="compound">SharedData</ref>*&gt;(<ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref><sp/>?<sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>-&gt;<ref refid="class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48" kindref="member">Malloc</ref>(<ref refid="class_memory_pool_allocator_1aa2538f9ce977f511009747f60b1ae552" kindref="member">SIZEOF_SHARED_DATA</ref><sp/>+<sp/><ref refid="class_memory_pool_allocator_1a195c16fcdba57918869168c48d97737f" kindref="member">SIZEOF_CHUNK_HEADER</ref>)<sp/>:<sp/>0))</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref><sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(baseAllocator)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a8e991b807bbdde89645a19bde7398bf7" kindref="member">ownBaseAllocator</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a8e991b807bbdde89645a19bde7398bf7" kindref="member">ownBaseAllocator</ref><sp/>=<sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref><sp/>=<sp/><ref refid="class_memory_pool_allocator_1a9e67d84bf86241a3da276057f4458cda" kindref="member">GetChunkHead</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ae19df98bce5dd485a23f953112ecde5f" kindref="member">capacity</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" kindref="member">next</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a89636640af96ac5eddb73c7377981eb9" kindref="member">ownBuffer</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="class_memory_pool_allocator_1a1f0d865093fdb955d956b7a445a8ddbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a1f0d865093fdb955d956b7a445a8ddbf" kindref="member">MemoryPoolAllocator</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chunkSize<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a8d9337bc406a25dd06a24ee3fa5fb58c" kindref="member">kDefaultChunkCapacity</ref>,<sp/>BaseAllocator*<sp/>baseAllocator<sp/>=<sp/>0)<sp/>:</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref>(chunkSize),</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>(baseAllocator),</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>(static_cast&lt;<ref refid="struct_memory_pool_allocator_1_1_shared_data" kindref="compound">SharedData</ref>*&gt;(<ref refid="class_memory_pool_allocator_1ab0eabf761ffa8641236acd99cbe22842" kindref="member">AlignBuffer</ref>(buffer,<sp/>size)))</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(size<sp/>&gt;=<sp/><ref refid="class_memory_pool_allocator_1aa2538f9ce977f511009747f60b1ae552" kindref="member">SIZEOF_SHARED_DATA</ref><sp/>+<sp/><ref refid="class_memory_pool_allocator_1a195c16fcdba57918869168c48d97737f" kindref="member">SIZEOF_CHUNK_HEADER</ref>);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref><sp/>=<sp/><ref refid="class_memory_pool_allocator_1a9e67d84bf86241a3da276057f4458cda" kindref="member">GetChunkHead</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ae19df98bce5dd485a23f953112ecde5f" kindref="member">capacity</ref><sp/>=<sp/>size<sp/>-<sp/><ref refid="class_memory_pool_allocator_1aa2538f9ce977f511009747f60b1ae552" kindref="member">SIZEOF_SHARED_DATA</ref><sp/>-<sp/><ref refid="class_memory_pool_allocator_1a195c16fcdba57918869168c48d97737f" kindref="member">SIZEOF_CHUNK_HEADER</ref>;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" kindref="member">next</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a8e991b807bbdde89645a19bde7398bf7" kindref="member">ownBaseAllocator</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a89636640af96ac5eddb73c7377981eb9" kindref="member">ownBuffer</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="class_memory_pool_allocator_1afa7a6555d8a6e151148c8876c60a36c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1afa7a6555d8a6e151148c8876c60a36c5" kindref="member">MemoryPoolAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref>(rhs.chunk_capacity_),</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>(rhs.baseAllocator_),</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>(rhs.shared_)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223" refid="class_memory_pool_allocator_1a32812539a2d21759082f325ee78565c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/><ref refid="class_memory_pool_allocator_1a32812539a2d21759082f325ee78565c7" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(rhs.shared_-&gt;refcount<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++rhs.shared_-&gt;refcount;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_memory_pool_allocator_1aff48c4c1fa43bdd3a2b406231f0eb00e" kindref="member">~MemoryPoolAllocator</ref>();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref><sp/>=<sp/>rhs.baseAllocator_;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref><sp/>=<sp/>rhs.chunk_capacity_;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref><sp/>=<sp/>rhs.shared_;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11_RVALUE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1aeec85ac657f242ac5620115141be5209" kindref="member">MemoryPoolAllocator</ref>(<ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref>(rhs.chunk_capacity_),</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>(rhs.baseAllocator_),</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>(rhs.shared_)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(rhs.shared_-&gt;refcount<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.shared_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/><ref refid="class_memory_pool_allocator_1a32812539a2d21759082f325ee78565c7" kindref="member">operator=</ref>(<ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(rhs.shared_-&gt;refcount<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_memory_pool_allocator_1aff48c4c1fa43bdd3a2b406231f0eb00e" kindref="member">~MemoryPoolAllocator</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref><sp/>=<sp/>rhs.baseAllocator_;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref><sp/>=<sp/>rhs.chunk_capacity_;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref><sp/>=<sp/>rhs.shared_;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.shared_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="class_memory_pool_allocator_1aff48c4c1fa43bdd3a2b406231f0eb00e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1aff48c4c1fa43bdd3a2b406231f0eb00e" kindref="member">~MemoryPoolAllocator</ref>()<sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>do<sp/>nothing<sp/>if<sp/>moved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a6f6dce308aa10a28c898348db3bc75c1" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BaseAllocator<sp/>*<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a8e991b807bbdde89645a19bde7398bf7" kindref="member">ownBaseAllocator</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a89636640af96ac5eddb73c7377981eb9" kindref="member">ownBuffer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>-&gt;Free(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="rapidjson_8h_1a52c941c3fdd646527cdcd42aa846a28a" kindref="member">RAPIDJSON_DELETE</ref>(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="class_memory_pool_allocator_1a6f6dce308aa10a28c898348db3bc75c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a6f6dce308aa10a28c898348db3bc75c1" kindref="member">Clear</ref>()<sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref>*<sp/>c<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!c-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" kindref="member">next</ref>)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref><sp/>=<sp/>c-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" kindref="member">next</ref>;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>-&gt;Free(c);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="class_memory_pool_allocator_1a60526f0a1e6bb225c49f10537635e30f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a60526f0a1e6bb225c49f10537635e30f" kindref="member">Capacity</ref>()<sp/>const<sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref>*<sp/>c<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>;<sp/>c<sp/>!=<sp/>0;<sp/>c<sp/>=<sp/>c-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>capacity<sp/>+=<sp/>c-&gt;capacity;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>capacity;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="class_memory_pool_allocator_1a53abb6188aea4a687ca9f6d778fd1d2d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a53abb6188aea4a687ca9f6d778fd1d2d" kindref="member">Size</ref>()<sp/>const<sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref>*<sp/>c<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>;<sp/>c<sp/>!=<sp/>0;<sp/>c<sp/>=<sp/>c-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1a4d24357c177824b3af56ec1098d9d9dc" kindref="member">next</ref>)</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>+=<sp/>c-&gt;size;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="class_memory_pool_allocator_1aee5e0b6d09dfbbc9bbbc59399a14cc53" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1aee5e0b6d09dfbbc9bbbc59399a14cc53" kindref="member">Shared</ref>()<sp/>const<sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="320" refid="class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48" kindref="member">Malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!size)</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242" kindref="member">RAPIDJSON_ALIGN</ref>(size);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5" kindref="member">RAPIDJSON_UNLIKELY</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>+<sp/>size<sp/>&gt;<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ae19df98bce5dd485a23f953112ecde5f" kindref="member">capacity</ref>))</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_memory_pool_allocator_1a41bebe49979dc69921519c7556af18fc" kindref="member">AddChunk</ref>(<ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref><sp/>&gt;<sp/>size<sp/>?<sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref><sp/>:<sp/>size))</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buffer<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a76f41aff1e8a9f82abc571df564c18d5" kindref="member">GetChunkBuffer</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>)<sp/>+<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>+=<sp/>size;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="class_memory_pool_allocator_1a7c273279d361b207ff622d4bdfc63074" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_memory_pool_allocator_1a7c273279d361b207ff622d4bdfc63074" kindref="member">Realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originalPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>originalSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(originalPtr<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48" kindref="member">Malloc</ref>(newSize);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(newSize<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>originalSize<sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242" kindref="member">RAPIDJSON_ALIGN</ref>(originalSize);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newSize<sp/>=<sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga583915242504c7fdb36e826f02f76242" kindref="member">RAPIDJSON_ALIGN</ref>(newSize);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>shrink<sp/>if<sp/>new<sp/>size<sp/>is<sp/>smaller<sp/>than<sp/>original</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(originalSize<sp/>&gt;=<sp/>newSize)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>originalPtr;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Simply<sp/>expand<sp/>it<sp/>if<sp/>it<sp/>is<sp/>the<sp/>last<sp/>allocation<sp/>and<sp/>there<sp/>is<sp/>sufficient<sp/>space</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(originalPtr<sp/>==<sp/><ref refid="class_memory_pool_allocator_1a76f41aff1e8a9f82abc571df564c18d5" kindref="member">GetChunkBuffer</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>)<sp/>+<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>-<sp/>originalSize)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>increment<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newSize<sp/>-<sp/>originalSize);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>+<sp/>increment<sp/>&lt;=<sp/>shared_-&gt;chunkHead-&gt;capacity)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_chunk_header_1ac9f3868f4cd36cdb7c712c9a48686680" kindref="member">size</ref><sp/>+=<sp/>increment;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>originalPtr;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Realloc<sp/>process:<sp/>allocate<sp/>and<sp/>copy<sp/>memory,<sp/>do<sp/>not<sp/>free<sp/>original<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>newBuffer<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a8d300531c1f556172aef1259ff55cb48" kindref="member">Malloc</ref>(newSize))<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(originalSize)</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::memcpy(newBuffer,<sp/>originalPtr,<sp/>originalSize);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>newBuffer;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="class_memory_pool_allocator_1ab2ba66e50d09ab315fbfb37f2a231f33" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1ab2ba66e50d09ab315fbfb37f2a231f33" kindref="member">Free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)<sp/>RAPIDJSON_NOEXCEPT<sp/>{<sp/>(void)ptr;<sp/>}<sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="class_memory_pool_allocator_1ab2b847d46e865b541c38fb68dfc7d408" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1ab2b847d46e865b541c38fb68dfc7d408" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a518c933b79807f4fd3518ce6d426f2dc" kindref="member">refcount</ref><sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(rhs.shared_-&gt;refcount<sp/>&gt;<sp/>0);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref><sp/>==<sp/>rhs.shared_;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380" refid="class_memory_pool_allocator_1ab81d11c88aef06b905cece2e5a4e7b4d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1ab81d11c88aef06b905cece2e5a4e7b4d" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="class_memory_pool_allocator_1ab2b847d46e865b541c38fb68dfc7d408" kindref="member">operator==</ref>(rhs);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="class_memory_pool_allocator_1a41bebe49979dc69921519c7556af18fc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a41bebe49979dc69921519c7556af18fc" kindref="member">AddChunk</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity)<sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a8e991b807bbdde89645a19bde7398bf7" kindref="member">ownBaseAllocator</ref><sp/>=<sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref><sp/>=<sp/><ref refid="rapidjson_8h_1abdc7cd7902748ffe6626d71c59a73c3b" kindref="member">RAPIDJSON_NEW</ref>(BaseAllocator)();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref>*<sp/>chunk<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="struct_memory_pool_allocator_1_1_chunk_header" kindref="compound">ChunkHeader</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>-&gt;Malloc(<ref refid="class_memory_pool_allocator_1a195c16fcdba57918869168c48d97737f" kindref="member">SIZEOF_CHUNK_HEADER</ref><sp/>+<sp/>capacity)))<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk-&gt;capacity<sp/>=<sp/>capacity;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk-&gt;size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chunk-&gt;next<sp/>=<sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>-&gt;<ref refid="struct_memory_pool_allocator_1_1_shared_data_1a1f6aa37c67bc020bd9e5490a8c5bdfb9" kindref="member">chunkHead</ref><sp/>=<sp/>chunk;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403" refid="class_memory_pool_allocator_1ab0eabf761ffa8641236acd99cbe22842" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_memory_pool_allocator_1ab0eabf761ffa8641236acd99cbe22842" kindref="member">AlignBuffer</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;size)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(buf<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a31b85deecb45924320becd11d3ee16ce" kindref="member">uintptr_t</ref><sp/>mask<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a31b85deecb45924320becd11d3ee16ce" kindref="member">uintptr_t</ref><sp/>ubuf<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a31b85deecb45924320becd11d3ee16ce" kindref="member">uintptr_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buf);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga6a2b1695c13e77ae425e3cbac980ccb5" kindref="member">RAPIDJSON_UNLIKELY</ref>(ubuf<sp/>&amp;<sp/>mask))<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a31b85deecb45924320becd11d3ee16ce" kindref="member">uintptr_t</ref><sp/>abuf<sp/>=<sp/>(ubuf<sp/>+<sp/>mask)<sp/>&amp;<sp/>~mask;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gabeba18d612187bad2ac62aed9276d47c" kindref="member">RAPIDJSON_ASSERT</ref>(size<sp/>&gt;=<sp/>abuf<sp/>-<sp/>ubuf);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(abuf);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>-=<sp/>abuf<sp/>-<sp/>ubuf;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator_1a67909468c193d429a227a74d35c4d8cb" kindref="member">chunk_capacity_</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="418" refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseAllocator*<sp/><ref refid="class_memory_pool_allocator_1a628cd7f46e838fb37ceccf65dd17bce6" kindref="member">baseAllocator_</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="419" refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_memory_pool_allocator_1_1_shared_data" kindref="compound">SharedData</ref><sp/>*<ref refid="class_memory_pool_allocator_1a17d48b0a767d489eed4241444702368c" kindref="member">shared_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal">};</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="namespaceinternal" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceinternal" kindref="compound">internal</ref><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="424" refid="structinternal_1_1_is_ref_counted" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal_1_1_is_ref_counted" kindref="compound">IsRefCounted</ref><sp/>:</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>FalseType</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="428" refid="structinternal_1_1_is_ref_counted_3_01_t_00_01typename_01internal_1_1_enable_if_cond_3_01_t_1_1k_ref_counted_01_4_1_1_type_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structinternal_1_1_is_ref_counted" kindref="compound">IsRefCounted</ref>&lt;<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>,<sp/>typename<sp/><ref refid="namespaceinternal" kindref="compound">internal</ref>::EnableIfCond&lt;T::kRefCounted&gt;<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7" kindref="member">::Type</ref>&gt;<sp/>:</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>TrueType</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>};</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="434" refid="allocators_8h_1a8e4137cbc097868e8c3d785f6cca1223" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>*<sp/><ref refid="allocators_8h_1a8e4137cbc097868e8c3d785f6cca1223" kindref="member">Realloc</ref>(A&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>*<sp/>old_p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_n,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_n)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1ga2b2a0d9143aa4fb31205a85b34c43952" kindref="member">RAPIDJSON_NOEXCEPT_ASSERT</ref>(old_n<sp/>&lt;=<sp/><ref refid="stdint_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref><sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>)<sp/>&amp;&amp;<sp/>new_n<sp/>&lt;=<sp/><ref refid="stdint_8h_1a3c75bb398badb69c7577b21486f9963f" kindref="member">SIZE_MAX</ref><sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>));</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.Realloc(old_p,<sp/>old_n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>),<sp/>new_n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>)));</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="441" refid="allocators_8h_1a7e0ace0214f18427d9ee8e76a5b3dcdf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref><sp/>*<ref refid="allocators_8h_1a7e0ace0214f18427d9ee8e76a5b3dcdf" kindref="member">Malloc</ref>(A&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Realloc&lt;T,<sp/>A&gt;(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/>NULL,<sp/>0,<sp/>n);</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A&gt;</highlight></codeline>
<codeline lineno="447" refid="allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e" kindref="member">Free</ref>(A&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref><sp/>*p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="448"><highlight class="normal">{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(Realloc&lt;T,<sp/>A&gt;(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/>p,<sp/>n,<sp/>0));</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight></codeline>
<codeline lineno="454"><highlight class="normal">RAPIDJSON_DIAG_OFF(effc++)<sp/></highlight><highlight class="comment">//<sp/>std::allocator<sp/>can<sp/>safely<sp/>be<sp/>inherited</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseAllocator<sp/>=<sp/>CrtAllocator&gt;</highlight></codeline>
<codeline lineno="458" refid="class_std_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref><sp/>:</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::allocator&lt;T&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461" refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::allocator&lt;T&gt;<sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::allocator_traits&lt;allocator_type&gt;<sp/><ref refid="class_std_allocator_1a5cc8d5905b0333753db9d7437aeadfc0" kindref="member">traits_type</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="class_std_allocator_1a5cc8d5905b0333753db9d7437aeadfc0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref><sp/><ref refid="class_std_allocator_1a5cc8d5905b0333753db9d7437aeadfc0" kindref="member">traits_type</ref>;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="469" refid="class_std_allocator_1a09e7299a6c14e2d234bd469f1162bb21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BaseAllocator<sp/><ref refid="class_std_allocator_1a09e7299a6c14e2d234bd469f1162bb21" kindref="member">BaseAllocatorType</ref>;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471" refid="class_std_allocator_1afdef530c5dbd0c4e86922ab263c8ca83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1afdef530c5dbd0c4e86922ab263c8ca83" kindref="member">StdAllocator</ref>()<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(),</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>()</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="class_std_allocator_1abfb16c76a06015f0ec1abe704375ace8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1abfb16c76a06015f0ec1abe704375ace8" kindref="member">StdAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(rhs),</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>(rhs.baseAllocator_)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="482" refid="class_std_allocator_1ab41a5cbaf54473e1e10468258629bd1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1ab41a5cbaf54473e1e10468258629bd1b" kindref="member">StdAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator&lt;U, BaseAllocator&gt;</ref>&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(rhs),</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>(rhs.baseAllocator_)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11_RVALUE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1afb3a6a655f835f6b9ec21fab41291287" kindref="member">StdAllocator</ref>(<ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&amp;&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(std::move(rhs)),</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>(std::move(rhs.baseAllocator_))</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>propagate_on_container_move_assignment<sp/>=<sp/>std::true_type;</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>propagate_on_container_swap<sp/>=<sp/>std::true_type;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implicit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="class_std_allocator_1a40ffe84a544bd5fe938581d09595bd1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a40ffe84a544bd5fe938581d09595bd1f" kindref="member">StdAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseAllocator&amp;<sp/>allocator)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(),</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>(allocator)</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504" refid="class_std_allocator_1a3d1703f93d5929c71a35e0c9baf9ceb1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a3d1703f93d5929c71a35e0c9baf9ceb1" kindref="member">~StdAllocator</ref>()<sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="508" refid="struct_std_allocator_1_1rebind" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_std_allocator_1_1rebind" kindref="compound">rebind</ref><sp/>{</highlight></codeline>
<codeline lineno="509" refid="struct_std_allocator_1_1rebind_1ad1492f350e2dec2087141aa68b390792" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator&lt;U, BaseAllocator&gt;</ref><sp/><ref refid="struct_std_allocator_1_1rebind_1ad1492f350e2dec2087141aa68b390792" kindref="member">other</ref>;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits_type::size_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref>;</highlight></codeline>
<codeline lineno="513" refid="class_std_allocator_1a4f3adbac47a8c20e47dbfb5c1f421ccd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits_type::difference_type<sp/><sp/><sp/><ref refid="class_std_allocator_1a4f3adbac47a8c20e47dbfb5c1f421ccd" kindref="member">difference_type</ref>;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="class_std_allocator_1aa9b7be996e5529bd6f1cbacadfa090c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits_type::value_type<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1aa9b7be996e5529bd6f1cbacadfa090c7" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="516" refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="pointer_8h_1aae1f8d263916ad71bd415381591549c0" kindref="member">traits_type::pointer</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref>;</highlight></codeline>
<codeline lineno="517" refid="class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits_type::const_pointer<sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296" kindref="member">const_pointer</ref>;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::add_lvalue_reference&lt;value_type&gt;::type<sp/>&amp;<ref refid="class_std_allocator_1a108581b842584639473a6d3fdd135598" kindref="member">reference</ref>;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::add_lvalue_reference&lt;typename<sp/>std::add_const&lt;value_type&gt;::type&gt;::type<sp/>&amp;<ref refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" kindref="member">const_reference</ref>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/><ref refid="class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6" kindref="member">address</ref>(<ref refid="class_std_allocator_1a108581b842584639473a6d3fdd135598" kindref="member">reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(r);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296" kindref="member">const_pointer</ref><sp/><ref refid="class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6" kindref="member">address</ref>(<ref refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" kindref="member">const_reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(r);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref><sp/><ref refid="class_std_allocator_1a158b8ba5e88fbcd7a851541090654930" kindref="member">max_size</ref>()<sp/>const<sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>traits_type::max_size(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>...Args&gt;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a279cb8367857b1263c4ab014b74f842a" kindref="member">construct</ref>(<ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/>p,<sp/>Args&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traits_type::construct(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>p,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a2aebac89efaaac9707d380b95c902567" kindref="member">destroy</ref>(<ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/>p)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traits_type::destroy(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>p);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">//<sp/>!RAPIDJSON_HAS_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550" refid="class_std_allocator_1a108581b842584639473a6d3fdd135598" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>allocator_type::reference<sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a108581b842584639473a6d3fdd135598" kindref="member">reference</ref>;</highlight></codeline>
<codeline lineno="551" refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>allocator_type::const_reference<sp/><ref refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" kindref="member">const_reference</ref>;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553" refid="class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/><ref refid="class_std_allocator_1afbe805c057283166350a93f6c7e7a2c6" kindref="member">address</ref>(<ref refid="class_std_allocator_1a108581b842584639473a6d3fdd135598" kindref="member">reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocator_type::address(r);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557" refid="class_std_allocator_1a56c3bab4003eccf5b7a9d18175ef4dc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1add1391b3b872c9be9b4d89ed4fabe296" kindref="member">const_pointer</ref><sp/><ref refid="class_std_allocator_1a56c3bab4003eccf5b7a9d18175ef4dc2" kindref="member">address</ref>(<ref refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" kindref="member">const_reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocator_type::address(r);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="class_std_allocator_1a158b8ba5e88fbcd7a851541090654930" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref><sp/><ref refid="class_std_allocator_1a158b8ba5e88fbcd7a851541090654930" kindref="member">max_size</ref>()<sp/>const<sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocator_type::max_size();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567" refid="class_std_allocator_1a279cb8367857b1263c4ab014b74f842a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a279cb8367857b1263c4ab014b74f842a" kindref="member">construct</ref>(<ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/>p,<sp/><ref refid="class_std_allocator_1a2bc4a28386765e3a2c105b270793a49e" kindref="member">const_reference</ref><sp/>r)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator_type::construct(p,<sp/>r);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="571" refid="class_std_allocator_1a2aebac89efaaac9707d380b95c902567" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a2aebac89efaaac9707d380b95c902567" kindref="member">destroy</ref>(<ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/>p)</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocator_type::destroy(p);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>!RAPIDJSON_HAS_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="579" refid="class_std_allocator_1a8c60bc907eb5ecb9bc174de469394e7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>U*<sp/><ref refid="class_std_allocator_1a8c60bc907eb5ecb9bc174de469394e7b" kindref="member">allocate</ref>(<ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref><sp/>n<sp/>=<sp/>1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RAPIDJSON_NAMESPACE::Malloc&lt;U&gt;(<ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>,<sp/>n);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="584" refid="class_std_allocator_1a92371ba62f651185c0d3eef856080cfa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a92371ba62f651185c0d3eef856080cfa" kindref="member">deallocate</ref>(U*<sp/>p,<sp/><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref><sp/>n<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RAPIDJSON_NAMESPACE::Free&lt;U&gt;(<ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>,<sp/>p,<sp/>n);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="class_std_allocator_1aa301f003f6722d438834b377c314247e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/><ref refid="class_std_allocator_1aa301f003f6722d438834b377c314247e" kindref="member">allocate</ref>(<ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref><sp/>n<sp/>=<sp/>1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>allocate&lt;value_type&gt;(n);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="593" refid="class_std_allocator_1a96a27b5bc9919d08013e727f5217db7a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a96a27b5bc9919d08013e727f5217db7a" kindref="member">deallocate</ref>(<ref refid="class_std_allocator_1a0c970fb2525af736640f0ac3a29d45c5" kindref="member">pointer</ref><sp/>p,<sp/><ref refid="class_std_allocator_1af0b177dc293fe5b985ba9e27de23b2c1" kindref="member">size_type</ref><sp/>n<sp/>=<sp/>1)</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deallocate&lt;value_type&gt;(p,<sp/>n);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>is_always_equal<sp/>=<sp/>std::is_empty&lt;BaseAllocator&gt;;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="603" refid="class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator&lt;U, BaseAllocator&gt;</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref><sp/>==<sp/>rhs.baseAllocator_;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="608" refid="class_std_allocator_1a6d1d3ae1297ec63f6043f06d26b99df7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a6d1d3ae1297ec63f6043f06d26b99df7" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator&lt;U, BaseAllocator&gt;</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<ref refid="class_std_allocator_1acec867ea79558926a5e3a5f9bbafaf31" kindref="member">operator==</ref>(rhs);</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="614" refid="class_std_allocator_1a75b2c8e2995e564037dd7d5408217a6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a75b2c8e2995e564037dd7d5408217a6b" kindref="member">kNeedFree</ref><sp/>=<sp/>BaseAllocator::kNeedFree;</highlight></codeline>
<codeline lineno="615" refid="class_std_allocator_1afd2564e7c3121474d93c805839fa5f83" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1afd2564e7c3121474d93c805839fa5f83" kindref="member">kRefCounted</ref><sp/>=<sp/><ref refid="structinternal_1_1_is_ref_counted" kindref="compound">internal::IsRefCounted&lt;BaseAllocator&gt;::Value</ref>;</highlight></codeline>
<codeline lineno="616" refid="class_std_allocator_1a0499a9aa57a19d5ae174bedf8c80da87" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_std_allocator_1a0499a9aa57a19d5ae174bedf8c80da87" kindref="member">Malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>.Malloc(size);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620" refid="class_std_allocator_1a97fb4098726bc00def3a205698517b8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="class_std_allocator_1a97fb4098726bc00def3a205698517b8b" kindref="member">Realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>originalPtr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>originalSize,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>newSize)</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>.Realloc(originalPtr,<sp/>originalSize,<sp/>newSize);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624" refid="class_std_allocator_1ae3b6918eee229eeb89e9535d65296d6d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator_1ae3b6918eee229eeb89e9535d65296d6d" kindref="member">Free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*ptr)<sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="allocators_8h_1a471c182d62d396b7d5d564e8d6a62d9e" kindref="member">BaseAllocator::Free</ref>(ptr);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="631" refid="class_std_allocator_1afb3a6a655f835f6b9ec21fab41291287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>;<sp/></highlight><highlight class="comment">//<sp/>access<sp/>to<sp/>StdAllocator&lt;!T&gt;.*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633" refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseAllocator<sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!RAPIDJSON_HAS_CXX17<sp/></highlight><highlight class="comment">//<sp/>std::allocator&lt;void&gt;<sp/>deprecated<sp/>in<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BaseAllocator&gt;</highlight></codeline>
<codeline lineno="638" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&lt;void,<sp/>BaseAllocator&gt;<sp/>:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::allocator&lt;void&gt;</highlight></codeline>
<codeline lineno="640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="641" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1aa894cbe0a0970c07b34e4320e6054c10" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::allocator&lt;void&gt;<sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1aa894cbe0a0970c07b34e4320e6054c10" kindref="member">allocator_type</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="644" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a72dfb6c478f475a31ef99be2fbe9332f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>BaseAllocator<sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a72dfb6c478f475a31ef99be2fbe9332f" kindref="member">BaseAllocatorType</ref>;</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ae04f7a523d5d80dde6ce700e2807ff27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ae04f7a523d5d80dde6ce700e2807ff27" kindref="member">StdAllocator</ref>()<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1aa894cbe0a0970c07b34e4320e6054c10" kindref="member">allocator_type</ref>(),</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>()</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ab7d8af9c46aaee8e3e2c60b95b1d595d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ab7d8af9c46aaee8e3e2c60b95b1d595d" kindref="member">StdAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(rhs),</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>(rhs.baseAllocator_)</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="657" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a47cf6d8a7f37c6f1c03c158948d88553" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a47cf6d8a7f37c6f1c03c158948d88553" kindref="member">StdAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator&lt;U, BaseAllocator&gt;</ref>&amp;<sp/>rhs)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(rhs),</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>(rhs.baseAllocator_)</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>implicit<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a8ee693f821d2a7209947faab4a77e304" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a8ee693f821d2a7209947faab4a77e304" kindref="member">StdAllocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>BaseAllocator&amp;<sp/>baseAllocator)<sp/>RAPIDJSON_NOEXCEPT<sp/>:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a572b0281d5b161135a426d3ff348d997" kindref="member">allocator_type</ref>(),</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_1a66c60fe437ac39440d37410884dd18be" kindref="member">baseAllocator_</ref>(baseAllocator)</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a223afcc6a4765478ca3c89f1164913d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a223afcc6a4765478ca3c89f1164913d4" kindref="member">~StdAllocator</ref>()<sp/>RAPIDJSON_NOEXCEPT</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/>{<sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="672" refid="struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">rebind<sp/>{</highlight></codeline>
<codeline lineno="673" refid="struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind_1a05d001c4a784dd30027c19392de10f8e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_std_allocator" kindref="compound">StdAllocator&lt;U, BaseAllocator&gt;</ref><sp/><ref refid="struct_std_allocator_3_01void_00_01_base_allocator_01_4_1_1rebind_1a05d001c4a784dd30027c19392de10f8e" kindref="member">other</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a1df4e2d5cfdec13a30e19fa73507c542" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>allocator_type::value_type<sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1a1df4e2d5cfdec13a30e19fa73507c542" kindref="member">value_type</ref>;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="680" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1afb3a6a655f835f6b9ec21fab41291287" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_std_allocator" kindref="compound">StdAllocator</ref>;<sp/></highlight><highlight class="comment">//<sp/>access<sp/>to<sp/>StdAllocator&lt;!T&gt;.*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682" refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ac691821bb9f8c7f557c7d3c069b37dc2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>BaseAllocator<sp/><ref refid="class_std_allocator_3_01void_00_01_base_allocator_01_4_1ac691821bb9f8c7f557c7d3c069b37dc2" kindref="member">baseAllocator_</ref>;</highlight></codeline>
<codeline lineno="683"><highlight class="normal">};</highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__GNUC__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal">RAPIDJSON_DIAG_POP</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1" kindref="member">RAPIDJSON_NAMESPACE_END</ref></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>RAPIDJSON_ENCODINGS_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/include/rapidjson/allocators.h"/>
  </compounddef>
</doxygen>
