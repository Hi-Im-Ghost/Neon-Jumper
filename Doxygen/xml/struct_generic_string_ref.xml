<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="struct_generic_string_ref" kind="struct" language="C++" prot="public">
    <compoundname>GenericStringRef</compoundname>
    <includes refid="document_8h" local="no">document.h</includes>
    <templateparamlist>
      <param>
        <type>typename CharType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="struct_generic_string_ref_1a16908c3fce41be380061330c14ba2140" prot="public" static="no">
        <type>CharType</type>
        <definition>typedef CharType GenericStringRef&lt; CharType &gt;::Ch</definition>
        <argsstring></argsstring>
        <name>Ch</name>
        <qualifiedname>GenericStringRef::Ch</qualifiedname>
        <briefdescription>
<para>character type of the string </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="347" column="22" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="struct_generic_string_ref_1ac555994afd329bc9bc1780acf2f9d9be" prot="public" static="no" mutable="no">
        <type>const <ref refid="struct_generic_string_ref_1a16908c3fce41be380061330c14ba2140" kindref="member">Ch</ref> *const</type>
        <definition>const Ch* const GenericStringRef&lt; CharType &gt;::s</definition>
        <argsstring></argsstring>
        <name>s</name>
        <qualifiedname>GenericStringRef::s</qualifiedname>
        <briefdescription>
<para>plain CharType pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="419" column="20" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="struct_generic_string_ref_1a4a96d618744ad73f766a1551b1d517fe" prot="public" static="no" mutable="no">
        <type>const <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>const SizeType GenericStringRef&lt; CharType &gt;::length</definition>
        <argsstring></argsstring>
        <name>length</name>
        <qualifiedname>GenericStringRef::length</qualifiedname>
        <briefdescription>
<para>length of the string (excluding the trailing NULL terminator) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="420" column="20" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="struct_generic_string_ref_1aeb7a469eea3ca2a9fd9fcb2e33df4a6c" prot="private" static="yes" mutable="no">
        <type>const <ref refid="struct_generic_string_ref_1a16908c3fce41be380061330c14ba2140" kindref="member">Ch</ref></type>
        <definition>const CharType GenericStringRef&lt; CharType &gt;::emptyString</definition>
        <argsstring>[]</argsstring>
        <name>emptyString</name>
        <qualifiedname>GenericStringRef::emptyString</qualifiedname>
        <initializer>= { CharType() }</initializer>
        <briefdescription>
<para>Empty string - used when passing in a NULL pointer. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="429" column="21" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="struct_generic_string_ref_1aae0c070f914d2486a560150a927c22dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GenericStringRef&lt; CharType &gt;::GenericStringRef</definition>
        <argsstring>(const CharType(&amp;str)[N]) RAPIDJSON_NOEXCEPT</argsstring>
        <name>GenericStringRef</name>
        <qualifiedname>GenericStringRef::GenericStringRef</qualifiedname>
        <param>
          <type>const CharType(&amp;)</type>
          <declname>str</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Create string reference from <computeroutput>const</computeroutput> character array. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor implicitly creates a constant string reference from a <computeroutput>const</computeroutput> character array. It has better performance than <ref refid="struct_generic_string_ref_1aa6b9fd9f6aa49405a574c362ba9af6b5" kindref="member">StringRef(const CharType*)</ref> by inferring the string <ref refid="struct_generic_string_ref_1a4a96d618744ad73f766a1551b1d517fe" kindref="member">length</ref> from the array length, and also supports strings containing null characters.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the string, automatically inferred</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant character array, lifetime assumed to be longer than the use of the string in e.g. a <ref refid="class_generic_value" kindref="compound">GenericValue</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="struct_generic_string_ref_1ac555994afd329bc9bc1780acf2f9d9be" kindref="member">s</ref> == str</para>
</simplesect>
<simplesect kind="note"><para>Constant complexity. </para>
</simplesect>
<simplesect kind="note"><para>There is a hidden, private overload to disallow references to non-const character arrays to be created via this constructor. By this, e.g. function-scope arrays used to be filled via <computeroutput>snprintf</computeroutput> are excluded from consideration. In such cases, the referenced string should be <bold>copied</bold> to the <ref refid="class_generic_value" kindref="compound">GenericValue</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="375" column="5" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="375" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_string_ref_1a9e80d81d5ad49cf0fb4128ace8c548d9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericStringRef&lt; CharType &gt;::GenericStringRef</definition>
        <argsstring>(const CharType *str)</argsstring>
        <name>GenericStringRef</name>
        <qualifiedname>GenericStringRef::GenericStringRef</qualifiedname>
        <param>
          <type>const CharType *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Explicitly create string reference from <computeroutput>const</computeroutput> character pointer. </para>
        </briefdescription>
        <detaileddescription>
<para>This constructor can be used to <bold>explicitly</bold> create a reference to a constant string pointer.</para>
<para><simplesect kind="see"><para><ref refid="struct_generic_string_ref_1aa6b9fd9f6aa49405a574c362ba9af6b5" kindref="member">StringRef(const CharType*)</ref></para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant character pointer, lifetime assumed to be longer than the use of the string in e.g. a <ref refid="class_generic_value" kindref="compound">GenericValue</ref></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="struct_generic_string_ref_1ac555994afd329bc9bc1780acf2f9d9be" kindref="member">s</ref> == str</para>
</simplesect>
<simplesect kind="note"><para>There is a hidden, private overload to disallow references to non-const character arrays to be created via this constructor. By this, e.g. function-scope arrays used to be filled via <computeroutput>snprintf</computeroutput> are excluded from consideration. In such cases, the referenced string should be <bold>copied</bold> to the <ref refid="class_generic_value" kindref="compound">GenericValue</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="399" column="14" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="399" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_string_ref_1a8b2c6a7fdc4da1e7055f7fdcf0ac517f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericStringRef&lt; CharType &gt;::GenericStringRef</definition>
        <argsstring>(const CharType *str, SizeType len)</argsstring>
        <name>GenericStringRef</name>
        <qualifiedname>GenericStringRef::GenericStringRef</qualifiedname>
        <param>
          <type>const CharType *</type>
          <declname>str</declname>
        </param>
        <param>
          <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Create constant string reference from pointer and length. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>constant string, lifetime assumed to be longer than the use of the string in e.g. a <ref refid="class_generic_value" kindref="compound">GenericValue</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>length of the string, excluding the trailing NULL terminator</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="post"><para><ref refid="struct_generic_string_ref_1ac555994afd329bc9bc1780acf2f9d9be" kindref="member">s</ref> == str &amp;&amp; <ref refid="struct_generic_string_ref_1a4a96d618744ad73f766a1551b1d517fe" kindref="member">length</ref> == len </para>
</simplesect>
<simplesect kind="note"><para>Constant complexity. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="411" column="5" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="411" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_string_ref_1ab049693082c0b8f5066c00212e780aec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericStringRef&lt; CharType &gt;::GenericStringRef</definition>
        <argsstring>(const GenericStringRef &amp;rhs)</argsstring>
        <name>GenericStringRef</name>
        <qualifiedname>GenericStringRef::GenericStringRef</qualifiedname>
        <param>
          <type>const <ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="414" column="5" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_string_ref_1a4e652ee3a398d0eb8ece1835d15274d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GenericStringRef&lt; CharType &gt;::operator const Ch *</definition>
        <argsstring>() const</argsstring>
        <name>operator const Ch *</name>
        <qualifiedname>GenericStringRef::operator const Ch *</qualifiedname>
        <briefdescription>
<para>implicit conversion to plain CharType pointer </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="417" column="5" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="417" bodyend="417"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="struct_generic_string_ref_1af51482556048c13920f5564a48e8ad7d" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>SizeType GenericStringRef&lt; CharType &gt;::NotNullStrLen</definition>
        <argsstring>(const CharType *str)</argsstring>
        <name>NotNullStrLen</name>
        <qualifiedname>GenericStringRef::NotNullStrLen</qualifiedname>
        <param>
          <type>const CharType *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="423" column="14" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="423" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_string_ref_1ac0d64ff2d8a84b4f5a4b4dc687f49301" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>GenericStringRef&lt; CharType &gt;::GenericStringRef</definition>
        <argsstring>(CharType(&amp;str)[N])</argsstring>
        <name>GenericStringRef</name>
        <qualifiedname>GenericStringRef::GenericStringRef</qualifiedname>
        <param>
          <type>CharType(&amp;)</type>
          <declname>str</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Disallow construction from non-const array. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="433" column="5"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_string_ref_1a0c001d5723bd8b3fc9cb6a253a94f011" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef</ref> &amp;</type>
        <definition>GenericStringRef &amp; GenericStringRef&lt; CharType &gt;::operator=</definition>
        <argsstring>(const GenericStringRef &amp;rhs)</argsstring>
        <name>operator=</name>
        <qualifiedname>GenericStringRef::operator=</qualifiedname>
        <param>
          <type>const <ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Copy assignment operator not permitted - immutable type. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="435" column="22"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="related">
      <memberdef kind="function" id="struct_generic_string_ref_1aa6b9fd9f6aa49405a574c362ba9af6b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef</ref>&lt; CharType &gt;</type>
        <definition>GenericStringRef&lt; CharType &gt; StringRef</definition>
        <argsstring>(const CharType *str)</argsstring>
        <name>StringRef</name>
        <qualifiedname>GenericStringRef::StringRef</qualifiedname>
        <param>
          <type>const CharType *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Mark a character pointer as constant string. </para>
        </briefdescription>
        <detaileddescription>
<para>Mark a plain character pointer as a &quot;string literal&quot;. This function can be used to avoid copying a character string to be referenced as a value in a JSON <ref refid="class_generic_value" kindref="compound">GenericValue</ref> object, if the string&apos;s lifetime is known to be valid long enough. <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CharType</parametername>
</parameternamelist>
<parameterdescription>
<para>Character type of the string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant string, lifetime assumed to be longer than the use of the string in e.g. a <ref refid="class_generic_value" kindref="compound">GenericValue</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef</ref> string reference object</para>
</simplesect>
<simplesect kind="see"><para><ref refid="class_generic_value_1abb2887958974fef1b2b5c8e32cc72ddb" kindref="member">GenericValue::GenericValue(StringRefType)</ref>, <ref refid="class_generic_value_1a2b7837d3adb6c0ad184269826ea78e97" kindref="member">GenericValue::operator=(StringRefType)</ref>, GenericValue::SetString(StringRefType), GenericValue::PushBack(StringRefType, Allocator&amp;), GenericValue::AddMember </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="454" column="25" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="454" bodyend="456"/>
      </memberdef>
      <memberdef kind="function" id="struct_generic_string_ref_1a578c51ab574a50a9c760b9da7c7562f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharType</type>
          </param>
        </templateparamlist>
        <type><ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef</ref>&lt; CharType &gt;</type>
        <definition>GenericStringRef&lt; CharType &gt; StringRef</definition>
        <argsstring>(const CharType *str, size_t length)</argsstring>
        <name>StringRef</name>
        <qualifiedname>GenericStringRef::StringRef</qualifiedname>
        <param>
          <type>const CharType *</type>
          <declname>str</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Mark a character pointer as constant string. </para>
        </briefdescription>
        <detaileddescription>
<para>Mark a plain character pointer as a &quot;string literal&quot;. This function can be used to avoid copying a character string to be referenced as a value in a JSON <ref refid="class_generic_value" kindref="compound">GenericValue</ref> object, if the string&apos;s lifetime is known to be valid long enough.</para>
<para>This version has better performance with supplied length, and also supports string containing null characters.</para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CharType</parametername>
</parameternamelist>
<parameterdescription>
<para>character type of the string </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>Constant string, lifetime assumed to be longer than the use of the string in e.g. a <ref refid="class_generic_value" kindref="compound">GenericValue</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>length</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of source string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="struct_generic_string_ref" kindref="compound">GenericStringRef</ref> string reference object </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/document.h" line="474" column="25" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="474" bodyend="476"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reference to a constant string (not taking a copy) </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>CharType</parametername>
</parameternamelist>
<parameterdescription>
<para>character type of the string</para>
</parameterdescription>
</parameteritem>
</parameterlist>
This helper class is used to automatically infer constant string references for string literals, especially from <computeroutput>const</computeroutput> <bold></bold>(!) character arrays.</para>
<para>The main use is for creating JSON string values without copying the source string via an <ref refid="md_src_rapidjson_doc_dom_zh_cn_1Allocator" kindref="member">Allocator</ref>. This requires that the referenced string pointers have a sufficient lifetime, which exceeds the lifetime of the associated <ref refid="class_generic_value" kindref="compound">GenericValue</ref>.</para>
<para><bold>Example</bold> <programlisting><codeline><highlight class="normal"><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>v(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>no<sp/>need<sp/>to<sp/>copy<sp/>&amp;<sp/>calculate<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>foo[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">v.SetString(foo);<sp/></highlight><highlight class="comment">//<sp/>ok</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>bar<sp/>=<sp/>foo;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Value<sp/>x(bar);<sp/>//<sp/>not<sp/>ok,<sp/>can&apos;t<sp/>rely<sp/>on<sp/>bar&apos;s<sp/>lifetime</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>x(<ref refid="struct_generic_string_ref_1aa6b9fd9f6aa49405a574c362ba9af6b5" kindref="member">StringRef</ref>(bar));<sp/></highlight><highlight class="comment">//<sp/>lifetime<sp/>explicitly<sp/>guaranteed<sp/>by<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>y(<ref refid="struct_generic_string_ref_1aa6b9fd9f6aa49405a574c362ba9af6b5" kindref="member">StringRef</ref>(bar,<sp/>3));<sp/><sp/></highlight><highlight class="comment">//<sp/>ok,<sp/>explicitly<sp/>pass<sp/>length</highlight></codeline>
</programlisting></para>
<para><simplesect kind="see"><para><ref refid="struct_generic_string_ref_1aa6b9fd9f6aa49405a574c362ba9af6b5" kindref="member">StringRef</ref>, GenericValue::SetString </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/rapidjson/include/rapidjson/document.h" line="346" column="1" bodyfile="src/rapidjson/include/rapidjson/document.h" bodystart="346" bodyend="436"/>
    <listofallmembers>
      <member refid="struct_generic_string_ref_1a16908c3fce41be380061330c14ba2140" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>Ch</name></member>
      <member refid="struct_generic_string_ref_1aeb7a469eea3ca2a9fd9fcb2e33df4a6c" prot="private" virt="non-virtual"><scope>GenericStringRef</scope><name>emptyString</name></member>
      <member refid="struct_generic_string_ref_1aae0c070f914d2486a560150a927c22dc" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>GenericStringRef</name></member>
      <member refid="struct_generic_string_ref_1a9e80d81d5ad49cf0fb4128ace8c548d9" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>GenericStringRef</name></member>
      <member refid="struct_generic_string_ref_1a8b2c6a7fdc4da1e7055f7fdcf0ac517f" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>GenericStringRef</name></member>
      <member refid="struct_generic_string_ref_1ab049693082c0b8f5066c00212e780aec" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>GenericStringRef</name></member>
      <member refid="struct_generic_string_ref_1ac0d64ff2d8a84b4f5a4b4dc687f49301" prot="private" virt="non-virtual"><scope>GenericStringRef</scope><name>GenericStringRef</name></member>
      <member refid="struct_generic_string_ref_1a4a96d618744ad73f766a1551b1d517fe" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>length</name></member>
      <member refid="struct_generic_string_ref_1af51482556048c13920f5564a48e8ad7d" prot="private" virt="non-virtual"><scope>GenericStringRef</scope><name>NotNullStrLen</name></member>
      <member refid="struct_generic_string_ref_1a4e652ee3a398d0eb8ece1835d15274d0" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>operator const Ch *</name></member>
      <member refid="struct_generic_string_ref_1a0c001d5723bd8b3fc9cb6a253a94f011" prot="private" virt="non-virtual"><scope>GenericStringRef</scope><name>operator=</name></member>
      <member refid="struct_generic_string_ref_1ac555994afd329bc9bc1780acf2f9d9be" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>s</name></member>
      <member refid="struct_generic_string_ref_1aa6b9fd9f6aa49405a574c362ba9af6b5" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>StringRef</name></member>
      <member refid="struct_generic_string_ref_1a578c51ab574a50a9c760b9da7c7562f2" prot="public" virt="non-virtual"><scope>GenericStringRef</scope><name>StringRef</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
