<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="features_8md" kind="file" language="Markdown">
    <compoundname>features.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Features</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>General</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Cross-platform</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Compilers:<sp/>Visual<sp/>Studio,<sp/>gcc,<sp/>clang,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Architectures:<sp/>x86,<sp/>x64,<sp/>ARM,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Operating<sp/>systems:<sp/>Windows,<sp/>Mac<sp/>OS<sp/>X,<sp/>Linux,<sp/>iOS,<sp/>Android,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Easy<sp/>installation</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Header<sp/>files<sp/>only<sp/>library.<sp/>Just<sp/>copy<sp/>the<sp/>headers<sp/>to<sp/>your<sp/>project.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Self-contained,<sp/>minimal<sp/>dependences</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>No<sp/>STL,<sp/>BOOST,<sp/>etc.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Only<sp/>included<sp/>`&lt;cstdio&gt;`,<sp/>`&lt;cstdlib&gt;`,<sp/>`&lt;cstring&gt;`,<sp/>`&lt;inttypes.h&gt;`,<sp/>`&lt;new&gt;`,<sp/>`&lt;stdint.h&gt;`.<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>Without<sp/>C++<sp/>exception,<sp/>RTTI</highlight></codeline>
<codeline><highlight class="normal">*<sp/>High<sp/>performance</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Use<sp/>template<sp/>and<sp/>inline<sp/>functions<sp/>to<sp/>reduce<sp/>function<sp/>call<sp/>overheads.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Internal<sp/>optimized<sp/>Grisu2<sp/>and<sp/>floating<sp/>point<sp/>parsing<sp/>implementations.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Optional<sp/>SSE2/SSE4.2<sp/>support.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Standard<sp/>compliance</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>RapidJSON<sp/>should<sp/>be<sp/>fully<sp/>RFC4627/ECMA-404<sp/>compliance.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>JSON<sp/>Pointer<sp/>(RFC6901).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>JSON<sp/>Schema<sp/>Draft<sp/>v4.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>Unicode<sp/>surrogate.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>null<sp/>character<sp/>(`&quot;\u0000&quot;`)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>For<sp/>example,<sp/>`[&quot;Hello\u0000World&quot;]`<sp/>can<sp/>be<sp/>parsed<sp/>and<sp/>handled<sp/>gracefully.<sp/>There<sp/>is<sp/>API<sp/>for<sp/>getting/setting<sp/>lengths<sp/>of<sp/>string.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>optional<sp/>relaxed<sp/>syntax.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Single<sp/>line<sp/>(`//<sp/>...`)<sp/>and<sp/>multiple<sp/>line<sp/>(`/*<sp/>...<sp/>*/`)<sp/>comments<sp/>(`kParseCommentsFlag`).<sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Trailing<sp/>commas<sp/>at<sp/>the<sp/>end<sp/>of<sp/>objects<sp/>and<sp/>arrays<sp/>(`kParseTrailingCommasFlag`).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>`NaN`,<sp/>`Inf`,<sp/>`Infinity`,<sp/>`-Inf`<sp/>and<sp/>`-Infinity`<sp/>as<sp/>`double`<sp/>values<sp/>(`kParseNanAndInfFlag`)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[NPM<sp/>compliant](http://github.com/Tencent/rapidjson/blob/master/doc/npm.md).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Unicode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>UTF-8,<sp/>UTF-16,<sp/>UTF-32<sp/>encodings,<sp/>including<sp/>little<sp/>endian<sp/>and<sp/>big<sp/>endian.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>These<sp/>encodings<sp/>are<sp/>used<sp/>in<sp/>input/output<sp/>streams<sp/>and<sp/>in-memory<sp/>representation.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>automatic<sp/>detection<sp/>of<sp/>encodings<sp/>in<sp/>input<sp/>stream.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>transcoding<sp/>between<sp/>encodings<sp/>internally.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>For<sp/>example,<sp/>you<sp/>can<sp/>read<sp/>a<sp/>UTF-8<sp/>file<sp/>and<sp/>let<sp/>RapidJSON<sp/>transcode<sp/>the<sp/>JSON<sp/>strings<sp/>into<sp/>UTF-16<sp/>in<sp/>the<sp/>DOM.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>encoding<sp/>validation<sp/>internally.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>For<sp/>example,<sp/>you<sp/>can<sp/>read<sp/>a<sp/>UTF-8<sp/>file,<sp/>and<sp/>let<sp/>RapidJSON<sp/>check<sp/>whether<sp/>all<sp/>JSON<sp/>strings<sp/>are<sp/>valid<sp/>UTF-8<sp/>byte<sp/>sequence.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>custom<sp/>character<sp/>types.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>By<sp/>default<sp/>the<sp/>character<sp/>types<sp/>are<sp/>`char`<sp/>for<sp/>UTF8,<sp/>`wchar_t`<sp/>for<sp/>UTF16,<sp/>`uint32_t`<sp/>for<sp/>UTF32.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>custom<sp/>encodings.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>API<sp/>styles</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>SAX<sp/>(Simple<sp/>API<sp/>for<sp/>XML)<sp/>style<sp/>API</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Similar<sp/>to<sp/>[SAX](http://en.wikipedia.org/wiki/Simple_API_for_XML),<sp/>RapidJSON<sp/>provides<sp/>a<sp/>event<sp/>sequential<sp/>access<sp/>parser<sp/>API<sp/>(`rapidjson::GenericReader`).<sp/>It<sp/>also<sp/>provides<sp/>a<sp/>generator<sp/>API<sp/>(`rapidjson::Writer`)<sp/>which<sp/>consumes<sp/>the<sp/>same<sp/>set<sp/>of<sp/>events.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>DOM<sp/>(Document<sp/>Object<sp/>Model)<sp/>style<sp/>API</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Similar<sp/>to<sp/>[DOM](http://en.wikipedia.org/wiki/Document_Object_Model)<sp/>for<sp/>HTML/XML,<sp/>RapidJSON<sp/>can<sp/>parse<sp/>JSON<sp/>into<sp/>a<sp/>DOM<sp/>representation<sp/>(`rapidjson::GenericDocument`),<sp/>for<sp/>easy<sp/>manipulation,<sp/>and<sp/>finally<sp/>stringify<sp/>back<sp/>to<sp/>JSON<sp/>if<sp/>needed.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>The<sp/>DOM<sp/>style<sp/>API<sp/>(`rapidjson::GenericDocument`)<sp/>is<sp/>actually<sp/>implemented<sp/>with<sp/>SAX<sp/>style<sp/>API<sp/>(`rapidjson::GenericReader`).<sp/>SAX<sp/>is<sp/>faster<sp/>but<sp/>sometimes<sp/>DOM<sp/>is<sp/>easier.<sp/>Users<sp/>can<sp/>pick<sp/>their<sp/>choices<sp/>according<sp/>to<sp/>scenarios.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Parsing</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Recursive<sp/>(default)<sp/>and<sp/>iterative<sp/>parser</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Recursive<sp/>parser<sp/>is<sp/>faster<sp/>but<sp/>prone<sp/>to<sp/>stack<sp/>overflow<sp/>in<sp/>extreme<sp/>cases.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Iterative<sp/>parser<sp/>use<sp/>custom<sp/>stack<sp/>to<sp/>keep<sp/>parsing<sp/>state.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>*in<sp/>situ*<sp/>parsing.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Parse<sp/>JSON<sp/>string<sp/>values<sp/>in-place<sp/>at<sp/>the<sp/>source<sp/>JSON,<sp/>and<sp/>then<sp/>the<sp/>DOM<sp/>points<sp/>to<sp/>addresses<sp/>of<sp/>those<sp/>strings.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Faster<sp/>than<sp/>convention<sp/>parsing:<sp/>no<sp/>allocation<sp/>for<sp/>strings,<sp/>no<sp/>copy<sp/>(if<sp/>string<sp/>does<sp/>not<sp/>contain<sp/>escapes),<sp/>cache-friendly.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>32-bit/64-bit<sp/>signed/unsigned<sp/>integer<sp/>and<sp/>`double`<sp/>for<sp/>JSON<sp/>number<sp/>type.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>parsing<sp/>multiple<sp/>JSONs<sp/>in<sp/>input<sp/>stream<sp/>(`kParseStopWhenDoneFlag`).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Error<sp/>Handling</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Support<sp/>comprehensive<sp/>error<sp/>code<sp/>if<sp/>parsing<sp/>failed.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Support<sp/>error<sp/>message<sp/>localization.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>DOM<sp/>(Document)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>RapidJSON<sp/>checks<sp/>range<sp/>of<sp/>numerical<sp/>values<sp/>for<sp/>conversions.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Optimization<sp/>for<sp/>string<sp/>literal</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Only<sp/>store<sp/>pointer<sp/>instead<sp/>of<sp/>copying</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Optimization<sp/>for<sp/>&quot;short&quot;<sp/>strings</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Store<sp/>short<sp/>string<sp/>in<sp/>`Value`<sp/>internally<sp/>without<sp/>additional<sp/>allocation.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>For<sp/>UTF-8<sp/>string:<sp/>maximum<sp/>11<sp/>characters<sp/>in<sp/>32-bit,<sp/>21<sp/>characters<sp/>in<sp/>64-bit<sp/>(13<sp/>characters<sp/>in<sp/>x86-64).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Optionally<sp/>support<sp/>`std::string`<sp/>(define<sp/>`RAPIDJSON_HAS_STDSTRING=1`)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Generation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>`rapidjson::PrettyWriter`<sp/>for<sp/>adding<sp/>newlines<sp/>and<sp/>indentations.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Stream</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>`rapidjson::GenericStringBuffer`<sp/>for<sp/>storing<sp/>the<sp/>output<sp/>JSON<sp/>as<sp/>string.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>`rapidjson::FileReadStream`<sp/>and<sp/>`rapidjson::FileWriteStream`<sp/>for<sp/>input/output<sp/>`FILE`<sp/>object.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>custom<sp/>streams.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Memory</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Minimize<sp/>memory<sp/>overheads<sp/>for<sp/>DOM.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Each<sp/>JSON<sp/>value<sp/>occupies<sp/>exactly<sp/>16/20<sp/>bytes<sp/>for<sp/>most<sp/>32/64-bit<sp/>machines<sp/>(excluding<sp/>text<sp/>string).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>fast<sp/>default<sp/>allocator.</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>A<sp/>stack-based<sp/>allocator<sp/>(allocate<sp/>sequentially,<sp/>prohibit<sp/>to<sp/>free<sp/>individual<sp/>allocations,<sp/>suitable<sp/>for<sp/>parsing).</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>User<sp/>can<sp/>provide<sp/>a<sp/>pre-allocated<sp/>buffer.<sp/>(Possible<sp/>to<sp/>parse<sp/>a<sp/>number<sp/>of<sp/>JSONs<sp/>without<sp/>any<sp/>CRT<sp/>allocation)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>standard<sp/>CRT(C-runtime)<sp/>allocator.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>Support<sp/>custom<sp/>allocators.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Miscellaneous</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>Some<sp/>C++11<sp/>support<sp/>(optional)</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Rvalue<sp/>reference</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>`noexcept`<sp/>specifier</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>Range-based<sp/>for<sp/>loop</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/doc/features.md"/>
  </compounddef>
</doxygen>
