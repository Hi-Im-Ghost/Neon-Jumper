<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="pointertest_8cpp" kind="file" language="C++">
    <compoundname>pointertest.cpp</compoundname>
    <includes refid="unittest_8h" local="yes">unittest.h</includes>
    <includes refid="pointer_8h" local="yes">rapidjson/pointer.h</includes>
    <includes refid="stringbuffer_8h" local="yes">rapidjson/stringbuffer.h</includes>
    <includes refid="ostreamwrapper_8h" local="yes">rapidjson/ostreamwrapper.h</includes>
    <includes local="no">sstream</includes>
    <includes local="no">map</includes>
    <includes local="no">algorithm</includes>
    <incdepgraph>
      <node id="8">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>document.h</label>
        <link refid="document_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="25">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="36">
        <label>internal/itoa.h</label>
        <link refid="itoa_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="38">
        <label>rapidjson/ostreamwrapper.h</label>
        <link refid="ostreamwrapper_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rapidjson/pointer.h</label>
        <link refid="pointer_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>rapidjson/stringbuffer.h</label>
        <link refid="stringbuffer_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>uri.h</label>
        <link refid="uri_8h"/>
        <childnode refid="31" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/test/unittest/pointertest.cpp</label>
        <link refid="pointertest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
        <childnode refid="40" relation="include">
        </childnode>
        <childnode refid="41" relation="include">
        </childnode>
        <childnode refid="42" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>unittest.h</label>
        <link refid="unittest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="42">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>cassert</label>
      </node>
      <node id="29">
        <label>climits</label>
      </node>
      <node id="22">
        <label>cstddef</label>
      </node>
      <node id="10">
        <label>cstdlib</label>
      </node>
      <node id="11">
        <label>cstring</label>
      </node>
      <node id="32">
        <label>cwchar</label>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
      </node>
      <node id="39">
        <label>iosfwd</label>
      </node>
      <node id="34">
        <label>iterator</label>
      </node>
      <node id="27">
        <label>limits</label>
      </node>
      <node id="41">
        <label>map</label>
      </node>
      <node id="14">
        <label>memory</label>
      </node>
      <node id="33">
        <label>new</label>
      </node>
      <node id="40">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmyjson_1_1_my_allocator" prot="public">myjson::MyAllocator</innerclass>
    <innernamespace refid="namespacemyjson">myjson</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="pointertest_8cpp_1a59c7737920212dcb3bb9df58d7062de4" prot="public" static="no">
        <name>NAME</name>
        <param><defname>s</defname></param>
        <initializer>{ s, static_cast&lt;<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>&gt;(sizeof(s) / sizeof(s[0]) - 1), kPointerInvalidIndex }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="447" column="9" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="pointertest_8cpp_1aa5fad23b2a5eed790e6661e896a506b7" prot="public" static="no">
        <name>INDEX</name>
        <param><defname>i</defname></param>
        <initializer>{ #i, static_cast&lt;<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>&gt;(sizeof(#i) - 1), i }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="448" column="9" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="448" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="pointertest_8cpp_1a58cf13c05c4e87531b44207519128965" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kJson[]</definition>
        <argsstring>[]</argsstring>
        <name>kJson</name>
        <initializer>= &quot;{\n&quot;
&quot;    \&quot;foo\&quot;:[\&quot;bar\&quot;, \&quot;baz\&quot;],\n&quot;
&quot;    \&quot;\&quot; : 0,\n&quot;
&quot;    \&quot;a/b\&quot; : 1,\n&quot;
&quot;    \&quot;c%d\&quot; : 2,\n&quot;
&quot;    \&quot;e^f\&quot; : 3,\n&quot;
&quot;    \&quot;g|h\&quot; : 4,\n&quot;
&quot;    \&quot;i\\\\j\&quot; : 5,\n&quot;
&quot;    \&quot;k\\\&quot;l\&quot; : 6,\n&quot;
&quot;    \&quot; \&quot; : 7,\n&quot;
&quot;    \&quot;m~n\&quot; : 8\n&quot;
&quot;}&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="25" column="19" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pointertest_8cpp_1af08cb0118b0188324a43aae822fe37fe" prot="public" static="yes" mutable="no">
        <type>const <ref refid="struct_generic_pointer_1_1_token" kindref="compound">Pointer::Token</ref></type>
        <definition>const Pointer::Token kTokens[]</definition>
        <argsstring>[]</argsstring>
        <name>kTokens</name>
        <initializer>= { <ref refid="pointertest_8cpp_1a59c7737920212dcb3bb9df58d7062de4" kindref="member">NAME</ref>(&quot;foo&quot;), INDEX(0) }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="450" column="29" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="pointertest_8cpp_1a6c7a70f2c08e0011964f0bbd14f531f6" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kJsonIds[]</definition>
        <argsstring>[]</argsstring>
        <name>kJsonIds</name>
        <initializer>= &quot;{\n&quot;
   &quot;    \&quot;id\&quot;: \&quot;/root/\&quot;,&quot;
   &quot;    \&quot;foo\&quot;:[\&quot;bar\&quot;, \&quot;baz\&quot;, {\&quot;id\&quot;: \&quot;inarray\&quot;, \&quot;child\&quot;: 1}],\n&quot;
   &quot;    \&quot;int\&quot; : 2,\n&quot;
   &quot;    \&quot;str\&quot; : \&quot;val\&quot;,\n&quot;
   &quot;    \&quot;obj\&quot;: {\&quot;id\&quot;: \&quot;inobj\&quot;, \&quot;child\&quot;: 3},\n&quot;
   &quot;    \&quot;jbo\&quot;: {\&quot;id\&quot;: true, \&quot;child\&quot;: 4}\n&quot;
   &quot;}&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="653" column="19" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="653" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, DefaultConstructor)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>DefaultConstructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="38" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a274c49524d51e59971372891c8d0a661" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Parse)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Parse</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="44" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="44" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a03023789dbdf13e7f28249684534813f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Parse_URIFragment)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Parse_URIFragment</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="193" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="193" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a42d16691830cb00339e59301ea2b7c8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Stringify)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Stringify</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="404" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="404" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ae14bab0f36a26eeab4a8f45833b98758" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, ConstructorWithToken)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>ConstructorWithToken</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="455" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="455" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a9f65b695f8b05a0d5d4b960fb6d22bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, CopyConstructor)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>CopyConstructor</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="466" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="466" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1abcf17e7dcf818df73a143b557c9bc778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Assignment)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Assignment</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="497" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="497" bodyend="535"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a850b5ef6bb119da1eaec4bfb06bd3a83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Swap)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Swap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="537" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="537" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a443fb02eea9b29b59f04f505a27d9419" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Append)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Append</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="567" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="567" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1af7c25af8dc3453d4fbdee83dbc05424d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Equality)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Equality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="597" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="597" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1acba05ab369979cce13477b10b41da452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Inequality)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Inequality</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="605" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="605" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a5f2b8313d2428b0f550df9e8fa703057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Create)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Create</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="613" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="613" bodyend="651"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a8482a4f7d5692f5e636f38df40625801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetUri)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>GetUri</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="663" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="663" bodyend="697"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1aab494faf7f41d5047c33f34774547c2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Get)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Get</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="699" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="699" bodyend="729"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1af8a1b9bb5536deca3aaadbc09fa7d677" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetWithDefault)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>GetWithDefault</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="731" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="731" bodyend="782"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a07d1e7051af182b4a8bf5dfad448fc1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetWithDefault_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>GetWithDefault_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="784" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="784" bodyend="834"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a8aeecfd8e34537e8264d97d698a0d2c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Set)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Set</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="836" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="836" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ac2b4429e4f8f086f718e703c57b6de50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Set_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Set_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="896" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="896" bodyend="953"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a23f3598a2934146d519ad83c8ad733cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Swap_Value)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Swap_Value</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="955" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="955" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a9105da16375cc70494a9b4c5fefe7f1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Swap_Value_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Swap_Value_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="964" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="964" bodyend="970"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ae39583acf35a83ea7b7f7235445f450e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Erase)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Erase</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="972" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="972" bodyend="1009"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a2394e338389afb50b51faed6680a9c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, CreateValueByPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type><ref refid="pointer_8h_1ae5f22e098e170e51d47beb75812b9a5b" kindref="member">CreateValueByPointer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1011" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1011" bodyend="1023"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ab89d9a4571a1f783b32ccbc7a3f35ec4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, CreateValueByPointer_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>CreateValueByPointer_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1025" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1025" bodyend="1036"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1af2d350c8a64b8e22c5728c724ac25730" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetValueByPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type><ref refid="pointer_8h_1a2683bf19840749f07ceaf659b4cee6d9" kindref="member">GetValueByPointer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1038" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1038" bodyend="1069"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ab1983a6fc89a2318433785c6cd205a43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetValueByPointerWithDefault_Pointer)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>GetValueByPointerWithDefault_Pointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1071" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1071" bodyend="1122"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ad43ebe6bc91d4d543b5ec0494dce731f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetValueByPointerWithDefault_String)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>GetValueByPointerWithDefault_String</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1124" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1124" bodyend="1175"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a047f42b40fe08ae66b160b70aa9a7920" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetValueByPointerWithDefault_Pointer_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>GetValueByPointerWithDefault_Pointer_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1177" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1177" bodyend="1227"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a6b704eea580a8e097c2c11d1aee243ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, GetValueByPointerWithDefault_String_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>GetValueByPointerWithDefault_String_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1229" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1229" bodyend="1279"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a4c28fc4ad671b1a34e3ade5fd36e8035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, SetValueByPointer_Pointer)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>SetValueByPointer_Pointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1281" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1281" bodyend="1336"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a0d55e9b601e8e23d9cad6c0e53077b2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, SetValueByPointer_String)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>SetValueByPointer_String</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1338" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1338" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a534f2b97e331a4ee1b296ef72893c29a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, SetValueByPointer_Pointer_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>SetValueByPointer_Pointer_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1395" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1395" bodyend="1449"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ae3cce0506001378eccfd9882c3829c2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, SetValueByPointer_String_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>SetValueByPointer_String_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1451" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1451" bodyend="1505"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1afeb479140b7555fae2822585794ffc9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, SwapValueByPointer)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type><ref refid="pointer_8h_1a33c56cdd1034a750112e81df6c4e653a" kindref="member">SwapValueByPointer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1507" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1507" bodyend="1518"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ae77ef998f1d9c1e2fad3bd688faa422f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, SwapValueByPointer_NoAllocator)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>SwapValueByPointer_NoAllocator</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1520" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1520" bodyend="1530"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a1fef14fd9a650ae0a319495b8f9d0d71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, EraseValueByPointer_Pointer)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>EraseValueByPointer_Pointer</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1532" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1532" bodyend="1545"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ab371ee4cf6973d503478721385f0a296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, EraseValueByPointer_String)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>EraseValueByPointer_String</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1547" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1547" bodyend="1560"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ad6649baa8a1718779bab8a57d3fd3460" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Ambiguity)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Ambiguity</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1562" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1562" bodyend="1579"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a50642ef276de0935a79e8fb752eba92c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, ResolveOnObject)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>ResolveOnObject</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1581" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1581" bodyend="1595"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1af9a629d86e2e3e53832ac7f0cdee1458" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, ResolveOnArray)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>ResolveOnArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1597" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1597" bodyend="1611"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a99c995334eca1b8aa01f93b80166eb87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, LessThan)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>LessThan</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1613" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1613" bodyend="1684"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1a2dade46fca55d8f028ac8826741cf9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Issue483)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Issue483</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1713" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1713" bodyend="1719"/>
      </memberdef>
      <memberdef kind="function" id="pointertest_8cpp_1ad76116fe671e8744aefd2dce3f765926" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(Pointer, Issue1899)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref></type>
        </param>
        <param>
          <type>Issue1899</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/pointertest.cpp" line="1721" column="1" bodyfile="src/rapidjson/test/unittest/pointertest.cpp" bodystart="1721" bodyend="1730"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unittest_8h" kindref="compound">unittest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pointer_8h" kindref="compound">rapidjson/pointer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringbuffer_8h" kindref="compound">rapidjson/stringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="ostreamwrapper_8h" kindref="compound">rapidjson/ostreamwrapper.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kJson[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;foo\&quot;:[\&quot;bar\&quot;,<sp/>\&quot;baz\&quot;],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;\&quot;<sp/>:<sp/>0,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;a/b\&quot;<sp/>:<sp/>1,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;c%d\&quot;<sp/>:<sp/>2,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;e^f\&quot;<sp/>:<sp/>3,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;g|h\&quot;<sp/>:<sp/>4,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;i\\\\j\&quot;<sp/>:<sp/>5,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;k\\\&quot;l\&quot;<sp/>:<sp/>6,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;<sp/>\&quot;<sp/>:<sp/>7,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;m~n\&quot;<sp/>:<sp/>8\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>DefaultConstructor)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Parse)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(std::string(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unescape<sp/>~1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/a~1b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;a/b&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unescape<sp/>~0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/m~0n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;m~n&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>and<sp/>non-empty<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;//a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Null<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/\0\0&quot;</highlight><highlight class="normal">,<sp/>3);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name[0]);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name[1]);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name[2]);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(123u,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>index<sp/>(with<sp/>leading<sp/>zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;01&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>index<sp/>(overflow)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/4294967296&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;4294967296&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorTokenMustBeginWithSolidus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77" kindref="member">kPointerParseErrorTokenMustBeginWithSolidus</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidEscape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" kindref="member">kPointerParseErrorInvalidEscape</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidEscape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/~2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" kindref="member">kPointerParseErrorInvalidEscape</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Parse_URIFragment)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/foo/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unescape<sp/>~1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/a~1b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;a/b&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unescape<sp/>~0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/m~0n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;m~n&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>empty<sp/>and<sp/>non-empty<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#//a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Null<sp/>characters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/%00%00&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name[0]);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name[1]);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name[2]);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Percentage<sp/>Escapes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;c%d&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;#/c%25d&quot;</highlight><highlight class="normal">).GetTokens()[0].name);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;e^f&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;#/e%5Ef&quot;</highlight><highlight class="normal">).GetTokens()[0].name);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;g|h&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;#/g%7Ch&quot;</highlight><highlight class="normal">).GetTokens()[0].name);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;i\\j&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;#/i%5Cj&quot;</highlight><highlight class="normal">).GetTokens()[0].name);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;k\&quot;l&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;#/k%22l&quot;</highlight><highlight class="normal">).GetTokens()[0].name);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;#/%20&quot;</highlight><highlight class="normal">).GetTokens()[0].name);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Valid<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/123&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;123&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(123u,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>index<sp/>(with<sp/>leading<sp/>zero)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/01&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;01&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>index<sp/>(overflow)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/4294967296&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;4294967296&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(kPointerInvalidIndex,<sp/>p.GetTokens()[0].index);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>UTF-8<sp/>perecent<sp/>encoding<sp/>to<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/%C2%A2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;\xC2\xA2&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>UTF-8<sp/>perecent<sp/>encoding<sp/>to<sp/>UTF-16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;GenericValue&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>&gt;<sp/>p(L</highlight><highlight class="stringliteral">&quot;#/%C2%A2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="struct_u_t_f16_1a811680d50447c98be4fd94c0a27504bb" kindref="member">UTF16&lt;&gt;::Ch</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x00A2),<sp/>p.GetTokens()[0].name[0]);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>UTF-8<sp/>perecent<sp/>encoding<sp/>to<sp/>UTF-16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;GenericValue&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>&gt;<sp/>p(L</highlight><highlight class="stringliteral">&quot;#/%E2%82%AC&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="struct_u_t_f16_1a811680d50447c98be4fd94c0a27504bb" kindref="member">UTF16&lt;&gt;::Ch</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0x20AC),<sp/>p.GetTokens()[0].name[0]);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorTokenMustBeginWithSolidus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea5821696a2ab6cbccdc8288cbe6e81c77" kindref="member">kPointerParseErrorTokenMustBeginWithSolidus</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidEscape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/~&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" kindref="member">kPointerParseErrorInvalidEscape</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidEscape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/~2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98bea4d2a7e511d717fd1d2f532ef5fcf821b" kindref="member">kPointerParseErrorInvalidEscape</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidPercentEncoding</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/%&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidPercentEncoding<sp/>(invalid<sp/>hex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/%g0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidPercentEncoding<sp/>(invalid<sp/>hex)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/%0g&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorInvalidPercentEncoding<sp/>(incomplete<sp/>UTF-8<sp/>sequence)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/%C2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beac0c1b013c0db34dcc5a47fc1ee7a8c35" kindref="member">kPointerParseErrorInvalidPercentEncoding</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorCharacterMustPercentEncode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38" kindref="member">kPointerParseErrorCharacterMustPercentEncode</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>kPointerParseErrorCharacterMustPercentEncode</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;#/\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.IsValid());</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(<ref refid="group___r_a_p_i_d_j_s_o_n___e_r_r_o_r_s_1ggacb2e274f33e54d91b96e9883a99a98beabd7eae93627f74267009a03679b6dc38" kindref="member">kPointerParseErrorCharacterMustPercentEncode</ref>,<sp/>p.GetParseErrorCode());</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetParseErrorOffset());</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Stringify)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Test<sp/>by<sp/>roundtrip</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>sources[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/a~1b&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/c%d&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/e^f&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/g|h&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/i\\j&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/k\&quot;l&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/m~0n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/\xC2\xA2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/\xE2\x82\xAC&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/\xF0\x9D\x84\x9E&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sources)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(sources[0]);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(sources[i]);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>s;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.Stringify(s));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(sources[i],<sp/>s.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stringify<sp/>to<sp/>URI<sp/>fragment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>s2;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.StringifyUriFragment(s2));</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p2(s2.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>(),<sp/>s2.<ref refid="class_generic_string_buffer_1a725e862b9a78375f5363b0b61ad789f3" kindref="member">GetSize</ref>());</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p2.IsValid());</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(p<sp/>==<sp/>p2);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strigify<sp/>to<sp/>URI<sp/>fragment<sp/>with<sp/>an<sp/>invalid<sp/>UTF-8<sp/>sequence</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/\xC2&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>s;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(p.StringifyUriFragment(s));</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal">}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>Pointer<sp/>with<sp/>static<sp/>tokens,<sp/>no<sp/>dynamic<sp/>allocation<sp/>involved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NAME(s)<sp/>{<sp/>s,<sp/>static_cast&lt;SizeType&gt;(sizeof(s)<sp/>/<sp/>sizeof(s[0])<sp/>-<sp/>1),<sp/>kPointerInvalidIndex<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INDEX(i)<sp/>{<sp/>#i,<sp/>static_cast&lt;SizeType&gt;(sizeof(#i)<sp/>-<sp/>1),<sp/>i<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Pointer::Token</ref><sp/>kTokens[]<sp/>=<sp/>{<sp/><ref refid="pointertest_8cpp_1a59c7737920212dcb3bb9df58d7062de4" kindref="member">NAME</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointertest_8cpp_1aa5fad23b2a5eed790e6661e896a506b7" kindref="member">INDEX</ref>(0)<sp/>};<sp/></highlight><highlight class="comment">//<sp/>equivalent<sp/>to<sp/>&quot;/foo/0&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>INDEX</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>ConstructorWithToken)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(kTokens,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens[0]));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>CopyConstructor)<sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref><sp/>allocator;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>&amp;allocator);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q(p);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(q.IsValid());</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>q.GetTokenCount());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>q.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>q.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>q.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copied<sp/>pointer<sp/>needs<sp/>to<sp/>have<sp/>its<sp/>own<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NE(&amp;p.GetAllocator(),<sp/>&amp;q.GetAllocator());</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>tokens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(kTokens,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens[0]));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q(p);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(q.IsValid());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>q.GetTokenCount());</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>q.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>q.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>q.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal">}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Assignment)<sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref><sp/>allocator;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>&amp;allocator);</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(q.IsValid());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>q.GetTokenCount());</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>q.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>q.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>q.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NE(&amp;p.GetAllocator(),<sp/>&amp;q.GetAllocator());</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(q);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(q.IsValid());</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>q.GetTokenCount());</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>q.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>q.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>q.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_NE(&amp;p.GetAllocator(),<sp/>&amp;q.GetAllocator());</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>tokens</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(kTokens,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens[0]));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(q.IsValid());</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>q.GetTokenCount());</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>q.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>q.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>q.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">Swap</ref>)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q(&amp;p.GetAllocator());</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>q.Swap(p);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;q.GetAllocator(),<sp/>&amp;p.GetAllocator());</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(q.IsValid());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>q.GetTokenCount());</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>q.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>q.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>q.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>q.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::swap<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>std::swap(p,<sp/>q);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;p.GetAllocator(),<sp/>&amp;q.GetAllocator());</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(q.IsValid());</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(p.IsValid());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>q.GetTokenCount());</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>p.GetTokenCount());</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(3u,<sp/>p.GetTokens()[0].length);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[0].name);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>p.GetTokens()[1].length);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">,<sp/>p.GetTokens()[1].name);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>p.GetTokens()[1].index);</highlight></codeline>
<codeline lineno="565"><highlight class="normal">}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Append)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q<sp/>=<sp/>p.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(1234);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1234&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1234/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q<sp/>=<sp/>p.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">).Move());</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(1234).Move());</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1234&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a2d823b89b055bc743d05c03183d3f338" kindref="member">kStringType</ref>).Move());</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1234/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>q<sp/>=<sp/>p.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(std::string(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Equality)<sp/>{</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>always<sp/>not<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Inequality)<sp/>{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">)<sp/>!=<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">));<sp/></highlight><highlight class="comment">//<sp/>Invalid<sp/>always<sp/>not<sp/>equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Create)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>v<sp/>=<sp/>&amp;<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).Create(d,<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d,<sp/>v);</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>v<sp/>=<sp/>&amp;<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">).Create(d,<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/>v);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>v<sp/>=<sp/>&amp;<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Create(d,<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/>v);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>v<sp/>=<sp/>&amp;<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">).Create(d,<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1],<sp/>v);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>v<sp/>=<sp/>&amp;<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-/-&quot;</highlight><highlight class="normal">).Create(d,<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;foo/-&quot;<sp/>is<sp/>a<sp/>newly<sp/>created<sp/>null<sp/>value<sp/>x.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;foo/-/-&quot;<sp/>finds<sp/>that<sp/>x<sp/>is<sp/>not<sp/>an<sp/>array,<sp/>it<sp/>converts<sp/>x<sp/>to<sp/>empty<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>treats<sp/>-<sp/>as<sp/>&quot;-&quot;<sp/>member<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][2][</highlight><highlight class="stringliteral">&quot;-&quot;</highlight><highlight class="normal">],<sp/>v);</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Document<sp/>with<sp/>no<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>v<sp/>=<sp/>&amp;<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">).Create(d);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][3],<sp/>v);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>(not<sp/>document)<sp/>must<sp/>give<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>v<sp/>=<sp/>&amp;<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/-&quot;</highlight><highlight class="normal">).Create(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][4],<sp/>v);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal">}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kJsonIds[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;id\&quot;:<sp/>\&quot;/root/\&quot;,&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;foo\&quot;:[\&quot;bar\&quot;,<sp/>\&quot;baz\&quot;,<sp/>{\&quot;id\&quot;:<sp/>\&quot;inarray\&quot;,<sp/>\&quot;child\&quot;:<sp/>1}],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;int\&quot;<sp/>:<sp/>2,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;str\&quot;<sp/>:<sp/>\&quot;val\&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;obj\&quot;:<sp/>{\&quot;id\&quot;:<sp/>\&quot;inobj\&quot;,<sp/>\&quot;child\&quot;:<sp/>3},\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;jbo\&quot;:<sp/>{\&quot;id\&quot;:<sp/>true,<sp/>\&quot;child\&quot;:<sp/>4}\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>GetUri)<sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref><sp/>allocator;</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJsonIds);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_uri" kindref="compound">Pointer::UriType</ref><sp/>doc(</highlight><highlight class="stringliteral">&quot;http://doc&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_uri" kindref="compound">Pointer::UriType</ref><sp/>root(</highlight><highlight class="stringliteral">&quot;http://doc/root/&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_uri" kindref="compound">Pointer::UriType</ref><sp/>empty<sp/>=<sp/><ref refid="class_generic_pointer_1ac82bc56506218e49644bbbbe752a86cc" kindref="member">Pointer::UriType</ref>();</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>doc);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2/child&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/><ref refid="class_generic_uri" kindref="compound">Pointer::UriType</ref>(</highlight><highlight class="stringliteral">&quot;http://doc/root/inarray&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/int&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/str&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/obj&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/obj/child&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/><ref refid="class_generic_uri" kindref="compound">Pointer::UriType</ref>(</highlight><highlight class="stringliteral">&quot;http://doc/root/inobj&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/jbo&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/jbo/child&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc)<sp/>==<sp/>root);<sp/></highlight><highlight class="comment">//<sp/>id<sp/>not<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>unresolvedTokenIndex;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/abc&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc,<sp/>&amp;unresolvedTokenIndex,<sp/>&amp;allocator)<sp/>==<sp/>empty);<sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/3&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc,<sp/>&amp;unresolvedTokenIndex,<sp/>&amp;allocator)<sp/>==<sp/>empty);<sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/a&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc,<sp/>&amp;unresolvedTokenIndex,<sp/>&amp;allocator)<sp/>==<sp/>empty);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo&quot;<sp/>is<sp/>an<sp/>array,<sp/>cannot<sp/>query<sp/>by<sp/>&quot;a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/0&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc,<sp/>&amp;unresolvedTokenIndex,<sp/>&amp;allocator)<sp/>==<sp/>empty);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/a&quot;</highlight><highlight class="normal">).GetUri(d,<sp/>doc,<sp/>&amp;unresolvedTokenIndex,<sp/>&amp;allocator)<sp/>==<sp/>empty);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Pointer::Token</ref><sp/>tokens[]<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo<sp/>...&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>kPointerInvalidIndex<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(tokens,<sp/>1).GetUri(d,<sp/>doc)<sp/>==<sp/>root);</highlight></codeline>
<codeline lineno="697"><highlight class="normal">}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Get)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;a/b&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a~1b&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;c%d&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/c%d&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;e^f&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/e^f&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;g|h&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/g|h&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;i\\j&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/i\\j&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;k\&quot;l&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/k\&quot;l&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/<sp/>&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;m~n&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/m~0n&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/abc&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);<sp/><sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>unresolvedTokenIndex;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">).Get(d,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/a&quot;</highlight><highlight class="normal">).Get(d,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo&quot;<sp/>is<sp/>an<sp/>array,<sp/>cannot<sp/>query<sp/>by<sp/>&quot;a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/0&quot;</highlight><highlight class="normal">).Get(d,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/a&quot;</highlight><highlight class="normal">).Get(d,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Pointer::Token</ref><sp/>tokens[]<sp/>=<sp/>{<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;foo<sp/>...&quot;</highlight><highlight class="normal">,<sp/>3,<sp/>kPointerInvalidIndex<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(tokens,<sp/>1).Get(d));</highlight></codeline>
<codeline lineno="729"><highlight class="normal">}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>GetWithDefault)<sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>v(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">).Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][3].GetString());</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsNull());</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsNull());</highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>-1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt());</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>-2,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt());</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>0x87654321,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint());</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>0x12345678,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint());</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>i64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt64());</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>i64<sp/>+<sp/>1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt64());</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>u64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint64());</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>u64<sp/>-<sp/>1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint64());</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsTrue());</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsTrue());</highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsFalse());</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsFalse());</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>buffer,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/C++&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>GetWithDefault_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>v(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>v));</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>v));</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>v));</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">).Move()));</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][3].GetString());</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move()).IsNull());</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).IsNull());</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>-1).GetInt());</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>-2).GetInt());</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>0x87654321).GetUint());</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>0x12345678).GetUint());</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>i64).GetInt64());</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>i64<sp/>+<sp/>1).GetInt64());</highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>u64).GetUint64());</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>u64<sp/>-<sp/>1).GetUint64());</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).IsTrue());</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).IsTrue());</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).IsFalse());</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).IsFalse());</highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">).GetString());</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>buffer).GetString());</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/C++&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">)).GetString());</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal">}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Set)<sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Set(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(123).Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetInt());</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">).Set(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(456).Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(456,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][2].GetInt());</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">).Set(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">)-&gt;IsNull());</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Const<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>foo(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">).Set(d,<sp/>foo,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(foo,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">).Set(d,<sp/>-1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">)-&gt;GetInt());</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">).Set(d,<sp/>0x87654321,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">)-&gt;GetUint());</highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">).Set(d,<sp/>i64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">)-&gt;GetInt64());</highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">).Set(d,<sp/>u64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">)-&gt;GetUint64());</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">).Set(d,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">)-&gt;IsTrue());</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">).Set(d,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">)-&gt;IsFalse());</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">).Set(d,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">).Set(d,<sp/>buffer,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">).Set(d,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal">}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Set_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Set(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(123).Move());</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetInt());</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">).Set(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(456).Move());</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(456,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][2].GetInt());</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">).Set(d,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move());</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">)-&gt;IsNull());</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Const<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>foo(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">).Set(d,<sp/>foo);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(foo,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">).Set(d,<sp/>-1);</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">)-&gt;GetInt());</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">).Set(d,<sp/>0x87654321);</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">)-&gt;GetUint());</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">).Set(d,<sp/>i64);</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">)-&gt;GetInt64());</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">).Set(d,<sp/>u64);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">)-&gt;GetUint64());</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">).Set(d,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">)-&gt;IsTrue());</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">).Set(d,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">)-&gt;IsFalse());</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">).Set(d,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">).Set(d,<sp/>buffer);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">).Set(d,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal">}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Swap_Value)<sp/>{</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Swap(d,<sp/>*<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">).Get(d),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1].GetString());</highlight></codeline>
<codeline lineno="962"><highlight class="normal">}</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Swap_Value_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Swap(d,<sp/>*<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">).Get(d));</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1].GetString());</highlight></codeline>
<codeline lineno="970"><highlight class="normal">}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Erase)<sp/>{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/nonexist/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/nonexist/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0/nonexist/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">].Size());</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">].Empty());</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0/b/0&quot;</highlight><highlight class="normal">).Create(d);</highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0/b/0&quot;</highlight><highlight class="normal">).Get(d)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0/b/0&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0/b/0&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0/b&quot;</highlight><highlight class="normal">).Get(d)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0/b&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0/b&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0&quot;</highlight><highlight class="normal">).Get(d)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/0&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">).Get(d)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1009"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/>&amp;v);</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1],<sp/>&amp;v);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>CreateValueByPointer_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/>&amp;v);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1],<sp/>&amp;v);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>unresolvedTokenIndex;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/a&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo&quot;<sp/>is<sp/>an<sp/>array,<sp/>cannot<sp/>query<sp/>by<sp/>&quot;a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0/0&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0/a&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>v<sp/>=<sp/>d;</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(v,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(&amp;d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0],<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(v,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(v,<sp/></highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>boundary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(v,<sp/></highlight><highlight class="stringliteral">&quot;/foo/a&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo&quot;<sp/>is<sp/>an<sp/>array,<sp/>cannot<sp/>query<sp/>by<sp/>&quot;a&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(v,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0/0&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(v,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0/a&quot;</highlight><highlight class="normal">,<sp/>&amp;unresolvedTokenIndex)<sp/>==<sp/>0);<sp/></highlight><highlight class="comment">//<sp/>&quot;/foo/0&quot;<sp/>is<sp/>an<sp/>string,<sp/>cannot<sp/>further<sp/>query</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(2u,<sp/>unresolvedTokenIndex);</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>GetValueByPointerWithDefault_Pointer)<sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>v(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">),<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">),<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">).Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][3].GetString());</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsNull());</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsNull());</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt());</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">),<sp/>-2,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt());</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">),<sp/>0x87654321,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint());</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">),<sp/>0x12345678,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint());</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">),<sp/>i64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt64());</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">),<sp/>i64<sp/>+<sp/>1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt64());</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">),<sp/>u64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint64());</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">),<sp/>u64<sp/>-<sp/>1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint64());</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsTrue());</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsTrue());</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsFalse());</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsFalse());</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">),<sp/>buffer,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">))-&gt;GetString());</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/C++&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1122"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>GetValueByPointerWithDefault_String)<sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>v(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">,<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">,<sp/>v,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">).Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>));</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][3].GetString());</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsNull());</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsNull());</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">,<sp/>-1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt());</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">,<sp/>-2,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt());</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">,<sp/>0x87654321,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint());</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">,<sp/>0x12345678,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint());</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">,<sp/>i64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt64());</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">,<sp/>i64<sp/>+<sp/>1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetInt64());</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">,<sp/>u64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint64());</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">,<sp/>u64<sp/>-<sp/>1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetUint64());</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsTrue());</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsTrue());</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsFalse());</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).IsFalse());</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">,<sp/>buffer,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/C++&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>).GetString());</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>GetValueByPointerWithDefault_Pointer_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>v(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/>v));</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/>v));</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">),<sp/>v));</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">),<sp/>v));</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">).Move()));</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][3].GetString());</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move()).IsNull());</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).IsNull());</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">),<sp/>-1).GetInt());</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">),<sp/>-2).GetInt());</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">),<sp/>0x87654321).GetUint());</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">),<sp/>0x12345678).GetUint());</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">),<sp/>i64).GetInt64());</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">),<sp/>i64<sp/>+<sp/>1).GetInt64());</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">),<sp/>u64).GetUint64());</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">),<sp/>u64<sp/>-<sp/>1).GetUint64());</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).IsTrue());</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).IsTrue());</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).IsFalse());</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).IsFalse());</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">).GetString());</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">),<sp/>buffer).GetString());</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">))-&gt;GetString());</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/C++&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">)).GetString());</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>GetValueByPointerWithDefault_String_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>v(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>v));</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>v));</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">,<sp/>v));</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;qux&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/2&quot;</highlight><highlight class="normal">,<sp/>v));</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">)<sp/>==<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">).Move()));</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;last&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][3].GetString());</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move()).IsNull());</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;x&quot;</highlight><highlight class="normal">).IsNull());</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">,<sp/>-1).GetInt());</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">,<sp/>-2).GetInt());</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">,<sp/>0x87654321).GetUint());</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">,<sp/>0x12345678).GetUint());</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">,<sp/>i64).GetInt64());</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">,<sp/>i64<sp/>+<sp/>1).GetInt64());</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">,<sp/>u64).GetUint64());</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">,<sp/>u64<sp/>-<sp/>1).GetUint64());</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).IsTrue());</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).IsTrue());</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">).IsFalse());</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">).IsFalse());</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">).GetString());</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">,<sp/>buffer).GetString());</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/C++&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">)).GetString());</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>SetValueByPointer_Pointer)<sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(123).Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetInt());</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">)-&gt;IsNull());</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Const<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>foo(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">),<sp/>foo,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(foo,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">),<sp/>-1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">),<sp/>0x87654321,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">)-&gt;GetUint());</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">),<sp/>i64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">)-&gt;GetInt64());</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">),<sp/>u64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">)-&gt;GetUint64());</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">)-&gt;IsTrue());</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">)-&gt;IsFalse());</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"></highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">),<sp/>buffer,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>SetValueByPointer_String)<sp/>{</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(123).Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetInt());</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move(),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">)-&gt;IsNull());</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Const<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>foo(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">,<sp/>foo,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(foo,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">,<sp/>-1,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">,<sp/>0x87654321,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">)-&gt;GetUint());</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">,<sp/>i64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">)-&gt;GetInt64());</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">,<sp/>u64,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">)-&gt;GetUint64());</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">)-&gt;IsTrue());</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">)-&gt;IsFalse());</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">,<sp/>buffer,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>SetValueByPointer_Pointer_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(123).Move());</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetInt());</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">),<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move());</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">)-&gt;IsNull());</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"></highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Const<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>foo(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">),<sp/>foo);</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(foo,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">),<sp/>-1);</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">),<sp/>0x87654321);</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">)-&gt;GetUint());</highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">),<sp/>i64);</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">)-&gt;GetInt64());</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">),<sp/>u64);</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">)-&gt;GetUint64());</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"></highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">)-&gt;IsTrue());</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">)-&gt;IsFalse());</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">),<sp/>buffer);</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">),<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>SetValueByPointer_String_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>(123).Move());</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetInt());</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>().Move());</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/null&quot;</highlight><highlight class="normal">)-&gt;IsNull());</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Const<sp/>Value<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>foo(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">],<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">,<sp/>foo);</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(foo,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/clone&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">,<sp/>-1);</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(-1,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int&quot;</highlight><highlight class="normal">)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">,<sp/>0x87654321);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(0x87654321,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint&quot;</highlight><highlight class="normal">)-&gt;GetUint());</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref><sp/>i64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0x80000000,<sp/>0));</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">,<sp/>i64);</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(i64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/int64&quot;</highlight><highlight class="normal">)-&gt;GetInt64());</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>u64<sp/>=<sp/><ref refid="rapidjson_8h_1aaee1245f375a71be1ac9b8a07ba5fb8f" kindref="member">RAPIDJSON_UINT64_C2</ref>(0xFFFFFFFFF,<sp/>0xFFFFFFFFF);</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">,<sp/>u64);</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(u64,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/uint64&quot;</highlight><highlight class="normal">)-&gt;GetUint64());</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/true&quot;</highlight><highlight class="normal">)-&gt;IsTrue());</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/false&quot;</highlight><highlight class="normal">)-&gt;IsFalse());</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>StringRef<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/hello&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>string<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[256];</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>strcpy(buffer,<sp/></highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">,<sp/>buffer);</highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;World&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/world&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">,<sp/>std::string(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">,<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/c++&quot;</highlight><highlight class="normal">)-&gt;GetString());</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1512"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1].GetString());</highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1].GetString());</highlight></codeline>
<codeline lineno="1518"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"></highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>SwapValueByPointer_NoAllocator)<sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">),<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1].GetString());</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">,<sp/>*<ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/1&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;bar&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][1].GetString());</highlight></codeline>
<codeline lineno="1530"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>EraseValueByPointer_Pointer)<sp/>{</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">].Size());</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">].Empty());</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1545"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"></highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>EraseValueByPointer_String)<sp/>{</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(kJson);</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"></highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo/nonexist&quot;</highlight><highlight class="normal">).Erase(d));</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(1u,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">].Size());</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;baz&quot;</highlight><highlight class="normal">,<sp/>d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">][0].GetString());</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/0&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(d[</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">].Empty());</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">).Get(d)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="1560"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Ambiguity)<sp/>{</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(</highlight><highlight class="stringliteral">&quot;{\&quot;0\&quot;<sp/>:<sp/>[123]}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/0/0&quot;</highlight><highlight class="normal">).Get(d)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/0/a&quot;</highlight><highlight class="normal">).Set(d,<sp/>456);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>array<sp/>[123]<sp/>to<sp/>object<sp/>{456}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(456,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/0/a&quot;</highlight><highlight class="normal">).Get(d)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(</highlight><highlight class="stringliteral">&quot;[{\&quot;0\&quot;:<sp/>123}]&quot;</highlight><highlight class="normal">).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/0/0&quot;</highlight><highlight class="normal">).Get(d)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/0/1&quot;</highlight><highlight class="normal">).Set(d,<sp/>456);<sp/></highlight><highlight class="comment">//<sp/>1<sp/>is<sp/>treated<sp/>as<sp/>&quot;1&quot;<sp/>to<sp/>index<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/0/0&quot;</highlight><highlight class="normal">).Get(d)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(456,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/0/1&quot;</highlight><highlight class="normal">).Get(d)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>ResolveOnObject)<sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(</highlight><highlight class="stringliteral">&quot;{\&quot;a\&quot;:<sp/>123}&quot;</highlight><highlight class="normal">).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_object" kindref="compound">Value::ConstObject</ref><sp/>o<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d).GetObject();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">).Get(o)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"></highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_object" kindref="compound">Value::Object</ref><sp/>o<sp/>=<sp/>d.GetObject();</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">).Set(o,<sp/>456,<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(456,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">).Get(o)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>ResolveOnArray)<sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(</highlight><highlight class="stringliteral">&quot;[1,<sp/>2,<sp/>3]&quot;</highlight><highlight class="normal">).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>());</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_array" kindref="compound">Value::ConstArray</ref><sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(d).GetArray();</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(2,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/1&quot;</highlight><highlight class="normal">).Get(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_array" kindref="compound">Value::Array</ref><sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>d.GetArray();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/1&quot;</highlight><highlight class="normal">).Set(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>,<sp/>123,<sp/>d.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(123,<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/1&quot;</highlight><highlight class="normal">).Get(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>)-&gt;GetInt());</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>LessThan)<sp/>{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*str;</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>valid;</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>pointers[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/a/b&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/d/1&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/d/2/z&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/d/2/3&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/d/2&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/a/c&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/e/f~g&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/d/2/zz&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/d/1&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/d/2/z&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/e/f~~g&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/e/f~0g&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/e/f~1g&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;/e/f.g&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*ordered_pointers[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/a/b&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/a/c&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d/1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d/1&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d/2&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/e/f.g&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/e/f~1g&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/e/f~0g&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d/2/3&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d/2/z&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d/2/z&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;/d/2/zz&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>invalid<sp/>&quot;/e/f~g&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>invalid<sp/>&quot;/e/f~~g&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_memory_pool_allocator" kindref="compound">MemoryPoolAllocator&lt;&gt;</ref><sp/>AllocatorType;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;Value, AllocatorType&gt;</ref><sp/>PointerType;</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::multimap&lt;PointerType,<sp/>size_t&gt;<sp/>PointerMap;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>PointerMap<sp/>map;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"><sp/><sp/><sp/><sp/>PointerMap::iterator<sp/>it;</highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/>AllocatorType<sp/>allocator;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_EQ(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pointers)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pointers[0]),</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ordered_pointers)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ordered_pointers[0]));</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pointers)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pointers[0]);<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>map.insert(PointerMap::value_type(PointerType(pointers[i].str,<sp/>&amp;allocator),<sp/>i));</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!it-&gt;first.IsValid())<sp/>{</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(++it,<sp/>map.end());</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0,<sp/>it<sp/>=<sp/>map.begin();<sp/>it<sp/>!=<sp/>map.end();<sp/>++it,<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(it-&gt;second<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pointers)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(pointers[0]));</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(it-&gt;first.IsValid(),<sp/>pointers[it-&gt;second].valid);</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(i<sp/>&lt;<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ordered_pointers)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ordered_pointers[0]));</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(it-&gt;first.IsValid(),<sp/>!!ordered_pointers[i]);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;first.IsValid())<sp/>{</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref><sp/>os(ss);</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(it-&gt;first.Stringify(os));</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ss.str(),<sp/>pointers[it-&gt;second].str);</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(ss.str(),<sp/>ordered_pointers[i]);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1684"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"></highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://github.com/Tencent/rapidjson/issues/483</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687" refid="namespacemyjson" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacemyjson" kindref="compound">myjson</ref><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight></codeline>
<codeline lineno="1689" refid="classmyjson_1_1_my_allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmyjson_1_1_my_allocator" kindref="compound">MyAllocator</ref></highlight></codeline>
<codeline lineno="1690"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classmyjson_1_1_my_allocator_1a6bce993410843339068ce5495e48eed2" kindref="member">kNeedFree</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="classmyjson_1_1_my_allocator_1a969652f85ab8b4c63b0dd33f4b373448" kindref="member">Malloc</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_size)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>malloc(_size);<sp/>}</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="classmyjson_1_1_my_allocator_1a6457176352eb9dbe010824414b603607" kindref="member">Realloc</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_org_p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_org_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_new_size)<sp/>{<sp/>(void)_org_size;<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>realloc(_org_p,<sp/>_new_size);<sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classmyjson_1_1_my_allocator_1a3638ad210868b5bb2d48f4839c06ef29" kindref="member">Free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*_p)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>free(_p);<sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>rapidjson::GenericDocument&lt;</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rapidjson::UTF8&lt;&gt;,</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rapidjson::MemoryPoolAllocator&lt;<sp/>MyAllocator<sp/>&gt;,</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmyjson_1_1_my_allocator" kindref="compound">MyAllocator</ref></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/><ref refid="namespacemyjson_1ad443708a91ffd171ce0fa565e59a1f47" kindref="member">Document</ref>;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>rapidjson::GenericPointer&lt;</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">::myjson::Document::ValueType</ref>,</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classmyjson_1_1_my_allocator" kindref="compound">MyAllocator</ref></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;<sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">Pointer</ref>;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="schemavalidator_8cpp_1af2c59956daf09ddf36e71b173b084b0f" kindref="member">::myjson::Document::ValueType</ref><sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">Value</ref>;</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"></highlight></codeline>
<codeline lineno="1711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Issue483)<sp/>{</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>mystr,<sp/>path;</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1ad443708a91ffd171ce0fa565e59a1f47" kindref="member">myjson::Document</ref><sp/>document;</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a85df4ee44b7616a2b01bfec8c31aec5f" kindref="member">myjson::Value</ref><sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>(<ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7a2d823b89b055bc743d05c03183d3f338" kindref="member">rapidjson::kStringType</ref>);</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>.SetString(mystr.c_str(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(mystr.length()),<sp/>document.GetAllocator());</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacemyjson_1a5a66903f9686e4aee03475a435604dbc" kindref="member">myjson::Pointer</ref>(path.c_str()).Set(document,<sp/><ref refid="pointer_8h_1a32aff7c6c4cd253fdf6563677afab5ce" kindref="member">value</ref>,<sp/>document.GetAllocator());</highlight></codeline>
<codeline lineno="1719"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"></highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><ref refid="pointertest_8cpp_1a194da73d7b156fd70e813df418390de7" kindref="member">TEST</ref>(<ref refid="class_generic_pointer" kindref="compound">Pointer</ref>,<sp/>Issue1899)<sp/>{</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">GenericPointer&lt;Value, MemoryPoolAllocator&lt;&gt;</ref><sp/>&gt;<sp/>PointerType;</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>PointerType<sp/>p;</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/>PointerType<sp/>q<sp/>=<sp/>p.<ref refid="class_generic_pointer_1aa8f86c0f330807f337351a95ae254b78" kindref="member">Append</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(PointerType(</highlight><highlight class="stringliteral">&quot;/foo&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q.Append(1234);</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(PointerType(</highlight><highlight class="stringliteral">&quot;/foo/1234&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>q<sp/>=<sp/>q.Append(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(PointerType(</highlight><highlight class="stringliteral">&quot;/foo/1234/&quot;</highlight><highlight class="normal">)<sp/>==<sp/>q);</highlight></codeline>
<codeline lineno="1730"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/test/unittest/pointertest.cpp"/>
  </compounddef>
</doxygen>
