<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="namespaceinternal" kind="namespace" language="C++">
    <compoundname>internal</compoundname>
    <innerclass refid="classinternal_1_1_big_integer" prot="public">internal::BigInteger</innerclass>
    <innerclass refid="classinternal_1_1_decoded_stream" prot="public">internal::DecodedStream</innerclass>
    <innerclass refid="structinternal_1_1_diy_fp" prot="public">internal::DiyFp</innerclass>
    <innerclass refid="classinternal_1_1_double" prot="public">internal::Double</innerclass>
    <innerclass refid="classinternal_1_1_generic_regex" prot="public">internal::GenericRegex</innerclass>
    <innerclass refid="classinternal_1_1_generic_regex_search" prot="public">internal::GenericRegexSearch</innerclass>
    <innerclass refid="classinternal_1_1_hasher" prot="public">internal::Hasher</innerclass>
    <innerclass refid="classinternal_1_1_i_schema_state_factory" prot="public">internal::ISchemaStateFactory</innerclass>
    <innerclass refid="classinternal_1_1_i_schema_validator" prot="public">internal::ISchemaValidator</innerclass>
    <innerclass refid="structinternal_1_1_is_generic_value" prot="public">internal::IsGenericValue</innerclass>
    <innerclass refid="structinternal_1_1_is_generic_value_impl" prot="public">internal::IsGenericValueImpl</innerclass>
    <innerclass refid="structinternal_1_1_is_generic_value_impl_3_01_t_00_01typename_01_void_3_01typename_01_t_1_1_enco3a51e9d8b4986f001b39e1e8edecb66a" prot="public">internal::IsGenericValueImpl&lt; T, typename Void&lt; typename T::EncodingType &gt;::Type, typename Void&lt; typename T::AllocatorType &gt;::Type &gt;</innerclass>
    <innerclass refid="structinternal_1_1_is_ref_counted" prot="public">internal::IsRefCounted</innerclass>
    <innerclass refid="structinternal_1_1_is_ref_counted_3_01_t_00_01typename_01internal_1_1_enable_if_cond_3_01_t_1_1k_ref_counted_01_4_1_1_type_01_4" prot="public">internal::IsRefCounted&lt; T, typename internal::EnableIfCond&lt; T::kRefCounted &gt;::Type &gt;</innerclass>
    <innerclass refid="classinternal_1_1_i_validation_error_handler" prot="public">internal::IValidationErrorHandler</innerclass>
    <innerclass refid="classinternal_1_1_schema" prot="public">internal::Schema</innerclass>
    <innerclass refid="structinternal_1_1_schema_validation_context" prot="public">internal::SchemaValidationContext</innerclass>
    <innerclass refid="classinternal_1_1_stack" prot="public">internal::Stack</innerclass>
    <innerclass refid="classinternal_1_1_stream_local_copy" prot="public">internal::StreamLocalCopy</innerclass>
    <innerclass refid="classinternal_1_1_stream_local_copy_3_01_stream_00_010_01_4" prot="public">internal::StreamLocalCopy&lt; Stream, 0 &gt;</innerclass>
    <innerclass refid="classinternal_1_1_stream_local_copy_3_01_stream_00_011_01_4" prot="public">internal::StreamLocalCopy&lt; Stream, 1 &gt;</innerclass>
    <innerclass refid="structinternal_1_1_token_helper" prot="public">internal::TokenHelper</innerclass>
    <innerclass refid="structinternal_1_1_token_helper_3_01_stack_00_01char_01_4" prot="public">internal::TokenHelper&lt; Stack, char &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper" prot="public">internal::TypeHelper</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01bool_01_4" prot="public">internal::TypeHelper&lt; ValueType, bool &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01const_01typename_01_value_type_1_1_ch_01_5_01_4" prot="public">internal::TypeHelper&lt; ValueType, const typename ValueType::Ch * &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01double_01_4" prot="public">internal::TypeHelper&lt; ValueType, double &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01float_01_4" prot="public">internal::TypeHelper&lt; ValueType, float &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01int_01_4" prot="public">internal::TypeHelper&lt; ValueType, int &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01int64__t_01_4" prot="public">internal::TypeHelper&lt; ValueType, int64_t &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_array_01_4" prot="public">internal::TypeHelper&lt; ValueType, typename ValueType::Array &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_const_array_01_4" prot="public">internal::TypeHelper&lt; ValueType, typename ValueType::ConstArray &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_const_object_01_4" prot="public">internal::TypeHelper&lt; ValueType, typename ValueType::ConstObject &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01typename_01_value_type_1_1_object_01_4" prot="public">internal::TypeHelper&lt; ValueType, typename ValueType::Object &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01uint64__t_01_4" prot="public">internal::TypeHelper&lt; ValueType, uint64_t &gt;</innerclass>
    <innerclass refid="structinternal_1_1_type_helper_3_01_value_type_00_01unsigned_01_4" prot="public">internal::TypeHelper&lt; ValueType, unsigned &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceinternal_1ae7fc20c6ee680ae3ba16ae16b4bd5e16" prot="public" static="no">
        <type><ref refid="classinternal_1_1_generic_regex" kindref="compound">GenericRegex</ref>&lt; <ref refid="struct_u_t_f8" kindref="compound">UTF8</ref>&lt;&gt; &gt;</type>
        <definition>typedef GenericRegex&lt;UTF8&lt;&gt; &gt; internal::Regex</definition>
        <argsstring></argsstring>
        <name>Regex</name>
        <qualifiedname>internal::Regex</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/regex.h" line="725" column="22" bodyfile="src/rapidjson/include/rapidjson/internal/regex.h" bodystart="725" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceinternal_1a7101e324c2d06f1505ef7c7d4401392b" prot="public" static="no">
        <type><ref refid="classinternal_1_1_generic_regex_search" kindref="compound">GenericRegexSearch</ref>&lt; <ref refid="namespaceinternal_1ae7fc20c6ee680ae3ba16ae16b4bd5e16" kindref="member">Regex</ref> &gt;</type>
        <definition>typedef GenericRegexSearch&lt;Regex&gt; internal::RegexSearch</definition>
        <argsstring></argsstring>
        <name>RegexSearch</name>
        <qualifiedname>internal::RegexSearch</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/regex.h" line="726" column="28" bodyfile="src/rapidjson/include/rapidjson/internal/regex.h" bodystart="726" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceinternal_1abdcff7a639884034f884dab7bd6ae76c" prot="public" static="yes" mutable="no">
        <type>const <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>const SizeType internal::kRegexInvalidState</definition>
        <argsstring></argsstring>
        <name>kRegexInvalidState</name>
        <qualifiedname>internal::kRegexInvalidState</qualifiedname>
        <initializer>= ~<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>(0)</initializer>
        <briefdescription>
<para>Represents an invalid index in <ref refid="structinternal_1_1_generic_regex_1_1_state_1a2db0ecd5296137b4e27a8bdb9b9b3a36" kindref="member">GenericRegex::State::out</ref>, out1. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/regex.h" line="71" column="23" bodyfile="src/rapidjson/include/rapidjson/internal/regex.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceinternal_1afc9153a9f72e57e5184d5c54562fa8f7" prot="public" static="yes" mutable="no">
        <type>const <ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>const SizeType internal::kRegexInvalidRange</definition>
        <argsstring></argsstring>
        <name>kRegexInvalidRange</name>
        <qualifiedname>internal::kRegexInvalidRange</qualifiedname>
        <initializer>= ~<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref>(0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/regex.h" line="72" column="23" bodyfile="src/rapidjson/include/rapidjson/internal/regex.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceinternal_1af72bbb0200bf0166f728c7afde826286" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
        <definition>uint32_t internal::clzll</definition>
        <argsstring>(uint64_t x)</argsstring>
        <name>clzll</name>
        <qualifiedname>internal::clzll</qualifiedname>
        <param>
          <type><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/clzll.h" line="32" column="17" bodyfile="src/rapidjson/include/rapidjson/internal/clzll.h" bodystart="32" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a3e95f043ed6c40cda1c1bc33c2f0ece2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structinternal_1_1_diy_fp" kindref="compound">DiyFp</ref></type>
        <definition>DiyFp internal::GetCachedPowerByIndex</definition>
        <argsstring>(size_t index)</argsstring>
        <name>GetCachedPowerByIndex</name>
        <qualifiedname>internal::GetCachedPowerByIndex</qualifiedname>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/diyfp.h" line="165" column="14" bodyfile="src/rapidjson/include/rapidjson/internal/diyfp.h" bodystart="165" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1abac3dbfa1070756c37725829148f6038" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structinternal_1_1_diy_fp" kindref="compound">DiyFp</ref></type>
        <definition>DiyFp internal::GetCachedPower</definition>
        <argsstring>(int e, int *K)</argsstring>
        <name>GetCachedPower</name>
        <qualifiedname>internal::GetCachedPower</qualifiedname>
        <param>
          <type>int</type>
          <declname>e</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/diyfp.h" line="228" column="14" bodyfile="src/rapidjson/include/rapidjson/internal/diyfp.h" bodystart="228" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a74b8503d044bf6c0a5e90c5bea3aba42" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structinternal_1_1_diy_fp" kindref="compound">DiyFp</ref></type>
        <definition>DiyFp internal::GetCachedPower10</definition>
        <argsstring>(int exp, int *outExp)</argsstring>
        <name>GetCachedPower10</name>
        <qualifiedname>internal::GetCachedPower10</qualifiedname>
        <param>
          <type>int</type>
          <declname>exp</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>outExp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/diyfp.h" line="242" column="14" bodyfile="src/rapidjson/include/rapidjson/internal/diyfp.h" bodystart="242" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a234e10bef097ccb2f202b7a133086e71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void internal::GrisuRound</definition>
        <argsstring>(char *buffer, int len, uint64_t delta, uint64_t rest, uint64_t ten_kappa, uint64_t wp_w)</argsstring>
        <name>GrisuRound</name>
        <qualifiedname>internal::GrisuRound</qualifiedname>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>delta</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>rest</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>ten_kappa</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>wp_w</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>closer</para>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/dtoa.h" line="35" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/dtoa.h" bodystart="35" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a8aae11dbb46da9ac99e116aa2a6dbfc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int internal::CountDecimalDigit32</definition>
        <argsstring>(uint32_t n)</argsstring>
        <name>CountDecimalDigit32</name>
        <qualifiedname>internal::CountDecimalDigit32</qualifiedname>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/dtoa.h" line="44" column="12" bodyfile="src/rapidjson/include/rapidjson/internal/dtoa.h" bodystart="44" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a47be9aea8d0f9cae49dc03dc046d2450" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void internal::DigitGen</definition>
        <argsstring>(const DiyFp &amp;W, const DiyFp &amp;Mp, uint64_t delta, char *buffer, int *len, int *K)</argsstring>
        <name>DigitGen</name>
        <qualifiedname>internal::DigitGen</qualifiedname>
        <param>
          <type>const <ref refid="structinternal_1_1_diy_fp" kindref="compound">DiyFp</ref> &amp;</type>
          <declname>W</declname>
        </param>
        <param>
          <type>const <ref refid="structinternal_1_1_diy_fp" kindref="compound">DiyFp</ref> &amp;</type>
          <declname>Mp</declname>
        </param>
        <param>
          <type><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>delta</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/dtoa.h" line="60" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/dtoa.h" bodystart="60" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1aeb7b6c0784b644968003cbd1b9da57e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void internal::Grisu2</definition>
        <argsstring>(double value, char *buffer, int *length, int *K)</argsstring>
        <name>Grisu2</name>
        <qualifiedname>internal::Grisu2</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>K</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/dtoa.h" line="116" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/dtoa.h" bodystart="116" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1aadc1fd5929c1c67a56c8ba480c587bac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * internal::WriteExponent</definition>
        <argsstring>(int K, char *buffer)</argsstring>
        <name>WriteExponent</name>
        <qualifiedname>internal::WriteExponent</qualifiedname>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/dtoa.h" line="130" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/dtoa.h" bodystart="130" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a4b194248657212e94cc3f244b09dbeae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * internal::Prettify</definition>
        <argsstring>(char *buffer, int length, int k, int maxDecimalPlaces)</argsstring>
        <name>Prettify</name>
        <qualifiedname>internal::Prettify</qualifiedname>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxDecimalPlaces</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/dtoa.h" line="154" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/dtoa.h" bodystart="154" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a38ffd2dab9bb216948f828f3a36c801f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * internal::dtoa</definition>
        <argsstring>(double value, char *buffer, int maxDecimalPlaces=324)</argsstring>
        <name>dtoa</name>
        <qualifiedname>internal::dtoa</qualifiedname>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxDecimalPlaces</declname>
          <defval>324</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/dtoa.h" line="220" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/dtoa.h" bodystart="220" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a76ad2b55668f695effde1971d53a5ce1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * internal::GetDigitsLut</definition>
        <argsstring>()</argsstring>
        <name>GetDigitsLut</name>
        <qualifiedname>internal::GetDigitsLut</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/itoa.h" line="23" column="19" bodyfile="src/rapidjson/include/rapidjson/internal/itoa.h" bodystart="23" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a90e3cb218b557548f361e99dc718b4b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * internal::u32toa</definition>
        <argsstring>(uint32_t value, char *buffer)</argsstring>
        <name>u32toa</name>
        <qualifiedname>internal::u32toa</qualifiedname>
        <param>
          <type><ref refid="stdint_8h_1a435d1572bf3f880d55459d9805097f62" kindref="member">uint32_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/itoa.h" line="39" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/itoa.h" bodystart="39" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1ac6c7d763acc9ca9f15a759241640328e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * internal::i32toa</definition>
        <argsstring>(int32_t value, char *buffer)</argsstring>
        <name>i32toa</name>
        <qualifiedname>internal::i32toa</qualifiedname>
        <param>
          <type><ref refid="stdint_8h_1ab1967d8591af1a4e48c37fd2b0f184d0" kindref="member">int32_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/itoa.h" line="115" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/itoa.h" bodystart="115" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a489150922c0320e4290b455bf3c6e36c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * internal::u64toa</definition>
        <argsstring>(uint64_t value, char *buffer)</argsstring>
        <name>u64toa</name>
        <qualifiedname>internal::u64toa</qualifiedname>
        <param>
          <type><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/itoa.h" line="126" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/itoa.h" bodystart="126" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a527358458754f514c249c55c27b35526" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>char *</type>
        <definition>char * internal::i64toa</definition>
        <argsstring>(int64_t value, char *buffer)</argsstring>
        <name>i64toa</name>
        <qualifiedname>internal::i64toa</qualifiedname>
        <param>
          <type><ref refid="stdint_8h_1a414156feea104f8f75b4ed9e3121b2f6" kindref="member">int64_t</ref></type>
          <declname>value</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/itoa.h" line="294" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/itoa.h" bodystart="294" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1af01c41d045d596e2f8d1888cf6fbecb6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double internal::Pow10</definition>
        <argsstring>(int n)</argsstring>
        <name>Pow10</name>
        <qualifiedname>internal::Pow10</qualifiedname>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Computes integer powers of 10 in double (10.0^n). </para>
        </briefdescription>
        <detaileddescription>
<para>This function uses lookup table for fast and accurate results. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>non-negative exponent. Must &lt;= 308. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>10.0^n </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/pow10.h" line="28" column="15" bodyfile="src/rapidjson/include/rapidjson/internal/pow10.h" bodystart="28" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a86326fb0c9d7c7ea8edd7deedbb2b26e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>SizeType internal::StrLen</definition>
        <argsstring>(const Ch *s)</argsstring>
        <name>StrLen</name>
        <qualifiedname>internal::StrLen</qualifiedname>
        <param>
          <type>const Ch *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
<para>Custom strlen() which works on different character types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Character type (e.g. char, wchar_t, short) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated input string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of characters in the string. </para>
</simplesect>
<simplesect kind="note"><para>This has the same semantics as strlen(), the return value is not number of Unicode codepoints. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strfunc.h" line="31" column="17" bodyfile="src/rapidjson/include/rapidjson/internal/strfunc.h" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1ac61f7d1bfae1fb68526633edd418fa1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>SizeType internal::StrLen</definition>
        <argsstring>(const char *s)</argsstring>
        <name>StrLen</name>
        <qualifiedname>internal::StrLen</qualifiedname>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strfunc.h" line="39" column="17" bodyfile="src/rapidjson/include/rapidjson/internal/strfunc.h" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a9cd1cee166f1e18e117d3ce9dc1c83da" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
        <definition>SizeType internal::StrLen</definition>
        <argsstring>(const wchar_t *s)</argsstring>
        <name>StrLen</name>
        <qualifiedname>internal::StrLen</qualifiedname>
        <param>
          <type>const wchar_t *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strfunc.h" line="44" column="17" bodyfile="src/rapidjson/include/rapidjson/internal/strfunc.h" bodystart="44" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a8986308d308f29092fef8a82e64debef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int internal::StrCmp</definition>
        <argsstring>(const Ch *s1, const Ch *s2)</argsstring>
        <name>StrCmp</name>
        <qualifiedname>internal::StrCmp</qualifiedname>
        <param>
          <type>const Ch *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const Ch *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
<para>Custom strcmpn() which works on different character types. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Ch</parametername>
</parameternamelist>
<parameterdescription>
<para>Character type (e.g. char, wchar_t, short) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s1</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated input string. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s2</parametername>
</parameternamelist>
<parameterdescription>
<para>Null-terminated input string. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 if equal </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strfunc.h" line="55" column="12" bodyfile="src/rapidjson/include/rapidjson/internal/strfunc.h" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a864bf0d412431b387aeeee9efdf0adfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="classrapidjson_1_1_encoding" kindref="compound">Encoding</ref></type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool internal::CountStringCodePoint</definition>
        <argsstring>(const typename Encoding::Ch *s, SizeType length, SizeType *outCount)</argsstring>
        <name>CountStringCodePoint</name>
        <qualifiedname>internal::CountStringCodePoint</qualifiedname>
        <param>
          <type>const typename Encoding::Ch *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></type>
          <declname>length</declname>
        </param>
        <param>
          <type><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref> *</type>
          <declname>outCount</declname>
        </param>
        <briefdescription>
<para>Returns number of code points in a encoded string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strfunc.h" line="64" column="6" bodyfile="src/rapidjson/include/rapidjson/internal/strfunc.h" bodystart="64" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1aa1bb51d788788eb5390a16462b40d98d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double internal::FastPath</definition>
        <argsstring>(double significand, int exp)</argsstring>
        <name>FastPath</name>
        <qualifiedname>internal::FastPath</qualifiedname>
        <param>
          <type>double</type>
          <declname>significand</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="28" column="15" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="28" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a9e5fac4695310f09892fe52b1d24ab19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double internal::StrtodNormalPrecision</definition>
        <argsstring>(double d, int p)</argsstring>
        <name>StrtodNormalPrecision</name>
        <qualifiedname>internal::StrtodNormalPrecision</qualifiedname>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="37" column="15" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="37" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1ace304441347098a4953ea99f50805da9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
        <definition>T internal::Min3</definition>
        <argsstring>(T a, T b, T c)</argsstring>
        <name>Min3</name>
        <qualifiedname>internal::Min3</qualifiedname>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="49" column="10" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="49" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a190f9c286df64526a7e3550528ed6b02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int internal::CheckWithinHalfULP</definition>
        <argsstring>(double b, const BigInteger &amp;d, int dExp)</argsstring>
        <name>CheckWithinHalfULP</name>
        <qualifiedname>internal::CheckWithinHalfULP</qualifiedname>
        <param>
          <type>double</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const <ref refid="classinternal_1_1_big_integer" kindref="compound">BigInteger</ref> &amp;</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dExp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="56" column="12" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="56" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a598b2d2f85130bff3c3942e4750b9185" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool internal::StrtodFast</definition>
        <argsstring>(double d, int p, double *result)</argsstring>
        <name>StrtodFast</name>
        <qualifiedname>internal::StrtodFast</qualifiedname>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="113" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="113" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1aab0ac7e895939a3e117ec8e3395fd334" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool internal::StrtodDiyFp</definition>
        <argsstring>(const Ch *decimals, int dLen, int dExp, double *result)</argsstring>
        <name>StrtodDiyFp</name>
        <qualifiedname>internal::StrtodDiyFp</qualifiedname>
        <param>
          <type>const Ch *</type>
          <declname>decimals</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dLen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dExp</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="132" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="132" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1aa69b729bd9d047f70ba772424cfb65cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double internal::StrtodBigInteger</definition>
        <argsstring>(double approx, const Ch *decimals, int dLen, int dExp)</argsstring>
        <name>StrtodBigInteger</name>
        <qualifiedname>internal::StrtodBigInteger</qualifiedname>
        <param>
          <type>double</type>
          <declname>approx</declname>
        </param>
        <param>
          <type>const Ch *</type>
          <declname>decimals</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dLen</declname>
        </param>
        <param>
          <type>int</type>
          <declname>dExp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="210" column="15" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="210" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a6109c750ee4707d4f71de280816a1a00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type>double</type>
        <definition>double internal::StrtodFullPrecision</definition>
        <argsstring>(double d, int p, const Ch *decimals, size_t length, size_t decimalPosition, int exp)</argsstring>
        <name>StrtodFullPrecision</name>
        <qualifiedname>internal::StrtodFullPrecision</qualifiedname>
        <param>
          <type>double</type>
          <declname>d</declname>
        </param>
        <param>
          <type>int</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const Ch *</type>
          <declname>decimals</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>decimalPosition</declname>
        </param>
        <param>
          <type>int</type>
          <declname>exp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/strtod.h" line="229" column="15" bodyfile="src/rapidjson/include/rapidjson/internal/strtod.h" bodystart="229" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename <ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void internal::Swap</definition>
        <argsstring>(T &amp;a, T &amp;b) RAPIDJSON_NOEXCEPT</argsstring>
        <name>Swap</name>
        <qualifiedname>internal::Swap</qualifiedname>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="writertest_8cpp_1a16a0f7e7053a679c9bf4289b441a2be7" kindref="member">T</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Custom swap() to avoid dependency on C++ &lt;algorithm&gt; header. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Type of the arguments to swap, should be instantiated with primitive C++ types only. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This has the same semantics as std::swap(). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/internal/swap.h" line="33" column="13" bodyfile="src/rapidjson/include/rapidjson/internal/swap.h" bodystart="33" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/rapidjson/include/rapidjson/allocators.h" line="422" column="1"/>
  </compounddef>
</doxygen>
