<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="features_8zh-cn_8md" kind="file" language="Markdown">
    <compoundname>features.zh-cn.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>特点</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>总体</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>跨平台</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>编译器：Visual<sp/>Studio、gcc、clang<sp/>等</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>架构：x86、x64、ARM<sp/>等</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>操作系统：Windows、Mac<sp/>OS<sp/>X、Linux、iOS、Android<sp/>等</highlight></codeline>
<codeline><highlight class="normal">*<sp/>容易安装</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>只有头文件的库。只需把头文件复制至你的项目中。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>独立、最小依赖</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>不需依赖<sp/>STL、BOOST<sp/>等。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>只包含<sp/>`&lt;cstdio&gt;`,<sp/>`&lt;cstdlib&gt;`,<sp/>`&lt;cstring&gt;`,<sp/>`&lt;inttypes.h&gt;`,<sp/>`&lt;new&gt;`,<sp/>`&lt;stdint.h&gt;`。<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>没使用<sp/>C++<sp/>异常、RTTI</highlight></codeline>
<codeline><highlight class="normal">*<sp/>高性能</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>使用模版及内联函数去降低函数调用开销。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>内部经优化的<sp/>Grisu2<sp/>及浮点数解析实现。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>可选的<sp/>SSE2/SSE4.2<sp/>支持。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>符合标准</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>RapidJSON<sp/>应完全符合<sp/>RFC4627/ECMA-404<sp/>标准。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持<sp/>JSON<sp/>Pointer<sp/>(RFC6901).</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持<sp/>JSON<sp/>Schema<sp/>Draft<sp/>v4.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持<sp/>Unicode<sp/>代理对（surrogate<sp/>pair）。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持空字符（`&quot;\u0000&quot;`）。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>例如，可以优雅地解析及处理<sp/>`[&quot;Hello\u0000World&quot;]`。含读写字符串长度的<sp/>API。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持可选的放宽语法</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>单行（`//<sp/>...`）及多行（`/*<sp/>...<sp/>*/`）<sp/>注释<sp/>(`kParseCommentsFlag`)。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>在对象和数组结束前含逗号<sp/>(`kParseTrailingCommasFlag`)。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>`NaN`、`Inf`、`Infinity`、`-Inf`<sp/>及<sp/>`-Infinity`<sp/>作为<sp/>`double`<sp/>值<sp/>(`kParseNanAndInfFlag`)</highlight></codeline>
<codeline><highlight class="normal">*<sp/>[NPM<sp/>兼容](https://github.com/Tencent/rapidjson/blob/master/doc/npm.md).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Unicode</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>支持<sp/>UTF-8、UTF-16、UTF-32<sp/>编码，包括小端序和大端序。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>这些编码用于输入输出流，以及内存中的表示。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持从输入流自动检测编码。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>内部支持编码的转换。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>例如，你可以读取一个<sp/>UTF-8<sp/>文件，让<sp/>RapidJSON<sp/>把<sp/>JSON<sp/>字符串转换至<sp/>UTF-16<sp/>的<sp/>DOM。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>内部支持编码校验。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>例如，你可以读取一个<sp/>UTF-8<sp/>文件，让<sp/>RapidJSON<sp/>检查是否所有<sp/>JSON<sp/>字符串是合法的<sp/>UTF-8<sp/>字节序列。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持自定义的字符类型。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>预设的字符类型是：UTF-8<sp/>为<sp/>`char`，UTF-16<sp/>为<sp/>`wchar_t`，UTF32<sp/>为<sp/>`uint32_t`。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持自定义的编码。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>API<sp/>风格</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>SAX（Simple<sp/>API<sp/>for<sp/>XML）风格<sp/>API</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>类似于<sp/>[SAX](http://en.wikipedia.org/wiki/Simple_API_for_XML),<sp/>RapidJSON<sp/>提供一个事件循序访问的解析器<sp/>API（`rapidjson::GenericReader`）。RapidJSON<sp/>也提供一个生成器<sp/>API（`rapidjson::Writer`），可以处理相同的事件集合。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>DOM（Document<sp/>Object<sp/>Model）风格<sp/>API</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>类似于<sp/>HTML／XML<sp/>的<sp/>[DOM](http://en.wikipedia.org/wiki/Document_Object_Model)，RapidJSON<sp/>可把<sp/>JSON<sp/>解析至一个<sp/>DOM<sp/>表示方式（`rapidjson::GenericDocument`），以方便操作。如有需要，可把<sp/>DOM<sp/>转换（stringify）回<sp/>JSON。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>DOM<sp/>风格<sp/>API（`rapidjson::GenericDocument`）实际上是由<sp/>SAX<sp/>风格<sp/>API（`rapidjson::GenericReader`）实现的。SAX<sp/>更快，但有时<sp/>DOM<sp/>更易用。用户可根据情况作出选择。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>解析</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>递归式（预设）及迭代式解析器</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>递归式解析器较快，但在极端情况下可出现堆栈溢出。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>迭代式解析器使用自定义的堆栈去维持解析状态。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持原位（*in<sp/>situ*）解析。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>把<sp/>JSON<sp/>字符串的值解析至原<sp/>JSON<sp/>之中，然后让<sp/>DOM<sp/>指向那些字符串。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>比常规分析更快：不需字符串的内存分配、不需复制（如字符串不含转义符）、缓存友好。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>对于<sp/>JSON<sp/>数字类型，支持<sp/>32-bit/64-bit<sp/>的有号／无号整数，以及<sp/>`double`。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>错误处理</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>支持详尽的解析错误代号。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>支持本地化错误信息。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>DOM<sp/>(Document)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>RapidJSON<sp/>在类型转换时会检查数值的范围。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>字符串字面量的优化</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>只储存指针，不作复制</highlight></codeline>
<codeline><highlight class="normal">*<sp/>优化“短”字符串</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>在<sp/>`Value`<sp/>内储存短字符串，无需额外分配。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>对<sp/>UTF-8<sp/>字符串来说，32<sp/>位架构下可存储最多<sp/>11<sp/>字符，64<sp/>位下<sp/>21<sp/>字符（x86-64<sp/>下<sp/>13<sp/>字符）。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>可选地支持<sp/>`std::string`（定义<sp/>`RAPIDJSON_HAS_STDSTRING=1`）</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>生成</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>支持<sp/>`rapidjson::PrettyWriter`<sp/>去加入换行及缩进。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>输入输出流</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>支持<sp/>`rapidjson::GenericStringBuffer`，把输出的<sp/>JSON<sp/>储存于字符串内。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持<sp/>`rapidjson::FileReadStream`<sp/>及<sp/>`rapidjson::FileWriteStream`，使用<sp/>`FILE`<sp/>对象作输入输出。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持自定义输入输出流。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>内存</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>最小化<sp/>DOM<sp/>的内存开销。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>对大部分<sp/>32／64<sp/>位机器而言，每个<sp/>JSON<sp/>值只占<sp/>16<sp/>或<sp/>20<sp/>字节（不包含字符串）。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持快速的预设分配器。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>它是一个堆栈形式的分配器（顺序分配，不容许单独释放，适合解析过程之用）。</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>使用者也可提供一个预分配的缓冲区。（有可能达至无需<sp/>CRT<sp/>分配就能解析多个<sp/>JSON）</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持标准<sp/>CRT（C-runtime）分配器。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>支持自定义分配器。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>其他</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>一些<sp/>C++11<sp/>的支持（可选）</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>右值引用（rvalue<sp/>reference）</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>`noexcept`<sp/>修饰符</highlight></codeline>
<codeline><highlight class="normal"><sp/>*<sp/>范围<sp/>for<sp/>循环</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/doc/features.zh-cn.md"/>
  </compounddef>
</doxygen>
