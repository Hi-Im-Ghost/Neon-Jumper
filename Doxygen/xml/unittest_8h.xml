<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="unittest_8h" kind="file" language="C++">
    <compoundname>unittest.h</compoundname>
    <includes local="yes">gtest/gtest.h</includes>
    <includes local="no">stdexcept</includes>
    <includedby refid="allocatorstest_8cpp" local="yes">src/rapidjson/test/unittest/allocatorstest.cpp</includedby>
    <includedby refid="bigintegertest_8cpp" local="yes">src/rapidjson/test/unittest/bigintegertest.cpp</includedby>
    <includedby refid="clzlltest_8cpp" local="yes">src/rapidjson/test/unittest/clzlltest.cpp</includedby>
    <includedby refid="cursorstreamwrappertest_8cpp" local="yes">src/rapidjson/test/unittest/cursorstreamwrappertest.cpp</includedby>
    <includedby refid="documenttest_8cpp" local="yes">src/rapidjson/test/unittest/documenttest.cpp</includedby>
    <includedby refid="dtoatest_8cpp" local="yes">src/rapidjson/test/unittest/dtoatest.cpp</includedby>
    <includedby refid="encodedstreamtest_8cpp" local="yes">src/rapidjson/test/unittest/encodedstreamtest.cpp</includedby>
    <includedby refid="encodingstest_8cpp" local="yes">src/rapidjson/test/unittest/encodingstest.cpp</includedby>
    <includedby refid="filestreamtest_8cpp" local="yes">src/rapidjson/test/unittest/filestreamtest.cpp</includedby>
    <includedby refid="fwdtest_8cpp" local="yes">src/rapidjson/test/unittest/fwdtest.cpp</includedby>
    <includedby refid="istreamwrappertest_8cpp" local="yes">src/rapidjson/test/unittest/istreamwrappertest.cpp</includedby>
    <includedby refid="itoatest_8cpp" local="yes">src/rapidjson/test/unittest/itoatest.cpp</includedby>
    <includedby refid="jsoncheckertest_8cpp" local="yes">src/rapidjson/test/unittest/jsoncheckertest.cpp</includedby>
    <includedby refid="namespacetest_8cpp" local="yes">src/rapidjson/test/unittest/namespacetest.cpp</includedby>
    <includedby refid="ostreamwrappertest_8cpp" local="yes">src/rapidjson/test/unittest/ostreamwrappertest.cpp</includedby>
    <includedby refid="unittest_2platformtest_8cpp" local="yes">src/rapidjson/test/unittest/platformtest.cpp</includedby>
    <includedby refid="pointertest_8cpp" local="yes">src/rapidjson/test/unittest/pointertest.cpp</includedby>
    <includedby refid="prettywritertest_8cpp" local="yes">src/rapidjson/test/unittest/prettywritertest.cpp</includedby>
    <includedby refid="readertest_8cpp" local="yes">src/rapidjson/test/unittest/readertest.cpp</includedby>
    <includedby refid="regextest_8cpp" local="yes">src/rapidjson/test/unittest/regextest.cpp</includedby>
    <includedby refid="unittest_2schematest_8cpp" local="yes">src/rapidjson/test/unittest/schematest.cpp</includedby>
    <includedby refid="simdtest_8cpp" local="yes">src/rapidjson/test/unittest/simdtest.cpp</includedby>
    <includedby refid="strfunctest_8cpp" local="yes">src/rapidjson/test/unittest/strfunctest.cpp</includedby>
    <includedby refid="stringbuffertest_8cpp" local="yes">src/rapidjson/test/unittest/stringbuffertest.cpp</includedby>
    <includedby refid="strtodtest_8cpp" local="yes">src/rapidjson/test/unittest/strtodtest.cpp</includedby>
    <includedby refid="unittest_8cpp" local="yes">src/rapidjson/test/unittest/unittest.cpp</includedby>
    <includedby refid="uritest_8cpp" local="yes">src/rapidjson/test/unittest/uritest.cpp</includedby>
    <includedby refid="valuetest_8cpp" local="yes">src/rapidjson/test/unittest/valuetest.cpp</includedby>
    <includedby refid="writertest_8cpp" local="yes">src/rapidjson/test/unittest/writertest.cpp</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/rapidjson/test/unittest/unittest.h</label>
        <link refid="unittest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>gtest/gtest.h</label>
      </node>
      <node id="3">
        <label>stdexcept</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/rapidjson/test/unittest/allocatorstest.cpp</label>
        <link refid="allocatorstest_8cpp"/>
      </node>
      <node id="3">
        <label>src/rapidjson/test/unittest/bigintegertest.cpp</label>
        <link refid="bigintegertest_8cpp"/>
      </node>
      <node id="4">
        <label>src/rapidjson/test/unittest/clzlltest.cpp</label>
        <link refid="clzlltest_8cpp"/>
      </node>
      <node id="5">
        <label>src/rapidjson/test/unittest/cursorstreamwrappertest.cpp</label>
        <link refid="cursorstreamwrappertest_8cpp"/>
      </node>
      <node id="6">
        <label>src/rapidjson/test/unittest/documenttest.cpp</label>
        <link refid="documenttest_8cpp"/>
      </node>
      <node id="7">
        <label>src/rapidjson/test/unittest/dtoatest.cpp</label>
        <link refid="dtoatest_8cpp"/>
      </node>
      <node id="8">
        <label>src/rapidjson/test/unittest/encodedstreamtest.cpp</label>
        <link refid="encodedstreamtest_8cpp"/>
      </node>
      <node id="9">
        <label>src/rapidjson/test/unittest/encodingstest.cpp</label>
        <link refid="encodingstest_8cpp"/>
      </node>
      <node id="10">
        <label>src/rapidjson/test/unittest/filestreamtest.cpp</label>
        <link refid="filestreamtest_8cpp"/>
      </node>
      <node id="11">
        <label>src/rapidjson/test/unittest/fwdtest.cpp</label>
        <link refid="fwdtest_8cpp"/>
      </node>
      <node id="12">
        <label>src/rapidjson/test/unittest/istreamwrappertest.cpp</label>
        <link refid="istreamwrappertest_8cpp"/>
      </node>
      <node id="13">
        <label>src/rapidjson/test/unittest/itoatest.cpp</label>
        <link refid="itoatest_8cpp"/>
      </node>
      <node id="14">
        <label>src/rapidjson/test/unittest/jsoncheckertest.cpp</label>
        <link refid="jsoncheckertest_8cpp"/>
      </node>
      <node id="15">
        <label>src/rapidjson/test/unittest/namespacetest.cpp</label>
        <link refid="namespacetest_8cpp"/>
      </node>
      <node id="16">
        <label>src/rapidjson/test/unittest/ostreamwrappertest.cpp</label>
        <link refid="ostreamwrappertest_8cpp"/>
      </node>
      <node id="17">
        <label>src/rapidjson/test/unittest/platformtest.cpp</label>
        <link refid="unittest_2platformtest_8cpp"/>
      </node>
      <node id="18">
        <label>src/rapidjson/test/unittest/pointertest.cpp</label>
        <link refid="pointertest_8cpp"/>
      </node>
      <node id="19">
        <label>src/rapidjson/test/unittest/prettywritertest.cpp</label>
        <link refid="prettywritertest_8cpp"/>
      </node>
      <node id="20">
        <label>src/rapidjson/test/unittest/readertest.cpp</label>
        <link refid="readertest_8cpp"/>
      </node>
      <node id="21">
        <label>src/rapidjson/test/unittest/regextest.cpp</label>
        <link refid="regextest_8cpp"/>
      </node>
      <node id="22">
        <label>src/rapidjson/test/unittest/schematest.cpp</label>
        <link refid="unittest_2schematest_8cpp"/>
      </node>
      <node id="23">
        <label>src/rapidjson/test/unittest/simdtest.cpp</label>
        <link refid="simdtest_8cpp"/>
      </node>
      <node id="24">
        <label>src/rapidjson/test/unittest/strfunctest.cpp</label>
        <link refid="strfunctest_8cpp"/>
      </node>
      <node id="25">
        <label>src/rapidjson/test/unittest/stringbuffertest.cpp</label>
        <link refid="stringbuffertest_8cpp"/>
      </node>
      <node id="26">
        <label>src/rapidjson/test/unittest/strtodtest.cpp</label>
        <link refid="strtodtest_8cpp"/>
      </node>
      <node id="27">
        <label>src/rapidjson/test/unittest/unittest.cpp</label>
        <link refid="unittest_8cpp"/>
      </node>
      <node id="1">
        <label>src/rapidjson/test/unittest/unittest.h</label>
        <link refid="unittest_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>src/rapidjson/test/unittest/uritest.cpp</label>
        <link refid="uritest_8cpp"/>
      </node>
      <node id="29">
        <label>src/rapidjson/test/unittest/valuetest.cpp</label>
        <link refid="valuetest_8cpp"/>
      </node>
      <node id="30">
        <label>src/rapidjson/test/unittest/writertest.cpp</label>
        <link refid="writertest_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="class_assert_exception" prot="public">AssertException</innerclass>
    <innerclass refid="class_random" prot="public">Random</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="unittest_8h_1a786132414c30f947907be33a4c28125a" prot="public" static="no">
        <name>__STDC_CONSTANT_MACROS</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="27" column="11" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unittest_8h_1a7aca4eff4695749d674154ddd2fd1d2e" prot="public" static="no">
        <name>RAPIDJSON_HAS_CXX11_NOEXCEPT</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="121" column="9" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unittest_8h_1abeba18d612187bad2ac62aed9276d47c" prot="public" static="no">
        <name>RAPIDJSON_ASSERT</name>
        <param><defname>x</defname></param>
        <initializer>(!(x) ? throw <ref refid="class_assert_exception" kindref="compound">AssertException</ref>(RAPIDJSON_STRINGIFY(x)) : (void)0u)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="124" column="9" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="unittest_8h_1ae31755b00c035016af65346934c194de" prot="public" static="no">
        <name>RAPIDJSON_ASSERT_THROWS</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="126" column="9" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="unittest_8h_1a158bf1a4953297866644112d81a7a3e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type>unsigned</type>
        <definition>unsigned StrLen</definition>
        <argsstring>(const Ch *s)</argsstring>
        <name>StrLen</name>
        <param>
          <type>const Ch *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="60" column="17" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="60" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="unittest_8h_1a8d8e3cf93e9b811c207711d0b353de02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type>int</type>
        <definition>int StrCmp</definition>
        <argsstring>(const Ch *s1, const Ch *s2)</argsstring>
        <name>StrCmp</name>
        <param>
          <type>const Ch *</type>
          <declname>s1</declname>
        </param>
        <param>
          <type>const Ch *</type>
          <declname>s2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="67" column="12" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="unittest_8h_1a0b8e1bafb97ad4a272c5cc4469a13687" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Ch</type>
          </param>
        </templateparamlist>
        <type>Ch *</type>
        <definition>Ch * StrDup</definition>
        <argsstring>(const Ch *str)</argsstring>
        <name>StrDup</name>
        <param>
          <type>const Ch *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="73" column="11" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="73" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="unittest_8h_1acb6251ae9b44050f1fcabf8d3c2e792b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>FILE *</type>
        <definition>FILE * TempFile</definition>
        <argsstring>(char *filename)</argsstring>
        <name>TempFile</name>
        <param>
          <type>char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/unittest.h" line="80" column="13" bodyfile="src/rapidjson/test/unittest/unittest.h" bodystart="80" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>UNITTEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNITTEST_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>gtest<sp/>indirectly<sp/>included<sp/>inttypes.h,<sp/>without<sp/>__STDC_CONSTANT_MACROS.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__STDC_CONSTANT_MACROS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_warning(&quot;-Wreserved-id-macro&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wreserved-id-macro&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="unittest_8h_1a786132414c30f947907be33a4c28125a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>__STDC_CONSTANT_MACROS<sp/>1<sp/></highlight><highlight class="comment">//<sp/>required<sp/>by<sp/>C++<sp/>standard</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_CRTDBG_MAP_ALLOC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;crtdbg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4996)<sp/></highlight><highlight class="comment">//<sp/>&apos;function&apos;:<sp/>was<sp/>declared<sp/>deprecated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Weffc++&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gtest/gtest.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(__GNUC__)<sp/>&amp;&amp;<sp/>(__GNUC__<sp/>&gt;<sp/>4<sp/>||<sp/>(__GNUC__<sp/>==<sp/>4<sp/>&amp;&amp;<sp/>__GNUC_MINOR__<sp/>&gt;=<sp/>6))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>TEST()<sp/>macro<sp/>generated<sp/>this<sp/>warning,<sp/>disable<sp/>globally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wglobal-constructors&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ch&gt;</highlight></codeline>
<codeline lineno="60" refid="unittest_8h_1a158bf1a4953297866644112d81a7a3e7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="unittest_8h_1a158bf1a4953297866644112d81a7a3e7" kindref="member">StrLen</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>p<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*p)<sp/>p++;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unsigned(p<sp/>-<sp/>s);</highlight></codeline>
<codeline lineno="64"><highlight class="normal">}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ch&gt;</highlight></codeline>
<codeline lineno="67" refid="unittest_8h_1a8d8e3cf93e9b811c207711d0b353de02" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="unittest_8h_1a8d8e3cf93e9b811c207711d0b353de02" kindref="member">StrCmp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>s2)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(*s1<sp/>&amp;&amp;<sp/>(*s1<sp/>==<sp/>*s2))<sp/>{<sp/>s1++;<sp/>s2++;<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*s1)<sp/>&lt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*s2)<sp/>?<sp/>-1<sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*s1)<sp/>&gt;<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*s2);</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ch&gt;</highlight></codeline>
<codeline lineno="73" refid="unittest_8h_1a0b8e1bafb97ad4a272c5cc4469a13687" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>Ch*<sp/><ref refid="unittest_8h_1a0b8e1bafb97ad4a272c5cc4469a13687" kindref="member">StrDup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ch*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bufferSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Ch)<sp/>*<sp/>(<ref refid="unittest_8h_1a158bf1a4953297866644112d81a7a3e7" kindref="member">StrLen</ref>(str)<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>Ch*<sp/>buffer<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">Ch*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(bufferSize));</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buffer,<sp/>str,<sp/>bufferSize);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="unittest_8h_1acb6251ae9b44050f1fcabf8d3c2e792b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>FILE*<sp/><ref refid="unittest_8h_1acb6251ae9b44050f1fcabf8d3c2e792b" kindref="member">TempFile</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*filename)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__WIN32__)<sp/>||<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>filename<sp/>=<sp/>tmpnam(filename);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>Visual<sp/>Studio,<sp/>tmpnam()<sp/>adds<sp/>a<sp/>backslash<sp/>in<sp/>front.<sp/>Remove<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(filename[0]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\\&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>filename[i]<sp/>!=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>i++)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>filename[i]<sp/>=<sp/>filename[i<sp/>+<sp/>1];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;wb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(filename,<sp/></highlight><highlight class="stringliteral">&quot;/tmp/fileXXXXXX&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd<sp/>=<sp/>mkstemp(filename);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fdopen(fd,<sp/></highlight><highlight class="stringliteral">&quot;w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>exception<sp/>for<sp/>catching<sp/>assert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4127)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__has_warning(&quot;-Wdeprecated&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wdeprecated&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="class_assert_exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_assert_exception" kindref="compound">AssertException</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::logic_error<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111" refid="class_assert_exception_1ac95b6779576904bf5932c1f7e72300c6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_assert_exception_1ac95b6779576904bf5932c1f7e72300c6" kindref="member">AssertException</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>w)<sp/>:<sp/>std::logic_error(w)<sp/>{}</highlight></codeline>
<codeline lineno="112" refid="class_assert_exception_1a1a5812bbbb81bd04d4352e3413a5946f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_assert_exception_1a1a5812bbbb81bd04d4352e3413a5946f" kindref="member">AssertException</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>&amp;<sp/>rhs)<sp/>:<sp/>std::logic_error(rhs)<sp/>{}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="class_assert_exception_1aba869a44de1c69d593d16d39039bd35c" kindref="member">~AssertException</ref>()<sp/>throw();</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Not<sp/>using<sp/>noexcept<sp/>for<sp/>testing<sp/>RAPIDJSON_ASSERT()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="unittest_8h_1a7aca4eff4695749d674154ddd2fd1d2e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAPIDJSON_HAS_CXX11_NOEXCEPT<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_ASSERT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124" refid="unittest_8h_1abeba18d612187bad2ac62aed9276d47c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAPIDJSON_ASSERT(x)<sp/>(!(x)<sp/>?<sp/>throw<sp/>AssertException(RAPIDJSON_STRINGIFY(x))<sp/>:<sp/>(void)0u)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_ASSERT_THROWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="unittest_8h_1ae31755b00c035016af65346934c194de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAPIDJSON_ASSERT_THROWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="class_random" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_random" kindref="compound">Random</ref><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132" refid="class_random_1a17f563fcd03a81b31057b71b0bdcbcdb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_random_1a17f563fcd03a81b31057b71b0bdcbcdb" kindref="member">Random</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>0)<sp/>:<sp/>mSeed(seed)<sp/>{}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134" refid="class_random_1a881e9afda6dd041defbf4473a28bcb56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="class_random_1a881e9afda6dd041defbf4473a28bcb56" kindref="member">operator()</ref>()<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSeed<sp/>=<sp/>214013<sp/>*<sp/>mSeed<sp/>+<sp/>2531011;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mSeed;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="140" refid="class_random_1a3b1ec5192bc8f14fb26ec2a9341c679a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="class_random_1a3b1ec5192bc8f14fb26ec2a9341c679a" kindref="member">mSeed</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>UNITTEST_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/test/unittest/unittest.h"/>
  </compounddef>
</doxygen>
