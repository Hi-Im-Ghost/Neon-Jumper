<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="schema_8zh-cn_8md" kind="file" language="Markdown">
    <compoundname>schema.zh-cn.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Schema</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">（本功能于<sp/>v1.1.0<sp/>发布）</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">JSON<sp/>Schema<sp/>是描述<sp/>JSON<sp/>格式的一个标准草案。一个<sp/>schema<sp/>本身也是一个<sp/>JSON。使用<sp/>JSON<sp/>Schema<sp/>去校验<sp/>JSON，可以让你的代码安全地访问<sp/>DOM，而无须检查类型或键值是否存在等。这也能确保输出的<sp/>JSON<sp/>是符合指定的<sp/>schema。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RapidJSON<sp/>实现了一个<sp/>[JSON<sp/>Schema<sp/>Draft<sp/>v4](http://json-schema.org/documentation.html)<sp/>的校验器。若你不熟悉<sp/>JSON<sp/>Schema，可以参考<sp/>[Understanding<sp/>JSON<sp/>Schema](http://spacetelescope.github.io/understanding-json-schema/)。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[TOC]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>基本用法<sp/>{#BasicUsage}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">首先，你要把<sp/>JSON<sp/>Schema<sp/>解析成<sp/>`Document`，再把它编译成一个<sp/>`SchemaDocument`。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">然后，利用该<sp/>`SchemaDocument`<sp/>创建一个<sp/>`SchemaValidator`。它与<sp/>`Writer`<sp/>相似，都是能够处理<sp/>SAX<sp/>事件的。因此，你可以用<sp/>`document.Accept(validator)`<sp/>去校验一个<sp/>JSON，然后再获取校验结果。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rapidjson/schema.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Document<sp/>sd;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(sd.Parse(schemaJson).HasParseError())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>此<sp/>schema<sp/>不是合法的<sp/>JSON</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">SchemaDocument<sp/>schema(sd);<sp/>//<sp/>把一个<sp/>Document<sp/>编译至<sp/>SchemaDocument</highlight></codeline>
<codeline><highlight class="normal">//<sp/>之后不再需要<sp/>sd</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Document<sp/>d;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(d.Parse(inputJson).HasParseError())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>输入不是一个合法的<sp/>JSON</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>...<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">SchemaValidator<sp/>validator(schema);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!d.Accept(validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>输入的<sp/>JSON<sp/>不合乎<sp/>schema</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>打印诊断信息</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>StringBuffer<sp/>sb;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>validator.GetInvalidSchemaPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Invalid<sp/>schema:<sp/>%s\n&quot;,<sp/>sb.GetString());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Invalid<sp/>keyword:<sp/>%s\n&quot;,<sp/>validator.GetInvalidSchemaKeyword());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>sb.Clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>validator.GetInvalidDocumentPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>printf(&quot;Invalid<sp/>document:<sp/>%s\n&quot;,<sp/>sb.GetString());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">一些注意点：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>一个<sp/>`SchemaDocment`<sp/>能被多个<sp/>`SchemaValidator`<sp/>引用。它不会被<sp/>`SchemaValidator`<sp/>修改。</highlight></codeline>
<codeline><highlight class="normal">*<sp/>可以重复使用一个<sp/>`SchemaValidator`<sp/>来校验多个文件。在校验其他文件前，须先调用<sp/>`validator.Reset()`。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>在解析／生成时进行校验<sp/>{#ParsingSerialization}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">与大部分<sp/>JSON<sp/>Schema<sp/>校验器有所不同，RapidJSON<sp/>提供了一个基于<sp/>SAX<sp/>的<sp/>schema<sp/>校验器实现。因此，你可以在输入流解析<sp/>JSON<sp/>的同时进行校验。若校验器遇到一个与<sp/>schema<sp/>不符的值，就会立即终止解析。这设计对于解析大型<sp/>JSON<sp/>文件时特别有用。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>DOM<sp/>解析<sp/>{#DomParsing}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在使用<sp/>DOM<sp/>进行解析时，`Document`<sp/>除了接收<sp/>SAX<sp/>事件外，还需做一些准备及结束工作，因此，为了连接<sp/>`Reader`、`SchemaValidator`<sp/>和<sp/>`Document`<sp/>要做多一点事情。`SchemaValidatingReader`<sp/>是一个辅助类去做那些工作。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&quot;rapidjson/filereadstream.h&quot;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline><highlight class="normal">SchemaDocument<sp/>schema(sd);<sp/>//<sp/>把一个<sp/>Document<sp/>编译至<sp/>SchemaDocument</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>使用<sp/>reader<sp/>解析<sp/>JSON</highlight></codeline>
<codeline><highlight class="normal">FILE*<sp/>fp<sp/>=<sp/>fopen(&quot;big.json&quot;,<sp/>&quot;r&quot;);</highlight></codeline>
<codeline><highlight class="normal">FileReadStream<sp/>is(fp,<sp/>buffer,<sp/>sizeof(buffer));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>用<sp/>reader<sp/>解析<sp/>JSON，校验它的<sp/>SAX<sp/>事件，并存储至<sp/>d</highlight></codeline>
<codeline><highlight class="normal">Document<sp/>d;</highlight></codeline>
<codeline><highlight class="normal">SchemaValidatingReader&lt;kParseDefaultFlags,<sp/>FileReadStream,<sp/>UTF8&lt;&gt;<sp/>&gt;<sp/>reader(is,<sp/>schema);</highlight></codeline>
<codeline><highlight class="normal">d.Populate(reader);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">if<sp/>(!reader.GetParseResult())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>不是一个合法的<sp/>JSON</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>当<sp/>reader.GetParseResult().Code()<sp/>==<sp/>kParseErrorTermination,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>它可能是被以下原因中止：</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(1)<sp/>校验器发现<sp/>JSON<sp/>不合乎<sp/>schema；或</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>(2)<sp/>输入流有<sp/>I/O<sp/>错误。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>检查校验结果</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!reader.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>输入的<sp/>JSON<sp/>不合乎<sp/>schema</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>打印诊断信息</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBuffer<sp/>sb;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.GetInvalidSchemaPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Invalid<sp/>schema:<sp/>%s\n&quot;,<sp/>sb.GetString());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Invalid<sp/>keyword:<sp/>%s\n&quot;,<sp/>reader.GetInvalidSchemaKeyword());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sb.Clear();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader.GetInvalidDocumentPointer().StringifyUriFragment(sb);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(&quot;Invalid<sp/>document:<sp/>%s\n&quot;,<sp/>sb.GetString());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>SAX<sp/>解析<sp/>{#SaxParsing}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">使用<sp/>SAX<sp/>解析时，情况就简单得多。若只需要校验<sp/>JSON<sp/>而无需进一步处理，那么仅需要：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline><highlight class="normal">SchemaValidator<sp/>validator(schema);</highlight></codeline>
<codeline><highlight class="normal">Reader<sp/>reader;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!reader.Parse(stream,<sp/>validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!validator.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">这种方式和<sp/>[schemavalidator](example/schemavalidator/schemavalidator.cpp)<sp/>例子完全相同。这带来的独特优势是，无论<sp/>JSON<sp/>多巨大，永远维持低内存用量（内存用量只与<sp/>Schema<sp/>的复杂度相关）。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">若你需要进一步处理<sp/>SAX<sp/>事件，便可使用模板类<sp/>`GenericSchemaValidator`<sp/>去设置校验器的输出<sp/>`Handler`：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline><highlight class="normal">MyHandler<sp/>handler;</highlight></codeline>
<codeline><highlight class="normal">GenericSchemaValidator&lt;SchemaDocument,<sp/>MyHandler&gt;<sp/>validator(schema,<sp/>handler);</highlight></codeline>
<codeline><highlight class="normal">Reader<sp/>reader;</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!reader.Parse(ss,<sp/>validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!validator.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>生成<sp/>{#Serialization}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">我们也可以在生成（serialization）的时候进行校验。这能确保输出的<sp/>JSON<sp/>符合一个<sp/>JSON<sp/>Schema。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline><highlight class="normal">StringBuffer<sp/>sb;</highlight></codeline>
<codeline><highlight class="normal">Writer&lt;StringBuffer&gt;<sp/>writer(sb);</highlight></codeline>
<codeline><highlight class="normal">GenericSchemaValidator&lt;SchemaDocument,<sp/>Writer&lt;StringBuffer&gt;<sp/>&gt;<sp/>validator(s,<sp/>writer);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(!d.Accept(validator))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Some<sp/>problem<sp/>during<sp/>Accept(),<sp/>it<sp/>may<sp/>be<sp/>validation<sp/>or<sp/>encoding<sp/>issues.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(!validator.IsValid())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>...</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">当然，如果你的应用仅需要<sp/>SAX<sp/>风格的生成，那么只需要把<sp/>SAX<sp/>事件由原来发送到<sp/>`Writer`，改为发送到<sp/>`SchemaValidator`。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>远程<sp/>Schema<sp/>{#RemoteSchema}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">JSON<sp/>Schema<sp/>支持<sp/>[`$ref`<sp/>关键字](http://spacetelescope.github.io/understanding-json-schema/structuring.html)，它是一个<sp/>[JSON<sp/>pointer](doc/pointer.zh-cn.md)<sp/>引用至一个本地（local）或远程（remote）<sp/>schema。本地指针的首字符是<sp/>`#`，而远程指针是一个相对或绝对<sp/>URI。例如：</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~js</highlight></codeline>
<codeline><highlight class="normal">{<sp/>&quot;$ref&quot;:<sp/>&quot;definitions.json#/address&quot;<sp/>}</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">由于<sp/>`SchemaDocument`<sp/>并不知道如何处理那些<sp/>URI，它需要使用者提供一个<sp/>`IRemoteSchemaDocumentProvider`<sp/>的实例去处理。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline><highlight class="normal">class<sp/>MyRemoteSchemaDocumentProvider<sp/>:<sp/>public<sp/>IRemoteSchemaDocumentProvider<sp/>{</highlight></codeline>
<codeline><highlight class="normal">public:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>virtual<sp/>const<sp/>SchemaDocument*<sp/>GetRemoteDocument(const<sp/>char*<sp/>uri,<sp/>SizeType<sp/>length)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Resolve<sp/>the<sp/>uri<sp/>and<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>that<sp/>schema.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>...</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">MyRemoteSchemaDocumentProvider<sp/>provider;</highlight></codeline>
<codeline><highlight class="normal">SchemaDocument<sp/>schema(sd,<sp/>&amp;provider);</highlight></codeline>
<codeline><highlight class="normal">~~~</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>标准的符合程度<sp/>{#Conformance}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RapidJSON<sp/>通过了<sp/>[JSON<sp/>Schema<sp/>Test<sp/>Suite](https://github.com/json-schema/JSON-Schema-Test-Suite)<sp/>(Json<sp/>Schema<sp/>draft<sp/>4)<sp/>中<sp/>263<sp/>个测试的<sp/>262<sp/>个。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">没通过的测试是<sp/>`refRemote.json`<sp/>中的<sp/>&quot;change<sp/>resolution<sp/>scope&quot;<sp/>-<sp/>&quot;changed<sp/>scope<sp/>ref<sp/>invalid&quot;。这是由于未实现<sp/>`id`<sp/>schema<sp/>关键字及<sp/>URI<sp/>合并功能。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">除此以外，关于字符串类型的<sp/>`format`<sp/>schema<sp/>关键字也会被忽略，因为标准中并没需求必须实现。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>正则表达式<sp/>{#RegEx}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`pattern`<sp/>及<sp/>`patternProperties`<sp/>这两个<sp/>schema<sp/>关键字使用了正则表达式去匹配所需的模式。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">RapidJSON<sp/>实现了一个简单的<sp/>NFA<sp/>正则表达式引擎，并预设使用。它支持以下语法。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|语法|描述|</highlight></codeline>
<codeline><highlight class="normal">|------|-----------|</highlight></codeline>
<codeline><highlight class="normal">|`ab`<sp/><sp/><sp/><sp/>|<sp/>串联<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|&lt;code&gt;a&amp;#124;b&lt;/code&gt;<sp/><sp/><sp/>|<sp/>交替<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`a?`<sp/><sp/><sp/><sp/>|<sp/>零或一次<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`a*`<sp/><sp/><sp/><sp/>|<sp/>零或多次<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`a+`<sp/><sp/><sp/><sp/>|<sp/>一或多次<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`a{3}`<sp/><sp/>|<sp/>刚好<sp/>3<sp/>次<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`a{3,}`<sp/>|<sp/>至少<sp/>3<sp/>次<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`a{3,5}`|<sp/>3<sp/>至<sp/>5<sp/>次<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`(ab)`<sp/><sp/>|<sp/>分组<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`^a`<sp/><sp/><sp/><sp/>|<sp/>在开始处<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`a$`<sp/><sp/><sp/><sp/>|<sp/>在结束处<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`.`<sp/><sp/><sp/><sp/><sp/>|<sp/>任何字符<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`[abc]`<sp/>|<sp/>字符组<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`[a-c]`<sp/>|<sp/>字符组范围<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`[a-z0-9_]`<sp/>|<sp/>字符组组合<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`[^abc]`<sp/>|<sp/>字符组取反<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`[^a-c]`<sp/>|<sp/>字符组范围取反<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`[\b]`<sp/><sp/><sp/>|<sp/>退格符<sp/>(U+0008)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|&lt;code&gt;\\&amp;#124;&lt;/code&gt;,<sp/>`\\`,<sp/>...<sp/><sp/>|<sp/>转义字符<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`\f`<sp/>|<sp/>馈页<sp/>(U+000C)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`\n`<sp/>|<sp/>馈行<sp/>(U+000A)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`\r`<sp/>|<sp/>回车<sp/>(U+000D)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`\t`<sp/>|<sp/>制表<sp/>(U+0009)<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|`\v`<sp/>|<sp/>垂直制表<sp/>(U+000B)<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">对于使用<sp/>C++11<sp/>编译器的使用者，也可使用<sp/>`std::regex`，只需定义<sp/>`RAPIDJSON_SCHEMA_USE_INTERNALREGEX=0`<sp/>及<sp/>`RAPIDJSON_SCHEMA_USE_STDREGEX=1`。若你的<sp/>schema<sp/>无需使用<sp/>`pattern`<sp/>或<sp/>`patternProperties`，可以把两个宏都设为零，以禁用此功能，这样做可节省一些代码体积。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>性能<sp/>{#Performance}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">大部分<sp/>C++<sp/>JSON<sp/>库都未支持<sp/>JSON<sp/>Schema。因此我们尝试按照<sp/>[json-schema-benchmark](https://github.com/ebdrup/json-schema-benchmark)<sp/>去评估<sp/>RapidJSON<sp/>的<sp/>JSON<sp/>Schema<sp/>校验器。该评测测试了<sp/>11<sp/>个运行在<sp/>node.js<sp/>上的<sp/>JavaScript<sp/>库。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">该评测校验<sp/>[JSON<sp/>Schema<sp/>Test<sp/>Suite](https://github.com/json-schema/JSON-Schema-Test-Suite)<sp/>中的测试，当中排除了一些测试套件及个别测试。我们在<sp/>[`schematest.cpp`](test/perftest/schematest.cpp)<sp/>实现了相同的评测。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">在<sp/>MacBook<sp/>Pro<sp/>(2.8<sp/>GHz<sp/>Intel<sp/>Core<sp/>i7)<sp/>上收集到以下结果。</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|校验器|相对速度|每秒执行的测试数目|</highlight></codeline>
<codeline><highlight class="normal">|---------|:------------:|:----------------------------:|</highlight></codeline>
<codeline><highlight class="normal">|RapidJSON|155%|30682|</highlight></codeline>
<codeline><highlight class="normal">|[`ajv`](https://github.com/epoberezkin/ajv)|100%|19770<sp/>(±<sp/>1.31%)|</highlight></codeline>
<codeline><highlight class="normal">|[`is-my-json-valid`](https://github.com/mafintosh/is-my-json-valid)|70%|13835<sp/>(±<sp/>2.84%)|</highlight></codeline>
<codeline><highlight class="normal">|[`jsen`](https://github.com/bugventure/jsen)|57.7%|11411<sp/>(±<sp/>1.27%)|</highlight></codeline>
<codeline><highlight class="normal">|[`schemasaurus`](https://github.com/AlexeyGrishin/schemasaurus)|26%|5145<sp/>(±<sp/>1.62%)|</highlight></codeline>
<codeline><highlight class="normal">|[`themis`](https://github.com/playlyfe/themis)|19.9%|3935<sp/>(±<sp/>2.69%)|</highlight></codeline>
<codeline><highlight class="normal">|[`z-schema`](https://github.com/zaggino/z-schema)|7%|1388<sp/>(±<sp/>0.84%)|</highlight></codeline>
<codeline><highlight class="normal">|[`jsck`](https://github.com/pandastrike/jsck#readme)|3.1%|606<sp/>(±<sp/>2.84%)|</highlight></codeline>
<codeline><highlight class="normal">|[`jsonschema`](https://github.com/tdegrunt/jsonschema#readme)|0.9%|185<sp/>(±<sp/>1.01%)|</highlight></codeline>
<codeline><highlight class="normal">|[`skeemas`](https://github.com/Prestaul/skeemas#readme)|0.8%|154<sp/>(±<sp/>0.79%)|</highlight></codeline>
<codeline><highlight class="normal">|tv4|0.5%|93<sp/>(±<sp/>0.94%)|</highlight></codeline>
<codeline><highlight class="normal">|[`jayschema`](https://github.com/natesilva/jayschema)|0.1%|21<sp/>(±<sp/>1.14%)|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">换言之，RapidJSON<sp/>比最快的<sp/>JavaScript<sp/>库（ajv）快约<sp/>1.5x。比最慢的快<sp/>1400x。</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/doc/schema.zh-cn.md"/>
  </compounddef>
</doxygen>
