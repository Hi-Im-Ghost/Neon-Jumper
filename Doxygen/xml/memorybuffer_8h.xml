<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="memorybuffer_8h" kind="file" language="C++">
    <compoundname>memorybuffer.h</compoundname>
    <includes refid="stream_8h" local="yes">stream.h</includes>
    <includes refid="stack_8h" local="yes">internal/stack.h</includes>
    <includedby refid="encodedstreamtest_8cpp" local="yes">src/rapidjson/test/unittest/encodedstreamtest.cpp</includedby>
    <includedby refid="fwdtest_8cpp" local="yes">src/rapidjson/test/unittest/fwdtest.cpp</includedby>
    <includedby refid="writertest_8cpp" local="yes">src/rapidjson/test/unittest/writertest.cpp</includedby>
    <incdepgraph>
      <node id="9">
        <label>../allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/include/rapidjson/memorybuffer.h</label>
        <link refid="memorybuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>cassert</label>
      </node>
      <node id="13">
        <label>cstddef</label>
      </node>
      <node id="4">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>cstring</label>
      </node>
      <node id="11">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/rapidjson/include/rapidjson/memorybuffer.h</label>
        <link refid="memorybuffer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/rapidjson/test/unittest/encodedstreamtest.cpp</label>
        <link refid="encodedstreamtest_8cpp"/>
      </node>
      <node id="3">
        <label>src/rapidjson/test/unittest/fwdtest.cpp</label>
        <link refid="fwdtest_8cpp"/>
      </node>
      <node id="4">
        <label>src/rapidjson/test/unittest/writertest.cpp</label>
        <link refid="writertest_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_generic_memory_buffer" prot="public">GenericMemoryBuffer</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="memorybuffer_8h_1aad74f4c6994a951097a63ee117039085" prot="public" static="no">
        <type><ref refid="struct_generic_memory_buffer" kindref="compound">GenericMemoryBuffer</ref></type>
        <definition>typedef GenericMemoryBuffer MemoryBuffer</definition>
        <argsstring></argsstring>
        <name>MemoryBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/memorybuffer.h" line="60" column="10" bodyfile="src/rapidjson/include/rapidjson/memorybuffer.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="memorybuffer_8h_1a635d8eaaf48777150dc08f7d5a8be054" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void PutN</definition>
        <argsstring>(MemoryBuffer &amp;memoryBuffer, char c, size_t n)</argsstring>
        <name>PutN</name>
        <param>
          <type><ref refid="fwd_8h_1a611aeb4e5d606f0b099c6408fd8e8e4d" kindref="member">MemoryBuffer</ref> &amp;</type>
          <declname>memoryBuffer</declname>
        </param>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>Implement specialized version of <ref refid="memorybuffer_8h_1a635d8eaaf48777150dc08f7d5a8be054" kindref="member">PutN()</ref> with memset() for better performance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/include/rapidjson/memorybuffer.h" line="64" column="13" bodyfile="src/rapidjson/include/rapidjson/memorybuffer.h" bodystart="64" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>RAPIDJSON_MEMORYBUFFER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RAPIDJSON_MEMORYBUFFER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stream_8h" kindref="compound">stream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack_8h" kindref="compound">internal/stack.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gad3806c8251fdc7da9618b7e922674ffc" kindref="member">RAPIDJSON_NAMESPACE_BEGIN</ref></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>CrtAllocator&gt;</highlight></codeline>
<codeline lineno="37" refid="struct_generic_memory_buffer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_generic_memory_buffer" kindref="compound">GenericMemoryBuffer</ref><sp/>{</highlight></codeline>
<codeline lineno="38" refid="struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f" kindref="member">Ch</ref>;<sp/></highlight><highlight class="comment">//<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="struct_generic_memory_buffer_1ad08f7da47bca43fcdb0c3b10e22dfa1d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_memory_buffer_1ad08f7da47bca43fcdb0c3b10e22dfa1d" kindref="member">GenericMemoryBuffer</ref>(<ref refid="classrapidjson_1_1_allocator" kindref="compound">Allocator</ref>*<sp/>allocator<sp/>=<sp/>0,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>capacity<sp/>=<sp/><ref refid="struct_generic_memory_buffer_1af6ecdbdbb8d3aa53cdef6e788e4980be" kindref="member">kDefaultCapacity</ref>)<sp/>:<sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>(allocator,<sp/>capacity)<sp/>{}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="struct_generic_memory_buffer_1a9dfb477983e211893601f8ab637b42d8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a9dfb477983e211893601f8ab637b42d8" kindref="member">Put</ref>(<ref refid="struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f" kindref="member">Ch</ref><sp/>c)<sp/>{<sp/>*<ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.template<sp/>Push&lt;Ch&gt;()<sp/>=<sp/>c;<sp/>}</highlight></codeline>
<codeline lineno="43" refid="struct_generic_memory_buffer_1a9861181cab6f5bec2ec08b601aa53575" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a9861181cab6f5bec2ec08b601aa53575" kindref="member">Flush</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="struct_generic_memory_buffer_1a036cbe2556778e1edc525602a9821df2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a036cbe2556778e1edc525602a9821df2" kindref="member">Clear</ref>()<sp/>{<sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.Clear();<sp/>}</highlight></codeline>
<codeline lineno="46" refid="struct_generic_memory_buffer_1a3b87deb9bf34c394c8fb262ab53c0c4b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a3b87deb9bf34c394c8fb262ab53c0c4b" kindref="member">ShrinkToFit</ref>()<sp/>{<sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.ShrinkToFit();<sp/>}</highlight></codeline>
<codeline lineno="47" refid="struct_generic_memory_buffer_1a1455475eba731dc0ce2816c70c775359" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f" kindref="member">Ch</ref>*<sp/><ref refid="struct_generic_memory_buffer_1a1455475eba731dc0ce2816c70c775359" kindref="member">Push</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.template<sp/>Push&lt;Ch&gt;(count);<sp/>}</highlight></codeline>
<codeline lineno="48" refid="struct_generic_memory_buffer_1a82a6706286f1356e1769282f5d496005" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a82a6706286f1356e1769282f5d496005" kindref="member">Pop</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count)<sp/>{<sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.template<sp/>Pop&lt;Ch&gt;(count);<sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="struct_generic_memory_buffer_1a65217e77ae6d4c249c16360c24854411" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a212f137abfd8bce2ad216b2d960c027f" kindref="member">Ch</ref>*<sp/><ref refid="struct_generic_memory_buffer_1a65217e77ae6d4c249c16360c24854411" kindref="member">GetBuffer</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.template<sp/>Bottom&lt;Ch&gt;();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="struct_generic_memory_buffer_1aaab1f18d03109ab01213d3e3d8368ff9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1aaab1f18d03109ab01213d3e3d8368ff9" kindref="member">GetSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.GetSize();<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="struct_generic_memory_buffer_1af6ecdbdbb8d3aa53cdef6e788e4980be" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer_1af6ecdbdbb8d3aa53cdef6e788e4980be" kindref="member">kDefaultCapacity</ref><sp/>=<sp/>256;</highlight></codeline>
<codeline lineno="57" refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classinternal_1_1_stack" kindref="compound">internal::Stack&lt;Allocator&gt;</ref><sp/><ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>;</highlight></codeline>
<codeline lineno="58"><highlight class="normal">};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="memorybuffer_8h_1aad74f4c6994a951097a63ee117039085" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_generic_memory_buffer" kindref="compound">GenericMemoryBuffer&lt;&gt;</ref><sp/><ref refid="memorybuffer_8h_1aad74f4c6994a951097a63ee117039085" kindref="member">MemoryBuffer</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;</highlight></codeline>
<codeline lineno="64" refid="memorybuffer_8h_1a635d8eaaf48777150dc08f7d5a8be054" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="memorybuffer_8h_1a635d8eaaf48777150dc08f7d5a8be054" kindref="member">PutN</ref>(<ref refid="struct_generic_memory_buffer" kindref="compound">MemoryBuffer</ref>&amp;<sp/>memoryBuffer,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memset(memoryBuffer.<ref refid="struct_generic_memory_buffer_1a977b479180bebe8ae14ca1c11d52a486" kindref="member">stack_</ref>.Push&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">&gt;(n),<sp/>c,<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(c));</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><ref refid="group___r_a_p_i_d_j_s_o_n___c_o_n_f_i_g_1gaf18f052a98b9f5df5448d39484b743c1" kindref="member">RAPIDJSON_NAMESPACE_END</ref></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>RAPIDJSON_MEMORYBUFFER_H_</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/include/rapidjson/memorybuffer.h"/>
  </compounddef>
</doxygen>
