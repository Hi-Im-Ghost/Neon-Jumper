<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="md_src_rapidjson_doc_pointer_zh_cn" kind="page">
    <compoundname>md_src_rapidjson_doc_pointer_zh_cn</compoundname>
    <title>Pointer</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>（本功能于 v1.1.0 发布）</para>
<para>JSON Pointer 是一个标准化（<ulink url="https://tools.ietf.org/html/rfc6901">RFC6901</ulink>）的方式去选取一个 JSON Document（DOM）中的值。这类似于 XML 的 XPath。然而，JSON Pointer 简单得多，而且每个 JSON Pointer 仅指向单个值。</para>
<para>使用 RapidJSON 的 JSON Pointer 实现能简化一些 DOM 的操作。</para>
<sect1 id="md_src_rapidjson_doc_pointer_zh_cn_1JsonPointer">
<title>JSON Pointer</title>
<para>一个 JSON Pointer 由一串（零至多个）token 所组成，每个 token 都有 <computeroutput>/</computeroutput> 前缀。每个 token 可以是一个字符串或数字。例如，给定一个 JSON： <programlisting filename=".js"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;foo&quot;<sp/>:<sp/>[&quot;bar&quot;,<sp/>&quot;baz&quot;],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;pi&quot;<sp/>:<sp/>3.1416</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>以下的 JSON Pointer 解析为：</para>
<para><orderedlist>
<listitem><para><computeroutput>&quot;/foo&quot;</computeroutput> → <computeroutput>[ &quot;bar&quot;, &quot;baz&quot; ]</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;/foo/0&quot;</computeroutput> → <computeroutput>&quot;bar&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;/foo/1&quot;</computeroutput> → <computeroutput>&quot;baz&quot;</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;/pi&quot;</computeroutput> → <computeroutput>3.1416</computeroutput></para>
</listitem></orderedlist>
</para>
<para>要注意，一个空 JSON Pointer <computeroutput>&quot;&quot;</computeroutput> （零个 token）解析为整个 JSON。</para>
</sect1>
<sect1 id="md_src_rapidjson_doc_schema_zh_cn_1BasicUsage">
<title>Basic Usage</title>
<para>以下的代码范例不解自明。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#include<sp/>&quot;<ref refid="pointer_8h" kindref="compound">rapidjson/pointer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>使用<sp/>Set()<sp/>创建<sp/>DOM</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/project&quot;</highlight><highlight class="normal">).Set(d,<sp/></highlight><highlight class="stringliteral">&quot;RapidJSON&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/stars&quot;</highlight><highlight class="normal">).Set(d,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>&quot;project&quot;<sp/>:<sp/>&quot;RapidJSON&quot;,<sp/>&quot;stars&quot;<sp/>:<sp/>10<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>使用<sp/>Get()<sp/>访问<sp/>DOM。若该值不存在则返回<sp/>nullptr。</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>stars<sp/>=<sp/><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/stars&quot;</highlight><highlight class="normal">).Get(d))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stars-&gt;SetInt(stars-&gt;GetInt()<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>&quot;project&quot;<sp/>:<sp/>&quot;RapidJSON&quot;,<sp/>&quot;stars&quot;<sp/>:<sp/>11<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Set()<sp/>和<sp/>Create()<sp/>自动生成父值（如果它们不存在）。</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a/b/0&quot;</highlight><highlight class="normal">).Create(d);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>&quot;project&quot;<sp/>:<sp/>&quot;RapidJSON&quot;,<sp/>&quot;stars&quot;<sp/>:<sp/>11,<sp/>&quot;a&quot;<sp/>:<sp/>{<sp/>&quot;b&quot;<sp/>:<sp/>[<sp/>null<sp/>]<sp/>}<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetWithDefault()<sp/>返回引用。若该值不存在则会深拷贝缺省值。</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>hello<sp/>=<sp/><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/hello&quot;</highlight><highlight class="normal">).GetWithDefault(d,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>&quot;project&quot;<sp/>:<sp/>&quot;RapidJSON&quot;,<sp/>&quot;stars&quot;<sp/>:<sp/>11,<sp/>&quot;a&quot;<sp/>:<sp/>{<sp/>&quot;b&quot;<sp/>:<sp/>[<sp/>null<sp/>]<sp/>},<sp/>&quot;hello&quot;<sp/>:<sp/>&quot;world&quot;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Swap()<sp/>和<sp/>Set()<sp/>相似</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>x(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/hello&quot;</highlight><highlight class="normal">).Swap(d,<sp/>x);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>&quot;project&quot;<sp/>:<sp/>&quot;RapidJSON&quot;,<sp/>&quot;stars&quot;<sp/>:<sp/>11,<sp/>&quot;a&quot;<sp/>:<sp/>{<sp/>&quot;b&quot;<sp/>:<sp/>[<sp/>null<sp/>]<sp/>},<sp/>&quot;hello&quot;<sp/>:<sp/>&quot;C++&quot;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>x<sp/>变成<sp/>&quot;world&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>删去一个成员或元素，若值存在返回<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/><ref refid="fwd_8h_1a0e5c49dba7ec654cdda5735347c00397" kindref="member">Pointer</ref>(</highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">).Erase(d);</highlight></codeline>
<codeline><highlight class="normal">assert(success);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{<sp/>&quot;project&quot;<sp/>:<sp/>&quot;RapidJSON&quot;,<sp/>&quot;stars&quot;<sp/>:<sp/>10<sp/>}</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_src_rapidjson_doc_pointer_zh_cn_1HelperFunctions">
<title>Helper Functions</title>
<para>由于面向对象的调用习惯可能不符直觉，RapidJSON 也提供了一些辅助函数，它们把成员函数包装成自由函数。</para>
<para>以下的例子与上面例子所做的事情完全相同。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/project&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;RapidJSON&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/stars&quot;</highlight><highlight class="normal">,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_value" kindref="compound">Value</ref>*<sp/>stars<sp/>=<sp/><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/stars&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>stars-&gt;SetInt(stars-&gt;GetInt()<sp/>+<sp/>1);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/a/b/0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>hello<sp/>=<sp/><ref refid="pointer_8h_1accdac20f6fea3ab631da1a0df5208a61" kindref="member">GetValueByPointerWithDefault</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>x(</highlight><highlight class="stringliteral">&quot;C++&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="pointer_8h_1a542981a8bdcf3bc3c701c7eff39648ac" kindref="member">SwapValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/hello&quot;</highlight><highlight class="normal">,<sp/>x);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/><ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal">assert(success);</highlight></codeline>
</programlisting></para>
<para>以下对比 3 种调用方式：</para>
<para><orderedlist>
<listitem><para><computeroutput>Pointer(source).&lt;Method&gt;(root, ...)</computeroutput></para>
</listitem><listitem><para><computeroutput>&lt;Method&gt;ValueByPointer(root, Pointer(source), ...)</computeroutput></para>
</listitem><listitem><para><computeroutput>&lt;Method&gt;ValueByPointer(root, source, ...)</computeroutput></para>
</listitem></orderedlist>
</para>
</sect1>
<sect1 id="md_src_rapidjson_doc_pointer_zh_cn_1ResolvingPointer">
<title>Resolving Pointer</title>
<para><computeroutput>Pointer::Get()</computeroutput> 或 <computeroutput><ref refid="pointer_8h_1a581633984b11d0587c2ad06649efefc4" kindref="member">GetValueByPointer()</ref></computeroutput> 函数并不修改 DOM。若那些 token 不能匹配 DOM 里的值，这些函数便返回 <computeroutput>nullptr</computeroutput>。使用者可利用这个方法来检查一个值是否存在。</para>
<para>注意，数值 token 可表示数组索引或成员名字。解析过程中会按值的类型来匹配。</para>
<para><programlisting filename=".js"><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;0&quot;<sp/>:<sp/>123,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>&quot;1&quot;<sp/>:<sp/>[456]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para><orderedlist>
<listitem><para><computeroutput>&quot;/0&quot;</computeroutput> → <computeroutput>123</computeroutput></para>
</listitem><listitem><para><computeroutput>&quot;/1/0&quot;</computeroutput> → <computeroutput>456</computeroutput></para>
</listitem></orderedlist>
</para>
<para>Token <computeroutput>&quot;0&quot;</computeroutput> 在第一个 pointer 中被当作成员名字。它在第二个 pointer 中被当作成数组索引。</para>
<para>其他函数会改变 DOM，包括 <computeroutput>Create()</computeroutput>、<computeroutput>GetWithDefault()</computeroutput>、<computeroutput>Set()</computeroutput>、<computeroutput><ref refid="namespaceinternal_1a72b2c71d36273b9691487f58c671ce04" kindref="member">Swap()</ref></computeroutput>。这些函数总是成功的。若一些父值不存在，就会创建它们。若父值类型不匹配 token，也会强行改变其类型。改变类型也意味着完全移除其 DOM 子树的内容。</para>
<para>例如，把上面的 JSON 解译至 <computeroutput>d</computeroutput> 之后，</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;1/a&quot;</highlight><highlight class="normal">,<sp/>789);<sp/></highlight><highlight class="comment">//<sp/>{<sp/>&quot;0&quot;<sp/>:<sp/>123,<sp/>&quot;1&quot;<sp/>:<sp/>{<sp/>&quot;a&quot;<sp/>:<sp/>789<sp/>}<sp/>}</highlight></codeline>
</programlisting></para>
<sect2 id="md_src_rapidjson_doc_pointer_zh_cn_1autotoc_md109">
<title>解析负号 token</title>
<para>另外，<ulink url="https://tools.ietf.org/html/rfc6901">RFC6901</ulink> 定义了一个特殊 token <computeroutput>-</computeroutput> （单个负号），用于表示数组最后元素的下一个元素。 <computeroutput>Get()</computeroutput> 只会把此 token 当作成员名字 &apos;&quot;-&quot;&apos;。而其他函数则会以此解析数组，等同于对数组调用 <computeroutput>Value::PushBack()</computeroutput> 。</para>
<para><programlisting filename=".cpp"><codeline><highlight class="normal"><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>d;</highlight></codeline>
<codeline><highlight class="normal">d.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(</highlight><highlight class="stringliteral">&quot;{\&quot;foo\&quot;:[123]}&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/foo/-&quot;</highlight><highlight class="normal">,<sp/>456);<sp/></highlight><highlight class="comment">//<sp/>{<sp/>&quot;foo&quot;<sp/>:<sp/>[123,<sp/>456]<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(d,<sp/></highlight><highlight class="stringliteral">&quot;/-&quot;</highlight><highlight class="normal">,<sp/>789);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>&quot;foo&quot;<sp/>:<sp/>[123,<sp/>456],<sp/>&quot;-&quot;<sp/>:<sp/>789<sp/>}</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_src_rapidjson_doc_pointer_zh_cn_1autotoc_md110">
<title>解析 Document 及 Value</title>
<para>当使用 <computeroutput>p.Get(root)</computeroutput> 或 <computeroutput>GetValueByPointer(root, p)</computeroutput>，<computeroutput>root</computeroutput> 是一个（常数） <computeroutput>Value&amp;</computeroutput>。这意味着，它也可以是 DOM 里的一个子树。</para>
<para>其他函数有两组签名。一组使用 <computeroutput>Document&amp; document</computeroutput> 作为参数，另一组使用 <computeroutput>Value&amp; root</computeroutput>。第一组使用 <computeroutput>document.GetAllocator()</computeroutput> 去创建值，而第二组则需要使用者提供一个 allocator，如同 DOM 里的函数。</para>
<para>以上例子都不需要 allocator 参数，因为它的第一个参数是 <computeroutput>Document&amp;</computeroutput>。但如果你需要对一个子树进行解析，就需要如下面的例子般提供 allocator：</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_person" kindref="compound">Person</ref><sp/>{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_person_1a5e10221f201605ad323d5518e5436bd3" kindref="member">Person</ref>()<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document_<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="document_8h_1ac6ea5b168e3fe8c7fa532450fc9391f7" kindref="member">Document</ref>();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>CreateValueByPointer()<sp/>here<sp/>no<sp/>need<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetLocation(<ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(*document_,<sp/></highlight><highlight class="stringliteral">&quot;/residence&quot;</highlight><highlight class="normal">),<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SetLocation(<ref refid="pointer_8h_1a7ce0d37e372f630e46e221e45714e84b" kindref="member">CreateValueByPointer</ref>(*document_,<sp/></highlight><highlight class="stringliteral">&quot;/office&quot;</highlight><highlight class="normal">),<sp/>...);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetLocation(<ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/>location,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>country,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>addresses[2])<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value::Allocator&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>document_-&gt;GetAllocator();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>SetValueByPointer()<sp/>here<sp/>need<sp/>allocator</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(location,<sp/></highlight><highlight class="stringliteral">&quot;/country&quot;</highlight><highlight class="normal">,<sp/>country,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(location,<sp/></highlight><highlight class="stringliteral">&quot;/address/0&quot;</highlight><highlight class="normal">,<sp/>address[0],<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1a58128fa07ac8e9159440c83d0a78f2be" kindref="member">SetValueByPointer</ref>(location,<sp/></highlight><highlight class="stringliteral">&quot;/address/1&quot;</highlight><highlight class="normal">,<sp/>address[1],<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref>*<sp/>document_;</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para><computeroutput>Erase()</computeroutput> 或 <computeroutput><ref refid="pointer_8h_1a7342710933f35ad7267c871f4a8cc55f" kindref="member">EraseValueByPointer()</ref></computeroutput> 不需要 allocator。而且它们成功删除值之后会返回 <computeroutput>true</computeroutput>。</para>
</sect2>
</sect1>
<sect1 id="md_src_rapidjson_doc_pointer_zh_cn_1ErrorHandling">
<title>Error Handling</title>
<para><computeroutput>Pointer</computeroutput> 在其建构函数里会解译源字符串。若有解析错误，<computeroutput>Pointer::IsValid()</computeroutput> 返回 <computeroutput>false</computeroutput>。你可使用 <computeroutput>Pointer::GetParseErrorCode()</computeroutput> 和 <computeroutput>GetParseErrorOffset()</computeroutput> 去获取错信息。</para>
<para>要注意的是，所有解析函数都假设 pointer 是合法的。对一个非法 pointer 解析会造成断言失败。</para>
</sect1>
<sect1 id="md_src_rapidjson_doc_pointer_zh_cn_1URIFragment">
<title>URI Fragment Representation</title>
<para>除了我们一直在使用的字符串方式表示 JSON pointer，<ulink url="https://tools.ietf.org/html/rfc6901">RFC6901</ulink> 也定义了一个 JSON Pointer 的 URI 片段（fragment）表示方式。URI 片段是定义于 <ulink url="https://tools.ietf.org/html/rfc3986">RFC3986</ulink> &quot;Uniform Resource Identifier (URI): Generic Syntax&quot;。</para>
<para>URI 片段的主要分别是必然以 <computeroutput>#</computeroutput> （pound sign）开头，而一些字符也会以百分比编码成 UTF-8 序列。例如，以下的表展示了不同表示法下的 C/C++ 字符串常数。</para>
<para><table rows="7" cols="3"><row>
<entry thead="yes"><para>字符串表示方式   </para>
</entry><entry thead="yes"><para>URI 片段表示方式   </para>
</entry><entry thead="yes"><para>Pointer Tokens （UTF-8）    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>&quot;/foo/0&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>&quot;#/foo/0&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>{&quot;foo&quot;, 0}</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>&quot;/a~1b&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>&quot;#/a~1b&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>{&quot;a/b&quot;}</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>&quot;/m~0n&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>&quot;#/m~0n&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>{&quot;m~n&quot;}</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>&quot;/ &quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>&quot;#/%20&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>{&quot; &quot;}</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>&quot;/\0&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>&quot;#/%00&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>{&quot;\0&quot;}</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>&quot;/€&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>&quot;#/%E2%82%AC&quot;</computeroutput>   </para>
</entry><entry thead="no"><para><computeroutput>{&quot;€&quot;}</computeroutput>   </para>
</entry></row>
</table>
</para>
<para>RapidJSON 完全支持 URI 片段表示方式。它在解译时会自动检测 <computeroutput>#</computeroutput> 号。</para>
</sect1>
<sect1 id="md_src_rapidjson_doc_pointer_zh_cn_1autotoc_md111">
<title>字符串化</title>
<para>你也可以把一个 <computeroutput>Pointer</computeroutput> 字符串化，储存于字符串或其他输出流。例如：</para>
<para><programlisting><codeline><highlight class="normal">Pointer<sp/>p(...);</highlight></codeline>
<codeline><highlight class="normal">StringBuffer<sp/>sb;</highlight></codeline>
<codeline><highlight class="normal">p.Stringify(sb);</highlight></codeline>
<codeline><highlight class="normal">std::cout<sp/>&lt;&lt;<sp/>sb.GetString()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
</programlisting></para>
<para>使用 <computeroutput>StringifyUriFragment()</computeroutput> 可以把 pointer 字符串化为 URI 片段表示法。</para>
</sect1>
<sect1 id="md_src_rapidjson_doc_pointer_zh_cn_1UserSuppliedTokens">
<title>User-Supplied Tokens</title>
<para>若一个 pointer 会用于多次解析，它应该只被创建一次，然后再施于不同的 DOM ，或在不同时间做解析。这样可以避免多次创键 <computeroutput>Pointer</computeroutput>，节省时间和内存分配。</para>
<para>我们甚至可以再更进一步，完全消去解析过程及动态内存分配。我们可以直接生成 token 数组：</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#define<sp/>NAME(s)<sp/>{<sp/>s,<sp/>sizeof(s)<sp/>/<sp/>sizeof(s[0])<sp/>-<sp/>1,<sp/>kPointerInvalidIndex<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>INDEX(i)<sp/>{<sp/>#i,<sp/>sizeof(#i)<sp/>-<sp/>1,<sp/>i<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_generic_pointer_1_1_token" kindref="compound">Pointer::Token</ref><sp/>kTokens[]<sp/>=<sp/>{<sp/><ref refid="pointertest_8cpp_1a59c7737920212dcb3bb9df58d7062de4" kindref="member">NAME</ref>(</highlight><highlight class="stringliteral">&quot;foo&quot;</highlight><highlight class="normal">),<sp/><ref refid="pointertest_8cpp_1aa5fad23b2a5eed790e6661e896a506b7" kindref="member">INDEX</ref>(123)<sp/>};</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_pointer" kindref="compound">Pointer</ref><sp/>p(kTokens,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(kTokens[0]));</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Equivalent<sp/>to<sp/>static<sp/>const<sp/>Pointer<sp/>p(&quot;/foo/123&quot;);</highlight></codeline>
</programlisting></para>
<para>这种做法可能适合内存受限的系统。 </para>
</sect1>
    </detaileddescription>
    <location file="src/rapidjson/doc/pointer.zh-cn.md"/>
  </compounddef>
</doxygen>
