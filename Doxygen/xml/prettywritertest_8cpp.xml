<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="prettywritertest_8cpp" kind="file" language="C++">
    <compoundname>prettywritertest.cpp</compoundname>
    <includes refid="unittest_8h" local="yes">unittest.h</includes>
    <includes refid="reader_8h" local="yes">rapidjson/reader.h</includes>
    <includes refid="prettywriter_8h" local="yes">rapidjson/prettywriter.h</includes>
    <includes refid="stringbuffer_8h" local="yes">rapidjson/stringbuffer.h</includes>
    <includes refid="filewritestream_8h" local="yes">rapidjson/filewritestream.h</includes>
    <includes local="no">sstream</includes>
    <incdepgraph>
      <node id="6">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="28">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="37">
        <label>rapidjson/filewritestream.h</label>
        <link refid="filewritestream_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="38" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>internal/dtoa.h</label>
        <link refid="dtoa_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>itoa.h</label>
        <link refid="itoa_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="18">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="29">
        <label>rapidjson/prettywriter.h</label>
        <link refid="prettywriter_8h"/>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rapidjson/reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>stringbuffer.h</label>
        <link refid="stringbuffer_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="30">
        <label>writer.h</label>
        <link refid="writer_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/rapidjson/test/unittest/prettywritertest.cpp</label>
        <link refid="prettywritertest_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="37" relation="include">
        </childnode>
        <childnode refid="39" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>unittest.h</label>
        <link refid="unittest_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>cassert</label>
      </node>
      <node id="27">
        <label>climits</label>
      </node>
      <node id="20">
        <label>cstddef</label>
      </node>
      <node id="38">
        <label>cstdio</label>
      </node>
      <node id="8">
        <label>cstdlib</label>
      </node>
      <node id="9">
        <label>cstring</label>
      </node>
      <node id="32">
        <label>cwchar</label>
      </node>
      <node id="3">
        <label>gtest/gtest.h</label>
      </node>
      <node id="25">
        <label>limits</label>
      </node>
      <node id="12">
        <label>memory</label>
      </node>
      <node id="36">
        <label>new</label>
      </node>
      <node id="39">
        <label>sstream</label>
      </node>
      <node id="4">
        <label>stdexcept</label>
      </node>
    </incdepgraph>
    <innerclass refid="class_o_stream_wrapper" prot="public">OStreamWrapper</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" prot="public" static="no">
        <name>T</name>
        <param><defname>meth</defname></param>
        <param><defname>val</defname></param>
        <param><defname>expected</defname></param>
        <initializer>    {                                                   \
        <ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref> buffer;                            \
        <ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>&lt;<ref refid="fwd_8h_1ab956b6537825abf8aac4112e81cfad7e" kindref="member">StringBuffer</ref>&gt; writer(buffer);      \
        writer.meth(val);                               \
                                                        \
        EXPECT_STREQ(expected, buffer.GetString());     \
        EXPECT_TRUE(writer.IsComplete());               \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="343" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="prettywritertest_8cpp_1a58cf13c05c4e87531b44207519128965" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kJson[]</definition>
        <argsstring>[]</argsstring>
        <name>kJson</name>
        <initializer>= &quot;{\&quot;hello\&quot;:\&quot;world\&quot;,\&quot;t\&quot;:true,\&quot;f\&quot;:false,\&quot;n\&quot;:null,\&quot;i\&quot;:123,\&quot;pi\&quot;:3.1416,\&quot;a\&quot;:[1,2,3,-1],\&quot;u64\&quot;:1234567890123456789,\&quot;i64\&quot;:-1234567890123456789}&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="28" column="19" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="prettywritertest_8cpp_1abc038ebfe76e7c60f1bc888610877791" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kPrettyJson[]</definition>
        <argsstring>[]</argsstring>
        <name>kPrettyJson</name>
        <initializer>=
&quot;{\n&quot;
&quot;    \&quot;hello\&quot;: \&quot;world\&quot;,\n&quot;
&quot;    \&quot;t\&quot;: true,\n&quot;
&quot;    \&quot;f\&quot;: false,\n&quot;
&quot;    \&quot;n\&quot;: null,\n&quot;
&quot;    \&quot;i\&quot;: 123,\n&quot;
&quot;    \&quot;pi\&quot;: 3.1416,\n&quot;
&quot;    \&quot;a\&quot;: [\n&quot;
&quot;        1,\n&quot;
&quot;        2,\n&quot;
&quot;        3,\n&quot;
&quot;        -1\n&quot;
&quot;    ],\n&quot;
&quot;    \&quot;u64\&quot;: 1234567890123456789,\n&quot;
&quot;    \&quot;i64\&quot;: -1234567890123456789\n&quot;
&quot;}&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="29" column="19" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="prettywritertest_8cpp_1a94b097157d9d11504fa9d800e7758eb6" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char kPrettyJson_FormatOptions_SLA[]</definition>
        <argsstring>[]</argsstring>
        <name>kPrettyJson_FormatOptions_SLA</name>
        <initializer>=
&quot;{\n&quot;
&quot;    \&quot;hello\&quot;: \&quot;world\&quot;,\n&quot;
&quot;    \&quot;t\&quot;: true,\n&quot;
&quot;    \&quot;f\&quot;: false,\n&quot;
&quot;    \&quot;n\&quot;: null,\n&quot;
&quot;    \&quot;i\&quot;: 123,\n&quot;
&quot;    \&quot;pi\&quot;: 3.1416,\n&quot;
&quot;    \&quot;a\&quot;: [1, 2, 3, -1],\n&quot;
&quot;    \&quot;u64\&quot;: 1234567890123456789,\n&quot;
&quot;    \&quot;i64\&quot;: -1234567890123456789\n&quot;
&quot;}&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="47" column="19" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, Basic)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>Basic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="60" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="60" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1aca7a8f5ce83342905379ead13c122276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, FormatOptions)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>FormatOptions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="69" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="69" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1a9f6f484811f073565bc9d5d1912b2a16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, SetIndent)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>SetIndent</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="79" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="79" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1a4ebbc2e0f8e35357c4ed285570b8f9f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, String)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>String</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="106" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="106" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1a214ec81d3b2cab773ca02dee308920d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, OStreamWrapper)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="151" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="151" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1a85e6090680de34aa01654aed562dd226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, FileWriteStream)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type><ref refid="class_file_write_stream" kindref="compound">FileWriteStream</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="167" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="167" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1a2f008ec971ec60b45f575b040bccb845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, RawValue)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>RawValue</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="192" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="192" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1a09fd3ae0b4f8e7dccb5421dff71b9245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, InvalidEventSequence)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>InvalidEventSequence</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="211" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="211" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1a3108e29798ac992aa723da1c46ff8b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, NaN)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>NaN</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="262" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="262" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1afb66a00052107cf357df92dc211e87ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, Inf)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>Inf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="281" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="281" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1aa9f976ea86c5d8d3393d4e1fc733ae5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, Issue_889)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>Issue_889</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="305" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="305" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="prettywritertest_8cpp_1abe0376325cacaa63085d1252790e25d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>TEST</definition>
        <argsstring>(PrettyWriter, Issue_1336)</argsstring>
        <name>TEST</name>
        <param>
          <type><ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref></type>
        </param>
        <param>
          <type>Issue_1336</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/test/unittest/prettywritertest.cpp" line="342" column="1" bodyfile="src/rapidjson/test/unittest/prettywritertest.cpp" bodystart="342" bodyend="369"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Tencent<sp/>is<sp/>pleased<sp/>to<sp/>support<sp/>the<sp/>open<sp/>source<sp/>community<sp/>by<sp/>making<sp/>RapidJSON<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2015<sp/>THL<sp/>A29<sp/>Limited,<sp/>a<sp/>Tencent<sp/>company,<sp/>and<sp/>Milo<sp/>Yip.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License<sp/>(the<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software<sp/>distributed<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="unittest_8h" kindref="compound">unittest.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="reader_8h" kindref="compound">rapidjson/reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="prettywriter_8h" kindref="compound">rapidjson/prettywriter.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stringbuffer_8h" kindref="compound">rapidjson/stringbuffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="filewritestream_8h" kindref="compound">rapidjson/filewritestream.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal">RAPIDJSON_DIAG_PUSH</highlight></codeline>
<codeline lineno="23"><highlight class="normal">RAPIDJSON_DIAG_OFF(c++98-compat)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kJson[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;{\&quot;hello\&quot;:\&quot;world\&quot;,\&quot;t\&quot;:true,\&quot;f\&quot;:false,\&quot;n\&quot;:null,\&quot;i\&quot;:123,\&quot;pi\&quot;:3.1416,\&quot;a\&quot;:[1,2,3,-1],\&quot;u64\&quot;:1234567890123456789,\&quot;i64\&quot;:-1234567890123456789}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPrettyJson[]<sp/>=</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;hello\&quot;:<sp/>\&quot;world\&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;t\&quot;:<sp/>true,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;f\&quot;:<sp/>false,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;n\&quot;:<sp/>null,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;i\&quot;:<sp/>123,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;pi\&quot;:<sp/>3.1416,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;a\&quot;:<sp/>[\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;u64\&quot;:<sp/>1234567890123456789,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;i64\&quot;:<sp/>-1234567890123456789\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>kPrettyJson_FormatOptions_SLA[]<sp/>=</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;hello\&quot;:<sp/>\&quot;world\&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;t\&quot;:<sp/>true,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;f\&quot;:<sp/>false,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;n\&quot;:<sp/>null,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;i\&quot;:<sp/>123,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;pi\&quot;:<sp/>3.1416,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;a\&quot;:<sp/>[1,<sp/>2,<sp/>3,<sp/>-1],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;u64\&quot;:<sp/>1234567890123456789,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;i64\&quot;:<sp/>-1234567890123456789\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>Basic)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(kJson);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>writer);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(kPrettyJson,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="67"><highlight class="normal">}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>FormatOptions)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.SetFormatOptions(<ref refid="prettywriter_8h_1a150fd6ef2dbf4025c33ece85451982d5addf85c922d2d597ab1074a55b27c3fe2" kindref="member">kFormatSingleLineArray</ref>);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(kJson);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>writer);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(kPrettyJson_FormatOptions_SLA,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>SetIndent)<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.SetIndent(</highlight><highlight class="charliteral">&apos;\t&apos;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(kJson);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>writer);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;hello\&quot;:<sp/>\&quot;world\&quot;,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;t\&quot;:<sp/>true,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;f\&quot;:<sp/>false,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;n\&quot;:<sp/>null,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;i\&quot;:<sp/>123,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;pi\&quot;:<sp/>3.1416,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;a\&quot;:<sp/>[\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\t1,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\t2,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\t3,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\t-1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t],\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;u64\&quot;:<sp/>1234567890123456789,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;\t\&quot;i64\&quot;:<sp/>-1234567890123456789\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="104"><highlight class="normal">}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>String)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.StartArray());</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(</highlight><highlight class="stringliteral">&quot;Hello\n&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.EndArray());</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;[\n<sp/><sp/><sp/><sp/>\&quot;Hello\\n\&quot;\n]&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_STDSTRING</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>String_STDSTRING)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.StartArray());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.String(std::string(</highlight><highlight class="stringliteral">&quot;Hello\n&quot;</highlight><highlight class="normal">)));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.EndArray());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;[\n<sp/><sp/><sp/><sp/>\&quot;Hello\\n\&quot;\n]&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="123"><highlight class="normal">}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="class_o_stream_wrapper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref>;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1adb6c4fb526c0f91eb24da2c6d3fce770" kindref="member">OStreamWrapper</ref>(std::ostream&amp;<sp/>os)<sp/>:<sp/>os_(os)<sp/>{}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref><sp/><ref refid="class_o_stream_wrapper_1aad80276a3af7da88f1cdde77c6e01277" kindref="member">Peek</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref><sp/><ref refid="class_o_stream_wrapper_1aa7695be6ed74a50a29f7baee63800cf4" kindref="member">Take</ref>()<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1a308fd9f938c9f52ec1ac26f3a9b2f48e" kindref="member">Tell</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref>*<sp/><ref refid="class_o_stream_wrapper_1a23aa06a5e084fc07cc617082bd63d122" kindref="member">PutBegin</ref>()<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1a68f0e728e2780b74de545ae752c5c637" kindref="member">Put</ref>(<ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref><sp/>c)<sp/>{<sp/>os_.put(c);<sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1ad053cc149354ad4503248886374e3c40" kindref="member">Flush</ref>()<sp/>{<sp/>os_.flush();<sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper_1afd040491313089c3de54e70200c9f3ed" kindref="member">PutEnd</ref>(<ref refid="class_o_stream_wrapper_1a24d357b08e2033c0b74b46377da895dd" kindref="member">Ch</ref>*)<sp/>{<sp/>assert(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper_1adb6c4fb526c0f91eb24da2c6d3fce770" kindref="member">OStreamWrapper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>&amp;);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>&amp;);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>std::ostream&amp;<sp/>os_;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>covering<sp/>PutN()<sp/>generic<sp/>version</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref>)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(kJson);</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_o_stream_wrapper" kindref="compound">OStreamWrapper</ref><sp/>os(ss);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;OStreamWrapper&gt;</ref><sp/>writer(os);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>writer);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>actual<sp/>=<sp/>ss.str();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(kPrettyJson,<sp/>actual.c_str());</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>covering<sp/>FileWriteStream::PutN()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/><ref refid="class_file_write_stream" kindref="compound">FileWriteStream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>filename[L_tmpnam];</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>FILE*<sp/>fp<sp/>=<sp/><ref refid="unittest_8h_1acb6251ae9b44050f1fcabf8d3c2e792b" kindref="member">TempFile</ref>(filename);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT_TRUE(fp!=NULL);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[16];</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_file_write_stream" kindref="compound">FileWriteStream</ref><sp/>os(fp,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer));</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;FileWriteStream&gt;</ref><sp/>writer(os);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_reader" kindref="compound">Reader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_generic_string_stream" kindref="compound">StringStream</ref><sp/>s(kJson);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.<ref refid="class_generic_reader_1a0c450620d14ff1824e58bb7bd9b42099" kindref="member">Parse</ref>(s,<sp/>writer);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>fp<sp/>=<sp/>fopen(filename,<sp/></highlight><highlight class="stringliteral">&quot;rb&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(fp,<sp/>0,<sp/>SEEK_END);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ftell(fp));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>fseek(fp,<sp/>0,<sp/>SEEK_SET);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>json<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(malloc(size<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>readLength<sp/>=<sp/>fread(json,<sp/>1,<sp/>size,<sp/>fp);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>json[readLength]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>fclose(fp);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>remove(filename);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(kPrettyJson,<sp/>json);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>free(json);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>RawValue)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Int(1);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;raw&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;[\&quot;Hello\\nWorld\&quot;,<sp/>123.456]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.RawValue(json,<sp/>strlen(json),<sp/><ref refid="rapidjson_8h_1a1d1cfd8ffb84e947f82999c682b666a7af41527d6925efa3c5c3dadb23dfef7c8" kindref="member">kArrayType</ref>);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;a\&quot;:<sp/>1,\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;raw\&quot;:<sp/>[\&quot;Hello\\nWorld\&quot;,<sp/>123.456]\n&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>no<sp/>indentation<sp/>within<sp/>raw<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="209"><highlight class="normal">}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>InvalidEventSequence)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndArray(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>1:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.Int(1),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>&apos;a&apos;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>{<sp/>&apos;a&apos;:&apos;b&apos;,&apos;c&apos;<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.String(</highlight><highlight class="stringliteral">&quot;b&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;c&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_THROW(writer.EndObject(),<sp/><ref refid="class_assert_exception" kindref="compound">AssertException</ref>);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.IsComplete());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>NaN)<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nan<sp/>=<sp/>std::numeric_limits&lt;double&gt;::quiet_NaN();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="classinternal_1_1_double" kindref="compound">internal::Double</ref>(nan).IsNan());</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.Double(nan));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a1ff67a91b689ae093ce241e0301c0816" kindref="member">kWriteNanAndInfFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.Double(nan));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;NaN&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>buffer2;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;GenericStringBuffer&lt;UTF16&lt;&gt;</ref><sp/>&gt;<sp/>&gt;<sp/>writer2(buffer2);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer2.Double(nan));</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>Inf)<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inf<sp/>=<sp/>std::numeric_limits&lt;double&gt;::infinity();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(<ref refid="classinternal_1_1_double" kindref="compound">internal::Double</ref>(inf).IsInf());</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.Double(inf));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_FALSE(writer.Double(-inf));</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a1ff67a91b689ae093ce241e0301c0816" kindref="member">kWriteNanAndInfFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.Double(inf));</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer, UTF8&lt;&gt;</ref>,<sp/><ref refid="struct_u_t_f8" kindref="compound">UTF8&lt;&gt;</ref>,<sp/><ref refid="class_crt_allocator" kindref="compound">CrtAllocator</ref>,<sp/><ref refid="writer_8h_1ab05d31260e712ed01daa80077f21e0a5a1ff67a91b689ae093ce241e0301c0816" kindref="member">kWriteNanAndInfFlag</ref>&gt;<sp/>writer(buffer);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.Double(-inf));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;Infinity-Infinity&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>Issue_889)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[100]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartArray();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.String(buf);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndArray();</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;[\n<sp/><sp/><sp/><sp/>\&quot;Hello\&quot;\n]&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());<sp/>\</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>RAPIDJSON_HAS_CXX11_RVALUE_REFS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>WriterGen(<ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>&amp;target)<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(target);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.StartObject();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Key(</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Int(1);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>writer;</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>MoveCtor)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(WriterGen(buffer));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.EndObject();</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;{\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/><sp/><sp/>\&quot;a\&quot;:<sp/>1\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="339"><highlight class="normal">}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="prettywritertest_8cpp_1aeb0ccc6927503be3f73aa180e9828298" kindref="member">TEST</ref>(<ref refid="class_pretty_writer" kindref="compound">PrettyWriter</ref>,<sp/>Issue_1336)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>T(meth,<sp/>val,<sp/>expected)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="344"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="345"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>StringBuffer<sp/>buffer;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="346"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PrettyWriter&lt;StringBuffer&gt;<sp/>writer(buffer);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="347"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writer.meth(val);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="348"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="349"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_STREQ(expected,<sp/>buffer.GetString());<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="350"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="351"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(Bool,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(Bool,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(Int,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(Uint,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(Int64,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(Uint64,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(Double,<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;0.0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="prettywritertest_8cpp_1a6283df8c4e365cc8a01727e2d7ad44bf" kindref="member">T</ref>(String,<sp/></highlight><highlight class="stringliteral">&quot;Hello&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;\&quot;Hello\&quot;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>buffer;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(buffer);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>writer.Null();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_STREQ(</highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">,<sp/>buffer.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>EXPECT_TRUE(writer.IsComplete());</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__clang__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal">RAPIDJSON_DIAG_POP</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/test/unittest/prettywritertest.cpp"/>
  </compounddef>
</doxygen>
