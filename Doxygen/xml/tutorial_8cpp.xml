<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="tutorial_8cpp" kind="file" language="C++">
    <compoundname>tutorial.cpp</compoundname>
    <includes refid="document_8h" local="yes">rapidjson/document.h</includes>
    <includes refid="prettywriter_8h" local="yes">rapidjson/prettywriter.h</includes>
    <includes local="no">cstdio</includes>
    <incdepgraph>
      <node id="1">
        <label>src/rapidjson/example/tutorial/tutorial.cpp</label>
        <link refid="tutorial_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="31" relation="include">
        </childnode>
        <childnode refid="36" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>allocators.h</label>
        <link refid="allocators_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>rapidjson/document.h</label>
        <link refid="document_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="30" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>encodedstream.h</label>
        <link refid="encodedstream_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>encodings.h</label>
        <link refid="encodings_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="26">
        <label>error/error.h</label>
        <link refid="error_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="21">
        <label>biginteger.h</label>
        <link refid="biginteger_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>internal/clzll.h</label>
        <link refid="clzll_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>diyfp.h</label>
        <link refid="diyfp_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>internal/dtoa.h</label>
        <link refid="dtoa_8h"/>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>ieee754.h</label>
        <link refid="ieee754_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="34">
        <label>itoa.h</label>
        <link refid="itoa_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>internal/meta.h</label>
        <link refid="meta_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>pow10.h</label>
        <link refid="pow10_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>internal/stack.h</label>
        <link refid="stack_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="27">
        <label>internal/strfunc.h</label>
        <link refid="strfunc_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="28" relation="include">
        </childnode>
      </node>
      <node id="19">
        <label>internal/strtod.h</label>
        <link refid="strtod_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>swap.h</label>
        <link refid="swap_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>memorystream.h</label>
        <link refid="memorystream_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="31">
        <label>rapidjson/prettywriter.h</label>
        <link refid="prettywriter_8h"/>
        <childnode refid="32" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>rapidjson.h</label>
        <link refid="rapidjson_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>reader.h</label>
        <link refid="reader_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stream.h</label>
        <link refid="stream_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="35">
        <label>stringbuffer.h</label>
        <link refid="stringbuffer_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="32">
        <label>writer.h</label>
        <link refid="writer_8h"/>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="27" relation="include">
        </childnode>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
        <childnode refid="35" relation="include">
        </childnode>
        <childnode refid="29" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>cassert</label>
      </node>
      <node id="25">
        <label>climits</label>
      </node>
      <node id="18">
        <label>cstddef</label>
      </node>
      <node id="36">
        <label>cstdio</label>
      </node>
      <node id="6">
        <label>cstdlib</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="28">
        <label>cwchar</label>
      </node>
      <node id="30">
        <label>iterator</label>
      </node>
      <node id="23">
        <label>limits</label>
      </node>
      <node id="10">
        <label>memory</label>
      </node>
      <node id="29">
        <label>new</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="tutorial_8cpp_1a81ce304348a420752ee080480d2b3095" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int, char *[])</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char *</type>
          <array>[]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/rapidjson/example/tutorial/tutorial.cpp" line="11" column="5" bodyfile="src/rapidjson/example/tutorial/tutorial.cpp" bodystart="11" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Hello<sp/>World<sp/>example</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>example<sp/>shows<sp/>basic<sp/>usage<sp/>of<sp/>DOM-style<sp/>API.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="document_8h" kindref="compound">rapidjson/document.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>rapidjson&apos;s<sp/>DOM-style<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="prettywriter_8h" kindref="compound">rapidjson/prettywriter.h</ref>&quot;</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>for<sp/>stringify<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdio&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacerapidjson" kindref="compound">rapidjson</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="tutorial_8cpp_1a81ce304348a420752ee080480d2b3095" kindref="member">main</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*[])<sp/>{</highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>Parse<sp/>a<sp/>JSON<sp/>text<sp/>string<sp/>to<sp/>a<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>json[]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>{<sp/>\&quot;hello\&quot;<sp/>:<sp/>\&quot;world\&quot;,<sp/>\&quot;t\&quot;<sp/>:<sp/>true<sp/>,<sp/>\&quot;f\&quot;<sp/>:<sp/>false,<sp/>\&quot;n\&quot;:<sp/>null,<sp/>\&quot;i\&quot;:123,<sp/>\&quot;pi\&quot;:<sp/>3.1416,<sp/>\&quot;a\&quot;:[1,<sp/>2,<sp/>3,<sp/>4]<sp/>}<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Original<sp/>JSON:\n<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>json);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_document" kindref="compound">Document</ref><sp/>document;<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>template<sp/>parameter<sp/>uses<sp/>UTF8<sp/>and<sp/>MemoryPoolAllocator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;normal&quot;<sp/>parsing,<sp/>decode<sp/>strings<sp/>to<sp/>new<sp/>buffers.<sp/>Can<sp/>use<sp/>other<sp/>input<sp/>stream<sp/>via<sp/>ParseStream().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(document.<ref refid="class_generic_document_1a901db1678f99a1b550003eed75bc380a" kindref="member">Parse</ref>(json).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>())</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In-situ<sp/>parsing,<sp/>decode<sp/>strings<sp/>directly<sp/>in<sp/>the<sp/>source<sp/>string.<sp/>Source<sp/>must<sp/>be<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(json)];</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buffer,<sp/>json,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(json));</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(document.<ref refid="class_generic_document_1a13f68b1896a24eea4cdbc03a3916225f" kindref="member">ParseInsitu</ref>(buffer).<ref refid="class_generic_document_1a510a0588db4eb372f5d81bc3646578fb" kindref="member">HasParseError</ref>())</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nParsing<sp/>to<sp/>document<sp/>succeeded.\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>Access<sp/>values<sp/>in<sp/>document.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nAccess<sp/>values<sp/>in<sp/>document:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document.IsObject());<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Document<sp/>is<sp/>a<sp/>JSON<sp/>value<sp/>represents<sp/>the<sp/>root<sp/>of<sp/>DOM.<sp/>Root<sp/>can<sp/>be<sp/>either<sp/>an<sp/>object<sp/>or<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document.HasMember(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document[</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">].IsString());</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;hello<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>document[</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">].GetString());</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>version<sp/>0.2,<sp/>you<sp/>can<sp/>use<sp/>single<sp/>lookup<sp/>to<sp/>check<sp/>the<sp/>existing<sp/>of<sp/>member<sp/>and<sp/>its<sp/>value:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_member_iterator" kindref="compound">Value::MemberIterator</ref><sp/>hello<sp/>=<sp/>document.FindMember(</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hello<sp/>!=<sp/>document.MemberEnd());</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(hello-&gt;value.IsString());</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(strcmp(</highlight><highlight class="stringliteral">&quot;world&quot;</highlight><highlight class="normal">,<sp/>hello-&gt;value.GetString())<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>(void)hello;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document[</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">].IsBool());<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>JSON<sp/>true/false<sp/>are<sp/>bool.<sp/>Can<sp/>also<sp/>uses<sp/>more<sp/>specific<sp/>function<sp/>IsTrue().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;t<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>document[</highlight><highlight class="stringliteral">&quot;t&quot;</highlight><highlight class="normal">].GetBool()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document[</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">].IsBool());</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;f<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>document[</highlight><highlight class="stringliteral">&quot;f&quot;</highlight><highlight class="normal">].GetBool()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;n<sp/>=<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>document[</highlight><highlight class="stringliteral">&quot;n&quot;</highlight><highlight class="normal">].IsNull()<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;?&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document[</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">].IsNumber());<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Number<sp/>is<sp/>a<sp/>JSON<sp/>type,<sp/>but<sp/>C++<sp/>needs<sp/>more<sp/>specific<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document[</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">].IsInt());<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>case,<sp/>IsUint()/IsInt64()/IsUint64()<sp/>also<sp/>return<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;i<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>document[</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">].GetInt());<sp/></highlight><highlight class="comment">//<sp/>Alternative<sp/>(int)document[&quot;i&quot;]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document[</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">].IsNumber());</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(document[</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">].IsDouble());</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;pi<sp/>=<sp/>%g\n&quot;</highlight><highlight class="normal">,<sp/>document[</highlight><highlight class="stringliteral">&quot;pi&quot;</highlight><highlight class="normal">].GetDouble());</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>document[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">];<sp/></highlight><highlight class="comment">//<sp/>Using<sp/>a<sp/>reference<sp/>for<sp/>consecutive<sp/>access<sp/>is<sp/>handy<sp/>and<sp/>faster.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(<ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.IsArray());</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.Size();<sp/>i++)<sp/></highlight><highlight class="comment">//<sp/>rapidjson<sp/>uses<sp/>SizeType<sp/>instead<sp/>of<sp/>size_t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;a[%d]<sp/>=<sp/>%d\n&quot;</highlight><highlight class="normal">,<sp/>i,<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>[i].GetInt());</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>[0].GetInt();</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(void)y;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterating<sp/>array<sp/>with<sp/>iterators</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;a<sp/>=<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_value" kindref="compound">Value::ConstValueIterator</ref><sp/>itr<sp/>=<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.Begin();<sp/>itr<sp/>!=<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.End();<sp/>++itr)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;%d<sp/>&quot;</highlight><highlight class="normal">,<sp/>itr-&gt;GetInt());</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterating<sp/>object<sp/>members</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>kTypeNames[]<sp/>=<sp/>{<sp/></highlight><highlight class="stringliteral">&quot;Null&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;False&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;True&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Object&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Array&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Number&quot;</highlight><highlight class="normal"><sp/>};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="class_generic_member_iterator" kindref="compound">Value::ConstMemberIterator</ref><sp/>itr<sp/>=<sp/>document.MemberBegin();<sp/>itr<sp/>!=<sp/>document.MemberEnd();<sp/>++itr)</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;Type<sp/>of<sp/>member<sp/>%s<sp/>is<sp/>%s\n&quot;</highlight><highlight class="normal">,<sp/>itr-&gt;name.GetString(),<sp/>kTypeNames[itr-&gt;value.GetType()]);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>3.<sp/>Modify<sp/>values<sp/>in<sp/>document.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Change<sp/>i<sp/>to<sp/>a<sp/>bigger<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>f20<sp/>=<sp/>1;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>factorial<sp/>of<sp/>20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="stdint_8h_1aec6fcb673ff035718c238c8c9d544c47" kindref="member">uint64_t</ref><sp/>j<sp/>=<sp/>1;<sp/>j<sp/>&lt;=<sp/>20;<sp/>j++)</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f20<sp/>*=<sp/>j;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document[</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">]<sp/>=<sp/>f20;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Alternate<sp/>form:<sp/>document[&quot;i&quot;].SetUint64(f20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(!document[</highlight><highlight class="stringliteral">&quot;i&quot;</highlight><highlight class="normal">].IsInt());<sp/></highlight><highlight class="comment">//<sp/>No<sp/>longer<sp/>can<sp/>be<sp/>cast<sp/>as<sp/>int<sp/>or<sp/>uint.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Adding<sp/>values<sp/>to<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref>&amp;<sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref><sp/>=<sp/>document[</highlight><highlight class="stringliteral">&quot;a&quot;</highlight><highlight class="normal">];<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>time<sp/>we<sp/>uses<sp/>non-const<sp/>reference.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_generic_document_1a35155b912da66ced38d22e2551364c57" kindref="member">Document::AllocatorType</ref>&amp;<sp/>allocator<sp/>=<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>5;<sp/>i<sp/>&lt;=<sp/>10;<sp/>i++)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.PushBack(i,<sp/>allocator);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>May<sp/>look<sp/>a<sp/>bit<sp/>strange,<sp/>allocator<sp/>is<sp/>needed<sp/>for<sp/>potentially<sp/>realloc.<sp/>We<sp/>normally<sp/>uses<sp/>the<sp/>document&apos;s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fluent<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="pointer_8h_1aeeddce917cf130d62c370b8f216026dd" kindref="member">a</ref>.PushBack(</highlight><highlight class="stringliteral">&quot;Lua&quot;</highlight><highlight class="normal">,<sp/>allocator).PushBack(</highlight><highlight class="stringliteral">&quot;Mio&quot;</highlight><highlight class="normal">,<sp/>allocator);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Making<sp/>string<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>version<sp/>of<sp/>SetString()<sp/>just<sp/>store<sp/>the<sp/>pointer<sp/>to<sp/>the<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>So<sp/>it<sp/>is<sp/>for<sp/>literal<sp/>and<sp/>string<sp/>that<sp/>exists<sp/>within<sp/>value&apos;s<sp/>life-cycle.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>document[</highlight><highlight class="stringliteral">&quot;hello&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;rapidjson&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>invoke<sp/>strlen()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Faster<sp/>version:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>document[&quot;hello&quot;].SetString(&quot;rapidjson&quot;,<sp/>9);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>version<sp/>of<sp/>SetString()<sp/>needs<sp/>an<sp/>allocator,<sp/>which<sp/>means<sp/>it<sp/>will<sp/>allocate<sp/>a<sp/>new<sp/>buffer<sp/>and<sp/>copy<sp/>the<sp/>the<sp/>string<sp/>into<sp/>the<sp/>buffer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_value" kindref="compound">Value</ref><sp/>author;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer2[10];</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len<sp/>=<sp/>sprintf(buffer2,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>%s&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Milo&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Yip&quot;</highlight><highlight class="normal">);<sp/><sp/></highlight><highlight class="comment">//<sp/>synthetic<sp/>example<sp/>of<sp/>dynamically<sp/>created<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>author.SetString(buffer2,<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="rapidjson_8h_1a5ed6e6e67250fadbd041127e6386dcb5" kindref="member">SizeType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(len),<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Shorter<sp/>but<sp/>slower<sp/>version:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>document[&quot;hello&quot;].SetString(buffer,<sp/>document.GetAllocator());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>version:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>author(buffer,<sp/>len,<sp/>document.GetAllocator());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>author(buffer,<sp/>document.GetAllocator());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memset(buffer2,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer2));<sp/></highlight><highlight class="comment">//<sp/>For<sp/>demonstration<sp/>purpose.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Variable<sp/>&apos;buffer&apos;<sp/>is<sp/>unusable<sp/>now<sp/>but<sp/>&apos;author&apos;<sp/>has<sp/>already<sp/>made<sp/>a<sp/>copy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>document.AddMember(</highlight><highlight class="stringliteral">&quot;author&quot;</highlight><highlight class="normal">,<sp/>author,<sp/>document.<ref refid="class_generic_document_1a1362cbdcce6ca37356744a3a0dbb11d6" kindref="member">GetAllocator</ref>());</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(author.IsNull());<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>semantic<sp/>for<sp/>assignment.<sp/>After<sp/>this<sp/>variable<sp/>is<sp/>assigned<sp/>as<sp/>a<sp/>member,<sp/>the<sp/>variable<sp/>becomes<sp/>null.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>4.<sp/>Stringify<sp/>JSON</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>printf(</highlight><highlight class="stringliteral">&quot;\nModified<sp/>JSON<sp/>with<sp/>reformatting:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_generic_string_buffer" kindref="compound">StringBuffer</ref><sp/>sb;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_pretty_writer" kindref="compound">PrettyWriter&lt;StringBuffer&gt;</ref><sp/>writer(sb);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>document.Accept(writer);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Accept()<sp/>traverses<sp/>the<sp/>DOM<sp/>and<sp/>generates<sp/>Handler<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>puts(sb.<ref refid="class_generic_string_buffer_1a42079865bab1deb930c6cff7d491c719" kindref="member">GetString</ref>());</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/rapidjson/example/tutorial/tutorial.cpp"/>
  </compounddef>
</doxygen>
