<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.3" xml:lang="en-US">
  <compounddef id="class_archiver" kind="class" language="C++" prot="public">
    <compoundname>Archiver</compoundname>
    <includes refid="archiver_8h" local="no">archiver.h</includes>
    <briefdescription>
<para><ref refid="class_archiver" kindref="compound">Archiver</ref> concept. </para>
    </briefdescription>
    <detaileddescription>
<para><ref refid="class_archiver" kindref="compound">Archiver</ref> can be a reader or writer for serialization or deserialization respectively.</para>
<para>class <ref refid="class_archiver" kindref="compound">Archiver</ref> { public: / <simplesect kind="return"><para>true if the archiver is in normal state. false if it has errors. operator bool() const;</para>
</simplesect>
/ Starts an object <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; StartObject();</para>
<para>/ After calling StartObject(), assign a member with a name <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; Member(const char* name);</para>
<para>/ After calling StartObject(), check if a member presents bool HasMember(const char* name) const;</para>
<para>/ Ends an object <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; EndObject();</para>
<para>/ Starts an array /<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>If Archiver::IsReader is true, the size of array is written. <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; StartArray(size_t* size = 0);</para>
</parameterdescription>
</parameteritem>
</parameterlist>
/ Ends an array <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; EndArray();</para>
<para>/ Read/Write primitive types. <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; operator&amp;(bool&amp; b); <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; operator&amp;(unsigned&amp; u); <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; operator&amp;(int&amp; i); <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; operator&amp;(double&amp; d); <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; operator&amp;(std::string&amp; s);</para>
<para>/ Write primitive types. <ref refid="class_archiver" kindref="compound">Archiver</ref>&amp; SetNull();</para>
<para>! Whether it is a reader. static const bool IsReader;</para>
<para>! Whether it is a writer. static const bool IsWriter; }; </para>
    </detaileddescription>
    <location file="src/rapidjson/example/archiver/archiver.h" line="8" column="1"/>
    <listofallmembers>
    </listofallmembers>
  </compounddef>
</doxygen>
