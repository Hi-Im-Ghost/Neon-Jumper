.TH "md_src_rapidjson_doc_sax" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_rapidjson_doc_sax \- SAX 
The term 'SAX' originated from \fCSimple API for XML\fP\&. We borrowed this term for JSON parsing and generation\&.
.PP
In RapidJSON, \fCReader\fP (typedef of \fC\fBGenericReader\fP<\&.\&.\&.>\fP) is the SAX-style parser for JSON, and \fC\fBWriter\fP\fP (typedef of \fCGenericWriter<\&.\&.\&.>\fP) is the SAX-style generator for JSON\&.
.SH "Reader"
.PP
\fCReader\fP parses a JSON from a stream\&. While it reads characters from the stream, it analyzes the characters according to the syntax of JSON, and publishes events to a handler\&.
.PP
For example, here is a JSON\&.
.PP
.PP
.nf
{
    "hello": "world",
    "t": true ,
    "f": false,
    "n": null,
    "i": 123,
    "pi": 3\&.1416,
    "a": [1, 2, 3, 4]
}
.fi
.PP
.PP
When a \fCReader\fP parses this JSON, it publishes the following events to the handler sequentially:
.PP
.PP
.nf
StartObject()
Key("hello", 5, true)
String("world", 5, true)
Key("t", 1, true)
Bool(true)
Key("f", 1, true)
Bool(false)
Key("n", 1, true)
Null()
Key("i")
Uint(123)
Key("pi")
Double(3\&.1416)
Key("a")
StartArray()
Uint(1)
Uint(2)
Uint(3)
Uint(4)
EndArray(4)
EndObject(7)
.fi
.PP
.PP
These events can be easily matched with the JSON, but some event parameters need further explanation\&. Let's see the \fCsimplereader\fP example which produces exactly the same output as above:
.PP
.PP
.nf
#include "rapidjson/reader\&.h"
#include <iostream>

using namespace rapidjson;
using namespace std;

struct MyHandler : public BaseReaderHandler<UTF8<>, MyHandler> {
    bool Null() { cout << "Null()" << endl; return true; }
    bool Bool(bool b) { cout << "Bool(" << boolalpha << b << ")" << endl; return true; }
    bool Int(int i) { cout << "Int(" << i << ")" << endl; return true; }
    bool Uint(unsigned u) { cout << "Uint(" << u << ")" << endl; return true; }
    bool Int64(int64_t i) { cout << "Int64(" << i << ")" << endl; return true; }
    bool Uint64(uint64_t u) { cout << "Uint64(" << u << ")" << endl; return true; }
    bool Double(double d) { cout << "Double(" << d << ")" << endl; return true; }
    bool String(const char* str, SizeType length, bool copy) { 
        cout << "String(" << str << ", " << length << ", " << boolalpha << copy << ")" << endl;
        return true;
    }
    bool StartObject() { cout << "StartObject()" << endl; return true; }
    bool Key(const char* str, SizeType length, bool copy) { 
        cout << "Key(" << str << ", " << length << ", " << boolalpha << copy << ")" << endl;
        return true;
    }
    bool EndObject(SizeType memberCount) { cout << "EndObject(" << memberCount << ")" << endl; return true; }
    bool StartArray() { cout << "StartArray()" << endl; return true; }
    bool EndArray(SizeType elementCount) { cout << "EndArray(" << elementCount << ")" << endl; return true; }
};

void main() {
    const char json[] = " { \"hello\" : \"world\", \"t\" : true , \"f\" : false, \"n\": null, \"i\":123, \"pi\": 3\&.1416, \"a\":[1, 2, 3, 4] } ";

    MyHandler handler;
    Reader reader;
    StringStream ss(json);
    reader\&.Parse(ss, handler);
}
.fi
.PP
.PP
Note that RapidJSON uses templates to statically bind the \fCReader\fP type and the handler type, instead of using classes with virtual functions\&. This paradigm can improve performance by inlining functions\&.
.SS "Handler"
As shown in the previous example, the user needs to implement a handler which consumes the events (via function calls) from the \fCReader\fP\&. The handler must contain the following member functions\&.
.PP
.PP
.nf
class Handler {
    bool Null();
    bool Bool(bool b);
    bool Int(int i);
    bool Uint(unsigned i);
    bool Int64(int64_t i);
    bool Uint64(uint64_t i);
    bool Double(double d);
    bool RawNumber(const Ch* str, SizeType length, bool copy);
    bool String(const Ch* str, SizeType length, bool copy);
    bool StartObject();
    bool Key(const Ch* str, SizeType length, bool copy);
    bool EndObject(SizeType memberCount);
    bool StartArray();
    bool EndArray(SizeType elementCount);
};
.fi
.PP
.PP
\fCNull()\fP is called when the \fCReader\fP encounters a JSON null value\&.
.PP
\fCBool(bool)\fP is called when the \fCReader\fP encounters a JSON true or false value\&.
.PP
When the \fCReader\fP encounters a JSON number, it chooses a suitable C++ type mapping\&. And then it calls \fIone\fP function out of \fCInt(int)\fP, \fCUint(unsigned)\fP, \fCInt64(int64_t)\fP, \fCUint64(uint64_t)\fP and \fCDouble(double)\fP\&. If \fCkParseNumbersAsStrings\fP is enabled, \fCReader\fP will always calls \fCRawNumber()\fP instead\&.
.PP
\fCString(const char* str, SizeType length, bool copy)\fP is called when the \fCReader\fP encounters a string\&. The first parameter is pointer to the string\&. The second parameter is the length of the string (excluding the null terminator)\&. Note that RapidJSON supports null character \fC\\0\fP inside a string\&. If such situation happens, \fCstrlen(str) < length\fP\&. The last \fCcopy\fP indicates whether the handler needs to make a copy of the string\&. For normal parsing, \fCcopy = true\fP\&. Only when \fIinsitu\fP parsing is used, \fCcopy = false\fP\&. And be aware that the character type depends on the target encoding, which will be explained later\&.
.PP
When the \fCReader\fP encounters the beginning of an object, it calls \fCStartObject()\fP\&. An object in JSON is a set of name-value pairs\&. If the object contains members it first calls \fCKey()\fP for the name of member, and then calls functions depending on the type of the value\&. These calls of name-value pairs repeat until calling \fCEndObject(SizeType memberCount)\fP\&. Note that the \fCmemberCount\fP parameter is just an aid for the handler; users who do not need this parameter may ignore it\&.
.PP
Arrays are similar to objects, but simpler\&. At the beginning of an array, the \fCReader\fP calls \fCBeginArray()\fP\&. If there is elements, it calls functions according to the types of element\&. Similarly, in the last call \fCEndArray(SizeType elementCount)\fP, the parameter \fCelementCount\fP is just an aid for the handler\&.
.PP
Every handler function returns a \fCbool\fP\&. Normally it should return \fCtrue\fP\&. If the handler encounters an error, it can return \fCfalse\fP to notify the event publisher to stop further processing\&.
.PP
For example, when we parse a JSON with \fCReader\fP and the handler detects that the JSON does not conform to the required schema, the handler can return \fCfalse\fP and let the \fCReader\fP stop further parsing\&. This will place the \fCReader\fP in an error state, with error code \fCkParseErrorTermination\fP\&.
.SS "GenericReader"
As mentioned before, \fCReader\fP is a typedef of a template class \fC\fBGenericReader\fP\fP:
.PP
.PP
.nf
namespace rapidjson {

template <typename SourceEncoding, typename TargetEncoding, typename Allocator = MemoryPoolAllocator<> >
class GenericReader {
    // \&.\&.\&.
};

typedef GenericReader<UTF8<>, UTF8<> > Reader;

} // namespace rapidjson
.fi
.PP
.PP
The \fCReader\fP uses UTF-8 as both source and target encoding\&. The source encoding means the encoding in the JSON stream\&. The target encoding means the encoding of the \fCstr\fP parameter in \fCString()\fP calls\&. For example, to parse a UTF-8 stream and output UTF-16 string events, you can define a reader by:
.PP
.PP
.nf
GenericReader<UTF8<>, UTF16<> > reader;
.fi
.PP
.PP
Note that, the default character type of \fC\fBUTF16\fP\fP is \fCwchar_t\fP\&. So this \fCreader\fP needs to call \fCString(const wchar_t*, SizeType, bool)\fP of the handler\&.
.PP
The third template parameter \fCAllocator\fP is the allocator type for internal data structure (actually a stack)\&.
.SS "Parsing"
The main function of \fCReader\fP is used to parse JSON\&.
.PP
.PP
.nf
template <unsigned parseFlags, typename InputStream, typename Handler>
bool Parse(InputStream& is, Handler& handler);

// with parseFlags = kDefaultParseFlags
template <typename InputStream, typename Handler>
bool Parse(InputStream& is, Handler& handler);
.fi
.PP
.PP
If an error occurs during parsing, it will return \fCfalse\fP\&. User can also call \fCbool HasParseError()\fP, \fCParseErrorCode GetParseErrorCode()\fP and \fCsize_t GetErrorOffset()\fP to obtain the error states\&. In fact, \fCDocument\fP uses these \fCReader\fP functions to obtain parse errors\&. Please refer to \fBDOM\fP for details about parse errors\&.
.SS "Token-by-Token Parsing"
Some users may wish to parse a JSON input stream a single token at a time, instead of immediately parsing an entire document without stopping\&. To parse JSON this way, instead of calling \fCParse\fP, you can use the \fCIterativeParse\fP set of functions:
.PP
.PP
.nf
void IterativeParseInit();

template <unsigned parseFlags, typename InputStream, typename Handler>
bool IterativeParseNext(InputStream& is, Handler& handler);

bool IterativeParseComplete();
.fi
.PP
.PP
Here is an example of iteratively parsing JSON, token by token:
.PP
.PP
.nf
reader\&.IterativeParseInit();
while (!reader\&.IterativeParseComplete()) {
    reader\&.IterativeParseNext<kParseDefaultFlags>(is, handler);
    // Your handler has been called once\&.
}
.fi
.PP
.SH "Writer"
.PP
\fCReader\fP converts (parses) JSON into events\&. \fC\fBWriter\fP\fP does exactly the opposite\&. It converts events into JSON\&.
.PP
\fC\fBWriter\fP\fP is very easy to use\&. If your application only need to converts some data into JSON, it may be a good choice to use \fC\fBWriter\fP\fP directly, instead of building a \fCDocument\fP and then stringifying it with a \fC\fBWriter\fP\fP\&.
.PP
In \fCsimplewriter\fP example, we do exactly the reverse of \fCsimplereader\fP\&.
.PP
.PP
.nf
#include "rapidjson/writer\&.h"
#include "rapidjson/stringbuffer\&.h"
#include <iostream>

using namespace rapidjson;
using namespace std;

void main() {
    StringBuffer s;
    Writer<StringBuffer> writer(s);
    
    writer\&.StartObject();
    writer\&.Key("hello");
    writer\&.String("world");
    writer\&.Key("t");
    writer\&.Bool(true);
    writer\&.Key("f");
    writer\&.Bool(false);
    writer\&.Key("n");
    writer\&.Null();
    writer\&.Key("i");
    writer\&.Uint(123);
    writer\&.Key("pi");
    writer\&.Double(3\&.1416);
    writer\&.Key("a");
    writer\&.StartArray();
    for (unsigned i = 0; i < 4; i++)
        writer\&.Uint(i);
    writer\&.EndArray();
    writer\&.EndObject();

    cout << s\&.GetString() << endl;
}
.fi
.PP
.PP
.PP
.nf
{"hello":"world","t":true,"f":false,"n":null,"i":123,"pi":3\&.1416,"a":[0,1,2,3]}
.fi
.PP
.PP
There are two \fCString()\fP and \fCKey()\fP overloads\&. One is the same as defined in handler concept with 3 parameters\&. It can handle string with null characters\&. Another one is the simpler version used in the above example\&.
.PP
Note that, the example code does not pass any parameters in \fCEndArray()\fP and \fCEndObject()\fP\&. An \fCSizeType\fP can be passed but it will be simply ignored by \fC\fBWriter\fP\fP\&.
.PP
You may doubt that, why not just using \fCsprintf()\fP or \fCstd::stringstream\fP to build a JSON?
.PP
There are various reasons:
.IP "1." 4
\fC\fBWriter\fP\fP must output a well-formed JSON\&. If there is incorrect event sequence (e\&.g\&. \fCInt()\fP just after \fCStartObject()\fP), it generates assertion fail in debug mode\&.
.IP "2." 4
\fC\fBWriter::String()\fP\fP can handle string escaping (e\&.g\&. converting code point \fCU+000A\fP to \fC\\n\fP) and Unicode transcoding\&.
.IP "3." 4
\fC\fBWriter\fP\fP handles number output consistently\&.
.IP "4." 4
\fC\fBWriter\fP\fP implements the event handler concept\&. It can be used to handle events from \fCReader\fP, \fCDocument\fP or other event publisher\&.
.IP "5." 4
\fC\fBWriter\fP\fP can be optimized for different platforms\&.
.PP
.PP
Anyway, using \fC\fBWriter\fP\fP API is even simpler than generating a JSON by ad hoc methods\&.
.SS "Template"
\fC\fBWriter\fP\fP has a minor design difference to \fCReader\fP\&. \fC\fBWriter\fP\fP is a template class, not a typedef\&. There is no \fCGenericWriter\fP\&. The following is the declaration\&.
.PP
.PP
.nf
namespace rapidjson {

template<typename OutputStream, typename SourceEncoding = UTF8<>, typename TargetEncoding = UTF8<>, typename Allocator = CrtAllocator<>, unsigned writeFlags = kWriteDefaultFlags>
class Writer {
public:
    Writer(OutputStream& os, Allocator* allocator = 0, size_t levelDepth = kDefaultLevelDepth)
// \&.\&.\&.
};

} // namespace rapidjson
.fi
.PP
.PP
The \fCOutputStream\fP template parameter is the type of output stream\&. It cannot be deduced and must be specified by user\&.
.PP
The \fCSourceEncoding\fP template parameter specifies the encoding to be used in \fCString(const Ch*, \&.\&.\&.)\fP\&.
.PP
The \fCTargetEncoding\fP template parameter specifies the encoding in the output stream\&.
.PP
The \fCAllocator\fP is the type of allocator, which is used for allocating internal data structure (a stack)\&.
.PP
The \fCwriteFlags\fP are combination of the following bit-flags:
.PP
Parse flags   Meaning    \fCkWriteNoFlags\fP   No flag is set\&.    \fCkWriteDefaultFlags\fP   Default write flags\&. It is equal to macro \fCRAPIDJSON_WRITE_DEFAULT_FLAGS\fP, which is defined as \fCkWriteNoFlags\fP\&.    \fCkWriteValidateEncodingFlag\fP   Validate encoding of JSON strings\&.    \fCkWriteNanAndInfFlag\fP   Allow writing of \fCInfinity\fP, \fC-Infinity\fP and \fCNaN\fP\&.   
.PP
Besides, the constructor of \fC\fBWriter\fP\fP has a \fClevelDepth\fP parameter\&. This parameter affects the initial memory allocated for storing information per hierarchy level\&.
.SS "PrettyWriter"
While the output of \fC\fBWriter\fP\fP is the most condensed JSON without white-spaces, suitable for network transfer or storage, it is not easily readable by human\&.
.PP
Therefore, RapidJSON provides a \fC\fBPrettyWriter\fP\fP, which adds indentation and line feeds in the output\&.
.PP
The usage of \fC\fBPrettyWriter\fP\fP is exactly the same as \fC\fBWriter\fP\fP, expect that \fC\fBPrettyWriter\fP\fP provides a \fCSetIndent(Ch indentChar, unsigned indentCharCount)\fP function\&. The default is 4 spaces\&.
.SS "Completeness and Reset"
A \fC\fBWriter\fP\fP can only output a single JSON, which can be any JSON type at the root\&. Once the singular event for root (e\&.g\&. \fCString()\fP), or the last matching \fCEndObject()\fP or \fCEndArray()\fP event, is handled, the output JSON is well-formed and complete\&. User can detect this state by calling \fC\fBWriter::IsComplete()\fP\fP\&.
.PP
When a JSON is complete, the \fC\fBWriter\fP\fP cannot accept any new events\&. Otherwise the output will be invalid (i\&.e\&. having more than one root)\&. To reuse the \fC\fBWriter\fP\fP object, user can call \fC\fBWriter::Reset(OutputStream& os)\fP\fP to reset all internal states of the \fC\fBWriter\fP\fP with a new output stream\&.
.SH "Techniques"
.PP
.SS "Parsing JSON to Custom Data Structure"
\fCDocument\fP's parsing capability is completely based on \fCReader\fP\&. Actually \fCDocument\fP is a handler which receives events from a reader to build a DOM during parsing\&.
.PP
User may uses \fCReader\fP to build other data structures directly\&. This eliminates building of DOM, thus reducing memory and improving performance\&.
.PP
In the following \fCmessagereader\fP example, \fC\fBParseMessages()\fP\fP parses a JSON which should be an object with key-string pairs\&.
.PP
.PP
.nf
#include "rapidjson/reader\&.h"
#include "rapidjson/error/en\&.h"
#include <iostream>
#include <string>
#include <map>

using namespace std;
using namespace rapidjson;

typedef map<string, string> MessageMap;

struct MessageHandler
    : public BaseReaderHandler<UTF8<>, MessageHandler> {
    MessageHandler() : state_(kExpectObjectStart) {
    }

    bool StartObject() {
        switch (state_) {
        case kExpectObjectStart:
            state_ = kExpectNameOrObjectEnd;
            return true;
        default:
            return false;
        }
    }

    bool String(const char* str, SizeType length, bool) {
        switch (state_) {
        case kExpectNameOrObjectEnd:
            name_ = string(str, length);
            state_ = kExpectValue;
            return true;
        case kExpectValue:
            messages_\&.insert(MessageMap::value_type(name_, string(str, length)));
            state_ = kExpectNameOrObjectEnd;
            return true;
        default:
            return false;
        }
    }

    bool EndObject(SizeType) { return state_ == kExpectNameOrObjectEnd; }

    bool Default() { return false; } // All other events are invalid\&.

    MessageMap messages_;
    enum State {
        kExpectObjectStart,
        kExpectNameOrObjectEnd,
        kExpectValue,
    }state_;
    std::string name_;
};

void ParseMessages(const char* json, MessageMap& messages) {
    Reader reader;
    MessageHandler handler;
    StringStream ss(json);
    if (reader\&.Parse(ss, handler))
        messages\&.swap(handler\&.messages_);   // Only change it if success\&.
    else {
        ParseErrorCode e = reader\&.GetParseErrorCode();
        size_t o = reader\&.GetErrorOffset();
        cout << "Error: " << GetParseError_En(e) << endl;;
        cout << " at offset " << o << " near '" << string(json)\&.substr(o, 10) << "\&.\&.\&.'" << endl;
    }
}

int main() {
    MessageMap messages;

    const char* json1 = "{ \"greeting\" : \"Hello!\", \"farewell\" : \"bye-bye!\" }";
    cout << json1 << endl;
    ParseMessages(json1, messages);

    for (MessageMap::const_iterator itr = messages\&.begin(); itr != messages\&.end(); ++itr)
        cout << itr->first << ": " << itr->second << endl;

    cout << endl << "Parse a JSON with invalid schema\&." << endl;
    const char* json2 = "{ \"greeting\" : \"Hello!\", \"farewell\" : \"bye-bye!\", \"foo\" : {} }";
    cout << json2 << endl;
    ParseMessages(json2, messages);

    return 0;
}
.fi
.PP
.PP
.PP
.nf
{ "greeting" : "Hello!", "farewell" : "bye-bye!" }
farewell: bye-bye!
greeting: Hello!

Parse a JSON with invalid schema\&.
{ "greeting" : "Hello!", "farewell" : "bye-bye!", "foo" : {} }
Error: Terminate parsing due to Handler error\&.
 at offset 59 near '} }\&.\&.\&.'
.fi
.PP
.PP
The first JSON (\fCjson1\fP) was successfully parsed into \fCMessageMap\fP\&. Since \fCMessageMap\fP is a \fCstd::map\fP, the printing order are sorted by the key\&. This order is different from the JSON's order\&.
.PP
In the second JSON (\fCjson2\fP), \fCfoo\fP's value is an empty object\&. As it is an object, \fC\fBMessageHandler::StartObject()\fP\fP will be called\&. However, at that moment \fCstate_ = kExpectValue\fP, so that function returns \fCfalse\fP and cause the parsing process be terminated\&. The error code is \fCkParseErrorTermination\fP\&.
.SS "Filtering of JSON"
As mentioned earlier, \fC\fBWriter\fP\fP can handle the events published by \fCReader\fP\&. \fCcondense\fP example simply set a \fC\fBWriter\fP\fP as handler of a \fCReader\fP, so it can remove all white-spaces in JSON\&. \fCpretty\fP example uses the same relationship, but replacing \fC\fBWriter\fP\fP by \fC\fBPrettyWriter\fP\fP\&. So \fCpretty\fP can be used to reformat a JSON with indentation and line feed\&.
.PP
Actually, we can add intermediate layer(s) to filter the contents of JSON via these SAX-style API\&. For example, \fCcapitalize\fP example capitalize all strings in a JSON\&.
.PP
.PP
.nf
#include "rapidjson/reader\&.h"
#include "rapidjson/writer\&.h"
#include "rapidjson/filereadstream\&.h"
#include "rapidjson/filewritestream\&.h"
#include "rapidjson/error/en\&.h"
#include <vector>
#include <cctype>

using namespace rapidjson;

template<typename OutputHandler>
struct CapitalizeFilter {
    CapitalizeFilter(OutputHandler& out) : out_(out), buffer_() {
    }

    bool Null() { return out_\&.Null(); }
    bool Bool(bool b) { return out_\&.Bool(b); }
    bool Int(int i) { return out_\&.Int(i); }
    bool Uint(unsigned u) { return out_\&.Uint(u); }
    bool Int64(int64_t i) { return out_\&.Int64(i); }
    bool Uint64(uint64_t u) { return out_\&.Uint64(u); }
    bool Double(double d) { return out_\&.Double(d); }
    bool RawNumber(const char* str, SizeType length, bool copy) { return out_\&.RawNumber(str, length, copy); }
    bool String(const char* str, SizeType length, bool) { 
        buffer_\&.clear();
        for (SizeType i = 0; i < length; i++)
            buffer_\&.push_back(std::toupper(str[i]));
        return out_\&.String(&buffer_\&.front(), length, true); // true = output handler need to copy the string
    }
    bool StartObject() { return out_\&.StartObject(); }
    bool Key(const char* str, SizeType length, bool copy) { return String(str, length, copy); }
    bool EndObject(SizeType memberCount) { return out_\&.EndObject(memberCount); }
    bool StartArray() { return out_\&.StartArray(); }
    bool EndArray(SizeType elementCount) { return out_\&.EndArray(elementCount); }

    OutputHandler& out_;
    std::vector<char> buffer_;
};

int main(int, char*[]) {
    // Prepare JSON reader and input stream\&.
    Reader reader;
    char readBuffer[65536];
    FileReadStream is(stdin, readBuffer, sizeof(readBuffer));

    // Prepare JSON writer and output stream\&.
    char writeBuffer[65536];
    FileWriteStream os(stdout, writeBuffer, sizeof(writeBuffer));
    Writer<FileWriteStream> writer(os);

    // JSON reader parse from the input stream and let writer generate the output\&.
    CapitalizeFilter<Writer<FileWriteStream> > filter(writer);
    if (!reader\&.Parse(is, filter)) {
        fprintf(stderr, "\nError(%u): %s\n", (unsigned)reader\&.GetErrorOffset(), GetParseError_En(reader\&.GetParseErrorCode()));
        return 1;
    }

    return 0;
}
.fi
.PP
.PP
Note that, it is incorrect to simply capitalize the JSON as a string\&. For example: 
.PP
.nf
["Hello\nWorld"]

.fi
.PP
.PP
Simply capitalizing the whole JSON would contain incorrect escape character: 
.PP
.nf
["HELLO\NWORLD"]

.fi
.PP
.PP
The correct result by \fCcapitalize\fP: 
.PP
.nf
["HELLO\nWORLD"]

.fi
.PP
.PP
More complicated filters can be developed\&. However, since SAX-style API can only provide information about a single event at a time, user may need to book-keeping the contextual information (e\&.g\&. the path from root value, storage of other related values)\&. Some processing may be easier to be implemented in DOM than SAX\&. 
