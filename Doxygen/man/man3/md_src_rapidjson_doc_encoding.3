.TH "md_src_rapidjson_doc_encoding" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_rapidjson_doc_encoding \- Encoding 
According to \fCECMA-404\fP,
.PP
.RS 4
(in Introduction) JSON text is a sequence of Unicode code points\&. 
.RE
.PP
The earlier \fCRFC4627\fP stated that,
.PP
.RS 4
(in §3) JSON text SHALL be encoded in Unicode\&. The default encoding is UTF-8\&. 
.RE
.PP
.RS 4
(in §6) JSON may be represented using UTF-8, UTF-16, or UTF-32\&. When JSON is written in UTF-8, JSON is 8bit compatible\&. When JSON is written in UTF-16 or UTF-32, the binary content-transfer-encoding must be used\&. 
.RE
.PP
RapidJSON supports various encodings\&. It can also validate the encodings of JSON, and transcoding JSON among encodings\&. All these features are implemented internally, without the need for external libraries (e\&.g\&. \fCICU\fP)\&.
.SH "Unicode"
.PP
From \fCUnicode's official website\fP: 
.PP
.RS 4
Unicode provides a unique number for every character, no matter what the platform, no matter what the program, no matter what the language\&. 
.RE
.PP
Those unique numbers are called code points, which is in the range \fC0x0\fP to \fC0x10FFFF\fP\&.
.SS "Unicode Transformation Format"
There are various encodings for storing Unicode code points\&. These are called Unicode Transformation Format (UTF)\&. RapidJSON supports the most commonly used UTFs, including
.PP
.IP "\(bu" 2
UTF-8: 8-bit variable-width encoding\&. It maps a code point to 1–4 bytes\&.
.IP "\(bu" 2
UTF-16: 16-bit variable-width encoding\&. It maps a code point to 1–2 16-bit code units (i\&.e\&., 2–4 bytes)\&.
.IP "\(bu" 2
UTF-32: 32-bit fixed-width encoding\&. It directly maps a code point to a single 32-bit code unit (i\&.e\&. 4 bytes)\&.
.PP
.PP
For UTF-16 and UTF-32, the byte order (endianness) does matter\&. Within computer memory, they are often stored in the computer's endianness\&. However, when it is stored in file or transferred over network, we need to state the byte order of the byte sequence, either little-endian (LE) or big-endian (BE)\&.
.PP
RapidJSON provide these encodings via the structs in \fC\fBrapidjson/encodings\&.h\fP\fP:
.PP
.PP
.nf
namespace rapidjson {

template<typename CharType = char>
struct UTF8;

template<typename CharType = wchar_t>
struct UTF16;

template<typename CharType = wchar_t>
struct UTF16LE;

template<typename CharType = wchar_t>
struct UTF16BE;

template<typename CharType = unsigned>
struct UTF32;

template<typename CharType = unsigned>
struct UTF32LE;

template<typename CharType = unsigned>
struct UTF32BE;

} // namespace rapidjson
.fi
.PP
.PP
For processing text in memory, we normally use \fC\fBUTF8\fP\fP, \fC\fBUTF16\fP\fP or \fC\fBUTF32\fP\fP\&. For processing text via I/O, we may use \fC\fBUTF8\fP\fP, \fC\fBUTF16LE\fP\fP, \fC\fBUTF16BE\fP\fP, \fC\fBUTF32LE\fP\fP or \fC\fBUTF32BE\fP\fP\&.
.PP
When using the DOM-style API, the \fCEncoding\fP template parameter in \fC\fBGenericValue\fP<Encoding>\fP and \fC\fBGenericDocument\fP<Encoding>\fP indicates the encoding to be used to represent JSON string in memory\&. So normally we will use \fC\fBUTF8\fP\fP, \fC\fBUTF16\fP\fP or \fC\fBUTF32\fP\fP for this template parameter\&. The choice depends on operating systems and other libraries that the application is using\&. For example, Windows API represents Unicode characters in UTF-16, while most Linux distributions and applications prefer UTF-8\&.
.PP
Example of UTF-16 DOM declaration:
.PP
.PP
.nf
typedef GenericDocument<UTF16<> > WDocument;
typedef GenericValue<UTF16<> > WValue;
.fi
.PP
.PP
For a detail example, please check the example in \fBDOM's Encoding\fP section\&.
.SS "Character Type"
As shown in the declaration, each encoding has a \fCCharType\fP template parameter\&. Actually, it may be a little bit confusing, but each \fCCharType\fP stores a code unit, not a character (code point)\&. As mentioned in previous section, a code point may be encoded to 1–4 code units for UTF-8\&.
.PP
For \fC\fBUTF16\fP(LE|BE)\fP, \fC\fBUTF32\fP(LE|BE)\fP, the \fCCharType\fP must be integer type of at least 2 and 4 bytes respectively\&.
.PP
Note that C++11 introduces \fCchar16_t\fP and \fCchar32_t\fP, which can be used for \fC\fBUTF16\fP\fP and \fC\fBUTF32\fP\fP respectively\&.
.SS "AutoUTF"
Previous encodings are statically bound in compile-time\&. In other words, user must know exactly which encodings will be used in the memory or streams\&. However, sometimes we may need to read/write files of different encodings\&. The encoding needed to be decided in runtime\&.
.PP
\fC\fBAutoUTF\fP\fP is an encoding designed for this purpose\&. It chooses which encoding to be used according to the input or output stream\&. Currently, it should be used with \fC\fBEncodedInputStream\fP\fP and \fC\fBEncodedOutputStream\fP\fP\&.
.SS "ASCII"
Although the JSON standards did not mention about \fCASCII\fP, sometimes we would like to write 7-bit \fBASCII\fP JSON for applications that cannot handle UTF-8\&. Since any JSON can represent unicode characters in escaped sequence \fC\\uXXXX\fP, JSON can always be encoded in \fBASCII\fP\&.
.PP
Here is an example for writing a UTF-8 DOM into \fBASCII\fP:
.PP
.PP
.nf
using namespace rapidjson;
Document d; // UTF8<>
// \&.\&.\&.
StringBuffer buffer;
Writer<StringBuffer, Document::EncodingType, ASCII<> > writer(buffer);
d\&.Accept(writer);
std::cout << buffer\&.GetString();
.fi
.PP
.PP
\fBASCII\fP can be used in input stream\&. If the input stream contains bytes with values above 127, it will cause \fCkParseErrorStringInvalidEncoding\fP error\&.
.PP
\fBASCII\fP \fIcannot\fP be used in memory (encoding of \fCDocument\fP or target encoding of \fCReader\fP), as it cannot represent Unicode code points\&.
.SH "Validation & Transcoding"
.PP
When RapidJSON parses a JSON, it can validate the input JSON, whether it is a valid sequence of a specified encoding\&. This option can be turned on by adding \fCkParseValidateEncodingFlag\fP in \fCparseFlags\fP template parameter\&.
.PP
If the input encoding and output encoding is different, \fCReader\fP and \fC\fBWriter\fP\fP will automatically transcode (convert) the text\&. In this case, \fCkParseValidateEncodingFlag\fP is not necessary, as it must decode the input sequence\&. And if the sequence was unable to be decoded, it must be invalid\&.
.SS "Transcoder"
Although the encoding functions in RapidJSON are designed for JSON parsing/generation, user may abuse them for transcoding of non-JSON strings\&.
.PP
Here is an example for transcoding a string from UTF-8 to UTF-16:
.PP
.PP
.nf
#include "rapidjson/encodings\&.h"

using namespace rapidjson;

const char* s = "\&.\&.\&."; // UTF-8 string
StringStream source(s);
GenericStringBuffer<UTF16<> > target;

bool hasError = false;
while (source\&.Peek() != '\0')
    if (!Transcoder<UTF8<>, UTF16<> >::Transcode(source, target)) {
        hasError = true;
        break;
    }

if (!hasError) {
    const wchar_t* t = target\&.GetString();
    // \&.\&.\&.
}
.fi
.PP
.PP
You may also use \fC\fBAutoUTF\fP\fP and the associated streams for setting source/target encoding in runtime\&. 
