.TH "RAPIDJSON_CONFIG" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
RAPIDJSON_CONFIG \- RapidJSON configuration
.PP
 \- Configuration macros for library features\&.  

.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY\fP   (64 * 1024)"
.br
.RI "User-defined kDefaultChunkCapacity definition\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_DEFAULT_ALLOCATOR\fP   \fBMemoryPoolAllocator\fP<\fBCrtAllocator\fP>"
.br
.RI "Allows to choose default allocator\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_DEFAULT_STACK_ALLOCATOR\fP   \fBCrtAllocator\fP"
.br
.RI "Allows to choose default stack allocator for Document\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY\fP   16"
.br
.RI "User defined kDefaultObjectCapacity value\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY\fP   16"
.br
.RI "User defined kDefaultArrayCapacity value\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_MAJOR_VERSION\fP   1"
.br
.RI "Major version of RapidJSON in integer\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_MINOR_VERSION\fP   1"
.br
.RI "Minor version of RapidJSON in integer\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_PATCH_VERSION\fP   0"
.br
.RI "Patch version of RapidJSON in integer\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_VERSION_STRING\fP       RAPIDJSON_STRINGIFY(\fBRAPIDJSON_MAJOR_VERSION\&.RAPIDJSON_MINOR_VERSION\&.RAPIDJSON_PATCH_VERSION\fP)"
.br
.RI "Version of RapidJSON in '<major>\&.<minor>\&.<patch>' string format\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_NAMESPACE\fP   rapidjson"
.br
.RI "provide custom rapidjson namespace "
.ti -1c
.RI "#define \fBRAPIDJSON_NAMESPACE_BEGIN\fP   namespace \fBRAPIDJSON_NAMESPACE\fP {"
.br
.RI "provide custom rapidjson namespace (opening expression) "
.ti -1c
.RI "#define \fBRAPIDJSON_NAMESPACE_END\fP   }"
.br
.RI "provide custom rapidjson namespace (closing expression) "
.ti -1c
.RI "#define \fBRAPIDJSON_HAS_STDSTRING\fP   0"
.br
.RI "Enable RapidJSON support for \fCstd::string\fP\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_USE_MEMBERSMAP\fP"
.br
.RI "Enable RapidJSON support for object members handling in a \fCstd::multimap\fP\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_ALIGN\fP(x)   (((x) + static_cast<size_t>(7u)) & ~static_cast<size_t>(7u))"
.br
.RI "Data alignment of the machine\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_48BITPOINTER_OPTIMIZATION\fP   0"
.br
.RI "Use only lower 48-bit address for some pointers\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_ASSERT\fP(x)   assert(x)"
.br
.RI "Assertion\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_LIKELY\fP(x)   (x)"
.br
.RI "Compiler branching hint for expression with high probability to be true\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_UNLIKELY\fP(x)   (x)"
.br
.RI "Compiler branching hint for expression with low probability to be true\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_NOEXCEPT_ASSERT\fP(x)   \fBRAPIDJSON_ASSERT\fP(x)"
.br
.RI "Assertion (in non-throwing contexts)\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_VALIDATE_DEFAULT_FLAGS\fP   \fBkValidateNoFlags\fP"
.br
.RI "User-defined kValidateDefaultFlags definition\&. "
.in -1c
.SH "Detailed Description"
.PP 
Configuration macros for library features\&. 

Some RapidJSON features are configurable to adapt the library to a wide variety of platforms, environments and usage scenarios\&. Most of the features can be configured in terms of overridden or predefined preprocessor macros at compile-time\&.
.PP
Some additional customization is available in the \fBRapidJSON error handling\fP APIs\&.
.PP
\fBNote\fP
.RS 4
These macros should be given on the compiler command-line (where applicable) to avoid inconsistent values when compiling different translation units of a single application\&. 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define RAPIDJSON_48BITPOINTER_OPTIMIZATION   0"

.PP
Use only lower 48-bit address for some pointers\&. This optimization uses the fact that current X86-64 architecture only implement lower 48-bit virtual address\&. The higher 16-bit can be used for storing other data\&. \fC\fBGenericValue\fP\fP uses this optimization to reduce its size form 24 bytes to 16 bytes in 64-bit architecture\&. 
.SS "#define RAPIDJSON_ALIGN(x)   (((x) + static_cast<size_t>(7u)) & ~static_cast<size_t>(7u))"

.PP
Data alignment of the machine\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP pointer to align
.RE
.PP
Some machines require strict data alignment\&. The default is 8 bytes\&. User can customize by defining the RAPIDJSON_ALIGN function macro\&. 
.SS "#define RAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY   (64 * 1024)"

.PP
User-defined kDefaultChunkCapacity definition\&. User can define this as any \fCsize\fP that is a power of 2\&. 
.SS "#define RAPIDJSON_ASSERT(x)   assert(x)"

.PP
Assertion\&. By default, rapidjson uses C \fCassert()\fP for internal assertions\&. User can override it by defining \fBRAPIDJSON_ASSERT(x)\fP macro\&.
.PP
\fBNote\fP
.RS 4
Parsing errors are handled and can be customized by the \fBRapidJSON error handling\fP APIs\&. 
.RE
.PP

.SS "#define RAPIDJSON_DEFAULT_ALLOCATOR   \fBMemoryPoolAllocator\fP<\fBCrtAllocator\fP>"

.PP
Allows to choose default allocator\&. User can define this to use \fBCrtAllocator\fP or \fBMemoryPoolAllocator\fP\&. 
.SS "#define RAPIDJSON_DEFAULT_STACK_ALLOCATOR   \fBCrtAllocator\fP"

.PP
Allows to choose default stack allocator for Document\&. User can define this to use \fBCrtAllocator\fP or \fBMemoryPoolAllocator\fP\&. 
.SS "#define RAPIDJSON_HAS_STDSTRING   0"

.PP
Enable RapidJSON support for \fCstd::string\fP\&. By defining this preprocessor symbol to \fC1\fP, several convenience functions for using \fBrapidjson::GenericValue\fP with \fCstd::string\fP are enabled, especially for construction and comparison\&. 
.SS "#define RAPIDJSON_LIKELY(x)   (x)"

.PP
Compiler branching hint for expression with high probability to be true\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP Boolean expression likely to be true\&. 
.RE
.PP

.SS "#define RAPIDJSON_MAJOR_VERSION   1"

.PP
Major version of RapidJSON in integer\&. 
.SS "#define RAPIDJSON_MINOR_VERSION   1"

.PP
Minor version of RapidJSON in integer\&. 
.SS "#define RAPIDJSON_NAMESPACE   rapidjson"

.PP
provide custom rapidjson namespace In order to avoid symbol clashes and/or 'One Definition Rule' errors between multiple inclusions of (different versions of) RapidJSON in a single binary, users can customize the name of the main RapidJSON namespace\&.
.PP
In case of a single nesting level, defining \fCRAPIDJSON_NAMESPACE\fP to a custom name (e\&.g\&. \fCMyRapidJSON\fP) is sufficient\&. If multiple levels are needed, both \fBRAPIDJSON_NAMESPACE_BEGIN\fP and \fBRAPIDJSON_NAMESPACE_END\fP need to be defined as well:
.PP
.PP
.nf
// in some \&.cpp file
#define RAPIDJSON_NAMESPACE my::rapidjson
#define RAPIDJSON_NAMESPACE_BEGIN namespace my { namespace rapidjson {
#define RAPIDJSON_NAMESPACE_END   } }
#include "rapidjson/\&.\&.\&."
.fi
.PP
.PP
\fBSee also\fP
.RS 4
\fBrapidjson\fP 
.RE
.PP

.SS "#define RAPIDJSON_NAMESPACE_BEGIN   namespace \fBRAPIDJSON_NAMESPACE\fP {"

.PP
provide custom rapidjson namespace (opening expression) 
.PP
\fBSee also\fP
.RS 4
\fBRAPIDJSON_NAMESPACE\fP 
.RE
.PP

.SS "#define RAPIDJSON_NAMESPACE_END   }"

.PP
provide custom rapidjson namespace (closing expression) 
.PP
\fBSee also\fP
.RS 4
\fBRAPIDJSON_NAMESPACE\fP 
.RE
.PP

.SS "#define RAPIDJSON_NOEXCEPT_ASSERT(x)   \fBRAPIDJSON_ASSERT\fP(x)"

.PP
Assertion (in non-throwing contexts)\&. Some functions provide a \fCnoexcept\fP guarantee, if the compiler supports it\&. In these cases, the \fBRAPIDJSON_ASSERT\fP macro cannot be overridden to throw an exception\&. This macro adds a separate customization point for such cases\&.
.PP
Defaults to C \fCassert()\fP (as \fBRAPIDJSON_ASSERT\fP), if \fCnoexcept\fP is supported, and to \fBRAPIDJSON_ASSERT\fP otherwise\&. 
.SS "#define RAPIDJSON_PATCH_VERSION   0"

.PP
Patch version of RapidJSON in integer\&. 
.SS "#define RAPIDJSON_UNLIKELY(x)   (x)"

.PP
Compiler branching hint for expression with low probability to be true\&. 
.PP
\fBParameters\fP
.RS 4
\fIx\fP Boolean expression unlikely to be true\&. 
.RE
.PP

.SS "#define RAPIDJSON_USE_MEMBERSMAP"

.PP
Enable RapidJSON support for object members handling in a \fCstd::multimap\fP\&. By defining this preprocessor symbol to \fC1\fP, \fBrapidjson::GenericValue\fP object members are stored in a \fCstd::multimap\fP for faster lookup and deletion times, a trade off with a slightly slower insertion time and a small object allocat(or)ed memory overhead\&. 
.SS "#define RAPIDJSON_VALIDATE_DEFAULT_FLAGS   \fBkValidateNoFlags\fP"

.PP
User-defined kValidateDefaultFlags definition\&. User can define this as any \fCValidateFlag\fP combinations\&. 
.SS "#define RAPIDJSON_VALUE_DEFAULT_ARRAY_CAPACITY   16"

.PP
User defined kDefaultArrayCapacity value\&. User can define this as any natural number\&. 
.SS "#define RAPIDJSON_VALUE_DEFAULT_OBJECT_CAPACITY   16"

.PP
User defined kDefaultObjectCapacity value\&. User can define this as any natural number\&. 
.SS "#define RAPIDJSON_VERSION_STRING       RAPIDJSON_STRINGIFY(\fBRAPIDJSON_MAJOR_VERSION\&.RAPIDJSON_MINOR_VERSION\&.RAPIDJSON_PATCH_VERSION\fP)"

.PP
Version of RapidJSON in '<major>\&.<minor>\&.<patch>' string format\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
