.TH "md_src_rapidjson_doc_schema_zh_cn" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_rapidjson_doc_schema_zh_cn \- \fBSchema\fP 
（本功能于 v1\&.1\&.0 发布）
.PP
JSON \fBSchema\fP 是描述 JSON 格式的一个标准草案。一个 schema 本身也是一个 JSON。使用 JSON \fBSchema\fP 去校验 JSON，可以让你的代码安全地访问 DOM，而无须检查类型或键值是否存在等。这也能确保输出的 JSON 是符合指定的 schema。
.PP
RapidJSON 实现了一个 \fCJSON Schema Draft v4\fP 的校验器。若你不熟悉 JSON Schema，可以参考 \fCUnderstanding JSON Schema\fP。
.SH "Basic Usage"
.PP
首先，你要把 JSON \fBSchema\fP 解析成 \fCDocument\fP，再把它编译成一个 \fCSchemaDocument\fP。
.PP
然后，利用该 \fCSchemaDocument\fP 创建一个 \fCSchemaValidator\fP。它与 \fC\fBWriter\fP\fP 相似，都是能够处理 SAX 事件的。因此，你可以用 \fCdocument\&.Accept(validator)\fP 去校验一个 JSON，然后再获取校验结果。
.PP
.PP
.nf
#include "rapidjson/schema\&.h"

// \&.\&.\&.

Document sd;
if (sd\&.Parse(schemaJson)\&.HasParseError()) {
    // 此 schema 不是合法的 JSON
    // \&.\&.\&.       
}
SchemaDocument schema(sd); // 把一个 Document 编译至 SchemaDocument
// 之后不再需要 sd

Document d;
if (d\&.Parse(inputJson)\&.HasParseError()) {
    // 输入不是一个合法的 JSON
    // \&.\&.\&.       
}

SchemaValidator validator(schema);
if (!d\&.Accept(validator)) {
    // 输入的 JSON 不合乎 schema
    // 打印诊断信息
    StringBuffer sb;
    validator\&.GetInvalidSchemaPointer()\&.StringifyUriFragment(sb);
    printf("Invalid schema: %s\n", sb\&.GetString());
    printf("Invalid keyword: %s\n", validator\&.GetInvalidSchemaKeyword());
    sb\&.Clear();
    validator\&.GetInvalidDocumentPointer()\&.StringifyUriFragment(sb);
    printf("Invalid document: %s\n", sb\&.GetString());
}
.fi
.PP
.PP
一些注意点：
.PP
.IP "\(bu" 2
一个 \fCSchemaDocment\fP 能被多个 \fCSchemaValidator\fP 引用。它不会被 \fCSchemaValidator\fP 修改。
.IP "\(bu" 2
可以重复使用一个 \fCSchemaValidator\fP 来校验多个文件。在校验其他文件前，须先调用 \fCvalidator\&.Reset()\fP。
.PP
.SH "在解析／生成时进行校验"
.PP
与大部分 JSON \fBSchema\fP 校验器有所不同，RapidJSON 提供了一个基于 SAX 的 schema 校验器实现。因此，你可以在输入流解析 JSON 的同时进行校验。若校验器遇到一个与 schema 不符的值，就会立即终止解析。这设计对于解析大型 JSON 文件时特别有用。
.SS "DOM 解析"
在使用 DOM 进行解析时，\fCDocument\fP 除了接收 SAX 事件外，还需做一些准备及结束工作，因此，为了连接 \fCReader\fP、\fCSchemaValidator\fP 和 \fCDocument\fP 要做多一点事情。\fC\fBSchemaValidatingReader\fP\fP 是一个辅助类去做那些工作。
.PP
.PP
.nf
#include "rapidjson/filereadstream\&.h"

// \&.\&.\&.
SchemaDocument schema(sd); // 把一个 Document 编译至 SchemaDocument

// 使用 reader 解析 JSON
FILE* fp = fopen("big\&.json", "r");
FileReadStream is(fp, buffer, sizeof(buffer));

// 用 reader 解析 JSON，校验它的 SAX 事件，并存储至 d
Document d;
SchemaValidatingReader<kParseDefaultFlags, FileReadStream, UTF8<> > reader(is, schema);
d\&.Populate(reader);

if (!reader\&.GetParseResult()) {
    // 不是一个合法的 JSON
    // 当 reader\&.GetParseResult()\&.Code() == kParseErrorTermination,
    // 它可能是被以下原因中止：
    // (1) 校验器发现 JSON 不合乎 schema；或
    // (2) 输入流有 I/O 错误。

    // 检查校验结果
    if (!reader\&.IsValid()) {
        // 输入的 JSON 不合乎 schema
        // 打印诊断信息
        StringBuffer sb;
        reader\&.GetInvalidSchemaPointer()\&.StringifyUriFragment(sb);
        printf("Invalid schema: %s\n", sb\&.GetString());
        printf("Invalid keyword: %s\n", reader\&.GetInvalidSchemaKeyword());
        sb\&.Clear();
        reader\&.GetInvalidDocumentPointer()\&.StringifyUriFragment(sb);
        printf("Invalid document: %s\n", sb\&.GetString());
    }
}
.fi
.PP
.SS "Parsing"
使用 SAX 解析时，情况就简单得多。若只需要校验 JSON 而无需进一步处理，那么仅需要：
.PP
.PP
.nf
SchemaValidator validator(schema);
Reader reader;
if (!reader\&.Parse(stream, validator)) {
    if (!validator\&.IsValid()) {
        // \&.\&.\&.    
    }
}
.fi
.PP
.PP
这种方式和 \fCschemavalidator\fP 例子完全相同。这带来的独特优势是，无论 JSON 多巨大，永远维持低内存用量（内存用量只与 \fBSchema\fP 的复杂度相关）。
.PP
若你需要进一步处理 SAX 事件，便可使用模板类 \fC\fBGenericSchemaValidator\fP\fP 去设置校验器的输出 \fCHandler\fP：
.PP
.PP
.nf
MyHandler handler;
GenericSchemaValidator<SchemaDocument, MyHandler> validator(schema, handler);
Reader reader;
if (!reader\&.Parse(ss, validator)) {
    if (!validator\&.IsValid()) {
        // \&.\&.\&.    
    }
}
.fi
.PP
.SS "Serialization"
我们也可以在生成（serialization）的时候进行校验。这能确保输出的 JSON 符合一个 JSON Schema。
.PP
.PP
.nf
StringBuffer sb;
Writer<StringBuffer> writer(sb);
GenericSchemaValidator<SchemaDocument, Writer<StringBuffer> > validator(s, writer);
if (!d\&.Accept(validator)) {
    // Some problem during Accept(), it may be validation or encoding issues\&.
    if (!validator\&.IsValid()) {
        // \&.\&.\&.
    }
}
.fi
.PP
.PP
当然，如果你的应用仅需要 SAX 风格的生成，那么只需要把 SAX 事件由原来发送到 \fC\fBWriter\fP\fP，改为发送到 \fCSchemaValidator\fP。
.SH "远程 Schema"
.PP
JSON \fBSchema\fP 支持 \fC\fC$ref\fP 关键字\fP，它是一个 \fBJSON pointer\fP 引用至一个本地（local）或远程（remote） schema。本地指针的首字符是 \fC#\fP，而远程指针是一个相对或绝对 URI。例如：
.PP
.PP
.nf
{ "$ref": "definitions\&.json#/address" }
.fi
.PP
.PP
由于 \fCSchemaDocument\fP 并不知道如何处理那些 URI，它需要使用者提供一个 \fCIRemoteSchemaDocumentProvider\fP 的实例去处理。
.PP
.PP
.nf
class MyRemoteSchemaDocumentProvider : public IRemoteSchemaDocumentProvider {
public:
    virtual const SchemaDocument* GetRemoteDocument(const char* uri, SizeType length) {
        // Resolve the uri and returns a pointer to that schema\&.
    }
};

// \&.\&.\&.

MyRemoteSchemaDocumentProvider provider;
SchemaDocument schema(sd, &provider);
.fi
.PP
.SH "Conformance"
.PP
RapidJSON 通过了 \fCJSON Schema Test Suite\fP (Json \fBSchema\fP draft 4) 中 263 个测试的 262 个。
.PP
没通过的测试是 \fCrefRemote\&.json\fP 中的 'change resolution scope' - 'changed scope ref invalid'。这是由于未实现 \fCid\fP schema 关键字及 URI 合并功能。
.PP
除此以外，关于字符串类型的 \fCformat\fP schema 关键字也会被忽略，因为标准中并没需求必须实现。
.SS "正则表达式"
\fCpattern\fP 及 \fCpatternProperties\fP 这两个 schema 关键字使用了正则表达式去匹配所需的模式。
.PP
RapidJSON 实现了一个简单的 NFA 正则表达式引擎，并预设使用。它支持以下语法。
.PP
语法   描述    \fCab\fP   串联    \fCa&#124;b\fP   交替    \fCa?\fP   零或一次    \fCa*\fP   零或多次    \fCa+\fP   一或多次    \fCa{3}\fP   刚好 3 次    \fCa{3,}\fP   至少 3 次    \fCa{3,5}\fP   3 至 5 次    \fC(ab)\fP   分组    \fC^a\fP   在开始处    \fCa$\fP   在结束处    \fC\&.\fP   任何字符    \fC[abc]\fP   字符组    \fC[a-c]\fP   字符组范围    \fC[a-z0-9_]\fP   字符组组合    \fC[^abc]\fP   字符组取反    \fC[^a-c]\fP   字符组范围取反    \fC[\\b]\fP   退格符 (U+0008)    \fC\\&#124;\fP, \fC\\\\\fP, \&.\&.\&.   转义字符    \fC\\f\fP   馈页 (U+000C)    \fC\\n\fP   馈行 (U+000A)    \fC\\r\fP   回车 (U+000D)    \fC\\t\fP   制表 (U+0009)    \fC\\v\fP   垂直制表 (U+000B)   
.PP
对于使用 C++11 编译器的使用者，也可使用 \fCstd::regex\fP，只需定义 \fCRAPIDJSON_SCHEMA_USE_INTERNALREGEX=0\fP 及 \fCRAPIDJSON_SCHEMA_USE_STDREGEX=1\fP。若你的 schema 无需使用 \fCpattern\fP 或 \fCpatternProperties\fP，可以把两个宏都设为零，以禁用此功能，这样做可节省一些代码体积。
.SH "Performance"
.PP
大部分 C++ JSON 库都未支持 JSON Schema。因此我们尝试按照 \fCjson-schema-benchmark\fP 去评估 RapidJSON 的 JSON \fBSchema\fP 校验器。该评测测试了 11 个运行在 node\&.js 上的 JavaScript 库。
.PP
该评测校验 \fCJSON Schema Test Suite\fP 中的测试，当中排除了一些测试套件及个别测试。我们在 \fC\fCschematest\&.cpp\fP\fP 实现了相同的评测。
.PP
在 MacBook Pro (2\&.8 GHz Intel Core i7) 上收集到以下结果。
.PP
校验器   相对速度   每秒执行的测试数目    RapidJSON   155%   30682    \fC\fCajv\fP\fP   100%   19770 (± 1\&.31%)    \fC\fCis-my-json-valid\fP\fP   70%   13835 (± 2\&.84%)    \fC\fCjsen\fP\fP   57\&.7%   11411 (± 1\&.27%)    \fC\fCschemasaurus\fP\fP   26%   5145 (± 1\&.62%)    \fC\fCthemis\fP\fP   19\&.9%   3935 (± 2\&.69%)    \fC\fCz-schema\fP\fP   7%   1388 (± 0\&.84%)    \fC\fCjsck\fP\fP   3\&.1%   606 (± 2\&.84%)    \fC\fCjsonschema\fP\fP   0\&.9%   185 (± 1\&.01%)    \fC\fCskeemas\fP\fP   0\&.8%   154 (± 0\&.79%)    tv4   0\&.5%   93 (± 0\&.94%)    \fC\fCjayschema\fP\fP   0\&.1%   21 (± 1\&.14%)   
.PP
换言之，RapidJSON 比最快的 JavaScript 库（ajv）快约 1\&.5x。比最慢的快 1400x。 
