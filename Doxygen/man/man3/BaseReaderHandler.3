.TH "BaseReaderHandler< Encoding, Derived >" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BaseReaderHandler< Encoding, Derived > \- Default implementation of Handler\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <reader\&.h>\fP
.PP
Inherited by \fBValueCounter\fP\&.
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Encoding::Ch \fBCh\fP"
.br
.ti -1c
.RI "typedef internal::SelectIf< internal::IsSame< Derived, void >, \fBBaseReaderHandler\fP, Derived >\fB::Type\fP \fBOverride\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBDefault\fP ()"
.br
.ti -1c
.RI "bool \fBNull\fP ()"
.br
.ti -1c
.RI "bool \fBBool\fP (bool)"
.br
.ti -1c
.RI "bool \fBInt\fP (int)"
.br
.ti -1c
.RI "bool \fBUint\fP (unsigned)"
.br
.ti -1c
.RI "bool \fBInt64\fP (\fBint64_t\fP)"
.br
.ti -1c
.RI "bool \fBUint64\fP (\fBuint64_t\fP)"
.br
.ti -1c
.RI "bool \fBDouble\fP (double)"
.br
.ti -1c
.RI "bool \fBRawNumber\fP (const \fBCh\fP *str, \fBSizeType\fP len, bool copy)"
.br
.RI "enabled via kParseNumbersAsStringsFlag, string is not null-terminated (use length) "
.ti -1c
.RI "bool \fBString\fP (const \fBCh\fP *, \fBSizeType\fP, bool)"
.br
.ti -1c
.RI "bool \fBStartObject\fP ()"
.br
.ti -1c
.RI "bool \fBKey\fP (const \fBCh\fP *str, \fBSizeType\fP len, bool copy)"
.br
.ti -1c
.RI "bool \fBEndObject\fP (\fBSizeType\fP)"
.br
.ti -1c
.RI "bool \fBStartArray\fP ()"
.br
.ti -1c
.RI "bool \fBEndArray\fP (\fBSizeType\fP)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename \fBEncoding\fP = UTF8<>, typename Derived = void>
.br
struct BaseReaderHandler< Encoding, Derived >"Default implementation of Handler\&. 

This can be used as base class of any reader handler\&. 
.PP
\fBNote\fP
.RS 4
implements Handler concept 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> typedef Encoding::Ch \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Ch"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> typedef internal::SelectIf<internal::IsSame<Derived,void>,\fBBaseReaderHandler\fP,Derived>\fB::Type\fP \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Override"

.SH "Member Function Documentation"
.PP 
.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Bool (bool)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Default ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Double (double)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::EndArray (\fBSizeType\fP)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::EndObject (\fBSizeType\fP)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Int (int)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Int64 (\fBint64_t\fP)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Key (const \fBCh\fP * str, \fBSizeType\fP len, bool copy)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Null ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::RawNumber (const \fBCh\fP * str, \fBSizeType\fP len, bool copy)\fC [inline]\fP"

.PP
enabled via kParseNumbersAsStringsFlag, string is not null-terminated (use length) 
.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::StartArray ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::StartObject ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::String (const \fBCh\fP *, \fBSizeType\fP, bool)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Uint (unsigned)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP  = UTF8<>, typename Derived  = void> bool \fBBaseReaderHandler\fP< \fBEncoding\fP, Derived >::Uint64 (\fBuint64_t\fP)\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
