.TH "md_src_rapidjson_doc_pointer" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_rapidjson_doc_pointer \- Pointer 
(This feature was released in v1\&.1\&.0)
.PP
JSON Pointer is a standardized (\fCRFC6901\fP) way to select a value inside a JSON Document (DOM)\&. This can be analogous to XPath for XML document\&. However, JSON Pointer is much simpler, and a single JSON Pointer only pointed to a single value\&.
.PP
Using RapidJSON's implementation of JSON Pointer can simplify some manipulations of the DOM\&.
.SH "JSON Pointer"
.PP
A JSON Pointer is a list of zero-to-many tokens, each prefixed by \fC/\fP\&. Each token can be a string or a number\&. For example, given a JSON: 
.PP
.nf
{
    "foo" : ["bar", "baz"],
    "pi" : 3\&.1416
}

.fi
.PP
.PP
The following JSON Pointers resolve this JSON as:
.PP
.IP "1." 4
\fC'/foo'\fP → \fC[ 'bar', 'baz' ]\fP
.IP "2." 4
\fC'/foo/0'\fP → \fC'bar'\fP
.IP "3." 4
\fC'/foo/1'\fP → \fC'baz'\fP
.IP "4." 4
\fC'/pi'\fP → \fC3\&.1416\fP
.PP
.PP
Note that, an empty JSON Pointer \fC''\fP (zero token) resolves to the whole JSON\&.
.SH "Basic Usage"
.PP
The following example code is self-explanatory\&.
.PP
.PP
.nf
#include "rapidjson/pointer\&.h"

// \&.\&.\&.
Document d;

// Create DOM by Set()
Pointer("/project")\&.Set(d, "RapidJSON");
Pointer("/stars")\&.Set(d, 10);

// { "project" : "RapidJSON", "stars" : 10 }

// Access DOM by Get()\&. It return nullptr if the value does not exist\&.
if (Value* stars = Pointer("/stars")\&.Get(d))
    stars->SetInt(stars->GetInt() + 1);

// { "project" : "RapidJSON", "stars" : 11 }

// Set() and Create() automatically generate parents if not exist\&.
Pointer("/a/b/0")\&.Create(d);

// { "project" : "RapidJSON", "stars" : 11, "a" : { "b" : [ null ] } }

// GetWithDefault() returns reference\&. And it deep clones the default value\&.
Value& hello = Pointer("/hello")\&.GetWithDefault(d, "world");

// { "project" : "RapidJSON", "stars" : 11, "a" : { "b" : [ null ] }, "hello" : "world" }

// Swap() is similar to Set()
Value x("C++");
Pointer("/hello")\&.Swap(d, x);

// { "project" : "RapidJSON", "stars" : 11, "a" : { "b" : [ null ] }, "hello" : "C++" }
// x becomes "world"

// Erase a member or element, return true if the value exists
bool success = Pointer("/a")\&.Erase(d);
assert(success);

// { "project" : "RapidJSON", "stars" : 10 }
.fi
.PP
.SH "Helper Functions"
.PP
Since object-oriented calling convention may be non-intuitive, RapidJSON also provides helper functions, which just wrap the member functions with free-functions\&.
.PP
The following example does exactly the same as the above one\&.
.PP
.PP
.nf
Document d;

SetValueByPointer(d, "/project", "RapidJSON");
SetValueByPointer(d, "/stars", 10);

if (Value* stars = GetValueByPointer(d, "/stars"))
    stars->SetInt(stars->GetInt() + 1);

CreateValueByPointer(d, "/a/b/0");

Value& hello = GetValueByPointerWithDefault(d, "/hello", "world");

Value x("C++");
SwapValueByPointer(d, "/hello", x);

bool success = EraseValueByPointer(d, "/a");
assert(success);
.fi
.PP
.PP
The conventions are shown here for comparison:
.PP
.IP "1." 4
\fCPointer(source)\&.<Method>(root, \&.\&.\&.)\fP
.IP "2." 4
\fC<Method>ValueByPointer(root, Pointer(source), \&.\&.\&.)\fP
.IP "3." 4
\fC<Method>ValueByPointer(root, source, \&.\&.\&.)\fP
.PP
.SH "Resolving Pointer"
.PP
\fCPointer::Get()\fP or \fC\fBGetValueByPointer()\fP\fP function does not modify the DOM\&. If the tokens cannot match a value in the DOM, it returns \fCnullptr\fP\&. User can use this to check whether a value exists\&.
.PP
Note that, numerical tokens can represent an array index or member name\&. The resolving process will match the values according to the types of value\&.
.PP
.PP
.nf
{
    "0" : 123,
    "1" : [456]
}
.fi
.PP
.PP
.IP "1." 4
\fC'/0'\fP → \fC123\fP
.IP "2." 4
\fC'/1/0'\fP → \fC456\fP
.PP
.PP
The token \fC'0'\fP is treated as member name in the first pointer\&. It is treated as an array index in the second pointer\&.
.PP
The other functions, including \fCCreate()\fP, \fCGetWithDefault()\fP, \fCSet()\fP and \fC\fBSwap()\fP\fP, will change the DOM\&. These functions will always succeed\&. They will create the parent values if they do not exist\&. If the parent values do not match the tokens, they will also be forced to change their type\&. Changing the type also mean fully removal of that DOM subtree\&.
.PP
Parsing the above JSON into \fCd\fP,
.PP
.PP
.nf
SetValueByPointer(d, "1/a", 789); // { "0" : 123, "1" : { "a" : 789 } }
.fi
.PP
.SS "Resolving Minus Sign Token"
Besides, \fCRFC6901\fP defines a special token \fC-\fP (single minus sign), which represents the pass-the-end element of an array\&. \fCGet()\fP only treats this token as a member name ''-''\&. Yet the other functions can resolve this for array, equivalent to calling \fCValue::PushBack()\fP to the array\&.
.PP
.PP
.nf
Document d;
d\&.Parse("{\"foo\":[123]}");
SetValueByPointer(d, "/foo/-", 456); // { "foo" : [123, 456] }
SetValueByPointer(d, "/-", 789);    // { "foo" : [123, 456], "-" : 789 }
.fi
.PP
.SS "Resolving Document and Value"
When using \fCp\&.Get(root)\fP or \fCGetValueByPointer(root, p)\fP, \fCroot\fP is a (const) \fCValue&\fP\&. That means, it can be a subtree of the DOM\&.
.PP
The other functions have two groups of signature\&. One group uses \fCDocument& document\fP as parameter, another one uses \fCValue& root\fP\&. The first group uses \fCdocument\&.GetAllocator()\fP for creating values\&. And the second group needs user to supply an allocator, like the functions in DOM\&.
.PP
All examples above do not require an allocator parameter, because the first parameter is a \fCDocument&\fP\&. But if you want to resolve a pointer to a subtree, you need to supply the allocator as in the following example:
.PP
.PP
.nf
class Person {
public:
    Person() {
        document_ = new Document();
        // CreateValueByPointer() here no need allocator
        SetLocation(CreateValueByPointer(*document_, "/residence"), \&.\&.\&.);
        SetLocation(CreateValueByPointer(*document_, "/office"), \&.\&.\&.);
    };

private:
    void SetLocation(Value& location, const char* country, const char* addresses[2]) {
        Value::Allocator& a = document_->GetAllocator();
        // SetValueByPointer() here need allocator
        SetValueByPointer(location, "/country", country, a);
        SetValueByPointer(location, "/address/0", address[0], a);
        SetValueByPointer(location, "/address/1", address[1], a);
    }

    // \&.\&.\&.

    Document* document_;
};
.fi
.PP
.PP
\fCErase()\fP or \fC\fBEraseValueByPointer()\fP\fP does not need allocator\&. And they return \fCtrue\fP if the value is erased successfully\&.
.SH "Error Handling"
.PP
A \fCPointer\fP parses a source string in its constructor\&. If there is parsing error, \fCPointer::IsValid()\fP returns \fCfalse\fP\&. And you can use \fCPointer::GetParseErrorCode()\fP and \fCGetParseErrorOffset()\fP to retrieve the error information\&.
.PP
Note that, all resolving functions assumes valid pointer\&. Resolving with an invalid pointer causes assertion failure\&.
.SH "URI Fragment Representation"
.PP
In addition to the string representation of JSON pointer that we are using till now, \fCRFC6901\fP also defines the URI fragment representation of JSON pointer\&. URI fragment is specified in \fCRFC3986\fP 'Uniform Resource Identifier (URI): Generic Syntax'\&.
.PP
The main differences are that a the URI fragment always has a \fC#\fP (pound sign) in the beginning, and some characters are encoded by percent-encoding in UTF-8 sequence\&. For example, the following table shows different C/C++ string literals of different representations\&.
.PP
String Representation   URI Fragment Representation   Pointer Tokens (UTF-8)    \fC'/foo/0'\fP   \fC'#/foo/0'\fP   \fC{'foo', 0}\fP    \fC'/a~1b'\fP   \fC'#/a~1b'\fP   \fC{'a/b'}\fP    \fC'/m~0n'\fP   \fC'#/m~0n'\fP   \fC{'m~n'}\fP    \fC'/ '\fP   \fC'#/%20'\fP   \fC{' '}\fP    \fC'/\\0'\fP   \fC'#/%00'\fP   \fC{'\\0'}\fP    \fC'/€'\fP   \fC'#/%E2%82%AC'\fP   \fC{'€'}\fP   
.PP
RapidJSON fully support URI fragment representation\&. It automatically detects the pound sign during parsing\&.
.SH "Stringify"
.PP
You may also stringify a \fCPointer\fP to a string or other output streams\&. This can be done by:
.PP
.PP
.nf
Pointer p(\&.\&.\&.);
StringBuffer sb;
p\&.Stringify(sb);
std::cout << sb\&.GetString() << std::endl;
.fi
.PP
.PP
It can also stringify to URI fragment representation by \fCStringifyUriFragment()\fP\&.
.SH "User-Supplied Tokens"
.PP
If a pointer will be resolved multiple times, it should be constructed once, and then apply it to different DOMs or in different times\&. This reduce time and memory allocation for constructing \fCPointer\fP multiple times\&.
.PP
We can go one step further, to completely eliminate the parsing process and dynamic memory allocation, we can establish the token array directly:
.PP
.PP
.nf
#define NAME(s) { s, sizeof(s) / sizeof(s[0]) - 1, kPointerInvalidIndex }
#define INDEX(i) { #i, sizeof(#i) - 1, i }

static const Pointer::Token kTokens[] = { NAME("foo"), INDEX(123) };
static const Pointer p(kTokens, sizeof(kTokens) / sizeof(kTokens[0]));
// Equivalent to static const Pointer p("/foo/123");
.fi
.PP
.PP
This may be useful for memory constrained systems\&. 
