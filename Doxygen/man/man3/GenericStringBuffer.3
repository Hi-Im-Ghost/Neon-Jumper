.TH "GenericStringBuffer< Encoding, Allocator >" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GenericStringBuffer< Encoding, Allocator > \- Represents an in-memory output stream\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <stringbuffer\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Encoding::Ch \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGenericStringBuffer\fP (\fBAllocator\fP *allocator=0, size_t capacity=\fBkDefaultCapacity\fP)"
.br
.ti -1c
.RI "void \fBPut\fP (\fBCh\fP c)"
.br
.ti -1c
.RI "void \fBPutUnsafe\fP (\fBCh\fP c)"
.br
.ti -1c
.RI "void \fBFlush\fP ()"
.br
.ti -1c
.RI "void \fBClear\fP ()"
.br
.ti -1c
.RI "void \fBShrinkToFit\fP ()"
.br
.ti -1c
.RI "void \fBReserve\fP (size_t count)"
.br
.ti -1c
.RI "\fBCh\fP * \fBPush\fP (size_t count)"
.br
.ti -1c
.RI "\fBCh\fP * \fBPushUnsafe\fP (size_t count)"
.br
.ti -1c
.RI "void \fBPop\fP (size_t count)"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetString\fP () const"
.br
.ti -1c
.RI "size_t \fBGetSize\fP () const"
.br
.RI "Get the size of string in bytes in the string buffer\&. "
.ti -1c
.RI "size_t \fBGetLength\fP () const"
.br
.RI "Get the length of string in Ch in the string buffer\&. "
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBinternal::Stack\fP< \fBAllocator\fP > \fBstack_\fP"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const size_t \fBkDefaultCapacity\fP = 256"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBGenericStringBuffer\fP (const \fBGenericStringBuffer\fP &)"
.br
.ti -1c
.RI "\fBGenericStringBuffer\fP & \fBoperator=\fP (const \fBGenericStringBuffer\fP &)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename \fBEncoding\fP, typename \fBAllocator\fP = CrtAllocator>
.br
class GenericStringBuffer< Encoding, Allocator >"Represents an in-memory output stream\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIEncoding\fP Encoding of the stream\&. 
.br
\fIAllocator\fP type for allocating memory buffer\&. 
.RE
.PP
\fBNote\fP
.RS 4
implements Stream concept 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> typedef Encoding::Ch \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::Ch"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >\fB::GenericStringBuffer\fP (\fBAllocator\fP * allocator = \fC0\fP, size_t capacity = \fC\fBkDefaultCapacity\fP\fP)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >\fB::GenericStringBuffer\fP (const \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP > &)\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::Clear ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::Flush ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> size_t \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::GetLength () const\fC [inline]\fP"

.PP
Get the length of string in Ch in the string buffer\&. 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> size_t \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::GetSize () const\fC [inline]\fP"

.PP
Get the size of string in bytes in the string buffer\&. 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::GetString () const\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericStringBuffer\fP & \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::operator= (const \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP > &)\fC [private]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::Pop (size_t count)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP * \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::Push (size_t count)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP * \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::PushUnsafe (size_t count)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::Put (\fBCh\fP c)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::PutUnsafe (\fBCh\fP c)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::Reserve (size_t count)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::ShrinkToFit ()\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> const size_t \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::kDefaultCapacity = 256\fC [static]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP  = CrtAllocator> \fBinternal::Stack\fP<\fBAllocator\fP> \fBGenericStringBuffer\fP< \fBEncoding\fP, \fBAllocator\fP >::stack_\fC [mutable]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
