.TH "md_src_rapidjson_doc_tutorial" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_rapidjson_doc_tutorial \- Tutorial 
This tutorial introduces the basics of the Document Object Model(DOM) API\&.
.PP
As shown in \fBUsage at a glance\fP, JSON can be parsed into a DOM, and then the DOM can be queried and modified easily, and finally be converted back to JSON\&.
.SH "Value & Document"
.PP
Each JSON value is stored in a type called \fCValue\fP\&. A \fCDocument\fP, representing the DOM, contains the root \fCValue\fP of the DOM tree\&. All public types and functions of RapidJSON are defined in the \fCrapidjson\fP namespace\&.
.SH "Query Value"
.PP
In this section, we will use excerpt from \fC\fBexample/tutorial/tutorial\&.cpp\fP\fP\&.
.PP
Assume we have the following JSON stored in a C string (\fCconst char* json\fP): 
.PP
.nf
{
    "hello": "world",
    "t": true ,
    "f": false,
    "n": null,
    "i": 123,
    "pi": 3\&.1416,
    "a": [1, 2, 3, 4]
}

.fi
.PP
.PP
Parse it into a \fCDocument\fP: 
.PP
.nf
#include "rapidjson/document\&.h"

using namespace rapidjson;

// \&.\&.\&.
Document document;
document\&.Parse(json);

.fi
.PP
.PP
The JSON is now parsed into \fCdocument\fP as a \fIDOM tree\fP:
.PP
.PP
Since the update to RFC 7159, the root of a conforming JSON document can be any JSON value\&. In earlier RFC 4627, only objects or arrays were allowed as root values\&. In this case, the root is an object\&. 
.PP
.nf
assert(document\&.IsObject());

.fi
.PP
.PP
Let's query whether a \fC'hello'\fP member exists in the root object\&. Since a \fCValue\fP can contain different types of value, we may need to verify its type and use suitable API to obtain the value\&. In this example, \fC'hello'\fP member associates with a JSON string\&. 
.PP
.nf
assert(document\&.HasMember("hello"));
assert(document["hello"]\&.IsString());
printf("hello = %s\n", document["hello"]\&.GetString());

.fi
.PP
.PP
.PP
.nf
hello = world
.fi
.PP
.PP
JSON true/false values are represented as \fCbool\fP\&. 
.PP
.nf
assert(document["t"]\&.IsBool());
printf("t = %s\n", document["t"]\&.GetBool() ? "true" : "false");

.fi
.PP
.PP
.PP
.nf
t = true
.fi
.PP
.PP
JSON null can be queried with \fCIsNull()\fP\&. 
.PP
.nf
printf("n = %s\n", document["n"]\&.IsNull() ? "null" : "?");

.fi
.PP
.PP
.PP
.nf
n = null
.fi
.PP
.PP
JSON number type represents all numeric values\&. However, C++ needs more specific type for manipulation\&.
.PP
.PP
.nf
assert(document["i"]\&.IsNumber());

// In this case, IsUint()/IsInt64()/IsUint64() also return true\&.
assert(document["i"]\&.IsInt());          
printf("i = %d\n", document["i"]\&.GetInt());
// Alternatively (int)document["i"]

assert(document["pi"]\&.IsNumber());
assert(document["pi"]\&.IsDouble());
printf("pi = %g\n", document["pi"]\&.GetDouble());
.fi
.PP
.PP
.PP
.nf
i = 123
pi = 3\&.1416
.fi
.PP
.PP
JSON array contains a number of elements\&. 
.PP
.nf
// Using a reference for consecutive access is handy and faster\&.
const Value& a = document["a"];
assert(a\&.IsArray());
for (SizeType i = 0; i < a\&.Size(); i++) // Uses SizeType instead of size_t
        printf("a[%d] = %d\n", i, a[i]\&.GetInt());

.fi
.PP
.PP
.PP
.nf
a[0] = 1
a[1] = 2
a[2] = 3
a[3] = 4
.fi
.PP
.PP
Note that, RapidJSON does not automatically convert values between JSON types\&. For example, if a value is a string, it is invalid to call \fCGetInt()\fP\&. In debug mode it will fail on assertion\&. In release mode, the behavior is undefined\&.
.PP
In the following sections we discuss details about querying individual types\&.
.SS "Query Array"
By default, \fCSizeType\fP is typedef of \fCunsigned\fP\&. In most systems, an array is limited to store up to 2^32-1 elements\&.
.PP
You may access the elements in an array by integer literal, for example, \fCa[0]\fP, \fCa[1]\fP, \fCa[2]\fP\&.
.PP
Array is similar to \fCstd::vector\fP: instead of using indices, you may also use iterator to access all the elements\&. 
.PP
.nf
for (Value::ConstValueIterator itr = a\&.Begin(); itr != a\&.End(); ++itr)
    printf("%d ", itr->GetInt());

.fi
.PP
.PP
And other familiar query functions:
.IP "\(bu" 2
\fCSizeType Capacity() const\fP
.IP "\(bu" 2
\fCbool Empty() const\fP
.PP
.SS "Range-based For Loop (New in v1\&.1\&.0)"
When C++11 is enabled, you can use range-based for loop to access all elements in an array\&.
.PP
.PP
.nf
for (auto& v : a\&.GetArray())
    printf("%d ", v\&.GetInt());
.fi
.PP
.SS "Query Object"
Similar to Array, we can access all object members by iterator:
.PP
.PP
.nf
static const char* kTypeNames[] = 
    { "Null", "False", "True", "Object", "Array", "String", "Number" };

for (Value::ConstMemberIterator itr = document\&.MemberBegin();
    itr != document\&.MemberEnd(); ++itr)
{
    printf("Type of member %s is %s\n",
        itr->name\&.GetString(), kTypeNames[itr->value\&.GetType()]);
}
.fi
.PP
.PP
.PP
.nf
Type of member hello is String
Type of member t is True
Type of member f is False
Type of member n is Null
Type of member i is Number
Type of member pi is Number
Type of member a is Array
.fi
.PP
.PP
Note that, when \fCoperator[](const char*)\fP cannot find the member, it will fail on assertion\&.
.PP
If we are unsure whether a member exists, we need to call \fCHasMember()\fP before calling \fCoperator[](const char*)\fP\&. However, this incurs two lookup\&. A better way is to call \fCFindMember()\fP, which can check the existence of a member and obtain its value at once:
.PP
.PP
.nf
Value::ConstMemberIterator itr = document\&.FindMember("hello");
if (itr != document\&.MemberEnd())
    printf("%s\n", itr->value\&.GetString());
.fi
.PP
.SS "Range-based For Loop (New in v1\&.1\&.0)"
When C++11 is enabled, you can use range-based for loop to access all members in an object\&.
.PP
.PP
.nf
for (auto& m : document\&.GetObject())
    printf("Type of member %s is %s\n",
        m\&.name\&.GetString(), kTypeNames[m\&.value\&.GetType()]);
.fi
.PP
.SS "Querying Number"
JSON provides a single numerical type called Number\&. Number can be an integer or a real number\&. RFC 4627 says the range of Number is specified by the parser implementation\&.
.PP
As C++ provides several integer and floating point number types, the DOM tries to handle these with the widest possible range and good performance\&.
.PP
When a Number is parsed, it is stored in the DOM as one of the following types:
.PP
Type   Description    \fCunsigned\fP   32-bit unsigned integer    \fCint\fP   32-bit signed integer    \fCuint64_t\fP   64-bit unsigned integer    \fCint64_t\fP   64-bit signed integer    \fCdouble\fP   64-bit double precision floating point   
.PP
When querying a number, you can check whether the number can be obtained as the target type:
.PP
Checking   Obtaining    \fCbool IsNumber()\fP   N/A    \fCbool IsUint()\fP   \fCunsigned GetUint()\fP    \fCbool IsInt()\fP   \fCint GetInt()\fP    \fCbool IsUint64()\fP   \fCuint64_t GetUint64()\fP    \fCbool IsInt64()\fP   \fCint64_t GetInt64()\fP    \fCbool IsDouble()\fP   \fCdouble GetDouble()\fP   
.PP
Note that, an integer value may be obtained in various ways without conversion\&. For example, A value \fCx\fP containing 123 will make \fCx\&.IsInt() == x\&.IsUint() == x\&.IsInt64() == x\&.IsUint64() == true\fP\&. But a value \fCy\fP containing -3000000000 will only make \fCx\&.IsInt64() == true\fP\&.
.PP
When obtaining the numeric values, \fCGetDouble()\fP will convert internal integer representation to a \fCdouble\fP\&. Note that, \fCint\fP and \fCunsigned\fP can be safely converted to \fCdouble\fP, but \fCint64_t\fP and \fCuint64_t\fP may lose precision (since mantissa of \fCdouble\fP is only 52-bits)\&.
.SS "Query String"
In addition to \fC\fBGetString()\fP\fP, the \fCValue\fP class also contains \fCGetStringLength()\fP\&. Here explains why:
.PP
According to RFC 4627, JSON strings can contain Unicode character \fCU+0000\fP, which must be escaped as \fC'\\u0000'\fP\&. The problem is that, C/C++ often uses null-terminated string, which treats \fC\\0\fP as the terminator symbol\&.
.PP
To conform with RFC 4627, RapidJSON supports string containing \fCU+0000\fP character\&. If you need to handle this, you can use \fCGetStringLength()\fP to obtain the correct string length\&.
.PP
For example, after parsing the following JSON to \fCDocument d\fP:
.PP
.PP
.nf
{ "s" :  "a\u0000b" }
.fi
.PP
 The correct length of the string \fC'a\\u0000b'\fP is 3, as returned by \fCGetStringLength()\fP\&. But \fCstrlen()\fP returns 1\&.
.PP
\fCGetStringLength()\fP can also improve performance, as user may often need to call \fCstrlen()\fP for allocating buffer\&.
.PP
Besides, \fCstd::string\fP also support a constructor:
.PP
.PP
.nf
string(const char* s, size_t count);
.fi
.PP
.PP
which accepts the length of string as parameter\&. This constructor supports storing null character within the string, and should also provide better performance\&.
.SS "Comparing values"
You can use \fC==\fP and \fC!=\fP to compare values\&. Two values are equal if and only if they have same type and contents\&. You can also compare values with primitive types\&. Here is an example:
.PP
.PP
.nf
if (document["hello"] == document["n"]) /*\&.\&.\&.*/;    // Compare values
if (document["hello"] == "world") /*\&.\&.\&.*/;          // Compare value with literal string
if (document["i"] != 123) /*\&.\&.\&.*/;                  // Compare with integers
if (document["pi"] != 3\&.14) /*\&.\&.\&.*/;                // Compare with double\&.
.fi
.PP
.PP
Array/object compares their elements/members in order\&. They are equal if and only if their whole subtrees are equal\&.
.PP
Note that, currently if an object contains duplicated named member, comparing equality with any object is always \fCfalse\fP\&.
.SH "Create/Modify Values"
.PP
There are several ways to create values\&. After a DOM tree is created and/or modified, it can be saved as JSON again using \fC\fBWriter\fP\fP\&.
.SS "Change Value Type"
When creating a \fCValue\fP or \fCDocument\fP by default constructor, its type is Null\&. To change its type, call \fCSetXXX()\fP or assignment operator, for example:
.PP
.PP
.nf
Document d; // Null
d\&.SetObject();

Value v;    // Null
v\&.SetInt(10);
v = 10;     // Shortcut, same as above
.fi
.PP
.SS "Overloaded Constructors"
There are also overloaded constructors for several types:
.PP
.PP
.nf
Value b(true);    // calls Value(bool)
Value i(-123);    // calls Value(int)
Value u(123u);    // calls Value(unsigned)
Value d(1\&.5);     // calls Value(double)
.fi
.PP
.PP
To create empty object or array, you may use \fCSetObject()\fP/\fCSetArray()\fP after default constructor, or using the \fCValue(Type)\fP in one call:
.PP
.PP
.nf
Value o(kObjectType);
Value a(kArrayType);
.fi
.PP
.SS "Move Semantics"
A very special decision during design of RapidJSON is that, assignment of value does not copy the source value to destination value\&. Instead, the value from source is moved to the destination\&. For example,
.PP
.PP
.nf
Value a(123);
Value b(456);
a = b;         // b becomes a Null value, a becomes number 456\&.
.fi
.PP
.PP
.PP
Why? What is the advantage of this semantics?
.PP
The simple answer is performance\&. For fixed size JSON types (Number, True, False, Null), copying them is fast and easy\&. However, For variable size JSON types (String, Array, Object), copying them will incur a lot of overheads\&. And these overheads are often unnoticed\&. Especially when we need to create temporary object, copy it to another variable, and then destruct it\&.
.PP
For example, if normal \fIcopy\fP semantics was used:
.PP
.PP
.nf
Document d;
Value o(kObjectType);
{
    Value contacts(kArrayType);
    // adding elements to contacts array\&.
    // \&.\&.\&.
    o\&.AddMember("contacts", contacts, d\&.GetAllocator());  // deep clone contacts (may be with lots of allocations)
    // destruct contacts\&.
}
.fi
.PP
.PP
.PP
The object \fCo\fP needs to allocate a buffer of same size as contacts, makes a deep clone of it, and then finally contacts is destructed\&. This will incur a lot of unnecessary allocations/deallocations and memory copying\&.
.PP
There are solutions to prevent actual copying these data, such as reference counting and garbage collection(GC)\&.
.PP
To make RapidJSON simple and fast, we chose to use \fImove\fP semantics for assignment\&. It is similar to \fCstd::auto_ptr\fP which transfer ownership during assignment\&. Move is much faster and simpler, it just destructs the original value, \fCmemcpy()\fP the source to destination, and finally sets the source as Null type\&.
.PP
So, with move semantics, the above example becomes:
.PP
.PP
.nf
Document d;
Value o(kObjectType);
{
    Value contacts(kArrayType);
    // adding elements to contacts array\&.
    o\&.AddMember("contacts", contacts, d\&.GetAllocator());  // just memcpy() of contacts itself to the value of new member (16 bytes)
    // contacts became Null here\&. Its destruction is trivial\&.
}
.fi
.PP
.PP
.PP
This is called move assignment operator in C++11\&. As RapidJSON supports C++03, it adopts move semantics using assignment operator, and all other modifying function like \fCAddMember()\fP, \fCPushBack()\fP\&.
.SS "Move semantics and temporary values"
Sometimes, it is convenient to construct a Value in place, before passing it to one of the 'moving' functions, like \fCPushBack()\fP or \fCAddMember()\fP\&. As temporary objects can't be converted to proper Value references, the convenience function \fCMove()\fP is available:
.PP
.PP
.nf
Value a(kArrayType);
Document::AllocatorType& allocator = document\&.GetAllocator();
// a\&.PushBack(Value(42), allocator);       // will not compile
a\&.PushBack(Value()\&.SetInt(42), allocator); // fluent API
a\&.PushBack(Value(42)\&.Move(), allocator);   // same as above
.fi
.PP
.SS "Create String"
RapidJSON provides two strategies for storing string\&.
.PP
.IP "1." 4
copy-string: allocates a buffer, and then copy the source data into it\&.
.IP "2." 4
const-string: simply store a pointer of string\&.
.PP
.PP
Copy-string is always safe because it owns a copy of the data\&. Const-string can be used for storing a string literal, and for in-situ parsing which will be mentioned in the DOM section\&.
.PP
To make memory allocation customizable, RapidJSON requires users to pass an instance of allocator, whenever an operation may require allocation\&. This design is needed to prevent storing an allocator (or Document) pointer per Value\&.
.PP
Therefore, when we assign a copy-string, we call this overloaded \fCSetString()\fP with allocator:
.PP
.PP
.nf
Document document;
Value author;
char buffer[10];
int len = sprintf(buffer, "%s %s", "Milo", "Yip"); // dynamically created string\&.
author\&.SetString(buffer, len, document\&.GetAllocator());
memset(buffer, 0, sizeof(buffer));
// author\&.GetString() still contains "Milo Yip" after buffer is destroyed
.fi
.PP
.PP
In this example, we get the allocator from a \fCDocument\fP instance\&. This is a common idiom when using RapidJSON\&. But you may use other instances of allocator\&.
.PP
Besides, the above \fCSetString()\fP requires length\&. This can handle null characters within a string\&. There is another \fCSetString()\fP overloaded function without the length parameter\&. And it assumes the input is null-terminated and calls a \fCstrlen()\fP-like function to obtain the length\&.
.PP
Finally, for a string literal or string with a safe life-cycle one can use the const-string version of \fCSetString()\fP, which lacks an allocator parameter\&. For string literals (or constant character arrays), simply passing the literal as parameter is safe and efficient:
.PP
.PP
.nf
Value s;
s\&.SetString("rapidjson");    // can contain null character, length derived at compile time
s = "rapidjson";             // shortcut, same as above
.fi
.PP
.PP
For a character pointer, RapidJSON requires it to be marked as safe before using it without copying\&. This can be achieved by using the \fCStringRef\fP function:
.PP
.PP
.nf
const char * cstr = getenv("USER");
size_t cstr_len = \&.\&.\&.;                 // in case length is available
Value s;
// s\&.SetString(cstr);                  // will not compile
s\&.SetString(StringRef(cstr));          // ok, assume safe lifetime, null-terminated
s = StringRef(cstr);                   // shortcut, same as above
s\&.SetString(StringRef(cstr,cstr_len)); // faster, can contain null character
s = StringRef(cstr,cstr_len);          // shortcut, same as above
.fi
.PP
.SS "Modify Array"
Value with array type provides an API similar to \fCstd::vector\fP\&.
.PP
.IP "\(bu" 2
\fCClear()\fP
.IP "\(bu" 2
\fCReserve(SizeType, Allocator&)\fP
.IP "\(bu" 2
\fCValue& PushBack(Value&, Allocator&)\fP
.IP "\(bu" 2
\fCtemplate <typename T> \fBGenericValue\fP& PushBack(T, Allocator&)\fP
.IP "\(bu" 2
\fCValue& PopBack()\fP
.IP "\(bu" 2
\fCValueIterator Erase(ConstValueIterator pos)\fP
.IP "\(bu" 2
\fCValueIterator Erase(ConstValueIterator first, ConstValueIterator last)\fP
.PP
.PP
Note that, \fCReserve(\&.\&.\&.)\fP and \fCPushBack(\&.\&.\&.)\fP may allocate memory for the array elements, therefore requiring an allocator\&.
.PP
Here is an example of \fCPushBack()\fP:
.PP
.PP
.nf
Value a(kArrayType);
Document::AllocatorType& allocator = document\&.GetAllocator();

for (int i = 5; i <= 10; i++)
    a\&.PushBack(i, allocator);   // allocator is needed for potential realloc()\&.

// Fluent interface
a\&.PushBack("Lua", allocator)\&.PushBack("Mio", allocator);
.fi
.PP
.PP
This API differs from STL in that \fCPushBack()\fP/\fCPopBack()\fP return the array reference itself\&. This is called \fIfluent interface\fP\&.
.PP
If you want to add a non-constant string or a string without sufficient lifetime (see \fBCreate String\fP) to the array, you need to create a string Value by using the copy-string API\&. To avoid the need for an intermediate variable, you can use a \fBtemporary value\fP in place:
.PP
.PP
.nf
// in-place Value parameter
contact\&.PushBack(Value("copy", document\&.GetAllocator())\&.Move(), // copy string
                 document\&.GetAllocator());

// explicit parameters
Value val("key", document\&.GetAllocator()); // copy string
contact\&.PushBack(val, document\&.GetAllocator());
.fi
.PP
.SS "Modify Object"
The Object class is a collection of key-value pairs (members)\&. Each key must be a string value\&. To modify an object, either add or remove members\&. The following API is for adding members:
.PP
.IP "\(bu" 2
\fCValue& AddMember(Value&, Value&, Allocator& allocator)\fP
.IP "\(bu" 2
\fCValue& AddMember(StringRefType, Value&, Allocator&)\fP
.IP "\(bu" 2
\fCtemplate <typename T> Value& AddMember(StringRefType, T value, Allocator&)\fP
.PP
.PP
Here is an example\&.
.PP
.PP
.nf
Value contact(kObject);
contact\&.AddMember("name", "Milo", document\&.GetAllocator());
contact\&.AddMember("married", true, document\&.GetAllocator());
.fi
.PP
.PP
The name parameter with \fCStringRefType\fP is similar to the interface of the \fCSetString\fP function for string values\&. These overloads are used to avoid the need for copying the \fCname\fP string, since constant key names are very common in JSON objects\&.
.PP
If you need to create a name from a non-constant string or a string without sufficient lifetime (see \fBCreate String\fP), you need to create a string Value by using the copy-string API\&. To avoid the need for an intermediate variable, you can use a \fBtemporary value\fP in place:
.PP
.PP
.nf
// in-place Value parameter
contact\&.AddMember(Value("copy", document\&.GetAllocator())\&.Move(), // copy string
                  Value()\&.Move(),                                // null value
                  document\&.GetAllocator());

// explicit parameters
Value key("key", document\&.GetAllocator()); // copy string name
Value val(42);                             // some value
contact\&.AddMember(key, val, document\&.GetAllocator());
.fi
.PP
.PP
For removing members, there are several choices:
.PP
.IP "\(bu" 2
\fCbool RemoveMember(const Ch* name)\fP: Remove a member by search its name (linear time complexity)\&.
.IP "\(bu" 2
\fCbool RemoveMember(const Value& name)\fP: same as above but \fCname\fP is a Value\&.
.IP "\(bu" 2
\fCMemberIterator RemoveMember(MemberIterator)\fP: Remove a member by iterator (\fIconstant\fP time complexity)\&.
.IP "\(bu" 2
\fCMemberIterator EraseMember(MemberIterator)\fP: similar to the above but it preserves order of members (linear time complexity)\&.
.IP "\(bu" 2
\fCMemberIterator EraseMember(MemberIterator first, MemberIterator last)\fP: remove a range of members, preserves order (linear time complexity)\&.
.PP
.PP
\fCMemberIterator RemoveMember(MemberIterator)\fP uses a 'move-last' trick to achieve constant time complexity\&. Basically the member at iterator is destructed, and then the last element is moved to that position\&. So the order of the remaining members are changed\&.
.SS "Deep Copy Value"
If we really need to copy a DOM tree, we can use two APIs for deep copy: constructor with allocator, and \fCCopyFrom()\fP\&.
.PP
.PP
.nf
Document d;
Document::AllocatorType& a = d\&.GetAllocator();
Value v1("foo");
// Value v2(v1); // not allowed

Value v2(v1, a);                      // make a copy
assert(v1\&.IsString());                // v1 untouched
d\&.SetArray()\&.PushBack(v1, a)\&.PushBack(v2, a);
assert(v1\&.IsNull() && v2\&.IsNull());   // both moved to d

v2\&.CopyFrom(d, a);                    // copy whole document to v2
assert(d\&.IsArray() && d\&.Size() == 2); // d untouched
v1\&.SetObject()\&.AddMember("array", v2, a);
d\&.PushBack(v1, a);
.fi
.PP
.SS "Swap Values"
\fC\fBSwap()\fP\fP is also provided\&.
.PP
.PP
.nf
Value a(123);
Value b("Hello");
a\&.Swap(b);
assert(a\&.IsString());
assert(b\&.IsInt());
.fi
.PP
.PP
Swapping two DOM trees is fast (constant time), despite the complexity of the trees\&.
.SH "What's next"
.PP
This tutorial shows the basics of DOM tree query and manipulation\&. There are several important concepts in RapidJSON:
.PP
.IP "1." 4
\fBStreams\fP are channels for reading/writing JSON, which can be a in-memory string, or file stream, etc\&. User can also create their streams\&.
.IP "2." 4
\fBEncoding\fP defines which character encoding is used in streams and memory\&. RapidJSON also provide Unicode conversion/validation internally\&.
.IP "3." 4
\fBDOM\fP's basics are already covered in this tutorial\&. Uncover more advanced features such as \fIin situ\fP parsing, other parsing options and advanced usages\&.
.IP "4." 4
\fBSAX\fP is the foundation of parsing/generating facility in RapidJSON\&. Learn how to use \fCReader\fP/\fC\fBWriter\fP\fP to implement even faster applications\&. Also try \fC\fBPrettyWriter\fP\fP to format the JSON\&.
.IP "5." 4
\fBPerformance\fP shows some in-house and third-party benchmarks\&.
.IP "6." 4
\fBInternals\fP describes some internal designs and techniques of RapidJSON\&.
.PP
.PP
You may also refer to the \fBFAQ\fP, API documentation, examples and unit tests\&. 
