.TH "src/rapidjson/test/unittest/prettywritertest.cpp" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/rapidjson/test/unittest/prettywritertest.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'unittest\&.h'\fP
.br
\fC#include 'rapidjson/reader\&.h'\fP
.br
\fC#include 'rapidjson/prettywriter\&.h'\fP
.br
\fC#include 'rapidjson/stringbuffer\&.h'\fP
.br
\fC#include 'rapidjson/filewritestream\&.h'\fP
.br
\fC#include <sstream>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBOStreamWrapper\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBT\fP(meth,  val,  expected)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, Basic)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, FormatOptions)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, SetIndent)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, String)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, \fBOStreamWrapper\fP)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, \fBFileWriteStream\fP)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, RawValue)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, InvalidEventSequence)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, NaN)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, Inf)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, Issue_889)"
.br
.ti -1c
.RI "\fBTEST\fP (\fBPrettyWriter\fP, Issue_1336)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const char \fBkJson\fP [] = '{\\'hello\\':\\'world\\',\\'t\\':true,\\'f\\':false,\\'n\\':null,\\'i\\':123,\\'pi\\':3\&.1416,\\'a\\':[1,2,3,\-1],\\'u64\\':1234567890123456789,\\'i64\\':\-1234567890123456789}'"
.br
.ti -1c
.RI "static const char \fBkPrettyJson\fP []"
.br
.ti -1c
.RI "static const char \fBkPrettyJson_FormatOptions_SLA\fP []"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define T(meth, val, expected)"
\fBValue:\fP
.PP
.nf
    {                                                   \
        StringBuffer buffer;                            \
        PrettyWriter<StringBuffer> writer(buffer);      \
        writer\&.meth(val);                               \
                                                        \
        EXPECT_STREQ(expected, buffer\&.GetString());     \
        EXPECT_TRUE(writer\&.IsComplete());               \
    }
.fi
.SH "Function Documentation"
.PP 
.SS "TEST (\fBPrettyWriter\fP, Basic)"

.SS "TEST (\fBPrettyWriter\fP, \fBFileWriteStream\fP)"

.SS "TEST (\fBPrettyWriter\fP, FormatOptions)"

.SS "TEST (\fBPrettyWriter\fP, Inf)"

.SS "TEST (\fBPrettyWriter\fP, InvalidEventSequence)"

.SS "TEST (\fBPrettyWriter\fP, Issue_1336)"

.SS "TEST (\fBPrettyWriter\fP, Issue_889)"

.SS "TEST (\fBPrettyWriter\fP, NaN)"

.SS "TEST (\fBPrettyWriter\fP, \fBOStreamWrapper\fP)"

.SS "TEST (\fBPrettyWriter\fP, RawValue)"

.SS "TEST (\fBPrettyWriter\fP, SetIndent)"

.SS "TEST (\fBPrettyWriter\fP, String)"

.SH "Variable Documentation"
.PP 
.SS "const char kJson[] = '{\\'hello\\':\\'world\\',\\'t\\':true,\\'f\\':false,\\'n\\':null,\\'i\\':123,\\'pi\\':3\&.1416,\\'a\\':[1,2,3,\-1],\\'u64\\':1234567890123456789,\\'i64\\':\-1234567890123456789}'\fC [static]\fP"

.SS "const char kPrettyJson[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
"{\n"
"    \"hello\": \"world\",\n"
"    \"t\": true,\n"
"    \"f\": false,\n"
"    \"n\": null,\n"
"    \"i\": 123,\n"
"    \"pi\": 3\&.1416,\n"
"    \"a\": [\n"
"        1,\n"
"        2,\n"
"        3,\n"
"        -1\n"
"    ],\n"
"    \"u64\": 1234567890123456789,\n"
"    \"i64\": -1234567890123456789\n"
"}"
.fi
.SS "const char kPrettyJson_FormatOptions_SLA[]\fC [static]\fP"
\fBInitial value:\fP
.PP
.nf
=
"{\n"
"    \"hello\": \"world\",\n"
"    \"t\": true,\n"
"    \"f\": false,\n"
"    \"n\": null,\n"
"    \"i\": 123,\n"
"    \"pi\": 3\&.1416,\n"
"    \"a\": [1, 2, 3, -1],\n"
"    \"u64\": 1234567890123456789,\n"
"    \"i64\": -1234567890123456789\n"
"}"
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
