.TH "GenericReader< SourceEncoding, TargetEncoding, StackAllocator >::StackStream< CharType >" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GenericReader< SourceEncoding, TargetEncoding, StackAllocator >::StackStream< CharType >
.SH SYNOPSIS
.br
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef CharType \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStackStream\fP (\fBinternal::Stack\fP< StackAllocator > &stack)"
.br
.ti -1c
.RI "RAPIDJSON_FORCEINLINE void \fBPut\fP (\fBCh\fP c)"
.br
.ti -1c
.RI "RAPIDJSON_FORCEINLINE void * \fBPush\fP (\fBSizeType\fP count)"
.br
.ti -1c
.RI "size_t \fBLength\fP () const"
.br
.ti -1c
.RI "\fBCh\fP * \fBPop\fP ()"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBStackStream\fP (const \fBStackStream\fP &)"
.br
.ti -1c
.RI "\fBStackStream\fP & \fBoperator=\fP (const \fBStackStream\fP &)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBinternal::Stack\fP< StackAllocator > & \fBstack_\fP"
.br
.ti -1c
.RI "\fBSizeType\fP \fBlength_\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > typedef CharType \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::Ch"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >::StackStream< CharType >::StackStream (\fBinternal::Stack\fP< StackAllocator > & stack)\fC [inline]\fP"

.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >::StackStream< CharType >::StackStream (const \fBStackStream\fP< CharType > &)\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > size_t \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::Length () const\fC [inline]\fP"

.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > \fBStackStream\fP & \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::operator= (const \fBStackStream\fP< CharType > &)\fC [private]\fP"

.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > \fBCh\fP * \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::Pop ()\fC [inline]\fP"

.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > RAPIDJSON_FORCEINLINE void * \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::Push (\fBSizeType\fP count)\fC [inline]\fP"

.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > RAPIDJSON_FORCEINLINE void \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::Put (\fBCh\fP c)\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > \fBSizeType\fP \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::length_\fC [private]\fP"

.SS "template<typename SourceEncoding , typename TargetEncoding , typename StackAllocator  = CrtAllocator> template<typename CharType > \fBinternal::Stack\fP<StackAllocator>& \fBGenericReader\fP< SourceEncoding, TargetEncoding, StackAllocator >\fB::StackStream\fP< CharType >::stack_\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
