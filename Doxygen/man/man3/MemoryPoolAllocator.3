.TH "MemoryPoolAllocator< BaseAllocator >" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MemoryPoolAllocator< BaseAllocator > \- Default memory allocator used by the parser and DOM\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <allocators\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBChunkHeader\fP"
.br
.RI "Chunk header for perpending to each chunk\&. "
.ti -1c
.RI "struct \fBSharedData\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMemoryPoolAllocator\fP (size_t chunkSize=\fBkDefaultChunkCapacity\fP, BaseAllocator *baseAllocator=0)"
.br
.RI "Constructor with chunkSize\&. "
.ti -1c
.RI "\fBMemoryPoolAllocator\fP (void *buffer, size_t size, size_t chunkSize=\fBkDefaultChunkCapacity\fP, BaseAllocator *baseAllocator=0)"
.br
.RI "Constructor with user-supplied buffer\&. "
.ti -1c
.RI "\fBMemoryPoolAllocator\fP (const \fBMemoryPoolAllocator\fP &rhs) RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fBMemoryPoolAllocator\fP & \fBoperator=\fP (const \fBMemoryPoolAllocator\fP &rhs) RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fB~MemoryPoolAllocator\fP () RAPIDJSON_NOEXCEPT"
.br
.RI "Destructor\&. "
.ti -1c
.RI "void \fBClear\fP () RAPIDJSON_NOEXCEPT"
.br
.RI "Deallocates all memory chunks, excluding the first/user one\&. "
.ti -1c
.RI "size_t \fBCapacity\fP () const RAPIDJSON_NOEXCEPT"
.br
.RI "Computes the total capacity of allocated memory chunks\&. "
.ti -1c
.RI "size_t \fBSize\fP () const RAPIDJSON_NOEXCEPT"
.br
.RI "Computes the memory blocks allocated\&. "
.ti -1c
.RI "bool \fBShared\fP () const RAPIDJSON_NOEXCEPT"
.br
.RI "Whether the allocator is shared\&. "
.ti -1c
.RI "void * \fBMalloc\fP (size_t size)"
.br
.RI "Allocates a memory block\&. (concept Allocator) "
.ti -1c
.RI "void * \fBRealloc\fP (void *originalPtr, size_t originalSize, size_t newSize)"
.br
.RI "Resizes a memory block (concept Allocator) "
.ti -1c
.RI "bool \fBoperator==\fP (const \fBMemoryPoolAllocator\fP &rhs) const RAPIDJSON_NOEXCEPT"
.br
.RI "Compare (equality) with another \fBMemoryPoolAllocator\fP\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBMemoryPoolAllocator\fP &rhs) const RAPIDJSON_NOEXCEPT"
.br
.RI "Compare (inequality) with another \fBMemoryPoolAllocator\fP\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBFree\fP (void *ptr) RAPIDJSON_NOEXCEPT"
.br
.RI "Frees a memory block (concept Allocator) "
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const bool \fBkNeedFree\fP = false"
.br
.RI "Tell users that no need to call \fBFree()\fP with this allocator\&. (concept Allocator) "
.ti -1c
.RI "static const bool \fBkRefCounted\fP = true"
.br
.RI "Tell users that this allocator is reference counted on copy\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "bool \fBAddChunk\fP (size_t capacity)"
.br
.RI "Creates a new chunk\&. "
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static \fBChunkHeader\fP * \fBGetChunkHead\fP (\fBSharedData\fP *shared)"
.br
.ti -1c
.RI "static \fBuint8_t\fP * \fBGetChunkBuffer\fP (\fBSharedData\fP *shared)"
.br
.ti -1c
.RI "static void * \fBAlignBuffer\fP (void *buf, size_t &size)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "size_t \fBchunk_capacity_\fP"
.br
.RI "The minimum capacity of chunk when they are allocated\&. "
.ti -1c
.RI "BaseAllocator * \fBbaseAllocator_\fP"
.br
.RI "base allocator for allocating memory chunks\&. "
.ti -1c
.RI "\fBSharedData\fP * \fBshared_\fP"
.br
.RI "The shared data of the allocator\&. "
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static const size_t \fBSIZEOF_SHARED_DATA\fP = \fBRAPIDJSON_ALIGN\fP(sizeof(\fBSharedData\fP))"
.br
.ti -1c
.RI "static const size_t \fBSIZEOF_CHUNK_HEADER\fP = \fBRAPIDJSON_ALIGN\fP(sizeof(\fBChunkHeader\fP))"
.br
.ti -1c
.RI "static const size_t \fBkDefaultChunkCapacity\fP = \fBRAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY\fP"
.br
.RI "Default chunk capacity\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename BaseAllocator = CrtAllocator>
.br
class MemoryPoolAllocator< BaseAllocator >"Default memory allocator used by the parser and DOM\&. 

This allocator allocate memory blocks from pre-allocated memory chunks\&.
.PP
It does not free memory blocks\&. And \fBRealloc()\fP only allocate new memory\&.
.PP
The memory chunks are allocated by BaseAllocator, which is \fBCrtAllocator\fP by default\&.
.PP
User may also supply a buffer as the first chunk\&.
.PP
If the user-buffer is full then additional chunks are allocated by BaseAllocator\&.
.PP
The user-buffer is not deallocated by this allocator\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIBaseAllocator\fP the allocator type for allocating memory chunks\&. Default is \fBCrtAllocator\fP\&. 
.RE
.PP
\fBNote\fP
.RS 4
implements Allocator concept 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename BaseAllocator  = CrtAllocator> \fBMemoryPoolAllocator\fP< BaseAllocator >\fB::MemoryPoolAllocator\fP (size_t chunkSize = \fC\fBkDefaultChunkCapacity\fP\fP, BaseAllocator * baseAllocator = \fC0\fP)\fC [inline]\fP, \fC [explicit]\fP"

.PP
Constructor with chunkSize\&. 
.PP
\fBParameters\fP
.RS 4
\fIchunkSize\fP The size of memory chunk\&. The default is kDefaultChunkSize\&. 
.br
\fIbaseAllocator\fP The allocator for allocating memory chunks\&. 
.RE
.PP

.SS "template<typename BaseAllocator  = CrtAllocator> \fBMemoryPoolAllocator\fP< BaseAllocator >\fB::MemoryPoolAllocator\fP (void * buffer, size_t size, size_t chunkSize = \fC\fBkDefaultChunkCapacity\fP\fP, BaseAllocator * baseAllocator = \fC0\fP)\fC [inline]\fP"

.PP
Constructor with user-supplied buffer\&. The user buffer will be used firstly\&. When it is full, memory pool allocates new chunk with chunk size\&.
.PP
The user buffer will not be deallocated when this allocator is destructed\&.
.PP
\fBParameters\fP
.RS 4
\fIbuffer\fP User supplied buffer\&. 
.br
\fIsize\fP Size of the buffer in bytes\&. It must at least larger than sizeof(ChunkHeader)\&. 
.br
\fIchunkSize\fP The size of memory chunk\&. The default is kDefaultChunkSize\&. 
.br
\fIbaseAllocator\fP The allocator for allocating memory chunks\&. 
.RE
.PP

.SS "template<typename BaseAllocator  = CrtAllocator> \fBMemoryPoolAllocator\fP< BaseAllocator >\fB::MemoryPoolAllocator\fP (const \fBMemoryPoolAllocator\fP< BaseAllocator > & rhs)\fC [inline]\fP"

.SS "template<typename BaseAllocator  = CrtAllocator> \fBMemoryPoolAllocator\fP< BaseAllocator >::~\fBMemoryPoolAllocator\fP ()\fC [inline]\fP"

.PP
Destructor\&. This deallocates all memory chunks, excluding the user-supplied buffer\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename BaseAllocator  = CrtAllocator> bool \fBMemoryPoolAllocator\fP< BaseAllocator >::AddChunk (size_t capacity)\fC [inline]\fP, \fC [private]\fP"

.PP
Creates a new chunk\&. 
.PP
\fBParameters\fP
.RS 4
\fIcapacity\fP Capacity of the chunk in bytes\&. 
.RE
.PP
\fBReturns\fP
.RS 4
true if success\&. 
.RE
.PP

.SS "template<typename BaseAllocator  = CrtAllocator> static void * \fBMemoryPoolAllocator\fP< BaseAllocator >::AlignBuffer (void * buf, size_t & size)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.SS "template<typename BaseAllocator  = CrtAllocator> size_t \fBMemoryPoolAllocator\fP< BaseAllocator >::Capacity () const\fC [inline]\fP"

.PP
Computes the total capacity of allocated memory chunks\&. 
.PP
\fBReturns\fP
.RS 4
total capacity in bytes\&. 
.RE
.PP

.SS "template<typename BaseAllocator  = CrtAllocator> void \fBMemoryPoolAllocator\fP< BaseAllocator >::Clear ()\fC [inline]\fP"

.PP
Deallocates all memory chunks, excluding the first/user one\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> static void \fBMemoryPoolAllocator\fP< BaseAllocator >::Free (void * ptr)\fC [inline]\fP, \fC [static]\fP"

.PP
Frees a memory block (concept Allocator) 
.SS "template<typename BaseAllocator  = CrtAllocator> static \fBuint8_t\fP * \fBMemoryPoolAllocator\fP< BaseAllocator >::GetChunkBuffer (\fBSharedData\fP * shared)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.SS "template<typename BaseAllocator  = CrtAllocator> static \fBChunkHeader\fP * \fBMemoryPoolAllocator\fP< BaseAllocator >::GetChunkHead (\fBSharedData\fP * shared)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.SS "template<typename BaseAllocator  = CrtAllocator> void * \fBMemoryPoolAllocator\fP< BaseAllocator >::Malloc (size_t size)\fC [inline]\fP"

.PP
Allocates a memory block\&. (concept Allocator) 
.SS "template<typename BaseAllocator  = CrtAllocator> bool \fBMemoryPoolAllocator\fP< BaseAllocator >::operator!= (const \fBMemoryPoolAllocator\fP< BaseAllocator > & rhs) const\fC [inline]\fP"

.PP
Compare (inequality) with another \fBMemoryPoolAllocator\fP\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> \fBMemoryPoolAllocator\fP & \fBMemoryPoolAllocator\fP< BaseAllocator >::operator= (const \fBMemoryPoolAllocator\fP< BaseAllocator > & rhs)\fC [inline]\fP"

.SS "template<typename BaseAllocator  = CrtAllocator> bool \fBMemoryPoolAllocator\fP< BaseAllocator >::operator== (const \fBMemoryPoolAllocator\fP< BaseAllocator > & rhs) const\fC [inline]\fP"

.PP
Compare (equality) with another \fBMemoryPoolAllocator\fP\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> void * \fBMemoryPoolAllocator\fP< BaseAllocator >::Realloc (void * originalPtr, size_t originalSize, size_t newSize)\fC [inline]\fP"

.PP
Resizes a memory block (concept Allocator) 
.SS "template<typename BaseAllocator  = CrtAllocator> bool \fBMemoryPoolAllocator\fP< BaseAllocator >::Shared () const\fC [inline]\fP"

.PP
Whether the allocator is shared\&. 
.PP
\fBReturns\fP
.RS 4
true or false\&. 
.RE
.PP

.SS "template<typename BaseAllocator  = CrtAllocator> size_t \fBMemoryPoolAllocator\fP< BaseAllocator >::Size () const\fC [inline]\fP"

.PP
Computes the memory blocks allocated\&. 
.PP
\fBReturns\fP
.RS 4
total used bytes\&. 
.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename BaseAllocator  = CrtAllocator> BaseAllocator* \fBMemoryPoolAllocator\fP< BaseAllocator >::baseAllocator_\fC [private]\fP"

.PP
base allocator for allocating memory chunks\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> size_t \fBMemoryPoolAllocator\fP< BaseAllocator >::chunk_capacity_\fC [private]\fP"

.PP
The minimum capacity of chunk when they are allocated\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> const size_t \fBMemoryPoolAllocator\fP< BaseAllocator >::kDefaultChunkCapacity = \fBRAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY\fP\fC [static]\fP, \fC [private]\fP"

.PP
Default chunk capacity\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> const bool \fBMemoryPoolAllocator\fP< BaseAllocator >::kNeedFree = false\fC [static]\fP"

.PP
Tell users that no need to call \fBFree()\fP with this allocator\&. (concept Allocator) 
.SS "template<typename BaseAllocator  = CrtAllocator> const bool \fBMemoryPoolAllocator\fP< BaseAllocator >::kRefCounted = true\fC [static]\fP"

.PP
Tell users that this allocator is reference counted on copy\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> \fBSharedData\fP* \fBMemoryPoolAllocator\fP< BaseAllocator >::shared_\fC [private]\fP"

.PP
The shared data of the allocator\&. 
.SS "template<typename BaseAllocator  = CrtAllocator> const size_t \fBMemoryPoolAllocator\fP< BaseAllocator >::SIZEOF_CHUNK_HEADER = \fBRAPIDJSON_ALIGN\fP(sizeof(\fBChunkHeader\fP))\fC [static]\fP, \fC [private]\fP"

.SS "template<typename BaseAllocator  = CrtAllocator> const size_t \fBMemoryPoolAllocator\fP< BaseAllocator >::SIZEOF_SHARED_DATA = \fBRAPIDJSON_ALIGN\fP(sizeof(\fBSharedData\fP))\fC [static]\fP, \fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
