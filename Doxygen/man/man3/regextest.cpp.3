.TH "src/rapidjson/test/unittest/regextest.cpp" 3 "Fri Jan 21 2022" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/rapidjson/test/unittest/regextest.cpp
.SH SYNOPSIS
.br
.PP
\fC#include 'unittest\&.h'\fP
.br
\fC#include 'rapidjson/internal/regex\&.h'\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBEURO\fP   '\\xE2\\x82\\xAC'"
.br
.ti -1c
.RI "#define \fBTEST_INVALID\fP(s)"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBTEST\fP (Regex, Single)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Concatenation)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Alternation1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Alternation2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Parenthesis1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Parenthesis2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Parenthesis3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrOne1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrOne2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrOne3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrOne4)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrOne5)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrMore1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrMore2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrMore3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, ZeroOrMore4)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, OneOrMore1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, OneOrMore2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, OneOrMore3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, OneOrMore4)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierExact1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierExact2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierExact3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMin1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMin2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMin3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMinMax1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMinMax2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMinMax3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMinMax4)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, QuantifierMinMax5)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Unicode)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, AnyCharacter)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange1)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange2)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange3)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange4)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange5)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange6)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange7)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, CharacterRange8)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Search)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Search_BeginAnchor)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Search_EndAnchor)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Search_BothAnchor)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Escape)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Invalid)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Issue538)"
.br
.ti -1c
.RI "\fBTEST\fP (Regex, Issue583)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define EURO   '\\xE2\\x82\\xAC'"

.SS "#define TEST_INVALID(s)"
\fBValue:\fP
.PP
.nf
    {\
        Regex re(s);\
        EXPECT_FALSE(re\&.IsValid());\
    }
.fi
.SH "Function Documentation"
.PP 
.SS "TEST (Regex, Alternation1)"

.SS "TEST (Regex, Alternation2)"

.SS "TEST (Regex, AnyCharacter)"

.SS "TEST (Regex, CharacterRange1)"

.SS "TEST (Regex, CharacterRange2)"

.SS "TEST (Regex, CharacterRange3)"

.SS "TEST (Regex, CharacterRange4)"

.SS "TEST (Regex, CharacterRange5)"

.SS "TEST (Regex, CharacterRange6)"

.SS "TEST (Regex, CharacterRange7)"

.SS "TEST (Regex, CharacterRange8)"

.SS "TEST (Regex, Concatenation)"

.SS "TEST (Regex, Escape)"

.SS "TEST (Regex, Invalid)"

.SS "TEST (Regex, Issue538)"

.SS "TEST (Regex, Issue583)"

.SS "TEST (Regex, OneOrMore1)"

.SS "TEST (Regex, OneOrMore2)"

.SS "TEST (Regex, OneOrMore3)"

.SS "TEST (Regex, OneOrMore4)"

.SS "TEST (Regex, Parenthesis1)"

.SS "TEST (Regex, Parenthesis2)"

.SS "TEST (Regex, Parenthesis3)"

.SS "TEST (Regex, QuantifierExact1)"

.SS "TEST (Regex, QuantifierExact2)"

.SS "TEST (Regex, QuantifierExact3)"

.SS "TEST (Regex, QuantifierMin1)"

.SS "TEST (Regex, QuantifierMin2)"

.SS "TEST (Regex, QuantifierMin3)"

.SS "TEST (Regex, QuantifierMinMax1)"

.SS "TEST (Regex, QuantifierMinMax2)"

.SS "TEST (Regex, QuantifierMinMax3)"

.SS "TEST (Regex, QuantifierMinMax4)"

.SS "TEST (Regex, QuantifierMinMax5)"

.SS "TEST (Regex, Search)"

.SS "TEST (Regex, Search_BeginAnchor)"

.SS "TEST (Regex, Search_BothAnchor)"

.SS "TEST (Regex, Search_EndAnchor)"

.SS "TEST (Regex, Single)"

.SS "TEST (Regex, Unicode)"

.SS "TEST (Regex, ZeroOrMore1)"

.SS "TEST (Regex, ZeroOrMore2)"

.SS "TEST (Regex, ZeroOrMore3)"

.SS "TEST (Regex, ZeroOrMore4)"

.SS "TEST (Regex, ZeroOrOne1)"

.SS "TEST (Regex, ZeroOrOne2)"

.SS "TEST (Regex, ZeroOrOne3)"

.SS "TEST (Regex, ZeroOrOne4)"

.SS "TEST (Regex, ZeroOrOne5)"

.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
