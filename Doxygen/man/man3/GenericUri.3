.TH "GenericUri< ValueType, Allocator >" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GenericUri< ValueType, Allocator >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <uri\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBValueType::Ch\fP \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGenericUri\fP (\fBAllocator\fP *allocator=0)"
.br
.RI "Constructors\&. "
.ti -1c
.RI "\fBGenericUri\fP (const \fBCh\fP *uri, \fBSizeType\fP len, \fBAllocator\fP *allocator=0)"
.br
.ti -1c
.RI "\fBGenericUri\fP (const \fBCh\fP *uri, \fBAllocator\fP *allocator=0)"
.br
.ti -1c
.RI "template<typename \fBT\fP > \fBGenericUri\fP (const \fBT\fP &uri, \fBAllocator\fP *allocator=0)"
.br
.ti -1c
.RI "\fBGenericUri\fP (const \fBGenericUri\fP &rhs)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fBGenericUri\fP (const \fBGenericUri\fP &rhs, \fBAllocator\fP *allocator)"
.br
.RI "Copy constructor\&. "
.ti -1c
.RI "\fB~GenericUri\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBGenericUri\fP & \fBoperator=\fP (const \fBGenericUri\fP &rhs)"
.br
.RI "Assignment operator\&. "
.ti -1c
.RI "template<typename \fBT\fP > void \fBGet\fP (\fBT\fP &uri, \fBAllocator\fP &allocator)"
.br
.RI "Getters\&. "
.ti -1c
.RI "const \fBCh\fP * \fBGetString\fP () const"
.br
.ti -1c
.RI "\fBSizeType\fP \fBGetStringLength\fP () const"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetBaseString\fP () const"
.br
.ti -1c
.RI "\fBSizeType\fP \fBGetBaseStringLength\fP () const"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetSchemeString\fP () const"
.br
.ti -1c
.RI "\fBSizeType\fP \fBGetSchemeStringLength\fP () const"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetAuthString\fP () const"
.br
.ti -1c
.RI "\fBSizeType\fP \fBGetAuthStringLength\fP () const"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetPathString\fP () const"
.br
.ti -1c
.RI "\fBSizeType\fP \fBGetPathStringLength\fP () const"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetQueryString\fP () const"
.br
.ti -1c
.RI "\fBSizeType\fP \fBGetQueryStringLength\fP () const"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetFragString\fP () const"
.br
.ti -1c
.RI "\fBSizeType\fP \fBGetFragStringLength\fP () const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBGenericUri\fP &rhs) const"
.br
.RI "Equality operators\&. "
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBGenericUri\fP &rhs) const"
.br
.ti -1c
.RI "bool \fBMatch\fP (const \fBGenericUri\fP &uri, bool full=true) const"
.br
.ti -1c
.RI "\fBGenericUri\fP \fBResolve\fP (const \fBGenericUri\fP &baseuri, \fBAllocator\fP *allocator=0)"
.br
.RI "Resolve this URI against another (base) URI in accordance with URI resolution rules\&. "
.ti -1c
.RI "\fBAllocator\fP & \fBGetAllocator\fP ()"
.br
.RI "Get the allocator of this \fBGenericUri\fP\&. "
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "std::size_t \fBAllocate\fP (std::size_t len)"
.br
.ti -1c
.RI "void \fBFree\fP ()"
.br
.ti -1c
.RI "void \fBParse\fP (const \fBCh\fP *uri, std::size_t len)"
.br
.ti -1c
.RI "void \fBSetBase\fP ()"
.br
.ti -1c
.RI "void \fBSetUri\fP ()"
.br
.ti -1c
.RI "\fBCh\fP * \fBCopyPart\fP (\fBCh\fP *to, \fBCh\fP *from, std::size_t len)"
.br
.ti -1c
.RI "void \fBRemoveDotSegments\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBCh\fP * \fBuri_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBbase_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBscheme_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBauth_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBpath_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBquery_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBfrag_\fP"
.br
.ti -1c
.RI "\fBAllocator\fP * \fBallocator_\fP"
.br
.RI "The current allocator\&. It is either user-supplied or equal to ownAllocator_\&. "
.ti -1c
.RI "\fBAllocator\fP * \fBownAllocator_\fP"
.br
.RI "Allocator owned by this Uri\&. "
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> typedef \fBValueType::Ch\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::Ch"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >\fB::GenericUri\fP (\fBAllocator\fP * allocator = \fC0\fP)\fC [inline]\fP"

.PP
Constructors\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >\fB::GenericUri\fP (const \fBCh\fP * uri, \fBSizeType\fP len, \fBAllocator\fP * allocator = \fC0\fP)\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >\fB::GenericUri\fP (const \fBCh\fP * uri, \fBAllocator\fP * allocator = \fC0\fP)\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> template<typename \fBT\fP > \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >\fB::GenericUri\fP (const \fBT\fP & uri, \fBAllocator\fP * allocator = \fC0\fP)\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >\fB::GenericUri\fP (const \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP > & rhs)\fC [inline]\fP"

.PP
Copy constructor\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >\fB::GenericUri\fP (const \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP > & rhs, \fBAllocator\fP * allocator)\fC [inline]\fP"

.PP
Copy constructor\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::~\fBGenericUri\fP ()\fC [inline]\fP"

.PP
Destructor\&. 
.SH "Member Function Documentation"
.PP 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> std::size_t \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::Allocate (std::size_t len)\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::CopyPart (\fBCh\fP * to, \fBCh\fP * from, std::size_t len)\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::Free ()\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> template<typename \fBT\fP > void \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::Get (\fBT\fP & uri, \fBAllocator\fP & allocator)\fC [inline]\fP"

.PP
Getters\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBAllocator\fP & \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetAllocator ()\fC [inline]\fP"

.PP
Get the allocator of this \fBGenericUri\fP\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetAuthString () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBSizeType\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetAuthStringLength () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetBaseString () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBSizeType\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetBaseStringLength () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetFragString () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBSizeType\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetFragStringLength () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetPathString () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBSizeType\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetPathStringLength () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetQueryString () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBSizeType\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetQueryStringLength () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetSchemeString () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBSizeType\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetSchemeStringLength () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> const \fBCh\fP * \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetString () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBSizeType\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::GetStringLength () const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> bool \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::Match (const \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP > & uri, bool full = \fCtrue\fP) const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> bool \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::operator!= (const \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP > & rhs) const\fC [inline]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP & \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::operator= (const \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP > & rhs)\fC [inline]\fP"

.PP
Assignment operator\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> bool \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::operator== (const \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP > & rhs) const\fC [inline]\fP"

.PP
Equality operators\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::Parse (const \fBCh\fP * uri, std::size_t len)\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::RemoveDotSegments ()\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBGenericUri\fP \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::Resolve (const \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP > & baseuri, \fBAllocator\fP * allocator = \fC0\fP)\fC [inline]\fP"

.PP
Resolve this URI against another (base) URI in accordance with URI resolution rules\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::SetBase ()\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> void \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::SetUri ()\fC [inline]\fP, \fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBAllocator\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::allocator_\fC [private]\fP"

.PP
The current allocator\&. It is either user-supplied or equal to ownAllocator_\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::auth_\fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::base_\fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::frag_\fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBAllocator\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::ownAllocator_\fC [private]\fP"

.PP
Allocator owned by this Uri\&. 
.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::path_\fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::query_\fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::scheme_\fC [private]\fP"

.SS "template<typename \fBValueType\fP , typename \fBAllocator\fP  = CrtAllocator> \fBCh\fP* \fBGenericUri\fP< \fBValueType\fP, \fBAllocator\fP >::uri_\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
