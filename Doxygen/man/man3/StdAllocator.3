.TH "StdAllocator< T, BaseAllocator >" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
StdAllocator< T, BaseAllocator >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <allocators\&.h>\fP
.PP
Inherits std::allocator< T >\&.
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBrebind\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef BaseAllocator \fBBaseAllocatorType\fP"
.br
.ti -1c
.RI "typedef traits_type::size_type \fBsize_type\fP"
.br
.ti -1c
.RI "typedef traits_type::difference_type \fBdifference_type\fP"
.br
.ti -1c
.RI "typedef traits_type::value_type \fBvalue_type\fP"
.br
.ti -1c
.RI "typedef traits_type::pointer \fBpointer\fP"
.br
.ti -1c
.RI "typedef traits_type::const_pointer \fBconst_pointer\fP"
.br
.ti -1c
.RI "typedef allocator_type::reference \fBreference\fP"
.br
.ti -1c
.RI "typedef allocator_type::const_reference \fBconst_reference\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBStdAllocator\fP () RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fBStdAllocator\fP (const \fBStdAllocator\fP &rhs) RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "template<typename U > \fBStdAllocator\fP (const \fBStdAllocator\fP< U, BaseAllocator > &rhs) RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fBStdAllocator\fP (const BaseAllocator &allocator) RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fB~StdAllocator\fP () RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fBpointer\fP \fBaddress\fP (\fBreference\fP r) const RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fBconst_pointer\fP \fBaddress\fP (\fBconst_reference\fP r) const RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "\fBsize_type\fP \fBmax_size\fP () const RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "void \fBconstruct\fP (\fBpointer\fP p, \fBconst_reference\fP r)"
.br
.ti -1c
.RI "void \fBdestroy\fP (\fBpointer\fP p)"
.br
.ti -1c
.RI "template<typename U > U * \fBallocate\fP (\fBsize_type\fP n=1, const void *=0)"
.br
.ti -1c
.RI "template<typename U > void \fBdeallocate\fP (U *p, \fBsize_type\fP n=1)"
.br
.ti -1c
.RI "\fBpointer\fP \fBallocate\fP (\fBsize_type\fP n=1, const void *=0)"
.br
.ti -1c
.RI "void \fBdeallocate\fP (\fBpointer\fP p, \fBsize_type\fP n=1)"
.br
.ti -1c
.RI "template<typename U > bool \fBoperator==\fP (const \fBStdAllocator\fP< U, BaseAllocator > &rhs) const RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "template<typename U > bool \fBoperator!=\fP (const \fBStdAllocator\fP< U, BaseAllocator > &rhs) const RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "void * \fBMalloc\fP (size_t size)"
.br
.ti -1c
.RI "void * \fBRealloc\fP (void *originalPtr, size_t originalSize, size_t newSize)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBFree\fP (void *ptr) RAPIDJSON_NOEXCEPT"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const bool \fBkNeedFree\fP = BaseAllocator::kNeedFree"
.br
.RI "rapidjson Allocator concept "
.ti -1c
.RI "static const bool \fBkRefCounted\fP = \fBinternal::IsRefCounted\fP<BaseAllocator>\fB::Value\fP"
.br
.in -1c
.SS "Private Types"

.in +1c
.ti -1c
.RI "typedef std::allocator< \fBT\fP > \fBallocator_type\fP"
.br
.ti -1c
.RI "typedef \fBallocator_type\fP \fBtraits_type\fP"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "BaseAllocator \fBbaseAllocator_\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "template<typename , typename > class \fBStdAllocator\fP"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef std::allocator<\fBT\fP> \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::allocator_type\fC [private]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef BaseAllocator \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::BaseAllocatorType"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef traits_type::const_pointer \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::const_pointer"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef allocator_type::const_reference \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::const_reference"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef traits_type::difference_type \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::difference_type"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef traits_type::pointer \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::pointer"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef allocator_type::reference \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::reference"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef traits_type::size_type \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::size_type"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef \fBallocator_type\fP \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::traits_type\fC [private]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> typedef traits_type::value_type \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::value_type"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBStdAllocator\fP< \fBT\fP, BaseAllocator >\fB::StdAllocator\fP ()\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBStdAllocator\fP< \fBT\fP, BaseAllocator >\fB::StdAllocator\fP (const \fBStdAllocator\fP< \fBT\fP, BaseAllocator > & rhs)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> template<typename U > \fBStdAllocator\fP< \fBT\fP, BaseAllocator >\fB::StdAllocator\fP (const \fBStdAllocator\fP< U, BaseAllocator > & rhs)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBStdAllocator\fP< \fBT\fP, BaseAllocator >\fB::StdAllocator\fP (const BaseAllocator & allocator)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::~\fBStdAllocator\fP ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBconst_pointer\fP \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::address (\fBconst_reference\fP r) const\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBpointer\fP \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::address (\fBreference\fP r) const\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> template<typename U > U * \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::allocate (\fBsize_type\fP n = \fC1\fP, const void * = \fC0\fP)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBpointer\fP \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::allocate (\fBsize_type\fP n = \fC1\fP, const void * = \fC0\fP)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> void \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::construct (\fBpointer\fP p, \fBconst_reference\fP r)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> void \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::deallocate (\fBpointer\fP p, \fBsize_type\fP n = \fC1\fP)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> template<typename U > void \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::deallocate (U * p, \fBsize_type\fP n = \fC1\fP)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> void \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::destroy (\fBpointer\fP p)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> static void \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::Free (void * ptr)\fC [inline]\fP, \fC [static]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> void * \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::Malloc (size_t size)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> \fBsize_type\fP \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::max_size () const\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> template<typename U > bool \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::operator!= (const \fBStdAllocator\fP< U, BaseAllocator > & rhs) const\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> template<typename U > bool \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::operator== (const \fBStdAllocator\fP< U, BaseAllocator > & rhs) const\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> void * \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::Realloc (void * originalPtr, size_t originalSize, size_t newSize)\fC [inline]\fP"

.SH "Friends And Related Function Documentation"
.PP 
.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> template<typename , typename > friend class \fBStdAllocator\fP\fC [friend]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> BaseAllocator \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::baseAllocator_\fC [private]\fP"

.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> const bool \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::kNeedFree = BaseAllocator::kNeedFree\fC [static]\fP"

.PP
rapidjson Allocator concept 
.SS "template<typename \fBT\fP , typename BaseAllocator  = CrtAllocator> const bool \fBStdAllocator\fP< \fBT\fP, BaseAllocator >::kRefCounted = \fBinternal::IsRefCounted\fP<BaseAllocator>\fB::Value\fP\fC [static]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
