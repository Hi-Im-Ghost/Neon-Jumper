.TH "JsonReader" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
JsonReader \- Represents a JSON reader which implements \fBArchiver\fP concept\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <archiver\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBJsonReader\fP (const char *\fBjson\fP)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fB~JsonReader\fP ()"
.br
.RI "Destructor\&. "
.ti -1c
.RI "\fBoperator bool\fP () const"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBStartObject\fP ()"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBMember\fP (const char *name)"
.br
.ti -1c
.RI "bool \fBHasMember\fP (const char *name) const"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBEndObject\fP ()"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBStartArray\fP (size_t *size=0)"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBEndArray\fP ()"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBoperator&\fP (bool &b)"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBoperator&\fP (unsigned &u)"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBoperator&\fP (int &i)"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBoperator&\fP (double &d)"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBoperator&\fP (std::string &s)"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBSetNull\fP ()"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const bool \fBIsReader\fP = true"
.br
.ti -1c
.RI "static const bool \fBIsWriter\fP = !\fBIsReader\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBJsonReader\fP (const \fBJsonReader\fP &)"
.br
.ti -1c
.RI "\fBJsonReader\fP & \fBoperator=\fP (const \fBJsonReader\fP &)"
.br
.ti -1c
.RI "void \fBNext\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "void * \fBmDocument\fP"
.br
.RI "DOM result of parsing\&. "
.ti -1c
.RI "void * \fBmStack\fP"
.br
.RI "Stack for iterating the DOM\&. "
.ti -1c
.RI "bool \fBmError\fP"
.br
.RI "Whether an error has occurred\&. "
.in -1c
.SH "Detailed Description"
.PP 
Represents a JSON reader which implements \fBArchiver\fP concept\&. 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "JsonReader::JsonReader (const char * json)"

.PP
Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIjson\fP A non-const source json string for in-situ parsing\&. 
.RE
.PP
\fBNote\fP
.RS 4
in-situ means the source JSON string will be modified after parsing\&. 
.RE
.PP

.SS "JsonReader::~JsonReader ()"

.PP
Destructor\&. 
.SS "JsonReader::JsonReader (const \fBJsonReader\fP &)\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "\fBJsonReader\fP & JsonReader::EndArray ()"

.SS "\fBJsonReader\fP & JsonReader::EndObject ()"

.SS "bool JsonReader::HasMember (const char * name) const"

.SS "\fBJsonReader\fP & JsonReader::Member (const char * name)"

.SS "void JsonReader::Next ()\fC [private]\fP"

.SS "JsonReader::operator bool () const\fC [inline]\fP"

.SS "\fBJsonReader\fP & JsonReader::operator& (bool & b)"

.SS "\fBJsonReader\fP & JsonReader::operator& (double & d)"

.SS "\fBJsonReader\fP & JsonReader::operator& (int & i)"

.SS "\fBJsonReader\fP & JsonReader::operator& (std::string & s)"

.SS "\fBJsonReader\fP & JsonReader::operator& (unsigned & u)"

.SS "\fBJsonReader\fP & JsonReader::operator= (const \fBJsonReader\fP &)\fC [private]\fP"

.SS "\fBJsonReader\fP & JsonReader::SetNull ()"

.SS "\fBJsonReader\fP & JsonReader::StartArray (size_t * size = \fC0\fP)"

.SS "\fBJsonReader\fP & JsonReader::StartObject ()"

.SH "Member Data Documentation"
.PP 
.SS "const bool JsonReader::IsReader = true\fC [static]\fP"

.SS "const bool JsonReader::IsWriter = !\fBIsReader\fP\fC [static]\fP"

.SS "void* JsonReader::mDocument\fC [private]\fP"

.PP
DOM result of parsing\&. 
.SS "bool JsonReader::mError\fC [private]\fP"

.PP
Whether an error has occurred\&. 
.SS "void* JsonReader::mStack\fC [private]\fP"

.PP
Stack for iterating the DOM\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
