.TH "md_src_rapidjson_doc_dom" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_rapidjson_doc_dom \- DOM 
Document Object Model(DOM) is an in-memory representation of JSON for query and manipulation\&. The basic usage of DOM is described in \fBTutorial\fP\&. This section will describe some details and more advanced usages\&.
.SH "Template"
.PP
In the tutorial, \fCValue\fP and \fCDocument\fP was used\&. Similarly to \fCstd::string\fP, these are actually \fCtypedef\fP of template classes:
.PP
.PP
.nf
namespace rapidjson {

template <typename Encoding, typename Allocator = MemoryPoolAllocator<> >
class GenericValue {
    // \&.\&.\&.
};

template <typename Encoding, typename Allocator = MemoryPoolAllocator<> >
class GenericDocument : public GenericValue<Encoding, Allocator> {
    // \&.\&.\&.
};

typedef GenericValue<UTF8<> > Value;
typedef GenericDocument<UTF8<> > Document;

} // namespace rapidjson
.fi
.PP
.PP
User can customize these template parameters\&.
.SS "Encoding"
The \fCEncoding\fP parameter specifies the encoding of JSON String value in memory\&. Possible options are \fC\fBUTF8\fP\fP, \fC\fBUTF16\fP\fP, \fC\fBUTF32\fP\fP\&. Note that, these 3 types are also template class\&. \fC\fBUTF8\fP<>\fP is \fC\fBUTF8\fP<char>\fP, which means using char to store the characters\&. You may refer to \fBEncoding\fP for details\&.
.PP
Suppose a Windows application would query localization strings stored in JSON files\&. Unicode-enabled functions in Windows use UTF-16 (wide character) encoding\&. No matter what encoding was used in JSON files, we can store the strings in UTF-16 in memory\&.
.PP
.PP
.nf
using namespace rapidjson;

typedef GenericDocument<UTF16<> > WDocument;
typedef GenericValue<UTF16<> > WValue;

FILE* fp = fopen("localization\&.json", "rb"); // non-Windows use "r"

char readBuffer[256];
FileReadStream bis(fp, readBuffer, sizeof(readBuffer));

AutoUTFInputStream<unsigned, FileReadStream> eis(bis);  // wraps bis into eis

WDocument d;
d\&.ParseStream<0, AutoUTF<unsigned> >(eis);

const WValue locale(L"ja"); // Japanese

MessageBoxW(hWnd, d[locale]\&.GetString(), L"Test", MB_OK);
.fi
.PP
.SS "Allocator"
The \fCAllocator\fP defines which allocator class is used when allocating/deallocating memory for \fCDocument\fP/\fCValue\fP\&. \fCDocument\fP owns, or references to an \fCAllocator\fP instance\&. On the other hand, \fCValue\fP does not do so, in order to reduce memory consumption\&.
.PP
The default allocator used in \fC\fBGenericDocument\fP\fP is \fC\fBMemoryPoolAllocator\fP\fP\&. This allocator actually allocate memory sequentially, and cannot deallocate one by one\&. This is very suitable when parsing a JSON into a DOM tree\&.
.PP
Another allocator is \fC\fBCrtAllocator\fP\fP, of which CRT is short for C RunTime library\&. This allocator simply calls the standard \fCmalloc()\fP/\fCrealloc()\fP/\fCfree()\fP\&. When there is a lot of add and remove operations, this allocator may be preferred\&. But this allocator is far less efficient than \fC\fBMemoryPoolAllocator\fP\fP\&.
.SH "Parsing"
.PP
\fCDocument\fP provides several functions for parsing\&. In below, (1) is the fundamental function, while the others are helpers which call (1)\&.
.PP
.PP
.nf
using namespace rapidjson;

// (1) Fundamental
template <unsigned parseFlags, typename SourceEncoding, typename InputStream>
GenericDocument& GenericDocument::ParseStream(InputStream& is);

// (2) Using the same Encoding for stream
template <unsigned parseFlags, typename InputStream>
GenericDocument& GenericDocument::ParseStream(InputStream& is);

// (3) Using default parse flags
template <typename InputStream>
GenericDocument& GenericDocument::ParseStream(InputStream& is);

// (4) In situ parsing
template <unsigned parseFlags>
GenericDocument& GenericDocument::ParseInsitu(Ch* str);

// (5) In situ parsing, using default parse flags
GenericDocument& GenericDocument::ParseInsitu(Ch* str);

// (6) Normal parsing of a string
template <unsigned parseFlags, typename SourceEncoding>
GenericDocument& GenericDocument::Parse(const Ch* str);

// (7) Normal parsing of a string, using same Encoding of Document
template <unsigned parseFlags>
GenericDocument& GenericDocument::Parse(const Ch* str);

// (8) Normal parsing of a string, using default parse flags
GenericDocument& GenericDocument::Parse(const Ch* str);
.fi
.PP
.PP
The examples of \fBtutorial\fP uses (8) for normal parsing of string\&. The examples of \fBstream\fP uses the first three\&. \fIIn situ\fP parsing will be described soon\&.
.PP
The \fCparseFlags\fP are combination of the following bit-flags:
.PP
Parse flags   Meaning    \fCkParseNoFlags\fP   No flag is set\&.    \fCkParseDefaultFlags\fP   Default parse flags\&. It is equal to macro \fCRAPIDJSON_PARSE_DEFAULT_FLAGS\fP, which is defined as \fCkParseNoFlags\fP\&.    \fCkParseInsituFlag\fP   In-situ(destructive) parsing\&.    \fCkParseValidateEncodingFlag\fP   Validate encoding of JSON strings\&.    \fCkParseIterativeFlag\fP   Iterative(constant complexity in terms of function call stack size) parsing\&.    \fCkParseStopWhenDoneFlag\fP   After parsing a complete JSON root from stream, stop further processing the rest of stream\&. When this flag is used, parser will not generate \fCkParseErrorDocumentRootNotSingular\fP error\&. Using this flag for parsing multiple JSONs in the same stream\&.    \fCkParseFullPrecisionFlag\fP   Parse number in full precision (slower)\&. If this flag is not set, the normal precision (faster) is used\&. Normal precision has maximum 3 \fCULP\fP error\&.    \fCkParseCommentsFlag\fP   Allow one-line \fC// \&.\&.\&.\fP and multi-line \fC/* \&.\&.\&. */\fP comments (relaxed JSON syntax)\&.    \fCkParseNumbersAsStringsFlag\fP   Parse numerical type values as strings\&.    \fCkParseTrailingCommasFlag\fP   Allow trailing commas at the end of objects and arrays (relaxed JSON syntax)\&.    \fCkParseNanAndInfFlag\fP   Allow parsing \fCNaN\fP, \fCInf\fP, \fCInfinity\fP, \fC-Inf\fP and \fC-Infinity\fP as \fCdouble\fP values (relaxed JSON syntax)\&.    \fCkParseEscapedApostropheFlag\fP   Allow escaped apostrophe `&rsquo;` in strings (relaxed JSON syntax)\&.   
.PP
By using a non-type template parameter, instead of a function parameter, C++ compiler can generate code which is optimized for specified combinations, improving speed, and reducing code size (if only using a single specialization)\&. The downside is the flags needed to be determined in compile-time\&.
.PP
The \fCSourceEncoding\fP parameter defines what encoding is in the stream\&. This can be differed to the \fCEncoding\fP of the \fCDocument\fP\&. See \fBTranscoding and Validation\fP section for details\&.
.PP
And the \fCInputStream\fP is type of input stream\&.
.SS "Parse Error"
When the parse processing succeeded, the \fCDocument\fP contains the parse results\&. When there is an error, the original DOM is \fIunchanged\fP\&. And the error state of parsing can be obtained by \fCbool HasParseError()\fP, \fCParseErrorCode GetParseError()\fP and \fCsize_t GetErrorOffset()\fP\&.
.PP
Parse Error Code   Description    \fCkParseErrorNone\fP   No error\&.    \fCkParseErrorDocumentEmpty\fP   The document is empty\&.    \fCkParseErrorDocumentRootNotSingular\fP   The document root must not follow by other values\&.    \fCkParseErrorValueInvalid\fP   Invalid value\&.    \fCkParseErrorObjectMissName\fP   Missing a name for object member\&.    \fCkParseErrorObjectMissColon\fP   Missing a colon after a name of object member\&.    \fCkParseErrorObjectMissCommaOrCurlyBracket\fP   Missing a comma or \fC}\fP after an object member\&.    \fCkParseErrorArrayMissCommaOrSquareBracket\fP   Missing a comma or \fC]\fP after an array element\&.    \fCkParseErrorStringUnicodeEscapeInvalidHex\fP   Incorrect hex digit after \fC\\\\u\fP escape in string\&.    \fCkParseErrorStringUnicodeSurrogateInvalid\fP   The surrogate pair in string is invalid\&.    \fCkParseErrorStringEscapeInvalid\fP   Invalid escape character in string\&.    \fCkParseErrorStringMissQuotationMark\fP   Missing a closing quotation mark in string\&.    \fCkParseErrorStringInvalidEncoding\fP   Invalid encoding in string\&.    \fCkParseErrorNumberTooBig\fP   Number too big to be stored in \fCdouble\fP\&.    \fCkParseErrorNumberMissFraction\fP   Miss fraction part in number\&.    \fCkParseErrorNumberMissExponent\fP   Miss exponent in number\&.   
.PP
The offset of error is defined as the character number from beginning of stream\&. Currently RapidJSON does not keep track of line number\&.
.PP
To get an error message, RapidJSON provided a English messages in \fC\fBrapidjson/error/en\&.h\fP\fP\&. User can customize it for other locales, or use a custom localization system\&.
.PP
Here shows an example of parse error handling\&.
.PP
.PP
.nf
#include "rapidjson/document\&.h"
#include "rapidjson/error/en\&.h"

// \&.\&.\&.
Document d;
if (d\&.Parse(json)\&.HasParseError()) {
    fprintf(stderr, "\nError(offset %u): %s\n", 
        (unsigned)d\&.GetErrorOffset(),
        GetParseError_En(d\&.GetParseError()));
    // \&.\&.\&.
}
.fi
.PP
.SS "In Situ Parsing"
From \fCWikipedia\fP:
.PP
.RS 4
\fIIn situ\fP \&.\&.\&. is a Latin phrase that translates literally to 'on site' or 'in position'\&. It means 'locally', 'on site', 'on the premises' or 'in place' to describe an event where it takes place, and is used in many different contexts\&. \&.\&.\&. (In computer science) An algorithm is said to be an in situ algorithm, or in-place algorithm, if the extra amount of memory required to execute the algorithm is O(1), that is, does not exceed a constant no matter how large the input\&. For example, heapsort is an in situ sorting algorithm\&. 
.RE
.PP
In normal parsing process, a large overhead is to decode JSON strings and copy them to other buffers\&. \fIIn situ\fP parsing decodes those JSON string at the place where it is stored\&. It is possible in JSON because the length of decoded string is always shorter than or equal to the one in JSON\&. In this context, decoding a JSON string means to process the escapes, such as \fC'\\n'\fP, \fC'\\u1234'\fP, etc\&., and add a null terminator (`'\\0'`)at the end of string\&.
.PP
The following diagrams compare normal and \fIin situ\fP parsing\&. The JSON string values contain pointers to the decoded string\&.
.PP
.PP
In normal parsing, the decoded string are copied to freshly allocated buffers\&. \fC'\\\\n'\fP (2 characters) is decoded as \fC'\\n'\fP (1 character)\&. \fC'\\\\u0073'\fP (6 characters) is decoded as \fC's'\fP (1 character)\&.
.PP
.PP
\fIIn situ\fP parsing just modified the original JSON\&. Updated characters are highlighted in the diagram\&. If the JSON string does not contain escape character, such as \fC'msg'\fP, the parsing process merely replace the closing double quotation mark with a null character\&.
.PP
Since \fIin situ\fP parsing modify the input, the parsing API needs \fCchar*\fP instead of \fCconst char*\fP\&.
.PP
.PP
.nf
// Read whole file into a buffer
FILE* fp = fopen("test\&.json", "r");
fseek(fp, 0, SEEK_END);
size_t filesize = (size_t)ftell(fp);
fseek(fp, 0, SEEK_SET);
char* buffer = (char*)malloc(filesize + 1);
size_t readLength = fread(buffer, 1, filesize, fp);
buffer[readLength] = '\0';
fclose(fp);

// In situ parsing the buffer into d, buffer will also be modified
Document d;
d\&.ParseInsitu(buffer);

// Query/manipulate the DOM here\&.\&.\&.

free(buffer);
// Note: At this point, d may have dangling pointers pointed to the deallocated buffer\&.
.fi
.PP
.PP
The JSON strings are marked as const-string\&. But they may not be really 'constant'\&. The life cycle of it depends on the JSON buffer\&.
.PP
In situ parsing minimizes allocation overheads and memory copying\&. Generally this improves cache coherence, which is an important factor of performance in modern computer\&.
.PP
There are some limitations of \fIin situ\fP parsing:
.PP
.IP "1." 4
The whole JSON is in memory\&.
.IP "2." 4
The source encoding in stream and target encoding in document must be the same\&.
.IP "3." 4
The buffer need to be retained until the document is no longer used\&.
.IP "4." 4
If the DOM need to be used for long period after parsing, and there are few JSON strings in the DOM, retaining the buffer may be a memory waste\&.
.PP
.PP
\fIIn situ\fP parsing is mostly suitable for short-term JSON that only need to be processed once, and then be released from memory\&. In practice, these situation is very common, for example, deserializing JSON to C++ objects, processing web requests represented in JSON, etc\&.
.SS "Transcoding and Validation"
RapidJSON supports conversion between Unicode formats (officially termed UCS Transformation Format) internally\&. During DOM parsing, the source encoding of the stream can be different from the encoding of the DOM\&. For example, the source stream contains a UTF-8 JSON, while the DOM is using UTF-16 encoding\&. There is an example code in \fBEncodedInputStream\fP\&.
.PP
When writing a JSON from DOM to output stream, transcoding can also be used\&. An example is in \fBEncodedOutputStream\fP\&.
.PP
During transcoding, the source string is decoded to into Unicode code points, and then the code points are encoded in the target format\&. During decoding, it will validate the byte sequence in the source string\&. If it is not a valid sequence, the parser will be stopped with \fCkParseErrorStringInvalidEncoding\fP error\&.
.PP
When the source encoding of stream is the same as encoding of DOM, by default, the parser will \fInot\fP validate the sequence\&. User may use \fCkParseValidateEncodingFlag\fP to force validation\&.
.SH "Techniques"
.PP
Some techniques about using DOM API is discussed here\&.
.SS "DOM as SAX Event Publisher"
In RapidJSON, stringifying a DOM with \fC\fBWriter\fP\fP may be look a little bit weird\&.
.PP
.PP
.nf
// \&.\&.\&.
Writer<StringBuffer> writer(buffer);
d\&.Accept(writer);
.fi
.PP
.PP
Actually, \fCValue::Accept()\fP is responsible for publishing SAX events about the value to the handler\&. With this design, \fCValue\fP and \fC\fBWriter\fP\fP are decoupled\&. \fCValue\fP can generate SAX events, and \fC\fBWriter\fP\fP can handle those events\&.
.PP
User may create custom handlers for transforming the DOM into other formats\&. For example, a handler which converts the DOM into XML\&.
.PP
For more about SAX events and handler, please refer to \fBSAX\fP\&.
.SS "User Buffer"
Some applications may try to avoid memory allocations whenever possible\&.
.PP
\fC\fBMemoryPoolAllocator\fP\fP can support this by letting user to provide a buffer\&. The buffer can be on the program stack, or a 'scratch buffer' which is statically allocated (a static/global array) for storing temporary data\&.
.PP
\fC\fBMemoryPoolAllocator\fP\fP will use the user buffer to satisfy allocations\&. When the user buffer is used up, it will allocate a chunk of memory from the base allocator (by default the \fC\fBCrtAllocator\fP\fP)\&.
.PP
Here is an example of using stack memory\&. The first allocator is for storing values, while the second allocator is for storing temporary data during parsing\&.
.PP
.PP
.nf
typedef GenericDocument<UTF8<>, MemoryPoolAllocator<>, MemoryPoolAllocator<>> DocumentType;
char valueBuffer[4096];
char parseBuffer[1024];
MemoryPoolAllocator<> valueAllocator(valueBuffer, sizeof(valueBuffer));
MemoryPoolAllocator<> parseAllocator(parseBuffer, sizeof(parseBuffer));
DocumentType d(&valueAllocator, sizeof(parseBuffer), &parseAllocator);
d\&.Parse(json);
.fi
.PP
.PP
If the total size of allocation is less than 4096+1024 bytes during parsing, this code does not invoke any heap allocation (via \fCnew\fP or \fCmalloc()\fP) at all\&.
.PP
User can query the current memory consumption in bytes via \fC\fBMemoryPoolAllocator::Size()\fP\fP\&. And then user can determine a suitable size of user buffer\&. 
