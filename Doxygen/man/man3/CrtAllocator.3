.TH "CrtAllocator" 3 "Fri Jan 21 2022" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CrtAllocator \- C-runtime library allocator\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <allocators\&.h>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "void * \fBMalloc\fP (size_t size)"
.br
.ti -1c
.RI "void * \fBRealloc\fP (void *originalPtr, size_t originalSize, size_t newSize)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBCrtAllocator\fP &) const RAPIDJSON_NOEXCEPT"
.br
.ti -1c
.RI "bool \fBoperator!=\fP (const \fBCrtAllocator\fP &) const RAPIDJSON_NOEXCEPT"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static void \fBFree\fP (void *ptr) RAPIDJSON_NOEXCEPT"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static const bool \fBkNeedFree\fP = true"
.br
.in -1c
.SH "Detailed Description"
.PP 
C-runtime library allocator\&. 

This class is just wrapper for standard C library memory routines\&. 
.PP
\fBNote\fP
.RS 4
implements Allocator concept 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static void CrtAllocator::Free (void * ptr)\fC [inline]\fP, \fC [static]\fP"

.SS "void * CrtAllocator::Malloc (size_t size)\fC [inline]\fP"

.SS "bool CrtAllocator::operator!= (const \fBCrtAllocator\fP &) const\fC [inline]\fP"

.SS "bool CrtAllocator::operator== (const \fBCrtAllocator\fP &) const\fC [inline]\fP"

.SS "void * CrtAllocator::Realloc (void * originalPtr, size_t originalSize, size_t newSize)\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "const bool CrtAllocator::kNeedFree = true\fC [static]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
