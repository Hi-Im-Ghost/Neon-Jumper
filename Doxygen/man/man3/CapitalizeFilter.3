.TH "CapitalizeFilter< OutputHandler >" 3 "Fri Jan 21 2022" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
CapitalizeFilter< OutputHandler >
.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBCapitalizeFilter\fP (OutputHandler &out)"
.br
.ti -1c
.RI "bool \fBNull\fP ()"
.br
.ti -1c
.RI "bool \fBBool\fP (bool b)"
.br
.ti -1c
.RI "bool \fBInt\fP (int i)"
.br
.ti -1c
.RI "bool \fBUint\fP (unsigned u)"
.br
.ti -1c
.RI "bool \fBInt64\fP (\fBint64_t\fP i)"
.br
.ti -1c
.RI "bool \fBUint64\fP (\fBuint64_t\fP u)"
.br
.ti -1c
.RI "bool \fBDouble\fP (double d)"
.br
.ti -1c
.RI "bool \fBRawNumber\fP (const char *str, \fBSizeType\fP length, bool copy)"
.br
.ti -1c
.RI "bool \fBString\fP (const char *str, \fBSizeType\fP length, bool)"
.br
.ti -1c
.RI "bool \fBStartObject\fP ()"
.br
.ti -1c
.RI "bool \fBKey\fP (const char *str, \fBSizeType\fP length, bool copy)"
.br
.ti -1c
.RI "bool \fBEndObject\fP (\fBSizeType\fP memberCount)"
.br
.ti -1c
.RI "bool \fBStartArray\fP ()"
.br
.ti -1c
.RI "bool \fBEndArray\fP (\fBSizeType\fP elementCount)"
.br
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "OutputHandler & \fBout_\fP"
.br
.ti -1c
.RI "std::vector< char > \fBbuffer_\fP"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBCapitalizeFilter\fP (const \fBCapitalizeFilter\fP &)"
.br
.ti -1c
.RI "\fBCapitalizeFilter\fP & \fBoperator=\fP (const \fBCapitalizeFilter\fP &)"
.br
.in -1c
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename OutputHandler > \fBCapitalizeFilter\fP< OutputHandler >\fB::CapitalizeFilter\fP (OutputHandler & out)\fC [inline]\fP"

.SS "template<typename OutputHandler > \fBCapitalizeFilter\fP< OutputHandler >\fB::CapitalizeFilter\fP (const \fBCapitalizeFilter\fP< OutputHandler > &)\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Bool (bool b)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Double (double d)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::EndArray (\fBSizeType\fP elementCount)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::EndObject (\fBSizeType\fP memberCount)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Int (int i)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Int64 (\fBint64_t\fP i)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Key (const char * str, \fBSizeType\fP length, bool copy)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Null ()\fC [inline]\fP"

.SS "template<typename OutputHandler > \fBCapitalizeFilter\fP & \fBCapitalizeFilter\fP< OutputHandler >::operator= (const \fBCapitalizeFilter\fP< OutputHandler > &)\fC [private]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::RawNumber (const char * str, \fBSizeType\fP length, bool copy)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::StartArray ()\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::StartObject ()\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::String (const char * str, \fBSizeType\fP length, bool)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Uint (unsigned u)\fC [inline]\fP"

.SS "template<typename OutputHandler > bool \fBCapitalizeFilter\fP< OutputHandler >::Uint64 (\fBuint64_t\fP u)\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename OutputHandler > std::vector<char> \fBCapitalizeFilter\fP< OutputHandler >::buffer_"

.SS "template<typename OutputHandler > OutputHandler& \fBCapitalizeFilter\fP< OutputHandler >::out_"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
