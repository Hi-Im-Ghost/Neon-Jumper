.TH "src/rapidjson/include/rapidjson/allocators.h" 3 "Fri Jan 21 2022" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/rapidjson/include/rapidjson/allocators.h
.SH SYNOPSIS
.br
.PP
\fC#include 'rapidjson\&.h'\fP
.br
\fC#include 'internal/meta\&.h'\fP
.br
\fC#include <memory>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBCrtAllocator\fP"
.br
.RI "C-runtime library allocator\&. "
.ti -1c
.RI "class \fBMemoryPoolAllocator< BaseAllocator >\fP"
.br
.RI "Default memory allocator used by the parser and DOM\&. "
.ti -1c
.RI "struct \fBMemoryPoolAllocator< BaseAllocator >::ChunkHeader\fP"
.br
.RI "Chunk header for perpending to each chunk\&. "
.ti -1c
.RI "struct \fBMemoryPoolAllocator< BaseAllocator >::SharedData\fP"
.br
.ti -1c
.RI "struct \fBinternal::IsRefCounted< typename, typename >\fP"
.br
.ti -1c
.RI "struct \fBinternal::IsRefCounted< T, typename internal::EnableIfCond< T::kRefCounted >::Type >\fP"
.br
.ti -1c
.RI "class \fBStdAllocator< T, BaseAllocator >\fP"
.br
.ti -1c
.RI "struct \fBStdAllocator< T, BaseAllocator >::rebind< U >\fP"
.br
.ti -1c
.RI "class \fBStdAllocator< void, BaseAllocator >\fP"
.br
.ti -1c
.RI "struct \fBStdAllocator< void, BaseAllocator >::rebind< U >\fP"
.br
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBinternal\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRAPIDJSON_ALLOCATOR_DEFAULT_CHUNK_CAPACITY\fP   (64 * 1024)"
.br
.RI "User-defined kDefaultChunkCapacity definition\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename \fBT\fP , typename A > \fBT\fP * \fBRealloc\fP (A &\fBa\fP, \fBT\fP *old_p, size_t old_n, size_t new_n)"
.br
.ti -1c
.RI "template<typename \fBT\fP , typename A > \fBT\fP * \fBMalloc\fP (A &\fBa\fP, size_t n=1)"
.br
.ti -1c
.RI "template<typename \fBT\fP , typename A > void \fBFree\fP (A &\fBa\fP, \fBT\fP *p, size_t n=1)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "template<typename \fBT\fP , typename A > void Free (A & a, \fBT\fP * p, size_t n = \fC1\fP)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename A > \fBT\fP * Malloc (A & a, size_t n = \fC1\fP)\fC [inline]\fP"

.SS "template<typename \fBT\fP , typename A > \fBT\fP * Realloc (A & a, \fBT\fP * old_p, size_t old_n, size_t new_n)\fC [inline]\fP"

.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
