.TH "LookaheadParserHandler" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LookaheadParserHandler
.SH SYNOPSIS
.br
.PP
.PP
Inherited by \fBLookaheadParser\fP\fC [protected]\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "bool \fBNull\fP ()"
.br
.ti -1c
.RI "bool \fBBool\fP (bool b)"
.br
.ti -1c
.RI "bool \fBInt\fP (int i)"
.br
.ti -1c
.RI "bool \fBUint\fP (unsigned u)"
.br
.ti -1c
.RI "bool \fBInt64\fP (\fBint64_t\fP i)"
.br
.ti -1c
.RI "bool \fBUint64\fP (\fBuint64_t\fP u)"
.br
.ti -1c
.RI "bool \fBDouble\fP (double d)"
.br
.ti -1c
.RI "bool \fBRawNumber\fP (const char *, \fBSizeType\fP, bool)"
.br
.ti -1c
.RI "bool \fBString\fP (const char *str, \fBSizeType\fP length, bool)"
.br
.ti -1c
.RI "bool \fBStartObject\fP ()"
.br
.ti -1c
.RI "bool \fBKey\fP (const char *str, \fBSizeType\fP length, bool)"
.br
.ti -1c
.RI "bool \fBEndObject\fP (\fBSizeType\fP)"
.br
.ti -1c
.RI "bool \fBStartArray\fP ()"
.br
.ti -1c
.RI "bool \fBEndArray\fP (\fBSizeType\fP)"
.br
.in -1c
.SS "Protected Types"

.in +1c
.ti -1c
.RI "enum \fBLookaheadParsingState\fP { \fBkInit\fP, \fBkError\fP, \fBkHasNull\fP, \fBkHasBool\fP, \fBkHasNumber\fP, \fBkHasString\fP, \fBkHasKey\fP, \fBkEnteringObject\fP, \fBkExitingObject\fP, \fBkEnteringArray\fP, \fBkExitingArray\fP }"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBLookaheadParserHandler\fP (char *str)"
.br
.ti -1c
.RI "void \fBParseNext\fP ()"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBValue\fP \fBv_\fP"
.br
.ti -1c
.RI "\fBLookaheadParsingState\fP \fBst_\fP"
.br
.ti -1c
.RI "\fBReader\fP \fBr_\fP"
.br
.ti -1c
.RI "\fBInsituStringStream\fP \fBss_\fP"
.br
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static const int \fBparseFlags\fP = \fBkParseDefaultFlags\fP | \fBkParseInsituFlag\fP"
.br
.in -1c
.SH "Member Enumeration Documentation"
.PP 
.SS "enum \fBLookaheadParserHandler::LookaheadParsingState\fP\fC [protected]\fP"

.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIkInit \fP\fP
.TP
\fB\fIkError \fP\fP
.TP
\fB\fIkHasNull \fP\fP
.TP
\fB\fIkHasBool \fP\fP
.TP
\fB\fIkHasNumber \fP\fP
.TP
\fB\fIkHasString \fP\fP
.TP
\fB\fIkHasKey \fP\fP
.TP
\fB\fIkEnteringObject \fP\fP
.TP
\fB\fIkExitingObject \fP\fP
.TP
\fB\fIkEnteringArray \fP\fP
.TP
\fB\fIkExitingArray \fP\fP
.SH "Constructor & Destructor Documentation"
.PP 
.SS "LookaheadParserHandler::LookaheadParserHandler (char * str)\fC [protected]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool LookaheadParserHandler::Bool (bool b)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::Double (double d)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::EndArray (\fBSizeType\fP)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::EndObject (\fBSizeType\fP)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::Int (int i)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::Int64 (\fBint64_t\fP i)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::Key (const char * str, \fBSizeType\fP length, bool)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::Null ()\fC [inline]\fP"

.SS "void LookaheadParserHandler::ParseNext ()\fC [protected]\fP"

.SS "bool LookaheadParserHandler::RawNumber (const char *, \fBSizeType\fP, bool)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::StartArray ()\fC [inline]\fP"

.SS "bool LookaheadParserHandler::StartObject ()\fC [inline]\fP"

.SS "bool LookaheadParserHandler::String (const char * str, \fBSizeType\fP length, bool)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::Uint (unsigned u)\fC [inline]\fP"

.SS "bool LookaheadParserHandler::Uint64 (\fBuint64_t\fP u)\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "const int LookaheadParserHandler::parseFlags = \fBkParseDefaultFlags\fP | \fBkParseInsituFlag\fP\fC [static]\fP, \fC [protected]\fP"

.SS "\fBReader\fP LookaheadParserHandler::r_\fC [protected]\fP"

.SS "\fBInsituStringStream\fP LookaheadParserHandler::ss_\fC [protected]\fP"

.SS "\fBLookaheadParsingState\fP LookaheadParserHandler::st_\fC [protected]\fP"

.SS "\fBValue\fP LookaheadParserHandler::v_\fC [protected]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
