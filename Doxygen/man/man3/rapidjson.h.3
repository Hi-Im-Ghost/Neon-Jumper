.TH "src/rapidjson/include/rapidjson/rapidjson.h" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/rapidjson/include/rapidjson/rapidjson.h \- common definitions and configuration  

.SH SYNOPSIS
.br
.PP
\fC#include <cstdlib>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <cassert>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBrapidjson\fP"
.br
.RI "main RapidJSON namespace "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBRAPIDJSON_MAJOR_VERSION\fP   1"
.br
.RI "Major version of RapidJSON in integer\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_MINOR_VERSION\fP   1"
.br
.RI "Minor version of RapidJSON in integer\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_PATCH_VERSION\fP   0"
.br
.RI "Patch version of RapidJSON in integer\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_VERSION_STRING\fP       RAPIDJSON_STRINGIFY(\fBRAPIDJSON_MAJOR_VERSION\&.RAPIDJSON_MINOR_VERSION\&.RAPIDJSON_PATCH_VERSION\fP)"
.br
.RI "Version of RapidJSON in '<major>\&.<minor>\&.<patch>' string format\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_NAMESPACE\fP   rapidjson"
.br
.RI "provide custom rapidjson namespace "
.ti -1c
.RI "#define \fBRAPIDJSON_NAMESPACE_BEGIN\fP   namespace \fBRAPIDJSON_NAMESPACE\fP {"
.br
.RI "provide custom rapidjson namespace (opening expression) "
.ti -1c
.RI "#define \fBRAPIDJSON_NAMESPACE_END\fP   }"
.br
.RI "provide custom rapidjson namespace (closing expression) "
.ti -1c
.RI "#define \fBRAPIDJSON_HAS_STDSTRING\fP   0"
.br
.RI "Enable RapidJSON support for \fCstd::string\fP\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_USE_MEMBERSMAP\fP"
.br
.RI "Enable RapidJSON support for object members handling in a \fCstd::multimap\fP\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_LITTLEENDIAN\fP   0"
.br
.RI "Little endian machine\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_BIGENDIAN\fP   1"
.br
.RI "Big endian machine\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_64BIT\fP   0"
.br
.RI "Whether using 64-bit architecture\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_ALIGN\fP(x)   (((x) + static_cast<size_t>(7u)) & ~static_cast<size_t>(7u))"
.br
.RI "Data alignment of the machine\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_UINT64_C2\fP(high32,  low32)   ((static_cast<\fBuint64_t\fP>(high32) << 32) | static_cast<\fBuint64_t\fP>(low32))"
.br
.RI "Construct a 64-bit literal by a pair of 32-bit integer\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_48BITPOINTER_OPTIMIZATION\fP   0"
.br
.RI "Use only lower 48-bit address for some pointers\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_SETPOINTER\fP(type,  p,  x)   (p = (x))"
.br
.ti -1c
.RI "#define \fBRAPIDJSON_GETPOINTER\fP(type,  p)   (p)"
.br
.ti -1c
.RI "#define \fBRAPIDJSON_ASSERT\fP(x)   assert(x)"
.br
.RI "Assertion\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_STATIC_ASSERT\fP(x)"
.br
.RI "(Internal) macro to check for conditions at compile-time "
.ti -1c
.RI "#define \fBRAPIDJSON_LIKELY\fP(x)   (x)"
.br
.RI "Compiler branching hint for expression with high probability to be true\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_UNLIKELY\fP(x)   (x)"
.br
.RI "Compiler branching hint for expression with low probability to be true\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_NOEXCEPT_ASSERT\fP(x)   \fBRAPIDJSON_ASSERT\fP(x)"
.br
.RI "Assertion (in non-throwing contexts)\&. "
.ti -1c
.RI "#define \fBRAPIDJSON_MALLOC\fP(size)   std::malloc(size)"
.br
.RI "! customization point for global \fCmalloc\fP "
.ti -1c
.RI "#define \fBRAPIDJSON_REALLOC\fP(ptr,  new_size)   std::realloc(ptr, new_size)"
.br
.RI "! customization point for global \fCrealloc\fP "
.ti -1c
.RI "#define \fBRAPIDJSON_FREE\fP(ptr)   std::free(ptr)"
.br
.RI "! customization point for global \fCfree\fP "
.ti -1c
.RI "#define \fBRAPIDJSON_NEW\fP(TypeName)   new TypeName"
.br
.RI "! customization point for global \fCnew\fP "
.ti -1c
.RI "#define \fBRAPIDJSON_DELETE\fP(x)   delete x"
.br
.RI "! customization point for global \fCdelete\fP "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBType\fP { \fBkNullType\fP = 0, \fBkFalseType\fP = 1, \fBkTrueType\fP = 2, \fBkObjectType\fP = 3, \fBkArrayType\fP = 4, \fBkStringType\fP = 5, \fBkNumberType\fP = 6 }"
.br
.RI "Type of JSON value\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBRAPIDJSON_NAMESPACE_BEGIN\fP typedef unsigned \fBSizeType\fP"
.br
.RI "Size type (for string lengths, array sizes, etc\&.) "
.in -1c
.SH "Detailed Description"
.PP 
common definitions and configuration 


.PP
\fBSee also\fP
.RS 4
\fBRapidJSON configuration\fP 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define RAPIDJSON_64BIT   0"

.PP
Whether using 64-bit architecture\&. 
.SS "#define RAPIDJSON_BIGENDIAN   1"

.PP
Big endian machine\&. 
.SS "#define RAPIDJSON_DELETE(x)   delete x"

.PP
! customization point for global \fCdelete\fP 
.SS "#define RAPIDJSON_FREE(ptr)   std::free(ptr)"

.PP
! customization point for global \fCfree\fP 
.SS "#define RAPIDJSON_GETPOINTER(type, p)   (p)"

.SS "#define RAPIDJSON_LITTLEENDIAN   0"

.PP
Little endian machine\&. 
.SS "#define RAPIDJSON_MALLOC(size)   std::malloc(size)"

.PP
! customization point for global \fCmalloc\fP 
.SS "#define RAPIDJSON_NEW(TypeName)   new TypeName"

.PP
! customization point for global \fCnew\fP 
.SS "#define RAPIDJSON_REALLOC(ptr, new_size)   std::realloc(ptr, new_size)"

.PP
! customization point for global \fCrealloc\fP 
.SS "#define RAPIDJSON_SETPOINTER(type, p, x)   (p = (x))"

.SS "#define RAPIDJSON_STATIC_ASSERT(x)"

.PP
(Internal) macro to check for conditions at compile-time 
.PP
\fBParameters\fP
.RS 4
\fIx\fP compile-time condition 
.RE
.PP

.SS "#define RAPIDJSON_UINT64_C2(high32, low32)   ((static_cast<\fBuint64_t\fP>(high32) << 32) | static_cast<\fBuint64_t\fP>(low32))"

.PP
Construct a 64-bit literal by a pair of 32-bit integer\&. 64-bit literal with or without ULL suffix is prone to compiler warnings\&. \fBUINT64_C()\fP is C macro which cause compilation problems\&. Use this macro to define 64-bit constants by a pair of 32-bit integer\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBType\fP"

.PP
Type of JSON value\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIkNullType \fP\fP
null 
.TP
\fB\fIkFalseType \fP\fP
false 
.TP
\fB\fIkTrueType \fP\fP
true 
.TP
\fB\fIkObjectType \fP\fP
object 
.TP
\fB\fIkArrayType \fP\fP
array 
.TP
\fB\fIkStringType \fP\fP
string 
.TP
\fB\fIkNumberType \fP\fP
number 
.SH "Variable Documentation"
.PP 
.SS "\fBRAPIDJSON_NAMESPACE_BEGIN\fP typedef unsigned SizeType"

.PP
Size type (for string lengths, array sizes, etc\&.) RapidJSON uses 32-bit array/string indices even on 64-bit platforms, instead of using \fCsize_t\fP\&. Users may override the SizeType by defining \fBRAPIDJSON_NO_SIZETYPEDEFINE\fP\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
