.TH "SchemaValidatingReader< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SchemaValidatingReader< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator > \- A helper class for parsing with validation\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <schema\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef SchemaDocumentType::PointerType \fBPointerType\fP"
.br
.ti -1c
.RI "typedef InputStream::Ch \fBCh\fP"
.br
.ti -1c
.RI "typedef \fBGenericValue\fP< SourceEncoding, StackAllocator > \fBValueType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBSchemaValidatingReader\fP (InputStream &is, const SchemaDocumentType &sd)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "template<typename \fBHandler\fP > bool \fBoperator()\fP (\fBHandler\fP &handler)"
.br
.ti -1c
.RI "const \fBParseResult\fP & \fBGetParseResult\fP () const"
.br
.ti -1c
.RI "bool \fBIsValid\fP () const"
.br
.ti -1c
.RI "const \fBPointerType\fP & \fBGetInvalidSchemaPointer\fP () const"
.br
.ti -1c
.RI "const \fBCh\fP * \fBGetInvalidSchemaKeyword\fP () const"
.br
.ti -1c
.RI "const \fBPointerType\fP & \fBGetInvalidDocumentPointer\fP () const"
.br
.ti -1c
.RI "const \fBValueType\fP & \fBGetError\fP () const"
.br
.ti -1c
.RI "\fBValidateErrorCode\fP \fBGetInvalidSchemaCode\fP () const"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<unsigned parseFlags, typename InputStream, typename SourceEncoding, typename SchemaDocumentType = SchemaDocument, typename StackAllocator = CrtAllocator>
.br
class SchemaValidatingReader< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >"A helper class for parsing with validation\&. 

This helper class is a functor, designed as a parameter of \fBGenericDocument::Populate()\fP\&.
.PP
\fBTemplate Parameters\fP
.RS 4
\fIparseFlags\fP Combination of \fBParseFlag\fP\&. 
.br
\fIInputStream\fP Type of input stream, implementing Stream concept\&. 
.br
\fISourceEncoding\fP Encoding of the input stream\&. 
.br
\fISchemaDocumentType\fP Type of schema document\&. 
.br
\fIStackAllocator\fP Allocator type for stack\&. 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> typedef InputStream::Ch \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::Ch"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> typedef SchemaDocumentType::PointerType \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::PointerType"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> typedef \fBGenericValue\fP<SourceEncoding, StackAllocator> \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >\fB::ValueType\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >\fB::SchemaValidatingReader\fP (InputStream & is, const SchemaDocumentType & sd)\fC [inline]\fP"

.PP
Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIis\fP Input stream\&. 
.br
\fIsd\fP \fBSchema\fP document\&. 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> const \fBValueType\fP & \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::GetError () const\fC [inline]\fP"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> const \fBPointerType\fP & \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::GetInvalidDocumentPointer () const\fC [inline]\fP"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> \fBValidateErrorCode\fP \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::GetInvalidSchemaCode () const\fC [inline]\fP"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> const \fBCh\fP * \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::GetInvalidSchemaKeyword () const\fC [inline]\fP"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> const \fBPointerType\fP & \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::GetInvalidSchemaPointer () const\fC [inline]\fP"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> const \fBParseResult\fP & \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::GetParseResult () const\fC [inline]\fP"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> bool \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::IsValid () const\fC [inline]\fP"

.SS "template<unsigned parseFlags, typename InputStream , typename SourceEncoding , typename SchemaDocumentType  = SchemaDocument, typename StackAllocator  = CrtAllocator> template<typename \fBHandler\fP > bool \fBSchemaValidatingReader\fP< parseFlags, InputStream, SourceEncoding, SchemaDocumentType, StackAllocator >::operator() (\fBHandler\fP & handler)\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
