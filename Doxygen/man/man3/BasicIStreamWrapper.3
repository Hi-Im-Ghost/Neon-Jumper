.TH "BasicIStreamWrapper< StreamType >" 3 "Fri Jan 21 2022" "Version 1.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
BasicIStreamWrapper< StreamType > \- Wrapper of \fCstd::basic_istream\fP into RapidJSON's Stream concept\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <istreamwrapper\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef StreamType::char_type \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBasicIStreamWrapper\fP (StreamType &stream)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fBBasicIStreamWrapper\fP (StreamType &stream, char *buffer, size_t bufferSize)"
.br
.RI "Constructor\&. "
.ti -1c
.RI "\fBCh\fP \fBPeek\fP () const"
.br
.ti -1c
.RI "\fBCh\fP \fBTake\fP ()"
.br
.ti -1c
.RI "size_t \fBTell\fP () const"
.br
.ti -1c
.RI "void \fBPut\fP (\fBCh\fP)"
.br
.ti -1c
.RI "void \fBFlush\fP ()"
.br
.ti -1c
.RI "\fBCh\fP * \fBPutBegin\fP ()"
.br
.ti -1c
.RI "size_t \fBPutEnd\fP (\fBCh\fP *)"
.br
.ti -1c
.RI "const \fBCh\fP * \fBPeek4\fP () const"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "\fBBasicIStreamWrapper\fP ()"
.br
.ti -1c
.RI "\fBBasicIStreamWrapper\fP (const \fBBasicIStreamWrapper\fP &)"
.br
.ti -1c
.RI "\fBBasicIStreamWrapper\fP & \fBoperator=\fP (const \fBBasicIStreamWrapper\fP &)"
.br
.ti -1c
.RI "void \fBRead\fP ()"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "StreamType & \fBstream_\fP"
.br
.ti -1c
.RI "\fBCh\fP \fBpeekBuffer_\fP [4]"
.br
.ti -1c
.RI "\fBCh\fP * \fBbuffer_\fP"
.br
.ti -1c
.RI "size_t \fBbufferSize_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBbufferLast_\fP"
.br
.ti -1c
.RI "\fBCh\fP * \fBcurrent_\fP"
.br
.ti -1c
.RI "size_t \fBreadCount_\fP"
.br
.ti -1c
.RI "size_t \fBcount_\fP"
.br
.RI "Number of characters read\&. "
.ti -1c
.RI "bool \fBeof_\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename StreamType>
.br
class BasicIStreamWrapper< StreamType >"Wrapper of \fCstd::basic_istream\fP into RapidJSON's Stream concept\&. 

The classes can be wrapped including but not limited to:
.PP
.IP "\(bu" 2
\fCstd::istringstream\fP 
.IP "\(bu" 2
\fCstd::stringstream\fP 
.IP "\(bu" 2
\fCstd::wistringstream\fP 
.IP "\(bu" 2
\fCstd::wstringstream\fP 
.IP "\(bu" 2
\fCstd::ifstream\fP 
.IP "\(bu" 2
\fCstd::fstream\fP 
.IP "\(bu" 2
\fCstd::wifstream\fP 
.IP "\(bu" 2
\fCstd::wfstream\fP 
.PP
.PP
\fBTemplate Parameters\fP
.RS 4
\fIStreamType\fP Class derived from \fCstd::basic_istream\fP\&. 
.RE
.PP

.SH "Member Typedef Documentation"
.PP 
.SS "template<typename StreamType > typedef StreamType::char_type \fBBasicIStreamWrapper\fP< StreamType >::Ch"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename StreamType > \fBBasicIStreamWrapper\fP< StreamType >\fB::BasicIStreamWrapper\fP (StreamType & stream)\fC [inline]\fP"

.PP
Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIstream\fP stream opened for read\&. 
.RE
.PP

.SS "template<typename StreamType > \fBBasicIStreamWrapper\fP< StreamType >\fB::BasicIStreamWrapper\fP (StreamType & stream, char * buffer, size_t bufferSize)\fC [inline]\fP"

.PP
Constructor\&. 
.PP
\fBParameters\fP
.RS 4
\fIstream\fP stream opened for read\&. 
.br
\fIbuffer\fP user-supplied buffer\&. 
.br
\fIbufferSize\fP size of buffer in bytes\&. Must >=4 bytes\&. 
.RE
.PP

.SS "template<typename StreamType > \fBBasicIStreamWrapper\fP< StreamType >\fB::BasicIStreamWrapper\fP ()\fC [private]\fP"

.SS "template<typename StreamType > \fBBasicIStreamWrapper\fP< StreamType >\fB::BasicIStreamWrapper\fP (const \fBBasicIStreamWrapper\fP< StreamType > &)\fC [private]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename StreamType > void \fBBasicIStreamWrapper\fP< StreamType >::Flush ()\fC [inline]\fP"

.SS "template<typename StreamType > \fBBasicIStreamWrapper\fP & \fBBasicIStreamWrapper\fP< StreamType >::operator= (const \fBBasicIStreamWrapper\fP< StreamType > &)\fC [private]\fP"

.SS "template<typename StreamType > \fBCh\fP \fBBasicIStreamWrapper\fP< StreamType >::Peek () const\fC [inline]\fP"

.SS "template<typename StreamType > const \fBCh\fP * \fBBasicIStreamWrapper\fP< StreamType >::Peek4 () const\fC [inline]\fP"

.SS "template<typename StreamType > void \fBBasicIStreamWrapper\fP< StreamType >::Put (\fBCh\fP)\fC [inline]\fP"

.SS "template<typename StreamType > \fBCh\fP * \fBBasicIStreamWrapper\fP< StreamType >::PutBegin ()\fC [inline]\fP"

.SS "template<typename StreamType > size_t \fBBasicIStreamWrapper\fP< StreamType >::PutEnd (\fBCh\fP *)\fC [inline]\fP"

.SS "template<typename StreamType > void \fBBasicIStreamWrapper\fP< StreamType >::Read ()\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename StreamType > \fBCh\fP \fBBasicIStreamWrapper\fP< StreamType >::Take ()\fC [inline]\fP"

.SS "template<typename StreamType > size_t \fBBasicIStreamWrapper\fP< StreamType >::Tell () const\fC [inline]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename StreamType > \fBCh\fP * \fBBasicIStreamWrapper\fP< StreamType >::buffer_\fC [private]\fP"

.SS "template<typename StreamType > \fBCh\fP* \fBBasicIStreamWrapper\fP< StreamType >::bufferLast_\fC [private]\fP"

.SS "template<typename StreamType > size_t \fBBasicIStreamWrapper\fP< StreamType >::bufferSize_\fC [private]\fP"

.SS "template<typename StreamType > size_t \fBBasicIStreamWrapper\fP< StreamType >::count_\fC [private]\fP"

.PP
Number of characters read\&. 
.SS "template<typename StreamType > \fBCh\fP* \fBBasicIStreamWrapper\fP< StreamType >::current_\fC [private]\fP"

.SS "template<typename StreamType > bool \fBBasicIStreamWrapper\fP< StreamType >::eof_\fC [private]\fP"

.SS "template<typename StreamType > \fBCh\fP \fBBasicIStreamWrapper\fP< StreamType >::peekBuffer_[4]\fC [private]\fP"

.SS "template<typename StreamType > size_t \fBBasicIStreamWrapper\fP< StreamType >::readCount_\fC [private]\fP"

.SS "template<typename StreamType > StreamType& \fBBasicIStreamWrapper\fP< StreamType >::stream_\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
