.TH "internal::BigInteger" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal::BigInteger
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <biginteger\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef \fBuint64_t\fP \fBType\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBBigInteger\fP (const \fBBigInteger\fP &rhs)"
.br
.ti -1c
.RI "\fBBigInteger\fP (\fBuint64_t\fP u)"
.br
.ti -1c
.RI "template<typename Ch > \fBBigInteger\fP (const Ch *decimals, size_t length)"
.br
.ti -1c
.RI "\fBBigInteger\fP & \fBoperator=\fP (const \fBBigInteger\fP &rhs)"
.br
.ti -1c
.RI "\fBBigInteger\fP & \fBoperator=\fP (\fBuint64_t\fP u)"
.br
.ti -1c
.RI "\fBBigInteger\fP & \fBoperator+=\fP (\fBuint64_t\fP u)"
.br
.ti -1c
.RI "\fBBigInteger\fP & \fBoperator*=\fP (\fBuint64_t\fP u)"
.br
.ti -1c
.RI "\fBBigInteger\fP & \fBoperator*=\fP (\fBuint32_t\fP u)"
.br
.ti -1c
.RI "\fBBigInteger\fP & \fBoperator<<=\fP (size_t shift)"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBBigInteger\fP &rhs) const"
.br
.ti -1c
.RI "bool \fBoperator==\fP (const \fBType\fP rhs) const"
.br
.ti -1c
.RI "\fBBigInteger\fP & \fBMultiplyPow5\fP (unsigned exp)"
.br
.ti -1c
.RI "bool \fBDifference\fP (const \fBBigInteger\fP &rhs, \fBBigInteger\fP *out) const"
.br
.ti -1c
.RI "int \fBCompare\fP (const \fBBigInteger\fP &rhs) const"
.br
.ti -1c
.RI "size_t \fBGetCount\fP () const"
.br
.ti -1c
.RI "\fBType\fP \fBGetDigit\fP (size_t index) const"
.br
.ti -1c
.RI "bool \fBIsZero\fP () const"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "typedef \fBuint64_t\fP \fBinternal::BigInteger::Type\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "internal::BigInteger::BigInteger (const \fBBigInteger\fP & rhs)\fC [inline]\fP"

.SS "internal::BigInteger::BigInteger (\fBuint64_t\fP u)\fC [inline]\fP, \fC [explicit]\fP"

.SS "template<typename Ch > internal::BigInteger::BigInteger (const Ch * decimals, size_t length)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "int internal::BigInteger::Compare (const \fBBigInteger\fP & rhs) const\fC [inline]\fP"

.SS "bool internal::BigInteger::Difference (const \fBBigInteger\fP & rhs, \fBBigInteger\fP * out) const\fC [inline]\fP"

.SS "size_t internal::BigInteger::GetCount () const\fC [inline]\fP"

.SS "\fBType\fP internal::BigInteger::GetDigit (size_t index) const\fC [inline]\fP"

.SS "bool internal::BigInteger::IsZero () const\fC [inline]\fP"

.SS "\fBBigInteger\fP & internal::BigInteger::MultiplyPow5 (unsigned exp)\fC [inline]\fP"

.SS "\fBBigInteger\fP & internal::BigInteger::operator*= (\fBuint32_t\fP u)\fC [inline]\fP"

.SS "\fBBigInteger\fP & internal::BigInteger::operator*= (\fBuint64_t\fP u)\fC [inline]\fP"

.SS "\fBBigInteger\fP & internal::BigInteger::operator+= (\fBuint64_t\fP u)\fC [inline]\fP"

.SS "\fBBigInteger\fP & internal::BigInteger::operator<<= (size_t shift)\fC [inline]\fP"

.SS "\fBBigInteger\fP & internal::BigInteger::operator= (const \fBBigInteger\fP & rhs)\fC [inline]\fP"

.SS "\fBBigInteger\fP & internal::BigInteger::operator= (\fBuint64_t\fP u)\fC [inline]\fP"

.SS "bool internal::BigInteger::operator== (const \fBBigInteger\fP & rhs) const\fC [inline]\fP"

.SS "bool internal::BigInteger::operator== (const \fBType\fP rhs) const\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
