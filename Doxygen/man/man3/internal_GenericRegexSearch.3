.TH "internal::GenericRegexSearch< RegexType, Allocator >" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal::GenericRegexSearch< RegexType, Allocator >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <regex\&.h>\fP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef RegexType::EncodingType \fBEncoding\fP"
.br
.ti -1c
.RI "typedef Encoding::Ch \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBGenericRegexSearch\fP (const RegexType &regex, \fBAllocator\fP *allocator=0)"
.br
.ti -1c
.RI "\fB~GenericRegexSearch\fP ()"
.br
.ti -1c
.RI "template<typename InputStream > bool \fBMatch\fP (InputStream &is)"
.br
.ti -1c
.RI "bool \fBMatch\fP (const \fBCh\fP *s)"
.br
.ti -1c
.RI "template<typename InputStream > bool \fBSearch\fP (InputStream &is)"
.br
.ti -1c
.RI "bool \fBSearch\fP (const \fBCh\fP *s)"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> typedef Encoding::Ch \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >::Ch"

.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> typedef RegexType::EncodingType \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >\fB::Encoding\fP"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >::GenericRegexSearch (const RegexType & regex, \fBAllocator\fP * allocator = \fC0\fP)\fC [inline]\fP"

.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >::~\fBGenericRegexSearch\fP ()\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> bool \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >::Match (const \fBCh\fP * s)\fC [inline]\fP"

.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> template<typename InputStream > bool \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >::Match (InputStream & is)\fC [inline]\fP"

.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> bool \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >::Search (const \fBCh\fP * s)\fC [inline]\fP"

.SS "template<typename RegexType , typename \fBAllocator\fP  = CrtAllocator> template<typename InputStream > bool \fBinternal::GenericRegexSearch\fP< RegexType, \fBAllocator\fP >::Search (InputStream & is)\fC [inline]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
