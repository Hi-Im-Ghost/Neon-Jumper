.TH "LevelOneState" 3 "Fri Jan 21 2022" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LevelOneState
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <LevelOneState\&.h>\fP
.PP
Inherits \fBGameState\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLevelOneState\fP (std::stack< \fBGameState\fP * > *\fBstates\fP)"
.br
.ti -1c
.RI "void \fBupdate\fP (float deltaTime) override"
.br
.ti -1c
.RI "void \fBrender\fP (sf::RenderTarget &window) override"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "void \fBinitValues\fP ()"
.br
.RI "Inicjalizacja podstawowych wartości klasy\&. "
.ti -1c
.RI "void \fBinitHitboxes\fP ()"
.br
.RI "Rozmieszczenie hitboxów na mapie\&. "
.ti -1c
.RI "void \fBinitDmgBoxes\fP ()"
.br
.RI "Rozmieszczenie obszarów zadających obrażenia na mapie\&. "
.ti -1c
.RI "void \fBinitPauseButtons\fP ()"
.br
.RI "Inicjalizacja przycisków menu pauzy\&. "
.ti -1c
.RI "void \fBinitDeadButtons\fP ()"
.br
.RI "Inicjalizacja przycisków na ekranie śmierci\&. "
.ti -1c
.RI "void \fBinitEndTrigger\fP ()"
.br
.RI "Inicjalizacja obszaru przejścia do następnego poziomu\&. "
.ti -1c
.RI "void \fBinitView\fP (sf::RenderTarget &window)"
.br
.ti -1c
.RI "void \fBinitViewPlayer\fP (sf::RenderTarget &window)"
.br
.ti -1c
.RI "void \fBinitEnemies\fP ()"
.br
.RI "Rozmieszczenie wrogów na mapie\&. "
.ti -1c
.RI "void \fBupdateInput\fP ()"
.br
.RI "Czytanie klawiatury i wykonywanie odpowiednich operacji\&. "
.ti -1c
.RI "void \fBupdatePaused\fP ()"
.br
.RI "Aktualizacja logiki gry podczas, gdy jest zapauzowana\&. "
.ti -1c
.RI "void \fBupdateDead\fP ()"
.br
.RI "Aktualizacja logiki gry podczas, gdy postać straci wszystkie punkty życia\&. "
.ti -1c
.RI "void \fBupdateEntities\fP (float deltaTime)"
.br
.ti -1c
.RI "void \fBrenderPaused\fP (sf::RenderTarget &window)"
.br
.ti -1c
.RI "void \fBrenderDead\fP (sf::RenderTarget &window)"
.br
.ti -1c
.RI "void \fBrenderEntities\fP (sf::RenderTarget &window)"
.br
.ti -1c
.RI "void \fBupdateEndTrigger\fP ()"
.br
.RI "Sprawdza czy gracz nie wszedł na teren obszaru kończącego poziom\&. "
.ti -1c
.RI "void \fBupdateDeadTrigger\fP ()"
.br
.RI "Sprawdza czy gracz zginął, jeśli tak to zostanie wyrenderowany ekran śmierci\&. "
.ti -1c
.RI "void \fBupdateDmgTriggers\fP ()"
.br
.RI "Sprawdza czy gracz nie wszedł na teren obszaru zadającego obrażenia\&. "
.ti -1c
.RI "void \fBkillPlayerTriggers\fP ()"
.br
.RI "Sprawdza czy gracz nie utonął, jeśli tak to zabija go\&. "
.ti -1c
.RI "void \fBsaveGame\fP ()"
.br
.RI "Zapisuje stan gry\&. "
.ti -1c
.RI "void \fBloadGame\fP ()"
.br
.RI "Wczytuje stan gry\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBPlayer\fP * \fBplayer\fP"
.br
.RI "Odniesienie do obiektu gracza\&. "
.ti -1c
.RI "std::list< sf::RectangleShape > \fBhitboxes\fP"
.br
.RI "Lista hitboxów otoczenia\&. "
.ti -1c
.RI "std::list< sf::RectangleShape > \fBdmgboxes\fP"
.br
.RI "Lista obszarów zadających obrażenia\&. "
.ti -1c
.RI "\fBLoadMap\fP \fBmap\fP"
.br
.RI "Odniesienie do wybranej przez nas mapy\&. "
.ti -1c
.RI "std::list< \fBEnemy\fP * > \fBenemies\fP"
.br
.RI "Lista odniesień do wszystkich wrogów\&. "
.ti -1c
.RI "\fBButton\fP * \fBendMenuBtn\fP"
.br
.RI "Odniesienie do przycisku wyjścia do menu\&. "
.ti -1c
.RI "\fBButton\fP * \fBpauseResumeBtn\fP"
.br
.RI "Odniesienie do przycisku powrotu do rozgrywki\&. "
.ti -1c
.RI "\fBButton\fP * \fBpauseExitBtn\fP"
.br
.RI "Odniesienie do przycisku wyjścia do menu\&. "
.ti -1c
.RI "\fBButton\fP * \fBloadBtn\fP"
.br
.RI "Odniesienie do przycisku wczytania zapisu gry\&. "
.ti -1c
.RI "\fBButton\fP * \fBsaveBtn\fP"
.br
.RI "Odniesienie do przycisku zapisu gry\&. "
.ti -1c
.RI "bool \fBrenderHitboxes\fP = false"
.br
.RI "Zmienna debug służąca do renderowania hitbox-ów\&. "
.ti -1c
.RI "int \fBi\fP = 1"
.br
.RI "zmienna okreslajaca czas widocznosci hud "
.ti -1c
.RI "int \fBx\fP = 1"
.br
.RI "zmienna okreslajaca czas widocznosci hud "
.ti -1c
.RI "sf::RectangleShape \fBendLevelTrigger\fP"
.br
.RI "Obszar wykrywający czy gracz powinien przejść do następnego poziomu\&. "
.ti -1c
.RI "\fBPlayerHUD\fP * \fBhud\fP"
.br
.RI "Odniesienie do interfejsu użytkownika\&. "
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "LevelOneState::LevelOneState (std::stack< \fBGameState\fP * > * states)\fC [explicit]\fP"
Konstruktor przyjmujący odniesienie do stosu stanów aplikacji 
.PP
\fBParameters\fP
.RS 4
\fIstates\fP odniesienie do stosu wszystkich stanów aplikacji 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "void LevelOneState::initDeadButtons ()\fC [private]\fP"

.PP
Inicjalizacja przycisków na ekranie śmierci\&. 
.SS "void LevelOneState::initDmgBoxes ()\fC [private]\fP"

.PP
Rozmieszczenie obszarów zadających obrażenia na mapie\&. 
.SS "void LevelOneState::initEndTrigger ()\fC [private]\fP"

.PP
Inicjalizacja obszaru przejścia do następnego poziomu\&. 
.SS "void LevelOneState::initEnemies ()\fC [private]\fP"

.PP
Rozmieszczenie wrogów na mapie\&. 
.SS "void LevelOneState::initHitboxes ()\fC [private]\fP"

.PP
Rozmieszczenie hitboxów na mapie\&. 
.SS "void LevelOneState::initPauseButtons ()\fC [private]\fP"

.PP
Inicjalizacja przycisków menu pauzy\&. 
.SS "void LevelOneState::initValues ()\fC [private]\fP"

.PP
Inicjalizacja podstawowych wartości klasy\&. 
.SS "void LevelOneState::initView (sf::RenderTarget & window)\fC [private]\fP"
Inicjalizacja kamery dla menu pauzy 
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP 
.RE
.PP

.SS "void LevelOneState::initViewPlayer (sf::RenderTarget & window)\fC [private]\fP"
inicjalizacja kamery gracza 
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP 
.RE
.PP

.SS "void LevelOneState::killPlayerTriggers ()\fC [private]\fP"

.PP
Sprawdza czy gracz nie utonął, jeśli tak to zabija go\&. 
.SS "void LevelOneState::loadGame ()\fC [private]\fP"

.PP
Wczytuje stan gry\&. 
.SS "void LevelOneState::render (sf::RenderTarget & window)\fC [override]\fP, \fC [virtual]\fP"
Wyświetla elementy stanu na ekranie 
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP okno na którym elementy mają być wyświetlane 
.RE
.PP

.PP
Reimplemented from \fBGameState\fP\&.
.SS "void LevelOneState::renderDead (sf::RenderTarget & window)\fC [private]\fP"
Wyświetlanie elementów gdy gracz nie żyje 
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP okno na którym elementy mają być wyświetlane 
.RE
.PP

.SS "void LevelOneState::renderEntities (sf::RenderTarget & window)\fC [private]\fP"
Wyświetlanie przeciwników i gracza na ekranie 
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP okno na którym elementy mają być wyświetlane 
.RE
.PP

.SS "void LevelOneState::renderPaused (sf::RenderTarget & window)\fC [private]\fP"
Wyświetlanie na ekranie elementów, gdy rozgrywka jest spauzowana 
.PP
\fBParameters\fP
.RS 4
\fIwindow\fP okno na którym elementy mają być wyświetlane 
.RE
.PP

.SS "void LevelOneState::saveGame ()\fC [private]\fP"

.PP
Zapisuje stan gry\&. 
.SS "void LevelOneState::update (float deltaTime)\fC [override]\fP, \fC [virtual]\fP"
Odświeża logikę stanu 
.PP
\fBParameters\fP
.RS 4
\fIdeltaTime\fP czas pomiędzy klatkami aplikacji 
.RE
.PP

.PP
Implements \fBGameState\fP\&.
.SS "void LevelOneState::updateDead ()\fC [private]\fP"

.PP
Aktualizacja logiki gry podczas, gdy postać straci wszystkie punkty życia\&. 
.SS "void LevelOneState::updateDeadTrigger ()\fC [private]\fP"

.PP
Sprawdza czy gracz zginął, jeśli tak to zostanie wyrenderowany ekran śmierci\&. 
.SS "void LevelOneState::updateDmgTriggers ()\fC [private]\fP"

.PP
Sprawdza czy gracz nie wszedł na teren obszaru zadającego obrażenia\&. 
.SS "void LevelOneState::updateEndTrigger ()\fC [private]\fP"

.PP
Sprawdza czy gracz nie wszedł na teren obszaru kończącego poziom\&. 
.SS "void LevelOneState::updateEntities (float deltaTime)\fC [private]\fP"
Aktualizacja logiki przeciwników 
.PP
\fBParameters\fP
.RS 4
\fIdeltaTime\fP czas pomiędzy klatkami aplikacji 
.RE
.PP

.SS "void LevelOneState::updateInput ()\fC [private]\fP"

.PP
Czytanie klawiatury i wykonywanie odpowiednich operacji\&. 
.SS "void LevelOneState::updatePaused ()\fC [private]\fP"

.PP
Aktualizacja logiki gry podczas, gdy jest zapauzowana\&. 
.SH "Member Data Documentation"
.PP 
.SS "std::list<sf::RectangleShape> LevelOneState::dmgboxes\fC [private]\fP"

.PP
Lista obszarów zadających obrażenia\&. 
.SS "sf::RectangleShape LevelOneState::endLevelTrigger\fC [private]\fP"

.PP
Obszar wykrywający czy gracz powinien przejść do następnego poziomu\&. 
.SS "\fBButton\fP* LevelOneState::endMenuBtn\fC [private]\fP"

.PP
Odniesienie do przycisku wyjścia do menu\&. 
.SS "std::list<\fBEnemy\fP*> LevelOneState::enemies\fC [private]\fP"

.PP
Lista odniesień do wszystkich wrogów\&. 
.SS "std::list<sf::RectangleShape> LevelOneState::hitboxes\fC [private]\fP"

.PP
Lista hitboxów otoczenia\&. 
.SS "\fBPlayerHUD\fP* LevelOneState::hud\fC [private]\fP"

.PP
Odniesienie do interfejsu użytkownika\&. 
.SS "int LevelOneState::i = 1\fC [private]\fP"

.PP
zmienna okreslajaca czas widocznosci hud 
.SS "\fBButton\fP* LevelOneState::loadBtn\fC [private]\fP"

.PP
Odniesienie do przycisku wczytania zapisu gry\&. 
.SS "\fBLoadMap\fP LevelOneState::map\fC [private]\fP"

.PP
Odniesienie do wybranej przez nas mapy\&. 
.SS "\fBButton\fP* LevelOneState::pauseExitBtn\fC [private]\fP"

.PP
Odniesienie do przycisku wyjścia do menu\&. 
.SS "\fBButton\fP* LevelOneState::pauseResumeBtn\fC [private]\fP"

.PP
Odniesienie do przycisku powrotu do rozgrywki\&. 
.SS "\fBPlayer\fP* LevelOneState::player\fC [private]\fP"

.PP
Odniesienie do obiektu gracza\&. 
.SS "bool LevelOneState::renderHitboxes = false\fC [private]\fP"

.PP
Zmienna debug służąca do renderowania hitbox-ów\&. 
.SS "\fBButton\fP* LevelOneState::saveBtn\fC [private]\fP"

.PP
Odniesienie do przycisku zapisu gry\&. 
.SS "int LevelOneState::x = 1\fC [private]\fP"

.PP
zmienna okreslajaca czas widocznosci hud 

.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
