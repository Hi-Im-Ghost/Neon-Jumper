.TH "LookaheadParser" 3 "Fri Jan 14 2022" "Version 1.0.0" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
LookaheadParser
.SH SYNOPSIS
.br
.PP
.PP
Inherits \fBLookaheadParserHandler\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBLookaheadParser\fP (char *str)"
.br
.ti -1c
.RI "bool \fBEnterObject\fP ()"
.br
.ti -1c
.RI "bool \fBEnterArray\fP ()"
.br
.ti -1c
.RI "const char * \fBNextObjectKey\fP ()"
.br
.ti -1c
.RI "bool \fBNextArrayValue\fP ()"
.br
.ti -1c
.RI "int \fBGetInt\fP ()"
.br
.ti -1c
.RI "double \fBGetDouble\fP ()"
.br
.ti -1c
.RI "const char * \fBGetString\fP ()"
.br
.ti -1c
.RI "bool \fBGetBool\fP ()"
.br
.ti -1c
.RI "void \fBGetNull\fP ()"
.br
.ti -1c
.RI "void \fBSkipObject\fP ()"
.br
.ti -1c
.RI "void \fBSkipArray\fP ()"
.br
.ti -1c
.RI "void \fBSkipValue\fP ()"
.br
.ti -1c
.RI "\fBValue\fP * \fBPeekValue\fP ()"
.br
.ti -1c
.RI "int \fBPeekType\fP ()"
.br
.ti -1c
.RI "bool \fBIsValid\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBSkipOut\fP (int depth)"
.br
.in -1c
.SS "Additional Inherited Members"
.SH "Constructor & Destructor Documentation"
.PP 
.SS "LookaheadParser::LookaheadParser (char * str)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "bool LookaheadParser::EnterArray ()"

.SS "bool LookaheadParser::EnterObject ()"

.SS "bool LookaheadParser::GetBool ()"

.SS "double LookaheadParser::GetDouble ()"

.SS "int LookaheadParser::GetInt ()"

.SS "void LookaheadParser::GetNull ()"

.SS "const char * LookaheadParser::GetString ()"

.SS "bool LookaheadParser::IsValid ()\fC [inline]\fP"

.SS "bool LookaheadParser::NextArrayValue ()"

.SS "const char * LookaheadParser::NextObjectKey ()"

.SS "int LookaheadParser::PeekType ()"

.SS "\fBValue\fP * LookaheadParser::PeekValue ()"

.SS "void LookaheadParser::SkipArray ()"

.SS "void LookaheadParser::SkipObject ()"

.SS "void LookaheadParser::SkipOut (int depth)\fC [protected]\fP"

.SS "void LookaheadParser::SkipValue ()"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
