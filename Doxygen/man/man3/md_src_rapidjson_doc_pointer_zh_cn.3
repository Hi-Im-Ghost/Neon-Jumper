.TH "md_src_rapidjson_doc_pointer_zh_cn" 3 "Fri Jan 21 2022" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
md_src_rapidjson_doc_pointer_zh_cn \- Pointer 
（本功能于 v1\&.1\&.0 发布）
.PP
JSON Pointer 是一个标准化（\fCRFC6901\fP）的方式去选取一个 JSON Document（DOM）中的值。这类似于 XML 的 XPath。然而，JSON Pointer 简单得多，而且每个 JSON Pointer 仅指向单个值。
.PP
使用 RapidJSON 的 JSON Pointer 实现能简化一些 DOM 的操作。
.SH "JSON Pointer"
.PP
一个 JSON Pointer 由一串（零至多个）token 所组成，每个 token 都有 \fC/\fP 前缀。每个 token 可以是一个字符串或数字。例如，给定一个 JSON： 
.PP
.nf
{
    "foo" : ["bar", "baz"],
    "pi" : 3\&.1416
}

.fi
.PP
.PP
以下的 JSON Pointer 解析为：
.PP
.IP "1." 4
\fC'/foo'\fP → \fC[ 'bar', 'baz' ]\fP
.IP "2." 4
\fC'/foo/0'\fP → \fC'bar'\fP
.IP "3." 4
\fC'/foo/1'\fP → \fC'baz'\fP
.IP "4." 4
\fC'/pi'\fP → \fC3\&.1416\fP
.PP
.PP
要注意，一个空 JSON Pointer \fC''\fP （零个 token）解析为整个 JSON。
.SH "Basic Usage"
.PP
以下的代码范例不解自明。
.PP
.PP
.nf
#include "rapidjson/pointer\&.h"

// \&.\&.\&.
Document d;

// 使用 Set() 创建 DOM
Pointer("/project")\&.Set(d, "RapidJSON");
Pointer("/stars")\&.Set(d, 10);

// { "project" : "RapidJSON", "stars" : 10 }

// 使用 Get() 访问 DOM。若该值不存在则返回 nullptr。
if (Value* stars = Pointer("/stars")\&.Get(d))
    stars->SetInt(stars->GetInt() + 1);

// { "project" : "RapidJSON", "stars" : 11 }

// Set() 和 Create() 自动生成父值（如果它们不存在）。
Pointer("/a/b/0")\&.Create(d);

// { "project" : "RapidJSON", "stars" : 11, "a" : { "b" : [ null ] } }

// GetWithDefault() 返回引用。若该值不存在则会深拷贝缺省值。
Value& hello = Pointer("/hello")\&.GetWithDefault(d, "world");

// { "project" : "RapidJSON", "stars" : 11, "a" : { "b" : [ null ] }, "hello" : "world" }

// Swap() 和 Set() 相似
Value x("C++");
Pointer("/hello")\&.Swap(d, x);

// { "project" : "RapidJSON", "stars" : 11, "a" : { "b" : [ null ] }, "hello" : "C++" }
// x 变成 "world"

// 删去一个成员或元素，若值存在返回 true
bool success = Pointer("/a")\&.Erase(d);
assert(success);

// { "project" : "RapidJSON", "stars" : 10 }
.fi
.PP
.SH "Helper Functions"
.PP
由于面向对象的调用习惯可能不符直觉，RapidJSON 也提供了一些辅助函数，它们把成员函数包装成自由函数。
.PP
以下的例子与上面例子所做的事情完全相同。
.PP
.PP
.nf
Document d;

SetValueByPointer(d, "/project", "RapidJSON");
SetValueByPointer(d, "/stars", 10);

if (Value* stars = GetValueByPointer(d, "/stars"))
    stars->SetInt(stars->GetInt() + 1);

CreateValueByPointer(d, "/a/b/0");

Value& hello = GetValueByPointerWithDefault(d, "/hello", "world");

Value x("C++");
SwapValueByPointer(d, "/hello", x);

bool success = EraseValueByPointer(d, "/a");
assert(success);
.fi
.PP
.PP
以下对比 3 种调用方式：
.PP
.IP "1." 4
\fCPointer(source)\&.<Method>(root, \&.\&.\&.)\fP
.IP "2." 4
\fC<Method>ValueByPointer(root, Pointer(source), \&.\&.\&.)\fP
.IP "3." 4
\fC<Method>ValueByPointer(root, source, \&.\&.\&.)\fP
.PP
.SH "Resolving Pointer"
.PP
\fCPointer::Get()\fP 或 \fC\fBGetValueByPointer()\fP\fP 函数并不修改 DOM。若那些 token 不能匹配 DOM 里的值，这些函数便返回 \fCnullptr\fP。使用者可利用这个方法来检查一个值是否存在。
.PP
注意，数值 token 可表示数组索引或成员名字。解析过程中会按值的类型来匹配。
.PP
.PP
.nf
{
    "0" : 123,
    "1" : [456]
}
.fi
.PP
.PP
.IP "1." 4
\fC'/0'\fP → \fC123\fP
.IP "2." 4
\fC'/1/0'\fP → \fC456\fP
.PP
.PP
Token \fC'0'\fP 在第一个 pointer 中被当作成员名字。它在第二个 pointer 中被当作成数组索引。
.PP
其他函数会改变 DOM，包括 \fCCreate()\fP、\fCGetWithDefault()\fP、\fCSet()\fP、\fC\fBSwap()\fP\fP。这些函数总是成功的。若一些父值不存在，就会创建它们。若父值类型不匹配 token，也会强行改变其类型。改变类型也意味着完全移除其 DOM 子树的内容。
.PP
例如，把上面的 JSON 解译至 \fCd\fP 之后，
.PP
.PP
.nf
SetValueByPointer(d, "1/a", 789); // { "0" : 123, "1" : { "a" : 789 } }
.fi
.PP
.SS "解析负号 token"
另外，\fCRFC6901\fP 定义了一个特殊 token \fC-\fP （单个负号），用于表示数组最后元素的下一个元素。 \fCGet()\fP 只会把此 token 当作成员名字 ''-''。而其他函数则会以此解析数组，等同于对数组调用 \fCValue::PushBack()\fP 。
.PP
.PP
.nf
Document d;
d\&.Parse("{\"foo\":[123]}");
SetValueByPointer(d, "/foo/-", 456); // { "foo" : [123, 456] }
SetValueByPointer(d, "/-", 789);    // { "foo" : [123, 456], "-" : 789 }
.fi
.PP
.SS "解析 Document 及 Value"
当使用 \fCp\&.Get(root)\fP 或 \fCGetValueByPointer(root, p)\fP，\fCroot\fP 是一个（常数） \fCValue&\fP。这意味着，它也可以是 DOM 里的一个子树。
.PP
其他函数有两组签名。一组使用 \fCDocument& document\fP 作为参数，另一组使用 \fCValue& root\fP。第一组使用 \fCdocument\&.GetAllocator()\fP 去创建值，而第二组则需要使用者提供一个 allocator，如同 DOM 里的函数。
.PP
以上例子都不需要 allocator 参数，因为它的第一个参数是 \fCDocument&\fP。但如果你需要对一个子树进行解析，就需要如下面的例子般提供 allocator：
.PP
.PP
.nf
class Person {
public:
    Person() {
        document_ = new Document();
        // CreateValueByPointer() here no need allocator
        SetLocation(CreateValueByPointer(*document_, "/residence"), \&.\&.\&.);
        SetLocation(CreateValueByPointer(*document_, "/office"), \&.\&.\&.);
    };

private:
    void SetLocation(Value& location, const char* country, const char* addresses[2]) {
        Value::Allocator& a = document_->GetAllocator();
        // SetValueByPointer() here need allocator
        SetValueByPointer(location, "/country", country, a);
        SetValueByPointer(location, "/address/0", address[0], a);
        SetValueByPointer(location, "/address/1", address[1], a);
    }

    // \&.\&.\&.

    Document* document_;
};
.fi
.PP
.PP
\fCErase()\fP 或 \fC\fBEraseValueByPointer()\fP\fP 不需要 allocator。而且它们成功删除值之后会返回 \fCtrue\fP。
.SH "Error Handling"
.PP
\fCPointer\fP 在其建构函数里会解译源字符串。若有解析错误，\fCPointer::IsValid()\fP 返回 \fCfalse\fP。你可使用 \fCPointer::GetParseErrorCode()\fP 和 \fCGetParseErrorOffset()\fP 去获取错信息。
.PP
要注意的是，所有解析函数都假设 pointer 是合法的。对一个非法 pointer 解析会造成断言失败。
.SH "URI Fragment Representation"
.PP
除了我们一直在使用的字符串方式表示 JSON pointer，\fCRFC6901\fP 也定义了一个 JSON Pointer 的 URI 片段（fragment）表示方式。URI 片段是定义于 \fCRFC3986\fP 'Uniform Resource Identifier (URI): Generic Syntax'。
.PP
URI 片段的主要分别是必然以 \fC#\fP （pound sign）开头，而一些字符也会以百分比编码成 UTF-8 序列。例如，以下的表展示了不同表示法下的 C/C++ 字符串常数。
.PP
字符串表示方式   URI 片段表示方式   Pointer Tokens （UTF-8）    \fC'/foo/0'\fP   \fC'#/foo/0'\fP   \fC{'foo', 0}\fP    \fC'/a~1b'\fP   \fC'#/a~1b'\fP   \fC{'a/b'}\fP    \fC'/m~0n'\fP   \fC'#/m~0n'\fP   \fC{'m~n'}\fP    \fC'/ '\fP   \fC'#/%20'\fP   \fC{' '}\fP    \fC'/\\0'\fP   \fC'#/%00'\fP   \fC{'\\0'}\fP    \fC'/€'\fP   \fC'#/%E2%82%AC'\fP   \fC{'€'}\fP   
.PP
RapidJSON 完全支持 URI 片段表示方式。它在解译时会自动检测 \fC#\fP 号。
.SH "字符串化"
.PP
你也可以把一个 \fCPointer\fP 字符串化，储存于字符串或其他输出流。例如：
.PP
.PP
.nf
Pointer p(\&.\&.\&.);
StringBuffer sb;
p\&.Stringify(sb);
std::cout << sb\&.GetString() << std::endl;
.fi
.PP
.PP
使用 \fCStringifyUriFragment()\fP 可以把 pointer 字符串化为 URI 片段表示法。
.SH "User-Supplied Tokens"
.PP
若一个 pointer 会用于多次解析，它应该只被创建一次，然后再施于不同的 DOM ，或在不同时间做解析。这样可以避免多次创键 \fCPointer\fP，节省时间和内存分配。
.PP
我们甚至可以再更进一步，完全消去解析过程及动态内存分配。我们可以直接生成 token 数组：
.PP
.PP
.nf
#define NAME(s) { s, sizeof(s) / sizeof(s[0]) - 1, kPointerInvalidIndex }
#define INDEX(i) { #i, sizeof(#i) - 1, i }

static const Pointer::Token kTokens[] = { NAME("foo"), INDEX(123) };
static const Pointer p(kTokens, sizeof(kTokens) / sizeof(kTokens[0]));
// Equivalent to static const Pointer p("/foo/123");
.fi
.PP
.PP
这种做法可能适合内存受限的系统。 
