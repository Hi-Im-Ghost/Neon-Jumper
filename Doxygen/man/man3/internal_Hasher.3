.TH "internal::Hasher< Encoding, Allocator >" 3 "Fri Jan 21 2022" "Neon Jumper" \" -*- nroff -*-
.ad l
.nh
.SH NAME
internal::Hasher< Encoding, Allocator >
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <schema\&.h>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBNumber\fP"
.br
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Encoding::Ch \fBCh\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBHasher\fP (\fBAllocator\fP *allocator=0, size_t stackCapacity=\fBkDefaultSize\fP)"
.br
.ti -1c
.RI "bool \fBNull\fP ()"
.br
.ti -1c
.RI "bool \fBBool\fP (bool b)"
.br
.ti -1c
.RI "bool \fBInt\fP (int i)"
.br
.ti -1c
.RI "bool \fBUint\fP (unsigned u)"
.br
.ti -1c
.RI "bool \fBInt64\fP (\fBint64_t\fP i)"
.br
.ti -1c
.RI "bool \fBUint64\fP (\fBuint64_t\fP u)"
.br
.ti -1c
.RI "bool \fBDouble\fP (double d)"
.br
.ti -1c
.RI "bool \fBRawNumber\fP (const \fBCh\fP *str, \fBSizeType\fP len, bool)"
.br
.ti -1c
.RI "bool \fBString\fP (const \fBCh\fP *str, \fBSizeType\fP len, bool)"
.br
.ti -1c
.RI "bool \fBStartObject\fP ()"
.br
.ti -1c
.RI "bool \fBKey\fP (const \fBCh\fP *str, \fBSizeType\fP len, bool copy)"
.br
.ti -1c
.RI "bool \fBEndObject\fP (\fBSizeType\fP memberCount)"
.br
.ti -1c
.RI "bool \fBStartArray\fP ()"
.br
.ti -1c
.RI "bool \fBEndArray\fP (\fBSizeType\fP elementCount)"
.br
.ti -1c
.RI "bool \fBIsValid\fP () const"
.br
.ti -1c
.RI "\fBuint64_t\fP \fBGetHashCode\fP () const"
.br
.in -1c
.SS "Private Member Functions"

.in +1c
.ti -1c
.RI "bool \fBWriteType\fP (\fBType\fP type)"
.br
.ti -1c
.RI "bool \fBWriteNumber\fP (const \fBNumber\fP &n)"
.br
.ti -1c
.RI "bool \fBWriteBuffer\fP (\fBType\fP type, const void *data, size_t len)"
.br
.in -1c
.SS "Static Private Member Functions"

.in +1c
.ti -1c
.RI "static \fBuint64_t\fP \fBHash\fP (\fBuint64_t\fP h, \fBuint64_t\fP d)"
.br
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBStack\fP< \fBAllocator\fP > \fBstack_\fP"
.br
.in -1c
.SS "Static Private Attributes"

.in +1c
.ti -1c
.RI "static const size_t \fBkDefaultSize\fP = 256"
.br
.in -1c
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > typedef Encoding::Ch \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Ch"

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Hasher (\fBAllocator\fP * allocator = \fC0\fP, size_t stackCapacity = \fC\fBkDefaultSize\fP\fP)\fC [inline]\fP"

.SH "Member Function Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Bool (bool b)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Double (double d)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::EndArray (\fBSizeType\fP elementCount)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::EndObject (\fBSizeType\fP memberCount)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > \fBuint64_t\fP \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::GetHashCode () const\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > static \fBuint64_t\fP \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Hash (\fBuint64_t\fP h, \fBuint64_t\fP d)\fC [inline]\fP, \fC [static]\fP, \fC [private]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Int (int i)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Int64 (\fBint64_t\fP i)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::IsValid () const\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Key (const \fBCh\fP * str, \fBSizeType\fP len, bool copy)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Null ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::RawNumber (const \fBCh\fP * str, \fBSizeType\fP len, bool)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::StartArray ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::StartObject ()\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::String (const \fBCh\fP * str, \fBSizeType\fP len, bool)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Uint (unsigned u)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::Uint64 (\fBuint64_t\fP u)\fC [inline]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::WriteBuffer (\fBType\fP type, const void * data, size_t len)\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::WriteNumber (const \fBNumber\fP & n)\fC [inline]\fP, \fC [private]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > bool \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::WriteType (\fBType\fP type)\fC [inline]\fP, \fC [private]\fP"

.SH "Member Data Documentation"
.PP 
.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > const size_t \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::kDefaultSize = 256\fC [static]\fP, \fC [private]\fP"

.SS "template<typename \fBEncoding\fP , typename \fBAllocator\fP > \fBStack\fP<\fBAllocator\fP> \fBinternal::Hasher\fP< \fBEncoding\fP, \fBAllocator\fP >::stack_\fC [private]\fP"


.SH "Author"
.PP 
Generated automatically by Doxygen for Neon Jumper from the source code\&.
